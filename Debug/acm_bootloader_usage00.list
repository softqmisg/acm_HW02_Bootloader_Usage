
acm_bootloader_usage00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017690  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  08037820  08037820  00027820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038630  08038630  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08038630  08038630  00028630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08038638  08038638  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08038638  08038638  00028638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803863c  0803863c  0002863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08038640  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000073ac  20000370  080389b0  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  2000771c  080389b0  0003771c  2**0
                  ALLOC
 11 .newsection   00000004  10000000  10000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ebca  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008823  00000000  00000000  0006ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002550  00000000  00000000  00077790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002188  00000000  00000000  00079ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002f0a9  00000000  00000000  0007be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002d4eb  00000000  00000000  000aaf11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e3f9c  00000000  00000000  000d83fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001bc398  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a564  00000000  00000000  001bc414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000370 	.word	0x20000370
 80201ac:	00000000 	.word	0x00000000
 80201b0:	08037808 	.word	0x08037808

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000374 	.word	0x20000374
 80201cc:	08037808 	.word	0x08037808

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_drsub>:
 8020280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020284:	e002      	b.n	802028c <__adddf3>
 8020286:	bf00      	nop

08020288 <__aeabi_dsub>:
 8020288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802028c <__adddf3>:
 802028c:	b530      	push	{r4, r5, lr}
 802028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020296:	ea94 0f05 	teq	r4, r5
 802029a:	bf08      	it	eq
 802029c:	ea90 0f02 	teqeq	r0, r2
 80202a0:	bf1f      	itttt	ne
 80202a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202b2:	f000 80e2 	beq.w	802047a <__adddf3+0x1ee>
 80202b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202be:	bfb8      	it	lt
 80202c0:	426d      	neglt	r5, r5
 80202c2:	dd0c      	ble.n	80202de <__adddf3+0x52>
 80202c4:	442c      	add	r4, r5
 80202c6:	ea80 0202 	eor.w	r2, r0, r2
 80202ca:	ea81 0303 	eor.w	r3, r1, r3
 80202ce:	ea82 0000 	eor.w	r0, r2, r0
 80202d2:	ea83 0101 	eor.w	r1, r3, r1
 80202d6:	ea80 0202 	eor.w	r2, r0, r2
 80202da:	ea81 0303 	eor.w	r3, r1, r3
 80202de:	2d36      	cmp	r5, #54	; 0x36
 80202e0:	bf88      	it	hi
 80202e2:	bd30      	pophi	{r4, r5, pc}
 80202e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80202e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80202f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80202f4:	d002      	beq.n	80202fc <__adddf3+0x70>
 80202f6:	4240      	negs	r0, r0
 80202f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80202fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020308:	d002      	beq.n	8020310 <__adddf3+0x84>
 802030a:	4252      	negs	r2, r2
 802030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020310:	ea94 0f05 	teq	r4, r5
 8020314:	f000 80a7 	beq.w	8020466 <__adddf3+0x1da>
 8020318:	f1a4 0401 	sub.w	r4, r4, #1
 802031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020320:	db0d      	blt.n	802033e <__adddf3+0xb2>
 8020322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020326:	fa22 f205 	lsr.w	r2, r2, r5
 802032a:	1880      	adds	r0, r0, r2
 802032c:	f141 0100 	adc.w	r1, r1, #0
 8020330:	fa03 f20e 	lsl.w	r2, r3, lr
 8020334:	1880      	adds	r0, r0, r2
 8020336:	fa43 f305 	asr.w	r3, r3, r5
 802033a:	4159      	adcs	r1, r3
 802033c:	e00e      	b.n	802035c <__adddf3+0xd0>
 802033e:	f1a5 0520 	sub.w	r5, r5, #32
 8020342:	f10e 0e20 	add.w	lr, lr, #32
 8020346:	2a01      	cmp	r2, #1
 8020348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802034c:	bf28      	it	cs
 802034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020352:	fa43 f305 	asr.w	r3, r3, r5
 8020356:	18c0      	adds	r0, r0, r3
 8020358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020360:	d507      	bpl.n	8020372 <__adddf3+0xe6>
 8020362:	f04f 0e00 	mov.w	lr, #0
 8020366:	f1dc 0c00 	rsbs	ip, ip, #0
 802036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020376:	d31b      	bcc.n	80203b0 <__adddf3+0x124>
 8020378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802037c:	d30c      	bcc.n	8020398 <__adddf3+0x10c>
 802037e:	0849      	lsrs	r1, r1, #1
 8020380:	ea5f 0030 	movs.w	r0, r0, rrx
 8020384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020388:	f104 0401 	add.w	r4, r4, #1
 802038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020394:	f080 809a 	bcs.w	80204cc <__adddf3+0x240>
 8020398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802039c:	bf08      	it	eq
 802039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203a2:	f150 0000 	adcs.w	r0, r0, #0
 80203a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203aa:	ea41 0105 	orr.w	r1, r1, r5
 80203ae:	bd30      	pop	{r4, r5, pc}
 80203b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203b4:	4140      	adcs	r0, r0
 80203b6:	eb41 0101 	adc.w	r1, r1, r1
 80203ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80203be:	f1a4 0401 	sub.w	r4, r4, #1
 80203c2:	d1e9      	bne.n	8020398 <__adddf3+0x10c>
 80203c4:	f091 0f00 	teq	r1, #0
 80203c8:	bf04      	itt	eq
 80203ca:	4601      	moveq	r1, r0
 80203cc:	2000      	moveq	r0, #0
 80203ce:	fab1 f381 	clz	r3, r1
 80203d2:	bf08      	it	eq
 80203d4:	3320      	addeq	r3, #32
 80203d6:	f1a3 030b 	sub.w	r3, r3, #11
 80203da:	f1b3 0220 	subs.w	r2, r3, #32
 80203de:	da0c      	bge.n	80203fa <__adddf3+0x16e>
 80203e0:	320c      	adds	r2, #12
 80203e2:	dd08      	ble.n	80203f6 <__adddf3+0x16a>
 80203e4:	f102 0c14 	add.w	ip, r2, #20
 80203e8:	f1c2 020c 	rsb	r2, r2, #12
 80203ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80203f0:	fa21 f102 	lsr.w	r1, r1, r2
 80203f4:	e00c      	b.n	8020410 <__adddf3+0x184>
 80203f6:	f102 0214 	add.w	r2, r2, #20
 80203fa:	bfd8      	it	le
 80203fc:	f1c2 0c20 	rsble	ip, r2, #32
 8020400:	fa01 f102 	lsl.w	r1, r1, r2
 8020404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020408:	bfdc      	itt	le
 802040a:	ea41 010c 	orrle.w	r1, r1, ip
 802040e:	4090      	lslle	r0, r2
 8020410:	1ae4      	subs	r4, r4, r3
 8020412:	bfa2      	ittt	ge
 8020414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020418:	4329      	orrge	r1, r5
 802041a:	bd30      	popge	{r4, r5, pc}
 802041c:	ea6f 0404 	mvn.w	r4, r4
 8020420:	3c1f      	subs	r4, #31
 8020422:	da1c      	bge.n	802045e <__adddf3+0x1d2>
 8020424:	340c      	adds	r4, #12
 8020426:	dc0e      	bgt.n	8020446 <__adddf3+0x1ba>
 8020428:	f104 0414 	add.w	r4, r4, #20
 802042c:	f1c4 0220 	rsb	r2, r4, #32
 8020430:	fa20 f004 	lsr.w	r0, r0, r4
 8020434:	fa01 f302 	lsl.w	r3, r1, r2
 8020438:	ea40 0003 	orr.w	r0, r0, r3
 802043c:	fa21 f304 	lsr.w	r3, r1, r4
 8020440:	ea45 0103 	orr.w	r1, r5, r3
 8020444:	bd30      	pop	{r4, r5, pc}
 8020446:	f1c4 040c 	rsb	r4, r4, #12
 802044a:	f1c4 0220 	rsb	r2, r4, #32
 802044e:	fa20 f002 	lsr.w	r0, r0, r2
 8020452:	fa01 f304 	lsl.w	r3, r1, r4
 8020456:	ea40 0003 	orr.w	r0, r0, r3
 802045a:	4629      	mov	r1, r5
 802045c:	bd30      	pop	{r4, r5, pc}
 802045e:	fa21 f004 	lsr.w	r0, r1, r4
 8020462:	4629      	mov	r1, r5
 8020464:	bd30      	pop	{r4, r5, pc}
 8020466:	f094 0f00 	teq	r4, #0
 802046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802046e:	bf06      	itte	eq
 8020470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020474:	3401      	addeq	r4, #1
 8020476:	3d01      	subne	r5, #1
 8020478:	e74e      	b.n	8020318 <__adddf3+0x8c>
 802047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802047e:	bf18      	it	ne
 8020480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020484:	d029      	beq.n	80204da <__adddf3+0x24e>
 8020486:	ea94 0f05 	teq	r4, r5
 802048a:	bf08      	it	eq
 802048c:	ea90 0f02 	teqeq	r0, r2
 8020490:	d005      	beq.n	802049e <__adddf3+0x212>
 8020492:	ea54 0c00 	orrs.w	ip, r4, r0
 8020496:	bf04      	itt	eq
 8020498:	4619      	moveq	r1, r3
 802049a:	4610      	moveq	r0, r2
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	ea91 0f03 	teq	r1, r3
 80204a2:	bf1e      	ittt	ne
 80204a4:	2100      	movne	r1, #0
 80204a6:	2000      	movne	r0, #0
 80204a8:	bd30      	popne	{r4, r5, pc}
 80204aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ae:	d105      	bne.n	80204bc <__adddf3+0x230>
 80204b0:	0040      	lsls	r0, r0, #1
 80204b2:	4149      	adcs	r1, r1
 80204b4:	bf28      	it	cs
 80204b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ba:	bd30      	pop	{r4, r5, pc}
 80204bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204c0:	bf3c      	itt	cc
 80204c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204c6:	bd30      	popcc	{r4, r5, pc}
 80204c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80204d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204d4:	f04f 0000 	mov.w	r0, #0
 80204d8:	bd30      	pop	{r4, r5, pc}
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf1a      	itte	ne
 80204e0:	4619      	movne	r1, r3
 80204e2:	4610      	movne	r0, r2
 80204e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204e8:	bf1c      	itt	ne
 80204ea:	460b      	movne	r3, r1
 80204ec:	4602      	movne	r2, r0
 80204ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80204f2:	bf06      	itte	eq
 80204f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80204f8:	ea91 0f03 	teqeq	r1, r3
 80204fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020500:	bd30      	pop	{r4, r5, pc}
 8020502:	bf00      	nop

08020504 <__aeabi_ui2d>:
 8020504:	f090 0f00 	teq	r0, #0
 8020508:	bf04      	itt	eq
 802050a:	2100      	moveq	r1, #0
 802050c:	4770      	bxeq	lr
 802050e:	b530      	push	{r4, r5, lr}
 8020510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020518:	f04f 0500 	mov.w	r5, #0
 802051c:	f04f 0100 	mov.w	r1, #0
 8020520:	e750      	b.n	80203c4 <__adddf3+0x138>
 8020522:	bf00      	nop

08020524 <__aeabi_i2d>:
 8020524:	f090 0f00 	teq	r0, #0
 8020528:	bf04      	itt	eq
 802052a:	2100      	moveq	r1, #0
 802052c:	4770      	bxeq	lr
 802052e:	b530      	push	{r4, r5, lr}
 8020530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802053c:	bf48      	it	mi
 802053e:	4240      	negmi	r0, r0
 8020540:	f04f 0100 	mov.w	r1, #0
 8020544:	e73e      	b.n	80203c4 <__adddf3+0x138>
 8020546:	bf00      	nop

08020548 <__aeabi_f2d>:
 8020548:	0042      	lsls	r2, r0, #1
 802054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020556:	bf1f      	itttt	ne
 8020558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020564:	4770      	bxne	lr
 8020566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802056a:	bf08      	it	eq
 802056c:	4770      	bxeq	lr
 802056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020572:	bf04      	itt	eq
 8020574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020578:	4770      	bxeq	lr
 802057a:	b530      	push	{r4, r5, lr}
 802057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020588:	e71c      	b.n	80203c4 <__adddf3+0x138>
 802058a:	bf00      	nop

0802058c <__aeabi_ul2d>:
 802058c:	ea50 0201 	orrs.w	r2, r0, r1
 8020590:	bf08      	it	eq
 8020592:	4770      	bxeq	lr
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f04f 0500 	mov.w	r5, #0
 802059a:	e00a      	b.n	80205b2 <__aeabi_l2d+0x16>

0802059c <__aeabi_l2d>:
 802059c:	ea50 0201 	orrs.w	r2, r0, r1
 80205a0:	bf08      	it	eq
 80205a2:	4770      	bxeq	lr
 80205a4:	b530      	push	{r4, r5, lr}
 80205a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205aa:	d502      	bpl.n	80205b2 <__aeabi_l2d+0x16>
 80205ac:	4240      	negs	r0, r0
 80205ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205be:	f43f aed8 	beq.w	8020372 <__adddf3+0xe6>
 80205c2:	f04f 0203 	mov.w	r2, #3
 80205c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205ca:	bf18      	it	ne
 80205cc:	3203      	addne	r2, #3
 80205ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205d2:	bf18      	it	ne
 80205d4:	3203      	addne	r2, #3
 80205d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	fa00 fc03 	lsl.w	ip, r0, r3
 80205e2:	fa20 f002 	lsr.w	r0, r0, r2
 80205e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205ea:	ea40 000e 	orr.w	r0, r0, lr
 80205ee:	fa21 f102 	lsr.w	r1, r1, r2
 80205f2:	4414      	add	r4, r2
 80205f4:	e6bd      	b.n	8020372 <__adddf3+0xe6>
 80205f6:	bf00      	nop

080205f8 <__aeabi_dmul>:
 80205f8:	b570      	push	{r4, r5, r6, lr}
 80205fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80205fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020606:	bf1d      	ittte	ne
 8020608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802060c:	ea94 0f0c 	teqne	r4, ip
 8020610:	ea95 0f0c 	teqne	r5, ip
 8020614:	f000 f8de 	bleq	80207d4 <__aeabi_dmul+0x1dc>
 8020618:	442c      	add	r4, r5
 802061a:	ea81 0603 	eor.w	r6, r1, r3
 802061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802062a:	bf18      	it	ne
 802062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020638:	d038      	beq.n	80206ac <__aeabi_dmul+0xb4>
 802063a:	fba0 ce02 	umull	ip, lr, r0, r2
 802063e:	f04f 0500 	mov.w	r5, #0
 8020642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802064e:	f04f 0600 	mov.w	r6, #0
 8020652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020656:	f09c 0f00 	teq	ip, #0
 802065a:	bf18      	it	ne
 802065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802066c:	d204      	bcs.n	8020678 <__aeabi_dmul+0x80>
 802066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020672:	416d      	adcs	r5, r5
 8020674:	eb46 0606 	adc.w	r6, r6, r6
 8020678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020690:	bf88      	it	hi
 8020692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020696:	d81e      	bhi.n	80206d6 <__aeabi_dmul+0xde>
 8020698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802069c:	bf08      	it	eq
 802069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206a2:	f150 0000 	adcs.w	r0, r0, #0
 80206a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206aa:	bd70      	pop	{r4, r5, r6, pc}
 80206ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206b0:	ea46 0101 	orr.w	r1, r6, r1
 80206b4:	ea40 0002 	orr.w	r0, r0, r2
 80206b8:	ea81 0103 	eor.w	r1, r1, r3
 80206bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206c0:	bfc2      	ittt	gt
 80206c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206ca:	bd70      	popgt	{r4, r5, r6, pc}
 80206cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206d0:	f04f 0e00 	mov.w	lr, #0
 80206d4:	3c01      	subs	r4, #1
 80206d6:	f300 80ab 	bgt.w	8020830 <__aeabi_dmul+0x238>
 80206da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80206de:	bfde      	ittt	le
 80206e0:	2000      	movle	r0, #0
 80206e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80206e6:	bd70      	pople	{r4, r5, r6, pc}
 80206e8:	f1c4 0400 	rsb	r4, r4, #0
 80206ec:	3c20      	subs	r4, #32
 80206ee:	da35      	bge.n	802075c <__aeabi_dmul+0x164>
 80206f0:	340c      	adds	r4, #12
 80206f2:	dc1b      	bgt.n	802072c <__aeabi_dmul+0x134>
 80206f4:	f104 0414 	add.w	r4, r4, #20
 80206f8:	f1c4 0520 	rsb	r5, r4, #32
 80206fc:	fa00 f305 	lsl.w	r3, r0, r5
 8020700:	fa20 f004 	lsr.w	r0, r0, r4
 8020704:	fa01 f205 	lsl.w	r2, r1, r5
 8020708:	ea40 0002 	orr.w	r0, r0, r2
 802070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020718:	fa21 f604 	lsr.w	r6, r1, r4
 802071c:	eb42 0106 	adc.w	r1, r2, r6
 8020720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020724:	bf08      	it	eq
 8020726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802072a:	bd70      	pop	{r4, r5, r6, pc}
 802072c:	f1c4 040c 	rsb	r4, r4, #12
 8020730:	f1c4 0520 	rsb	r5, r4, #32
 8020734:	fa00 f304 	lsl.w	r3, r0, r4
 8020738:	fa20 f005 	lsr.w	r0, r0, r5
 802073c:	fa01 f204 	lsl.w	r2, r1, r4
 8020740:	ea40 0002 	orr.w	r0, r0, r2
 8020744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802074c:	f141 0100 	adc.w	r1, r1, #0
 8020750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020754:	bf08      	it	eq
 8020756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802075a:	bd70      	pop	{r4, r5, r6, pc}
 802075c:	f1c4 0520 	rsb	r5, r4, #32
 8020760:	fa00 f205 	lsl.w	r2, r0, r5
 8020764:	ea4e 0e02 	orr.w	lr, lr, r2
 8020768:	fa20 f304 	lsr.w	r3, r0, r4
 802076c:	fa01 f205 	lsl.w	r2, r1, r5
 8020770:	ea43 0302 	orr.w	r3, r3, r2
 8020774:	fa21 f004 	lsr.w	r0, r1, r4
 8020778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802077c:	fa21 f204 	lsr.w	r2, r1, r4
 8020780:	ea20 0002 	bic.w	r0, r0, r2
 8020784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802078c:	bf08      	it	eq
 802078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	f094 0f00 	teq	r4, #0
 8020798:	d10f      	bne.n	80207ba <__aeabi_dmul+0x1c2>
 802079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802079e:	0040      	lsls	r0, r0, #1
 80207a0:	eb41 0101 	adc.w	r1, r1, r1
 80207a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207a8:	bf08      	it	eq
 80207aa:	3c01      	subeq	r4, #1
 80207ac:	d0f7      	beq.n	802079e <__aeabi_dmul+0x1a6>
 80207ae:	ea41 0106 	orr.w	r1, r1, r6
 80207b2:	f095 0f00 	teq	r5, #0
 80207b6:	bf18      	it	ne
 80207b8:	4770      	bxne	lr
 80207ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207be:	0052      	lsls	r2, r2, #1
 80207c0:	eb43 0303 	adc.w	r3, r3, r3
 80207c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207c8:	bf08      	it	eq
 80207ca:	3d01      	subeq	r5, #1
 80207cc:	d0f7      	beq.n	80207be <__aeabi_dmul+0x1c6>
 80207ce:	ea43 0306 	orr.w	r3, r3, r6
 80207d2:	4770      	bx	lr
 80207d4:	ea94 0f0c 	teq	r4, ip
 80207d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207dc:	bf18      	it	ne
 80207de:	ea95 0f0c 	teqne	r5, ip
 80207e2:	d00c      	beq.n	80207fe <__aeabi_dmul+0x206>
 80207e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207e8:	bf18      	it	ne
 80207ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207ee:	d1d1      	bne.n	8020794 <__aeabi_dmul+0x19c>
 80207f0:	ea81 0103 	eor.w	r1, r1, r3
 80207f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207f8:	f04f 0000 	mov.w	r0, #0
 80207fc:	bd70      	pop	{r4, r5, r6, pc}
 80207fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020802:	bf06      	itte	eq
 8020804:	4610      	moveq	r0, r2
 8020806:	4619      	moveq	r1, r3
 8020808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802080c:	d019      	beq.n	8020842 <__aeabi_dmul+0x24a>
 802080e:	ea94 0f0c 	teq	r4, ip
 8020812:	d102      	bne.n	802081a <__aeabi_dmul+0x222>
 8020814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020818:	d113      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802081a:	ea95 0f0c 	teq	r5, ip
 802081e:	d105      	bne.n	802082c <__aeabi_dmul+0x234>
 8020820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020824:	bf1c      	itt	ne
 8020826:	4610      	movne	r0, r2
 8020828:	4619      	movne	r1, r3
 802082a:	d10a      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802082c:	ea81 0103 	eor.w	r1, r1, r3
 8020830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802083c:	f04f 0000 	mov.w	r0, #0
 8020840:	bd70      	pop	{r4, r5, r6, pc}
 8020842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802084a:	bd70      	pop	{r4, r5, r6, pc}

0802084c <__aeabi_ddiv>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802085a:	bf1d      	ittte	ne
 802085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020860:	ea94 0f0c 	teqne	r4, ip
 8020864:	ea95 0f0c 	teqne	r5, ip
 8020868:	f000 f8a7 	bleq	80209ba <__aeabi_ddiv+0x16e>
 802086c:	eba4 0405 	sub.w	r4, r4, r5
 8020870:	ea81 0e03 	eor.w	lr, r1, r3
 8020874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802087c:	f000 8088 	beq.w	8020990 <__aeabi_ddiv+0x144>
 8020880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208a4:	429d      	cmp	r5, r3
 80208a6:	bf08      	it	eq
 80208a8:	4296      	cmpeq	r6, r2
 80208aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208b2:	d202      	bcs.n	80208ba <__aeabi_ddiv+0x6e>
 80208b4:	085b      	lsrs	r3, r3, #1
 80208b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ba:	1ab6      	subs	r6, r6, r2
 80208bc:	eb65 0503 	sbc.w	r5, r5, r3
 80208c0:	085b      	lsrs	r3, r3, #1
 80208c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80208d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208d6:	bf22      	ittt	cs
 80208d8:	1ab6      	subcs	r6, r6, r2
 80208da:	4675      	movcs	r5, lr
 80208dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80208e0:	085b      	lsrs	r3, r3, #1
 80208e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208ee:	bf22      	ittt	cs
 80208f0:	1ab6      	subcs	r6, r6, r2
 80208f2:	4675      	movcs	r5, lr
 80208f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80208f8:	085b      	lsrs	r3, r3, #1
 80208fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020906:	bf22      	ittt	cs
 8020908:	1ab6      	subcs	r6, r6, r2
 802090a:	4675      	movcs	r5, lr
 802090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020910:	085b      	lsrs	r3, r3, #1
 8020912:	ea4f 0232 	mov.w	r2, r2, rrx
 8020916:	ebb6 0e02 	subs.w	lr, r6, r2
 802091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802091e:	bf22      	ittt	cs
 8020920:	1ab6      	subcs	r6, r6, r2
 8020922:	4675      	movcs	r5, lr
 8020924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020928:	ea55 0e06 	orrs.w	lr, r5, r6
 802092c:	d018      	beq.n	8020960 <__aeabi_ddiv+0x114>
 802092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802094a:	d1c0      	bne.n	80208ce <__aeabi_ddiv+0x82>
 802094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020950:	d10b      	bne.n	802096a <__aeabi_ddiv+0x11e>
 8020952:	ea41 0100 	orr.w	r1, r1, r0
 8020956:	f04f 0000 	mov.w	r0, #0
 802095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802095e:	e7b6      	b.n	80208ce <__aeabi_ddiv+0x82>
 8020960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020964:	bf04      	itt	eq
 8020966:	4301      	orreq	r1, r0
 8020968:	2000      	moveq	r0, #0
 802096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802096e:	bf88      	it	hi
 8020970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020974:	f63f aeaf 	bhi.w	80206d6 <__aeabi_dmul+0xde>
 8020978:	ebb5 0c03 	subs.w	ip, r5, r3
 802097c:	bf04      	itt	eq
 802097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020986:	f150 0000 	adcs.w	r0, r0, #0
 802098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802098e:	bd70      	pop	{r4, r5, r6, pc}
 8020990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802099c:	bfc2      	ittt	gt
 802099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209a6:	bd70      	popgt	{r4, r5, r6, pc}
 80209a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209ac:	f04f 0e00 	mov.w	lr, #0
 80209b0:	3c01      	subs	r4, #1
 80209b2:	e690      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209b4:	ea45 0e06 	orr.w	lr, r5, r6
 80209b8:	e68d      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209be:	ea94 0f0c 	teq	r4, ip
 80209c2:	bf08      	it	eq
 80209c4:	ea95 0f0c 	teqeq	r5, ip
 80209c8:	f43f af3b 	beq.w	8020842 <__aeabi_dmul+0x24a>
 80209cc:	ea94 0f0c 	teq	r4, ip
 80209d0:	d10a      	bne.n	80209e8 <__aeabi_ddiv+0x19c>
 80209d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209d6:	f47f af34 	bne.w	8020842 <__aeabi_dmul+0x24a>
 80209da:	ea95 0f0c 	teq	r5, ip
 80209de:	f47f af25 	bne.w	802082c <__aeabi_dmul+0x234>
 80209e2:	4610      	mov	r0, r2
 80209e4:	4619      	mov	r1, r3
 80209e6:	e72c      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209e8:	ea95 0f0c 	teq	r5, ip
 80209ec:	d106      	bne.n	80209fc <__aeabi_ddiv+0x1b0>
 80209ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80209f2:	f43f aefd 	beq.w	80207f0 <__aeabi_dmul+0x1f8>
 80209f6:	4610      	mov	r0, r2
 80209f8:	4619      	mov	r1, r3
 80209fa:	e722      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a00:	bf18      	it	ne
 8020a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a06:	f47f aec5 	bne.w	8020794 <__aeabi_dmul+0x19c>
 8020a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a0e:	f47f af0d 	bne.w	802082c <__aeabi_dmul+0x234>
 8020a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a16:	f47f aeeb 	bne.w	80207f0 <__aeabi_dmul+0x1f8>
 8020a1a:	e712      	b.n	8020842 <__aeabi_dmul+0x24a>

08020a1c <__gedf2>:
 8020a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a20:	e006      	b.n	8020a30 <__cmpdf2+0x4>
 8020a22:	bf00      	nop

08020a24 <__ledf2>:
 8020a24:	f04f 0c01 	mov.w	ip, #1
 8020a28:	e002      	b.n	8020a30 <__cmpdf2+0x4>
 8020a2a:	bf00      	nop

08020a2c <__cmpdf2>:
 8020a2c:	f04f 0c01 	mov.w	ip, #1
 8020a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a40:	bf18      	it	ne
 8020a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a46:	d01b      	beq.n	8020a80 <__cmpdf2+0x54>
 8020a48:	b001      	add	sp, #4
 8020a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a4e:	bf0c      	ite	eq
 8020a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a54:	ea91 0f03 	teqne	r1, r3
 8020a58:	bf02      	ittt	eq
 8020a5a:	ea90 0f02 	teqeq	r0, r2
 8020a5e:	2000      	moveq	r0, #0
 8020a60:	4770      	bxeq	lr
 8020a62:	f110 0f00 	cmn.w	r0, #0
 8020a66:	ea91 0f03 	teq	r1, r3
 8020a6a:	bf58      	it	pl
 8020a6c:	4299      	cmppl	r1, r3
 8020a6e:	bf08      	it	eq
 8020a70:	4290      	cmpeq	r0, r2
 8020a72:	bf2c      	ite	cs
 8020a74:	17d8      	asrcs	r0, r3, #31
 8020a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020a7a:	f040 0001 	orr.w	r0, r0, #1
 8020a7e:	4770      	bx	lr
 8020a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a88:	d102      	bne.n	8020a90 <__cmpdf2+0x64>
 8020a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a8e:	d107      	bne.n	8020aa0 <__cmpdf2+0x74>
 8020a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a98:	d1d6      	bne.n	8020a48 <__cmpdf2+0x1c>
 8020a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a9e:	d0d3      	beq.n	8020a48 <__cmpdf2+0x1c>
 8020aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020aa4:	4770      	bx	lr
 8020aa6:	bf00      	nop

08020aa8 <__aeabi_cdrcmple>:
 8020aa8:	4684      	mov	ip, r0
 8020aaa:	4610      	mov	r0, r2
 8020aac:	4662      	mov	r2, ip
 8020aae:	468c      	mov	ip, r1
 8020ab0:	4619      	mov	r1, r3
 8020ab2:	4663      	mov	r3, ip
 8020ab4:	e000      	b.n	8020ab8 <__aeabi_cdcmpeq>
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_cdcmpeq>:
 8020ab8:	b501      	push	{r0, lr}
 8020aba:	f7ff ffb7 	bl	8020a2c <__cmpdf2>
 8020abe:	2800      	cmp	r0, #0
 8020ac0:	bf48      	it	mi
 8020ac2:	f110 0f00 	cmnmi.w	r0, #0
 8020ac6:	bd01      	pop	{r0, pc}

08020ac8 <__aeabi_dcmpeq>:
 8020ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020acc:	f7ff fff4 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ad0:	bf0c      	ite	eq
 8020ad2:	2001      	moveq	r0, #1
 8020ad4:	2000      	movne	r0, #0
 8020ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020ada:	bf00      	nop

08020adc <__aeabi_dcmplt>:
 8020adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ae0:	f7ff ffea 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ae4:	bf34      	ite	cc
 8020ae6:	2001      	movcc	r0, #1
 8020ae8:	2000      	movcs	r0, #0
 8020aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8020aee:	bf00      	nop

08020af0 <__aeabi_dcmple>:
 8020af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020af4:	f7ff ffe0 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020af8:	bf94      	ite	ls
 8020afa:	2001      	movls	r0, #1
 8020afc:	2000      	movhi	r0, #0
 8020afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b02:	bf00      	nop

08020b04 <__aeabi_dcmpge>:
 8020b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b08:	f7ff ffce 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b0c:	bf94      	ite	ls
 8020b0e:	2001      	movls	r0, #1
 8020b10:	2000      	movhi	r0, #0
 8020b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b16:	bf00      	nop

08020b18 <__aeabi_dcmpgt>:
 8020b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b1c:	f7ff ffc4 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b20:	bf34      	ite	cc
 8020b22:	2001      	movcc	r0, #1
 8020b24:	2000      	movcs	r0, #0
 8020b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2a:	bf00      	nop

08020b2c <__aeabi_dcmpun>:
 8020b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b34:	d102      	bne.n	8020b3c <__aeabi_dcmpun+0x10>
 8020b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b3a:	d10a      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b44:	d102      	bne.n	8020b4c <__aeabi_dcmpun+0x20>
 8020b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b4a:	d102      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b4c:	f04f 0000 	mov.w	r0, #0
 8020b50:	4770      	bx	lr
 8020b52:	f04f 0001 	mov.w	r0, #1
 8020b56:	4770      	bx	lr

08020b58 <__aeabi_d2iz>:
 8020b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b60:	d215      	bcs.n	8020b8e <__aeabi_d2iz+0x36>
 8020b62:	d511      	bpl.n	8020b88 <__aeabi_d2iz+0x30>
 8020b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b6c:	d912      	bls.n	8020b94 <__aeabi_d2iz+0x3c>
 8020b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8020b82:	bf18      	it	ne
 8020b84:	4240      	negne	r0, r0
 8020b86:	4770      	bx	lr
 8020b88:	f04f 0000 	mov.w	r0, #0
 8020b8c:	4770      	bx	lr
 8020b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020b92:	d105      	bne.n	8020ba0 <__aeabi_d2iz+0x48>
 8020b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020b98:	bf08      	it	eq
 8020b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020b9e:	4770      	bx	lr
 8020ba0:	f04f 0000 	mov.w	r0, #0
 8020ba4:	4770      	bx	lr
 8020ba6:	bf00      	nop

08020ba8 <__aeabi_uldivmod>:
 8020ba8:	b953      	cbnz	r3, 8020bc0 <__aeabi_uldivmod+0x18>
 8020baa:	b94a      	cbnz	r2, 8020bc0 <__aeabi_uldivmod+0x18>
 8020bac:	2900      	cmp	r1, #0
 8020bae:	bf08      	it	eq
 8020bb0:	2800      	cmpeq	r0, #0
 8020bb2:	bf1c      	itt	ne
 8020bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8020bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8020bbc:	f000 b972 	b.w	8020ea4 <__aeabi_idiv0>
 8020bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020bc8:	f000 f806 	bl	8020bd8 <__udivmoddi4>
 8020bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020bd4:	b004      	add	sp, #16
 8020bd6:	4770      	bx	lr

08020bd8 <__udivmoddi4>:
 8020bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bdc:	9e08      	ldr	r6, [sp, #32]
 8020bde:	4604      	mov	r4, r0
 8020be0:	4688      	mov	r8, r1
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d14b      	bne.n	8020c7e <__udivmoddi4+0xa6>
 8020be6:	428a      	cmp	r2, r1
 8020be8:	4615      	mov	r5, r2
 8020bea:	d967      	bls.n	8020cbc <__udivmoddi4+0xe4>
 8020bec:	fab2 f282 	clz	r2, r2
 8020bf0:	b14a      	cbz	r2, 8020c06 <__udivmoddi4+0x2e>
 8020bf2:	f1c2 0720 	rsb	r7, r2, #32
 8020bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8020bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8020bfe:	4095      	lsls	r5, r2
 8020c00:	ea47 0803 	orr.w	r8, r7, r3
 8020c04:	4094      	lsls	r4, r2
 8020c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c0a:	0c23      	lsrs	r3, r4, #16
 8020c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8020c10:	fa1f fc85 	uxth.w	ip, r5
 8020c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8020c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8020c20:	4299      	cmp	r1, r3
 8020c22:	d909      	bls.n	8020c38 <__udivmoddi4+0x60>
 8020c24:	18eb      	adds	r3, r5, r3
 8020c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8020c2a:	f080 811b 	bcs.w	8020e64 <__udivmoddi4+0x28c>
 8020c2e:	4299      	cmp	r1, r3
 8020c30:	f240 8118 	bls.w	8020e64 <__udivmoddi4+0x28c>
 8020c34:	3f02      	subs	r7, #2
 8020c36:	442b      	add	r3, r5
 8020c38:	1a5b      	subs	r3, r3, r1
 8020c3a:	b2a4      	uxth	r4, r4
 8020c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8020c4c:	45a4      	cmp	ip, r4
 8020c4e:	d909      	bls.n	8020c64 <__udivmoddi4+0x8c>
 8020c50:	192c      	adds	r4, r5, r4
 8020c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c56:	f080 8107 	bcs.w	8020e68 <__udivmoddi4+0x290>
 8020c5a:	45a4      	cmp	ip, r4
 8020c5c:	f240 8104 	bls.w	8020e68 <__udivmoddi4+0x290>
 8020c60:	3802      	subs	r0, #2
 8020c62:	442c      	add	r4, r5
 8020c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020c68:	eba4 040c 	sub.w	r4, r4, ip
 8020c6c:	2700      	movs	r7, #0
 8020c6e:	b11e      	cbz	r6, 8020c78 <__udivmoddi4+0xa0>
 8020c70:	40d4      	lsrs	r4, r2
 8020c72:	2300      	movs	r3, #0
 8020c74:	e9c6 4300 	strd	r4, r3, [r6]
 8020c78:	4639      	mov	r1, r7
 8020c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c7e:	428b      	cmp	r3, r1
 8020c80:	d909      	bls.n	8020c96 <__udivmoddi4+0xbe>
 8020c82:	2e00      	cmp	r6, #0
 8020c84:	f000 80eb 	beq.w	8020e5e <__udivmoddi4+0x286>
 8020c88:	2700      	movs	r7, #0
 8020c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8020c8e:	4638      	mov	r0, r7
 8020c90:	4639      	mov	r1, r7
 8020c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c96:	fab3 f783 	clz	r7, r3
 8020c9a:	2f00      	cmp	r7, #0
 8020c9c:	d147      	bne.n	8020d2e <__udivmoddi4+0x156>
 8020c9e:	428b      	cmp	r3, r1
 8020ca0:	d302      	bcc.n	8020ca8 <__udivmoddi4+0xd0>
 8020ca2:	4282      	cmp	r2, r0
 8020ca4:	f200 80fa 	bhi.w	8020e9c <__udivmoddi4+0x2c4>
 8020ca8:	1a84      	subs	r4, r0, r2
 8020caa:	eb61 0303 	sbc.w	r3, r1, r3
 8020cae:	2001      	movs	r0, #1
 8020cb0:	4698      	mov	r8, r3
 8020cb2:	2e00      	cmp	r6, #0
 8020cb4:	d0e0      	beq.n	8020c78 <__udivmoddi4+0xa0>
 8020cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8020cba:	e7dd      	b.n	8020c78 <__udivmoddi4+0xa0>
 8020cbc:	b902      	cbnz	r2, 8020cc0 <__udivmoddi4+0xe8>
 8020cbe:	deff      	udf	#255	; 0xff
 8020cc0:	fab2 f282 	clz	r2, r2
 8020cc4:	2a00      	cmp	r2, #0
 8020cc6:	f040 808f 	bne.w	8020de8 <__udivmoddi4+0x210>
 8020cca:	1b49      	subs	r1, r1, r5
 8020ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020cd0:	fa1f f885 	uxth.w	r8, r5
 8020cd4:	2701      	movs	r7, #1
 8020cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8020cda:	0c23      	lsrs	r3, r4, #16
 8020cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8020ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8020ce8:	4299      	cmp	r1, r3
 8020cea:	d907      	bls.n	8020cfc <__udivmoddi4+0x124>
 8020cec:	18eb      	adds	r3, r5, r3
 8020cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020cf2:	d202      	bcs.n	8020cfa <__udivmoddi4+0x122>
 8020cf4:	4299      	cmp	r1, r3
 8020cf6:	f200 80cd 	bhi.w	8020e94 <__udivmoddi4+0x2bc>
 8020cfa:	4684      	mov	ip, r0
 8020cfc:	1a59      	subs	r1, r3, r1
 8020cfe:	b2a3      	uxth	r3, r4
 8020d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8020d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8020d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020d0c:	fb08 f800 	mul.w	r8, r8, r0
 8020d10:	45a0      	cmp	r8, r4
 8020d12:	d907      	bls.n	8020d24 <__udivmoddi4+0x14c>
 8020d14:	192c      	adds	r4, r5, r4
 8020d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8020d1a:	d202      	bcs.n	8020d22 <__udivmoddi4+0x14a>
 8020d1c:	45a0      	cmp	r8, r4
 8020d1e:	f200 80b6 	bhi.w	8020e8e <__udivmoddi4+0x2b6>
 8020d22:	4618      	mov	r0, r3
 8020d24:	eba4 0408 	sub.w	r4, r4, r8
 8020d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020d2c:	e79f      	b.n	8020c6e <__udivmoddi4+0x96>
 8020d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8020d32:	40bb      	lsls	r3, r7
 8020d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8020d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8020d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8020d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8020d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020d4c:	4325      	orrs	r5, r4
 8020d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8020d52:	0c2c      	lsrs	r4, r5, #16
 8020d54:	fb08 3319 	mls	r3, r8, r9, r3
 8020d58:	fa1f fa8e 	uxth.w	sl, lr
 8020d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020d60:	fb09 f40a 	mul.w	r4, r9, sl
 8020d64:	429c      	cmp	r4, r3
 8020d66:	fa02 f207 	lsl.w	r2, r2, r7
 8020d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8020d6e:	d90b      	bls.n	8020d88 <__udivmoddi4+0x1b0>
 8020d70:	eb1e 0303 	adds.w	r3, lr, r3
 8020d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8020d78:	f080 8087 	bcs.w	8020e8a <__udivmoddi4+0x2b2>
 8020d7c:	429c      	cmp	r4, r3
 8020d7e:	f240 8084 	bls.w	8020e8a <__udivmoddi4+0x2b2>
 8020d82:	f1a9 0902 	sub.w	r9, r9, #2
 8020d86:	4473      	add	r3, lr
 8020d88:	1b1b      	subs	r3, r3, r4
 8020d8a:	b2ad      	uxth	r5, r5
 8020d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020d90:	fb08 3310 	mls	r3, r8, r0, r3
 8020d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8020d9c:	45a2      	cmp	sl, r4
 8020d9e:	d908      	bls.n	8020db2 <__udivmoddi4+0x1da>
 8020da0:	eb1e 0404 	adds.w	r4, lr, r4
 8020da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8020da8:	d26b      	bcs.n	8020e82 <__udivmoddi4+0x2aa>
 8020daa:	45a2      	cmp	sl, r4
 8020dac:	d969      	bls.n	8020e82 <__udivmoddi4+0x2aa>
 8020dae:	3802      	subs	r0, #2
 8020db0:	4474      	add	r4, lr
 8020db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020db6:	fba0 8902 	umull	r8, r9, r0, r2
 8020dba:	eba4 040a 	sub.w	r4, r4, sl
 8020dbe:	454c      	cmp	r4, r9
 8020dc0:	46c2      	mov	sl, r8
 8020dc2:	464b      	mov	r3, r9
 8020dc4:	d354      	bcc.n	8020e70 <__udivmoddi4+0x298>
 8020dc6:	d051      	beq.n	8020e6c <__udivmoddi4+0x294>
 8020dc8:	2e00      	cmp	r6, #0
 8020dca:	d069      	beq.n	8020ea0 <__udivmoddi4+0x2c8>
 8020dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8020dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8020dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020dd8:	40fd      	lsrs	r5, r7
 8020dda:	40fc      	lsrs	r4, r7
 8020ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8020de0:	e9c6 5400 	strd	r5, r4, [r6]
 8020de4:	2700      	movs	r7, #0
 8020de6:	e747      	b.n	8020c78 <__udivmoddi4+0xa0>
 8020de8:	f1c2 0320 	rsb	r3, r2, #32
 8020dec:	fa20 f703 	lsr.w	r7, r0, r3
 8020df0:	4095      	lsls	r5, r2
 8020df2:	fa01 f002 	lsl.w	r0, r1, r2
 8020df6:	fa21 f303 	lsr.w	r3, r1, r3
 8020dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020dfe:	4338      	orrs	r0, r7
 8020e00:	0c01      	lsrs	r1, r0, #16
 8020e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8020e06:	fa1f f885 	uxth.w	r8, r5
 8020e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8020e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020e12:	fb07 f308 	mul.w	r3, r7, r8
 8020e16:	428b      	cmp	r3, r1
 8020e18:	fa04 f402 	lsl.w	r4, r4, r2
 8020e1c:	d907      	bls.n	8020e2e <__udivmoddi4+0x256>
 8020e1e:	1869      	adds	r1, r5, r1
 8020e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8020e24:	d22f      	bcs.n	8020e86 <__udivmoddi4+0x2ae>
 8020e26:	428b      	cmp	r3, r1
 8020e28:	d92d      	bls.n	8020e86 <__udivmoddi4+0x2ae>
 8020e2a:	3f02      	subs	r7, #2
 8020e2c:	4429      	add	r1, r5
 8020e2e:	1acb      	subs	r3, r1, r3
 8020e30:	b281      	uxth	r1, r0
 8020e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8020e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8020e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020e3e:	fb00 f308 	mul.w	r3, r0, r8
 8020e42:	428b      	cmp	r3, r1
 8020e44:	d907      	bls.n	8020e56 <__udivmoddi4+0x27e>
 8020e46:	1869      	adds	r1, r5, r1
 8020e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8020e4c:	d217      	bcs.n	8020e7e <__udivmoddi4+0x2a6>
 8020e4e:	428b      	cmp	r3, r1
 8020e50:	d915      	bls.n	8020e7e <__udivmoddi4+0x2a6>
 8020e52:	3802      	subs	r0, #2
 8020e54:	4429      	add	r1, r5
 8020e56:	1ac9      	subs	r1, r1, r3
 8020e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020e5c:	e73b      	b.n	8020cd6 <__udivmoddi4+0xfe>
 8020e5e:	4637      	mov	r7, r6
 8020e60:	4630      	mov	r0, r6
 8020e62:	e709      	b.n	8020c78 <__udivmoddi4+0xa0>
 8020e64:	4607      	mov	r7, r0
 8020e66:	e6e7      	b.n	8020c38 <__udivmoddi4+0x60>
 8020e68:	4618      	mov	r0, r3
 8020e6a:	e6fb      	b.n	8020c64 <__udivmoddi4+0x8c>
 8020e6c:	4541      	cmp	r1, r8
 8020e6e:	d2ab      	bcs.n	8020dc8 <__udivmoddi4+0x1f0>
 8020e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8020e74:	eb69 020e 	sbc.w	r2, r9, lr
 8020e78:	3801      	subs	r0, #1
 8020e7a:	4613      	mov	r3, r2
 8020e7c:	e7a4      	b.n	8020dc8 <__udivmoddi4+0x1f0>
 8020e7e:	4660      	mov	r0, ip
 8020e80:	e7e9      	b.n	8020e56 <__udivmoddi4+0x27e>
 8020e82:	4618      	mov	r0, r3
 8020e84:	e795      	b.n	8020db2 <__udivmoddi4+0x1da>
 8020e86:	4667      	mov	r7, ip
 8020e88:	e7d1      	b.n	8020e2e <__udivmoddi4+0x256>
 8020e8a:	4681      	mov	r9, r0
 8020e8c:	e77c      	b.n	8020d88 <__udivmoddi4+0x1b0>
 8020e8e:	3802      	subs	r0, #2
 8020e90:	442c      	add	r4, r5
 8020e92:	e747      	b.n	8020d24 <__udivmoddi4+0x14c>
 8020e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8020e98:	442b      	add	r3, r5
 8020e9a:	e72f      	b.n	8020cfc <__udivmoddi4+0x124>
 8020e9c:	4638      	mov	r0, r7
 8020e9e:	e708      	b.n	8020cb2 <__udivmoddi4+0xda>
 8020ea0:	4637      	mov	r7, r6
 8020ea2:	e6e9      	b.n	8020c78 <__udivmoddi4+0xa0>

08020ea4 <__aeabi_idiv0>:
 8020ea4:	4770      	bx	lr
 8020ea6:	bf00      	nop

08020ea8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8020ea8:	b580      	push	{r7, lr}
 8020eaa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8020eac:	4b06      	ldr	r3, [pc, #24]	; (8020ec8 <MX_CRC_Init+0x20>)
 8020eae:	4a07      	ldr	r2, [pc, #28]	; (8020ecc <MX_CRC_Init+0x24>)
 8020eb0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8020eb2:	4805      	ldr	r0, [pc, #20]	; (8020ec8 <MX_CRC_Init+0x20>)
 8020eb4:	f002 fbdc 	bl	8023670 <HAL_CRC_Init>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d001      	beq.n	8020ec2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8020ebe:	f001 f979 	bl	80221b4 <Error_Handler>
  }

}
 8020ec2:	bf00      	nop
 8020ec4:	bd80      	pop	{r7, pc}
 8020ec6:	bf00      	nop
 8020ec8:	200013c8 	.word	0x200013c8
 8020ecc:	40023000 	.word	0x40023000

08020ed0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8020ed0:	b480      	push	{r7}
 8020ed2:	b085      	sub	sp, #20
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	681b      	ldr	r3, [r3, #0]
 8020edc:	4a0b      	ldr	r2, [pc, #44]	; (8020f0c <HAL_CRC_MspInit+0x3c>)
 8020ede:	4293      	cmp	r3, r2
 8020ee0:	d10d      	bne.n	8020efe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	60fb      	str	r3, [r7, #12]
 8020ee6:	4b0a      	ldr	r3, [pc, #40]	; (8020f10 <HAL_CRC_MspInit+0x40>)
 8020ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020eea:	4a09      	ldr	r2, [pc, #36]	; (8020f10 <HAL_CRC_MspInit+0x40>)
 8020eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8020ef2:	4b07      	ldr	r3, [pc, #28]	; (8020f10 <HAL_CRC_MspInit+0x40>)
 8020ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020efa:	60fb      	str	r3, [r7, #12]
 8020efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8020efe:	bf00      	nop
 8020f00:	3714      	adds	r7, #20
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr
 8020f0a:	bf00      	nop
 8020f0c:	40023000 	.word	0x40023000
 8020f10:	40023800 	.word	0x40023800

08020f14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8020f14:	b580      	push	{r7, lr}
 8020f16:	b082      	sub	sp, #8
 8020f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	607b      	str	r3, [r7, #4]
 8020f1e:	4b10      	ldr	r3, [pc, #64]	; (8020f60 <MX_DMA_Init+0x4c>)
 8020f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f22:	4a0f      	ldr	r2, [pc, #60]	; (8020f60 <MX_DMA_Init+0x4c>)
 8020f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8020f28:	6313      	str	r3, [r2, #48]	; 0x30
 8020f2a:	4b0d      	ldr	r3, [pc, #52]	; (8020f60 <MX_DMA_Init+0x4c>)
 8020f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020f32:	607b      	str	r3, [r7, #4]
 8020f34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8020f36:	2200      	movs	r2, #0
 8020f38:	2100      	movs	r1, #0
 8020f3a:	203b      	movs	r0, #59	; 0x3b
 8020f3c:	f002 fb60 	bl	8023600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8020f40:	203b      	movs	r0, #59	; 0x3b
 8020f42:	f002 fb79 	bl	8023638 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8020f46:	2200      	movs	r2, #0
 8020f48:	2100      	movs	r1, #0
 8020f4a:	2045      	movs	r0, #69	; 0x45
 8020f4c:	f002 fb58 	bl	8023600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8020f50:	2045      	movs	r0, #69	; 0x45
 8020f52:	f002 fb71 	bl	8023638 <HAL_NVIC_EnableIRQ>

}
 8020f56:	bf00      	nop
 8020f58:	3708      	adds	r7, #8
 8020f5a:	46bd      	mov	sp, r7
 8020f5c:	bd80      	pop	{r7, pc}
 8020f5e:	bf00      	nop
 8020f60:	40023800 	.word	0x40023800

08020f64 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8020f64:	b580      	push	{r7, lr}
 8020f66:	b08a      	sub	sp, #40	; 0x28
 8020f68:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8020f6a:	2306      	movs	r3, #6
 8020f6c:	847b      	strh	r3, [r7, #34]	; 0x22
 8020f6e:	2306      	movs	r3, #6
 8020f70:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8020f72:	2300      	movs	r3, #0
 8020f74:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8020f76:	2300      	movs	r3, #0
 8020f78:	83fb      	strh	r3, [r7, #30]
 8020f7a:	2300      	movs	r3, #0
 8020f7c:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8020f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020f82:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8020f84:	2300      	movs	r3, #0
 8020f86:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8020f88:	4b9f      	ldr	r3, [pc, #636]	; (8021208 <EE_Init+0x2a4>)
 8020f8a:	881b      	ldrh	r3, [r3, #0]
 8020f8c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8020f8e:	4b9f      	ldr	r3, [pc, #636]	; (802120c <EE_Init+0x2a8>)
 8020f90:	881b      	ldrh	r3, [r3, #0]
 8020f92:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8020f94:	2300      	movs	r3, #0
 8020f96:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8020f98:	2301      	movs	r3, #1
 8020f9a:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8020f9c:	2301      	movs	r3, #1
 8020f9e:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8020fa0:	2302      	movs	r3, #2
 8020fa2:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8020fa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020fa6:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8020faa:	4293      	cmp	r3, r2
 8020fac:	d057      	beq.n	802105e <EE_Init+0xfa>
 8020fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020fb2:	4293      	cmp	r3, r2
 8020fb4:	d003      	beq.n	8020fbe <EE_Init+0x5a>
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	f000 80f4 	beq.w	80211a4 <EE_Init+0x240>
 8020fbc:	e18d      	b.n	80212da <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8020fbe:	8c3b      	ldrh	r3, [r7, #32]
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d116      	bne.n	8020ff2 <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8020fc4:	4890      	ldr	r0, [pc, #576]	; (8021208 <EE_Init+0x2a4>)
 8020fc6:	f000 f9a9 	bl	802131c <EE_VerifyPageFullyErased>
 8020fca:	4603      	mov	r3, r0
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	f040 818e 	bne.w	80212ee <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8020fd2:	f107 0214 	add.w	r2, r7, #20
 8020fd6:	463b      	mov	r3, r7
 8020fd8:	4611      	mov	r1, r2
 8020fda:	4618      	mov	r0, r3
 8020fdc:	f003 f912 	bl	8024204 <HAL_FLASHEx_Erase>
 8020fe0:	4603      	mov	r3, r0
 8020fe2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8020fe4:	7efb      	ldrb	r3, [r7, #27]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	f000 8181 	beq.w	80212ee <EE_Init+0x38a>
          {
            return FlashStatus;
 8020fec:	7efb      	ldrb	r3, [r7, #27]
 8020fee:	b29b      	uxth	r3, r3
 8020ff0:	e185      	b.n	80212fe <EE_Init+0x39a>
          }
//          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8020ff2:	8c3b      	ldrh	r3, [r7, #32]
 8020ff4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8020ff8:	4293      	cmp	r3, r2
 8020ffa:	d125      	bne.n	8021048 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8020ffc:	4882      	ldr	r0, [pc, #520]	; (8021208 <EE_Init+0x2a4>)
 8020ffe:	f000 f98d 	bl	802131c <EE_VerifyPageFullyErased>
 8021002:	4603      	mov	r3, r0
 8021004:	2b00      	cmp	r3, #0
 8021006:	d10e      	bne.n	8021026 <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8021008:	f107 0214 	add.w	r2, r7, #20
 802100c:	463b      	mov	r3, r7
 802100e:	4611      	mov	r1, r2
 8021010:	4618      	mov	r0, r3
 8021012:	f003 f8f7 	bl	8024204 <HAL_FLASHEx_Erase>
 8021016:	4603      	mov	r3, r0
 8021018:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 802101a:	7efb      	ldrb	r3, [r7, #27]
 802101c:	2b00      	cmp	r3, #0
 802101e:	d002      	beq.n	8021026 <EE_Init+0xc2>
          {
            return FlashStatus;
 8021020:	7efb      	ldrb	r3, [r7, #27]
 8021022:	b29b      	uxth	r3, r3
 8021024:	e16b      	b.n	80212fe <EE_Init+0x39a>
          }
//          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8021026:	f04f 0200 	mov.w	r2, #0
 802102a:	f04f 0300 	mov.w	r3, #0
 802102e:	4977      	ldr	r1, [pc, #476]	; (802120c <EE_Init+0x2a8>)
 8021030:	2001      	movs	r0, #1
 8021032:	f002 ff33 	bl	8023e9c <HAL_FLASH_Program>
 8021036:	4603      	mov	r3, r0
 8021038:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802103a:	7efb      	ldrb	r3, [r7, #27]
 802103c:	2b00      	cmp	r3, #0
 802103e:	f000 8156 	beq.w	80212ee <EE_Init+0x38a>
        {
          return FlashStatus;
 8021042:	7efb      	ldrb	r3, [r7, #27]
 8021044:	b29b      	uxth	r3, r3
 8021046:	e15a      	b.n	80212fe <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8021048:	f000 f9d8 	bl	80213fc <EE_Format>
 802104c:	4603      	mov	r3, r0
 802104e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8021050:	7efb      	ldrb	r3, [r7, #27]
 8021052:	2b00      	cmp	r3, #0
 8021054:	f000 814b 	beq.w	80212ee <EE_Init+0x38a>
        {
          return FlashStatus;
 8021058:	7efb      	ldrb	r3, [r7, #27]
 802105a:	b29b      	uxth	r3, r3
 802105c:	e14f      	b.n	80212fe <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 802105e:	8c3b      	ldrh	r3, [r7, #32]
 8021060:	2b00      	cmp	r3, #0
 8021062:	d163      	bne.n	802112c <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8021064:	2300      	movs	r3, #0
 8021066:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021068:	e030      	b.n	80210cc <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 802106a:	4b69      	ldr	r3, [pc, #420]	; (8021210 <EE_Init+0x2ac>)
 802106c:	881b      	ldrh	r3, [r3, #0]
 802106e:	b29a      	uxth	r2, r3
 8021070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021072:	4968      	ldr	r1, [pc, #416]	; (8021214 <EE_Init+0x2b0>)
 8021074:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021078:	429a      	cmp	r2, r3
 802107a:	d101      	bne.n	8021080 <EE_Init+0x11c>
          {
            x = VarIdx;
 802107c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802107e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8021080:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021082:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8021086:	429a      	cmp	r2, r3
 8021088:	d01d      	beq.n	80210c6 <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 802108a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802108c:	4a61      	ldr	r2, [pc, #388]	; (8021214 <EE_Init+0x2b0>)
 802108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021092:	4961      	ldr	r1, [pc, #388]	; (8021218 <EE_Init+0x2b4>)
 8021094:	4618      	mov	r0, r3
 8021096:	f000 f967 	bl	8021368 <EE_ReadVariable>
 802109a:	4603      	mov	r3, r0
 802109c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 802109e:	8bbb      	ldrh	r3, [r7, #28]
 80210a0:	2b01      	cmp	r3, #1
 80210a2:	d010      	beq.n	80210c6 <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80210a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80210a6:	4a5b      	ldr	r2, [pc, #364]	; (8021214 <EE_Init+0x2b0>)
 80210a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80210ac:	4b5a      	ldr	r3, [pc, #360]	; (8021218 <EE_Init+0x2b4>)
 80210ae:	881b      	ldrh	r3, [r3, #0]
 80210b0:	4619      	mov	r1, r3
 80210b2:	4610      	mov	r0, r2
 80210b4:	f000 fa3a 	bl	802152c <EE_VerifyPageFullWriteVariable>
 80210b8:	4603      	mov	r3, r0
 80210ba:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80210bc:	8bfb      	ldrh	r3, [r7, #30]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d001      	beq.n	80210c6 <EE_Init+0x162>
              {
                return EepromStatus;
 80210c2:	8bfb      	ldrh	r3, [r7, #30]
 80210c4:	e11b      	b.n	80212fe <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80210c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80210c8:	3301      	adds	r3, #1
 80210ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80210cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80210ce:	2b02      	cmp	r3, #2
 80210d0:	d9cb      	bls.n	802106a <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80210d2:	f04f 0200 	mov.w	r2, #0
 80210d6:	f04f 0300 	mov.w	r3, #0
 80210da:	494b      	ldr	r1, [pc, #300]	; (8021208 <EE_Init+0x2a4>)
 80210dc:	2001      	movs	r0, #1
 80210de:	f002 fedd 	bl	8023e9c <HAL_FLASH_Program>
 80210e2:	4603      	mov	r3, r0
 80210e4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80210e6:	7efb      	ldrb	r3, [r7, #27]
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	d002      	beq.n	80210f2 <EE_Init+0x18e>
        {
          return FlashStatus;
 80210ec:	7efb      	ldrb	r3, [r7, #27]
 80210ee:	b29b      	uxth	r3, r3
 80210f0:	e105      	b.n	80212fe <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 80210f2:	2302      	movs	r3, #2
 80210f4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80210f6:	2301      	movs	r3, #1
 80210f8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80210fa:	2302      	movs	r3, #2
 80210fc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80210fe:	4843      	ldr	r0, [pc, #268]	; (802120c <EE_Init+0x2a8>)
 8021100:	f000 f90c 	bl	802131c <EE_VerifyPageFullyErased>
 8021104:	4603      	mov	r3, r0
 8021106:	2b00      	cmp	r3, #0
 8021108:	f040 80f3 	bne.w	80212f2 <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 802110c:	f107 0214 	add.w	r2, r7, #20
 8021110:	463b      	mov	r3, r7
 8021112:	4611      	mov	r1, r2
 8021114:	4618      	mov	r0, r3
 8021116:	f003 f875 	bl	8024204 <HAL_FLASHEx_Erase>
 802111a:	4603      	mov	r3, r0
 802111c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 802111e:	7efb      	ldrb	r3, [r7, #27]
 8021120:	2b00      	cmp	r3, #0
 8021122:	f000 80e6 	beq.w	80212f2 <EE_Init+0x38e>
          {
            return FlashStatus;
 8021126:	7efb      	ldrb	r3, [r7, #27]
 8021128:	b29b      	uxth	r3, r3
 802112a:	e0e8      	b.n	80212fe <EE_Init+0x39a>
          }
//          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 802112c:	8c3b      	ldrh	r3, [r7, #32]
 802112e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021132:	4293      	cmp	r3, r2
 8021134:	d12b      	bne.n	802118e <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 8021136:	2302      	movs	r3, #2
 8021138:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 802113a:	2301      	movs	r3, #1
 802113c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 802113e:	2302      	movs	r3, #2
 8021140:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8021142:	4832      	ldr	r0, [pc, #200]	; (802120c <EE_Init+0x2a8>)
 8021144:	f000 f8ea 	bl	802131c <EE_VerifyPageFullyErased>
 8021148:	4603      	mov	r3, r0
 802114a:	2b00      	cmp	r3, #0
 802114c:	d10e      	bne.n	802116c <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 802114e:	f107 0214 	add.w	r2, r7, #20
 8021152:	463b      	mov	r3, r7
 8021154:	4611      	mov	r1, r2
 8021156:	4618      	mov	r0, r3
 8021158:	f003 f854 	bl	8024204 <HAL_FLASHEx_Erase>
 802115c:	4603      	mov	r3, r0
 802115e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8021160:	7efb      	ldrb	r3, [r7, #27]
 8021162:	2b00      	cmp	r3, #0
 8021164:	d002      	beq.n	802116c <EE_Init+0x208>
          {
            return FlashStatus;
 8021166:	7efb      	ldrb	r3, [r7, #27]
 8021168:	b29b      	uxth	r3, r3
 802116a:	e0c8      	b.n	80212fe <EE_Init+0x39a>
          }
//          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 802116c:	f04f 0200 	mov.w	r2, #0
 8021170:	f04f 0300 	mov.w	r3, #0
 8021174:	4924      	ldr	r1, [pc, #144]	; (8021208 <EE_Init+0x2a4>)
 8021176:	2001      	movs	r0, #1
 8021178:	f002 fe90 	bl	8023e9c <HAL_FLASH_Program>
 802117c:	4603      	mov	r3, r0
 802117e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8021180:	7efb      	ldrb	r3, [r7, #27]
 8021182:	2b00      	cmp	r3, #0
 8021184:	f000 80b5 	beq.w	80212f2 <EE_Init+0x38e>
        {
          return FlashStatus;
 8021188:	7efb      	ldrb	r3, [r7, #27]
 802118a:	b29b      	uxth	r3, r3
 802118c:	e0b7      	b.n	80212fe <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 802118e:	f000 f935 	bl	80213fc <EE_Format>
 8021192:	4603      	mov	r3, r0
 8021194:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8021196:	7efb      	ldrb	r3, [r7, #27]
 8021198:	2b00      	cmp	r3, #0
 802119a:	f000 80aa 	beq.w	80212f2 <EE_Init+0x38e>
        {
          return FlashStatus;
 802119e:	7efb      	ldrb	r3, [r7, #27]
 80211a0:	b29b      	uxth	r3, r3
 80211a2:	e0ac      	b.n	80212fe <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80211a4:	8c3b      	ldrh	r3, [r7, #32]
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	d10a      	bne.n	80211c0 <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80211aa:	f000 f927 	bl	80213fc <EE_Format>
 80211ae:	4603      	mov	r3, r0
 80211b0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80211b2:	7efb      	ldrb	r3, [r7, #27]
 80211b4:	2b00      	cmp	r3, #0
 80211b6:	f000 809e 	beq.w	80212f6 <EE_Init+0x392>
        {
          return FlashStatus;
 80211ba:	7efb      	ldrb	r3, [r7, #27]
 80211bc:	b29b      	uxth	r3, r3
 80211be:	e09e      	b.n	80212fe <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80211c0:	8c3b      	ldrh	r3, [r7, #32]
 80211c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80211c6:	4293      	cmp	r3, r2
 80211c8:	d11b      	bne.n	8021202 <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 80211ca:	2302      	movs	r3, #2
 80211cc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80211ce:	2301      	movs	r3, #1
 80211d0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80211d2:	2302      	movs	r3, #2
 80211d4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80211d6:	480d      	ldr	r0, [pc, #52]	; (802120c <EE_Init+0x2a8>)
 80211d8:	f000 f8a0 	bl	802131c <EE_VerifyPageFullyErased>
 80211dc:	4603      	mov	r3, r0
 80211de:	2b00      	cmp	r3, #0
 80211e0:	f040 8089 	bne.w	80212f6 <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80211e4:	f107 0214 	add.w	r2, r7, #20
 80211e8:	463b      	mov	r3, r7
 80211ea:	4611      	mov	r1, r2
 80211ec:	4618      	mov	r0, r3
 80211ee:	f003 f809 	bl	8024204 <HAL_FLASHEx_Erase>
 80211f2:	4603      	mov	r3, r0
 80211f4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80211f6:	7efb      	ldrb	r3, [r7, #27]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d07c      	beq.n	80212f6 <EE_Init+0x392>
          {
            return FlashStatus;
 80211fc:	7efb      	ldrb	r3, [r7, #27]
 80211fe:	b29b      	uxth	r3, r3
 8021200:	e07d      	b.n	80212fe <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8021202:	2300      	movs	r3, #0
 8021204:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021206:	e03a      	b.n	802127e <EE_Init+0x31a>
 8021208:	08004000 	.word	0x08004000
 802120c:	08008000 	.word	0x08008000
 8021210:	08004006 	.word	0x08004006
 8021214:	20000390 	.word	0x20000390
 8021218:	2000038c 	.word	0x2000038c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 802121c:	4b3a      	ldr	r3, [pc, #232]	; (8021308 <EE_Init+0x3a4>)
 802121e:	881b      	ldrh	r3, [r3, #0]
 8021220:	b29a      	uxth	r2, r3
 8021222:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021224:	4939      	ldr	r1, [pc, #228]	; (802130c <EE_Init+0x3a8>)
 8021226:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802122a:	429a      	cmp	r2, r3
 802122c:	d101      	bne.n	8021232 <EE_Init+0x2ce>
          {
            x = VarIdx;
 802122e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021230:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8021232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021234:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8021238:	429a      	cmp	r2, r3
 802123a:	d01d      	beq.n	8021278 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 802123c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802123e:	4a33      	ldr	r2, [pc, #204]	; (802130c <EE_Init+0x3a8>)
 8021240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021244:	4932      	ldr	r1, [pc, #200]	; (8021310 <EE_Init+0x3ac>)
 8021246:	4618      	mov	r0, r3
 8021248:	f000 f88e 	bl	8021368 <EE_ReadVariable>
 802124c:	4603      	mov	r3, r0
 802124e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8021250:	8bbb      	ldrh	r3, [r7, #28]
 8021252:	2b01      	cmp	r3, #1
 8021254:	d010      	beq.n	8021278 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8021256:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021258:	4a2c      	ldr	r2, [pc, #176]	; (802130c <EE_Init+0x3a8>)
 802125a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802125e:	4b2c      	ldr	r3, [pc, #176]	; (8021310 <EE_Init+0x3ac>)
 8021260:	881b      	ldrh	r3, [r3, #0]
 8021262:	4619      	mov	r1, r3
 8021264:	4610      	mov	r0, r2
 8021266:	f000 f961 	bl	802152c <EE_VerifyPageFullWriteVariable>
 802126a:	4603      	mov	r3, r0
 802126c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 802126e:	8bfb      	ldrh	r3, [r7, #30]
 8021270:	2b00      	cmp	r3, #0
 8021272:	d001      	beq.n	8021278 <EE_Init+0x314>
              {
                return EepromStatus;
 8021274:	8bfb      	ldrh	r3, [r7, #30]
 8021276:	e042      	b.n	80212fe <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8021278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802127a:	3301      	adds	r3, #1
 802127c:	84fb      	strh	r3, [r7, #38]	; 0x26
 802127e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021280:	2b02      	cmp	r3, #2
 8021282:	d9cb      	bls.n	802121c <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8021284:	f04f 0200 	mov.w	r2, #0
 8021288:	f04f 0300 	mov.w	r3, #0
 802128c:	4921      	ldr	r1, [pc, #132]	; (8021314 <EE_Init+0x3b0>)
 802128e:	2001      	movs	r0, #1
 8021290:	f002 fe04 	bl	8023e9c <HAL_FLASH_Program>
 8021294:	4603      	mov	r3, r0
 8021296:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8021298:	7efb      	ldrb	r3, [r7, #27]
 802129a:	2b00      	cmp	r3, #0
 802129c:	d002      	beq.n	80212a4 <EE_Init+0x340>
        {
          return FlashStatus;
 802129e:	7efb      	ldrb	r3, [r7, #27]
 80212a0:	b29b      	uxth	r3, r3
 80212a2:	e02c      	b.n	80212fe <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 80212a4:	2301      	movs	r3, #1
 80212a6:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80212a8:	2301      	movs	r3, #1
 80212aa:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80212ac:	2302      	movs	r3, #2
 80212ae:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80212b0:	4819      	ldr	r0, [pc, #100]	; (8021318 <EE_Init+0x3b4>)
 80212b2:	f000 f833 	bl	802131c <EE_VerifyPageFullyErased>
 80212b6:	4603      	mov	r3, r0
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d11c      	bne.n	80212f6 <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80212bc:	f107 0214 	add.w	r2, r7, #20
 80212c0:	463b      	mov	r3, r7
 80212c2:	4611      	mov	r1, r2
 80212c4:	4618      	mov	r0, r3
 80212c6:	f002 ff9d 	bl	8024204 <HAL_FLASHEx_Erase>
 80212ca:	4603      	mov	r3, r0
 80212cc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80212ce:	7efb      	ldrb	r3, [r7, #27]
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d010      	beq.n	80212f6 <EE_Init+0x392>
          {
            return FlashStatus;
 80212d4:	7efb      	ldrb	r3, [r7, #27]
 80212d6:	b29b      	uxth	r3, r3
 80212d8:	e011      	b.n	80212fe <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80212da:	f000 f88f 	bl	80213fc <EE_Format>
 80212de:	4603      	mov	r3, r0
 80212e0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80212e2:	7efb      	ldrb	r3, [r7, #27]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d008      	beq.n	80212fa <EE_Init+0x396>
      {
        return FlashStatus;
 80212e8:	7efb      	ldrb	r3, [r7, #27]
 80212ea:	b29b      	uxth	r3, r3
 80212ec:	e007      	b.n	80212fe <EE_Init+0x39a>
      break;
 80212ee:	bf00      	nop
 80212f0:	e004      	b.n	80212fc <EE_Init+0x398>
      break;
 80212f2:	bf00      	nop
 80212f4:	e002      	b.n	80212fc <EE_Init+0x398>
      break;
 80212f6:	bf00      	nop
 80212f8:	e000      	b.n	80212fc <EE_Init+0x398>
      }
      break;
 80212fa:	bf00      	nop
  }

  return HAL_OK;
 80212fc:	2300      	movs	r3, #0
}
 80212fe:	4618      	mov	r0, r3
 8021300:	3728      	adds	r7, #40	; 0x28
 8021302:	46bd      	mov	sp, r7
 8021304:	bd80      	pop	{r7, pc}
 8021306:	bf00      	nop
 8021308:	08008006 	.word	0x08008006
 802130c:	20000390 	.word	0x20000390
 8021310:	2000038c 	.word	0x2000038c
 8021314:	08008000 	.word	0x08008000
 8021318:	08004000 	.word	0x08004000

0802131c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 802131c:	b480      	push	{r7}
 802131e:	b085      	sub	sp, #20
 8021320:	af00      	add	r7, sp, #0
 8021322:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8021324:	2301      	movs	r3, #1
 8021326:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8021328:	f245 5355 	movw	r3, #21845	; 0x5555
 802132c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 802132e:	e00d      	b.n	802134c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	881b      	ldrh	r3, [r3, #0]
 8021334:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8021336:	897b      	ldrh	r3, [r7, #10]
 8021338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802133c:	4293      	cmp	r3, r2
 802133e:	d002      	beq.n	8021346 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8021340:	2300      	movs	r3, #0
 8021342:	60fb      	str	r3, [r7, #12]

      break;
 8021344:	e006      	b.n	8021354 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	3304      	adds	r3, #4
 802134a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	4a05      	ldr	r2, [pc, #20]	; (8021364 <EE_VerifyPageFullyErased+0x48>)
 8021350:	4293      	cmp	r3, r2
 8021352:	d9ed      	bls.n	8021330 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	b29b      	uxth	r3, r3
}
 8021358:	4618      	mov	r0, r3
 802135a:	3714      	adds	r7, #20
 802135c:	46bd      	mov	sp, r7
 802135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021362:	4770      	bx	lr
 8021364:	08007fff 	.word	0x08007fff

08021368 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8021368:	b580      	push	{r7, lr}
 802136a:	b086      	sub	sp, #24
 802136c:	af00      	add	r7, sp, #0
 802136e:	4603      	mov	r3, r0
 8021370:	6039      	str	r1, [r7, #0]
 8021372:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8021374:	2300      	movs	r3, #0
 8021376:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8021378:	f245 5355 	movw	r3, #21845	; 0x5555
 802137c:	81bb      	strh	r3, [r7, #12]
 802137e:	2301      	movs	r3, #1
 8021380:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8021382:	4b1c      	ldr	r3, [pc, #112]	; (80213f4 <EE_ReadVariable+0x8c>)
 8021384:	613b      	str	r3, [r7, #16]
 8021386:	4b1b      	ldr	r3, [pc, #108]	; (80213f4 <EE_ReadVariable+0x8c>)
 8021388:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 802138a:	2000      	movs	r0, #0
 802138c:	f000 f888 	bl	80214a0 <EE_FindValidPage>
 8021390:	4603      	mov	r3, r0
 8021392:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8021394:	89fb      	ldrh	r3, [r7, #14]
 8021396:	2bab      	cmp	r3, #171	; 0xab
 8021398:	d101      	bne.n	802139e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 802139a:	23ab      	movs	r3, #171	; 0xab
 802139c:	e025      	b.n	80213ea <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 802139e:	89fb      	ldrh	r3, [r7, #14]
 80213a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80213a4:	3301      	adds	r3, #1
 80213a6:	039b      	lsls	r3, r3, #14
 80213a8:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80213aa:	89fb      	ldrh	r3, [r7, #14]
 80213ac:	3301      	adds	r3, #1
 80213ae:	039a      	lsls	r2, r3, #14
 80213b0:	4b11      	ldr	r3, [pc, #68]	; (80213f8 <EE_ReadVariable+0x90>)
 80213b2:	4413      	add	r3, r2
 80213b4:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80213b6:	e012      	b.n	80213de <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80213b8:	693b      	ldr	r3, [r7, #16]
 80213ba:	881b      	ldrh	r3, [r3, #0]
 80213bc:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80213be:	89ba      	ldrh	r2, [r7, #12]
 80213c0:	88fb      	ldrh	r3, [r7, #6]
 80213c2:	429a      	cmp	r2, r3
 80213c4:	d108      	bne.n	80213d8 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80213c6:	693b      	ldr	r3, [r7, #16]
 80213c8:	3b02      	subs	r3, #2
 80213ca:	881b      	ldrh	r3, [r3, #0]
 80213cc:	b29a      	uxth	r2, r3
 80213ce:	683b      	ldr	r3, [r7, #0]
 80213d0:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80213d2:	2300      	movs	r3, #0
 80213d4:	82fb      	strh	r3, [r7, #22]

      break;
 80213d6:	e007      	b.n	80213e8 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80213d8:	693b      	ldr	r3, [r7, #16]
 80213da:	3b04      	subs	r3, #4
 80213dc:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80213de:	68bb      	ldr	r3, [r7, #8]
 80213e0:	3302      	adds	r3, #2
 80213e2:	693a      	ldr	r2, [r7, #16]
 80213e4:	429a      	cmp	r2, r3
 80213e6:	d8e7      	bhi.n	80213b8 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80213e8:	8afb      	ldrh	r3, [r7, #22]
}
 80213ea:	4618      	mov	r0, r3
 80213ec:	3718      	adds	r7, #24
 80213ee:	46bd      	mov	sp, r7
 80213f0:	bd80      	pop	{r7, pc}
 80213f2:	bf00      	nop
 80213f4:	08004000 	.word	0x08004000
 80213f8:	08003ffe 	.word	0x08003ffe

080213fc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80213fc:	b580      	push	{r7, lr}
 80213fe:	b088      	sub	sp, #32
 8021400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8021402:	2300      	movs	r3, #0
 8021404:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8021406:	2300      	movs	r3, #0
 8021408:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 802140a:	2300      	movs	r3, #0
 802140c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 802140e:	2301      	movs	r3, #1
 8021410:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8021412:	2301      	movs	r3, #1
 8021414:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8021416:	2302      	movs	r3, #2
 8021418:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 802141a:	481f      	ldr	r0, [pc, #124]	; (8021498 <EE_Format+0x9c>)
 802141c:	f7ff ff7e 	bl	802131c <EE_VerifyPageFullyErased>
 8021420:	4603      	mov	r3, r0
 8021422:	2b00      	cmp	r3, #0
 8021424:	d10d      	bne.n	8021442 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8021426:	f107 0218 	add.w	r2, r7, #24
 802142a:	1d3b      	adds	r3, r7, #4
 802142c:	4611      	mov	r1, r2
 802142e:	4618      	mov	r0, r3
 8021430:	f002 fee8 	bl	8024204 <HAL_FLASHEx_Erase>
 8021434:	4603      	mov	r3, r0
 8021436:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8021438:	7ffb      	ldrb	r3, [r7, #31]
 802143a:	2b00      	cmp	r3, #0
 802143c:	d001      	beq.n	8021442 <EE_Format+0x46>
    {
      return FlashStatus;
 802143e:	7ffb      	ldrb	r3, [r7, #31]
 8021440:	e025      	b.n	802148e <EE_Format+0x92>
    }
//    SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8021442:	f04f 0200 	mov.w	r2, #0
 8021446:	f04f 0300 	mov.w	r3, #0
 802144a:	4913      	ldr	r1, [pc, #76]	; (8021498 <EE_Format+0x9c>)
 802144c:	2001      	movs	r0, #1
 802144e:	f002 fd25 	bl	8023e9c <HAL_FLASH_Program>
 8021452:	4603      	mov	r3, r0
 8021454:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8021456:	7ffb      	ldrb	r3, [r7, #31]
 8021458:	2b00      	cmp	r3, #0
 802145a:	d001      	beq.n	8021460 <EE_Format+0x64>
  {
    return FlashStatus;
 802145c:	7ffb      	ldrb	r3, [r7, #31]
 802145e:	e016      	b.n	802148e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8021460:	2302      	movs	r3, #2
 8021462:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8021464:	480d      	ldr	r0, [pc, #52]	; (802149c <EE_Format+0xa0>)
 8021466:	f7ff ff59 	bl	802131c <EE_VerifyPageFullyErased>
 802146a:	4603      	mov	r3, r0
 802146c:	2b00      	cmp	r3, #0
 802146e:	d10d      	bne.n	802148c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8021470:	f107 0218 	add.w	r2, r7, #24
 8021474:	1d3b      	adds	r3, r7, #4
 8021476:	4611      	mov	r1, r2
 8021478:	4618      	mov	r0, r3
 802147a:	f002 fec3 	bl	8024204 <HAL_FLASHEx_Erase>
 802147e:	4603      	mov	r3, r0
 8021480:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8021482:	7ffb      	ldrb	r3, [r7, #31]
 8021484:	2b00      	cmp	r3, #0
 8021486:	d001      	beq.n	802148c <EE_Format+0x90>
    {
      return FlashStatus;
 8021488:	7ffb      	ldrb	r3, [r7, #31]
 802148a:	e000      	b.n	802148e <EE_Format+0x92>
    }
//    SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
  }
  
  return HAL_OK;
 802148c:	2300      	movs	r3, #0
}
 802148e:	4618      	mov	r0, r3
 8021490:	3720      	adds	r7, #32
 8021492:	46bd      	mov	sp, r7
 8021494:	bd80      	pop	{r7, pc}
 8021496:	bf00      	nop
 8021498:	08004000 	.word	0x08004000
 802149c:	08008000 	.word	0x08008000

080214a0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80214a0:	b480      	push	{r7}
 80214a2:	b085      	sub	sp, #20
 80214a4:	af00      	add	r7, sp, #0
 80214a6:	4603      	mov	r3, r0
 80214a8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80214aa:	2306      	movs	r3, #6
 80214ac:	81fb      	strh	r3, [r7, #14]
 80214ae:	2306      	movs	r3, #6
 80214b0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80214b2:	4b1c      	ldr	r3, [pc, #112]	; (8021524 <EE_FindValidPage+0x84>)
 80214b4:	881b      	ldrh	r3, [r3, #0]
 80214b6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80214b8:	4b1b      	ldr	r3, [pc, #108]	; (8021528 <EE_FindValidPage+0x88>)
 80214ba:	881b      	ldrh	r3, [r3, #0]
 80214bc:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80214be:	79fb      	ldrb	r3, [r7, #7]
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d01b      	beq.n	80214fc <EE_FindValidPage+0x5c>
 80214c4:	2b01      	cmp	r3, #1
 80214c6:	d125      	bne.n	8021514 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80214c8:	89bb      	ldrh	r3, [r7, #12]
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d108      	bne.n	80214e0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80214ce:	89fb      	ldrh	r3, [r7, #14]
 80214d0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80214d4:	4293      	cmp	r3, r2
 80214d6:	d101      	bne.n	80214dc <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80214d8:	2300      	movs	r3, #0
 80214da:	e01c      	b.n	8021516 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80214dc:	2301      	movs	r3, #1
 80214de:	e01a      	b.n	8021516 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80214e0:	89fb      	ldrh	r3, [r7, #14]
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d108      	bne.n	80214f8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80214e6:	89bb      	ldrh	r3, [r7, #12]
 80214e8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80214ec:	4293      	cmp	r3, r2
 80214ee:	d101      	bne.n	80214f4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80214f0:	2301      	movs	r3, #1
 80214f2:	e010      	b.n	8021516 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80214f4:	2300      	movs	r3, #0
 80214f6:	e00e      	b.n	8021516 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80214f8:	23ab      	movs	r3, #171	; 0xab
 80214fa:	e00c      	b.n	8021516 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80214fc:	89fb      	ldrh	r3, [r7, #14]
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d101      	bne.n	8021506 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8021502:	2300      	movs	r3, #0
 8021504:	e007      	b.n	8021516 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8021506:	89bb      	ldrh	r3, [r7, #12]
 8021508:	2b00      	cmp	r3, #0
 802150a:	d101      	bne.n	8021510 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 802150c:	2301      	movs	r3, #1
 802150e:	e002      	b.n	8021516 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8021510:	23ab      	movs	r3, #171	; 0xab
 8021512:	e000      	b.n	8021516 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8021514:	2300      	movs	r3, #0
  }
}
 8021516:	4618      	mov	r0, r3
 8021518:	3714      	adds	r7, #20
 802151a:	46bd      	mov	sp, r7
 802151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021520:	4770      	bx	lr
 8021522:	bf00      	nop
 8021524:	08004000 	.word	0x08004000
 8021528:	08008000 	.word	0x08008000

0802152c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 802152c:	b590      	push	{r4, r7, lr}
 802152e:	b087      	sub	sp, #28
 8021530:	af00      	add	r7, sp, #0
 8021532:	4603      	mov	r3, r0
 8021534:	460a      	mov	r2, r1
 8021536:	80fb      	strh	r3, [r7, #6]
 8021538:	4613      	mov	r3, r2
 802153a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 802153c:	2300      	movs	r3, #0
 802153e:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8021540:	2300      	movs	r3, #0
 8021542:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8021544:	4b25      	ldr	r3, [pc, #148]	; (80215dc <EE_VerifyPageFullWriteVariable+0xb0>)
 8021546:	617b      	str	r3, [r7, #20]
 8021548:	4b25      	ldr	r3, [pc, #148]	; (80215e0 <EE_VerifyPageFullWriteVariable+0xb4>)
 802154a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 802154c:	2001      	movs	r0, #1
 802154e:	f7ff ffa7 	bl	80214a0 <EE_FindValidPage>
 8021552:	4603      	mov	r3, r0
 8021554:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8021556:	8a3b      	ldrh	r3, [r7, #16]
 8021558:	2bab      	cmp	r3, #171	; 0xab
 802155a:	d101      	bne.n	8021560 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 802155c:	23ab      	movs	r3, #171	; 0xab
 802155e:	e039      	b.n	80215d4 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8021560:	8a3b      	ldrh	r3, [r7, #16]
 8021562:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8021566:	3301      	adds	r3, #1
 8021568:	039b      	lsls	r3, r3, #14
 802156a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 802156c:	8a3b      	ldrh	r3, [r7, #16]
 802156e:	3301      	adds	r3, #1
 8021570:	039a      	lsls	r2, r3, #14
 8021572:	4b1c      	ldr	r3, [pc, #112]	; (80215e4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8021574:	4413      	add	r3, r2
 8021576:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8021578:	e027      	b.n	80215ca <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 802157a:	697b      	ldr	r3, [r7, #20]
 802157c:	681b      	ldr	r3, [r3, #0]
 802157e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021582:	d11f      	bne.n	80215c4 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8021584:	88bb      	ldrh	r3, [r7, #4]
 8021586:	f04f 0400 	mov.w	r4, #0
 802158a:	461a      	mov	r2, r3
 802158c:	4623      	mov	r3, r4
 802158e:	6979      	ldr	r1, [r7, #20]
 8021590:	2001      	movs	r0, #1
 8021592:	f002 fc83 	bl	8023e9c <HAL_FLASH_Program>
 8021596:	4603      	mov	r3, r0
 8021598:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 802159a:	7cfb      	ldrb	r3, [r7, #19]
 802159c:	2b00      	cmp	r3, #0
 802159e:	d002      	beq.n	80215a6 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 80215a0:	7cfb      	ldrb	r3, [r7, #19]
 80215a2:	b29b      	uxth	r3, r3
 80215a4:	e016      	b.n	80215d4 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80215a6:	697b      	ldr	r3, [r7, #20]
 80215a8:	1c99      	adds	r1, r3, #2
 80215aa:	88fb      	ldrh	r3, [r7, #6]
 80215ac:	f04f 0400 	mov.w	r4, #0
 80215b0:	461a      	mov	r2, r3
 80215b2:	4623      	mov	r3, r4
 80215b4:	2001      	movs	r0, #1
 80215b6:	f002 fc71 	bl	8023e9c <HAL_FLASH_Program>
 80215ba:	4603      	mov	r3, r0
 80215bc:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80215be:	7cfb      	ldrb	r3, [r7, #19]
 80215c0:	b29b      	uxth	r3, r3
 80215c2:	e007      	b.n	80215d4 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80215c4:	697b      	ldr	r3, [r7, #20]
 80215c6:	3304      	adds	r3, #4
 80215c8:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80215ca:	697a      	ldr	r2, [r7, #20]
 80215cc:	68fb      	ldr	r3, [r7, #12]
 80215ce:	429a      	cmp	r2, r3
 80215d0:	d3d3      	bcc.n	802157a <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80215d2:	2380      	movs	r3, #128	; 0x80
}
 80215d4:	4618      	mov	r0, r3
 80215d6:	371c      	adds	r7, #28
 80215d8:	46bd      	mov	sp, r7
 80215da:	bd90      	pop	{r4, r7, pc}
 80215dc:	08004000 	.word	0x08004000
 80215e0:	08008000 	.word	0x08008000
 80215e4:	08003fff 	.word	0x08003fff

080215e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80215e8:	b580      	push	{r7, lr}
 80215ea:	b08e      	sub	sp, #56	; 0x38
 80215ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80215ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215f2:	2200      	movs	r2, #0
 80215f4:	601a      	str	r2, [r3, #0]
 80215f6:	605a      	str	r2, [r3, #4]
 80215f8:	609a      	str	r2, [r3, #8]
 80215fa:	60da      	str	r2, [r3, #12]
 80215fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80215fe:	2300      	movs	r3, #0
 8021600:	623b      	str	r3, [r7, #32]
 8021602:	4b7b      	ldr	r3, [pc, #492]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021606:	4a7a      	ldr	r2, [pc, #488]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021608:	f043 0310 	orr.w	r3, r3, #16
 802160c:	6313      	str	r3, [r2, #48]	; 0x30
 802160e:	4b78      	ldr	r3, [pc, #480]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021612:	f003 0310 	and.w	r3, r3, #16
 8021616:	623b      	str	r3, [r7, #32]
 8021618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802161a:	2300      	movs	r3, #0
 802161c:	61fb      	str	r3, [r7, #28]
 802161e:	4b74      	ldr	r3, [pc, #464]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021622:	4a73      	ldr	r2, [pc, #460]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021624:	f043 0302 	orr.w	r3, r3, #2
 8021628:	6313      	str	r3, [r2, #48]	; 0x30
 802162a:	4b71      	ldr	r3, [pc, #452]	; (80217f0 <MX_GPIO_Init+0x208>)
 802162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802162e:	f003 0302 	and.w	r3, r3, #2
 8021632:	61fb      	str	r3, [r7, #28]
 8021634:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021636:	2300      	movs	r3, #0
 8021638:	61bb      	str	r3, [r7, #24]
 802163a:	4b6d      	ldr	r3, [pc, #436]	; (80217f0 <MX_GPIO_Init+0x208>)
 802163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802163e:	4a6c      	ldr	r2, [pc, #432]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021640:	f043 0304 	orr.w	r3, r3, #4
 8021644:	6313      	str	r3, [r2, #48]	; 0x30
 8021646:	4b6a      	ldr	r3, [pc, #424]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802164a:	f003 0304 	and.w	r3, r3, #4
 802164e:	61bb      	str	r3, [r7, #24]
 8021650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021652:	2300      	movs	r3, #0
 8021654:	617b      	str	r3, [r7, #20]
 8021656:	4b66      	ldr	r3, [pc, #408]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802165a:	4a65      	ldr	r2, [pc, #404]	; (80217f0 <MX_GPIO_Init+0x208>)
 802165c:	f043 0301 	orr.w	r3, r3, #1
 8021660:	6313      	str	r3, [r2, #48]	; 0x30
 8021662:	4b63      	ldr	r3, [pc, #396]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021666:	f003 0301 	and.w	r3, r3, #1
 802166a:	617b      	str	r3, [r7, #20]
 802166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 802166e:	2300      	movs	r3, #0
 8021670:	613b      	str	r3, [r7, #16]
 8021672:	4b5f      	ldr	r3, [pc, #380]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021676:	4a5e      	ldr	r2, [pc, #376]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802167c:	6313      	str	r3, [r2, #48]	; 0x30
 802167e:	4b5c      	ldr	r3, [pc, #368]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021686:	613b      	str	r3, [r7, #16]
 8021688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802168a:	2300      	movs	r3, #0
 802168c:	60fb      	str	r3, [r7, #12]
 802168e:	4b58      	ldr	r3, [pc, #352]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021692:	4a57      	ldr	r2, [pc, #348]	; (80217f0 <MX_GPIO_Init+0x208>)
 8021694:	f043 0308 	orr.w	r3, r3, #8
 8021698:	6313      	str	r3, [r2, #48]	; 0x30
 802169a:	4b55      	ldr	r3, [pc, #340]	; (80217f0 <MX_GPIO_Init+0x208>)
 802169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802169e:	f003 0308 	and.w	r3, r3, #8
 80216a2:	60fb      	str	r3, [r7, #12]
 80216a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80216a6:	2300      	movs	r3, #0
 80216a8:	60bb      	str	r3, [r7, #8]
 80216aa:	4b51      	ldr	r3, [pc, #324]	; (80217f0 <MX_GPIO_Init+0x208>)
 80216ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216ae:	4a50      	ldr	r2, [pc, #320]	; (80217f0 <MX_GPIO_Init+0x208>)
 80216b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80216b4:	6313      	str	r3, [r2, #48]	; 0x30
 80216b6:	4b4e      	ldr	r3, [pc, #312]	; (80217f0 <MX_GPIO_Init+0x208>)
 80216b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80216be:	60bb      	str	r3, [r7, #8]
 80216c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80216c2:	2300      	movs	r3, #0
 80216c4:	607b      	str	r3, [r7, #4]
 80216c6:	4b4a      	ldr	r3, [pc, #296]	; (80217f0 <MX_GPIO_Init+0x208>)
 80216c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216ca:	4a49      	ldr	r2, [pc, #292]	; (80217f0 <MX_GPIO_Init+0x208>)
 80216cc:	f043 0320 	orr.w	r3, r3, #32
 80216d0:	6313      	str	r3, [r2, #48]	; 0x30
 80216d2:	4b47      	ldr	r3, [pc, #284]	; (80217f0 <MX_GPIO_Init+0x208>)
 80216d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216d6:	f003 0320 	and.w	r3, r3, #32
 80216da:	607b      	str	r3, [r7, #4]
 80216dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 80216de:	2200      	movs	r2, #0
 80216e0:	f648 0103 	movw	r1, #34819	; 0x8803
 80216e4:	4843      	ldr	r0, [pc, #268]	; (80217f4 <MX_GPIO_Init+0x20c>)
 80216e6:	f003 f95b 	bl	80249a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80216ea:	2200      	movs	r2, #0
 80216ec:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80216f0:	4841      	ldr	r0, [pc, #260]	; (80217f8 <MX_GPIO_Init+0x210>)
 80216f2:	f003 f955 	bl	80249a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80216f6:	2200      	movs	r2, #0
 80216f8:	2110      	movs	r1, #16
 80216fa:	4840      	ldr	r0, [pc, #256]	; (80217fc <MX_GPIO_Init+0x214>)
 80216fc:	f003 f950 	bl	80249a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEC_ONOFF_Pin|TEC_CURDIR_Pin, GPIO_PIN_RESET);
 8021700:	2200      	movs	r2, #0
 8021702:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8021706:	483e      	ldr	r0, [pc, #248]	; (8021800 <MX_GPIO_Init+0x218>)
 8021708:	f003 f94a 	bl	80249a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = ALERT2_TMP275_Pin|ALERT1_TMP275_Pin|ALERT3_TMP275_Pin|ALERT0_TMP275_Pin
 802170c:	f244 037c 	movw	r3, #16508	; 0x407c
 8021710:	627b      	str	r3, [r7, #36]	; 0x24
                          |ALERT4_TMP275_Pin|INT_VCNL4200_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8021712:	4b3c      	ldr	r3, [pc, #240]	; (8021804 <MX_GPIO_Init+0x21c>)
 8021714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021716:	2300      	movs	r3, #0
 8021718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802171e:	4619      	mov	r1, r3
 8021720:	4834      	ldr	r0, [pc, #208]	; (80217f4 <MX_GPIO_Init+0x20c>)
 8021722:	f002 fe91 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin;
 8021726:	f648 0303 	movw	r3, #34819	; 0x8803
 802172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802172c:	2301      	movs	r3, #1
 802172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021730:	2300      	movs	r3, #0
 8021732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021734:	2300      	movs	r3, #0
 8021736:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802173c:	4619      	mov	r1, r3
 802173e:	482d      	ldr	r0, [pc, #180]	; (80217f4 <MX_GPIO_Init+0x20c>)
 8021740:	f002 fe82 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin;
 8021744:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8021748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802174a:	2301      	movs	r3, #1
 802174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802174e:	2300      	movs	r3, #0
 8021750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021752:	2300      	movs	r3, #0
 8021754:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802175a:	4619      	mov	r1, r3
 802175c:	4826      	ldr	r0, [pc, #152]	; (80217f8 <MX_GPIO_Init+0x210>)
 802175e:	f002 fe73 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|BTN5_Pin;
 8021762:	2358      	movs	r3, #88	; 0x58
 8021764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021766:	2300      	movs	r3, #0
 8021768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802176a:	2300      	movs	r3, #0
 802176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021772:	4619      	mov	r1, r3
 8021774:	4820      	ldr	r0, [pc, #128]	; (80217f8 <MX_GPIO_Init+0x210>)
 8021776:	f002 fe67 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 802177a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 802177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021780:	2300      	movs	r3, #0
 8021782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021784:	2300      	movs	r3, #0
 8021786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802178c:	4619      	mov	r1, r3
 802178e:	481e      	ldr	r0, [pc, #120]	; (8021808 <MX_GPIO_Init+0x220>)
 8021790:	f002 fe5a 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8021794:	2302      	movs	r3, #2
 8021796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021798:	2300      	movs	r3, #0
 802179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802179c:	2300      	movs	r3, #0
 802179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80217a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80217a4:	4619      	mov	r1, r3
 80217a6:	4815      	ldr	r0, [pc, #84]	; (80217fc <MX_GPIO_Init+0x214>)
 80217a8:	f002 fe4e 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin;
 80217ac:	2310      	movs	r3, #16
 80217ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80217b0:	2301      	movs	r3, #1
 80217b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217b4:	2300      	movs	r3, #0
 80217b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217b8:	2300      	movs	r3, #0
 80217ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 80217bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80217c0:	4619      	mov	r1, r3
 80217c2:	480e      	ldr	r0, [pc, #56]	; (80217fc <MX_GPIO_Init+0x214>)
 80217c4:	f002 fe40 	bl	8024448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TEC_ONOFF_Pin|TEC_CURDIR_Pin;
 80217c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80217cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80217ce:	2301      	movs	r3, #1
 80217d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217d2:	2300      	movs	r3, #0
 80217d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217d6:	2300      	movs	r3, #0
 80217d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80217da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80217de:	4619      	mov	r1, r3
 80217e0:	4807      	ldr	r0, [pc, #28]	; (8021800 <MX_GPIO_Init+0x218>)
 80217e2:	f002 fe31 	bl	8024448 <HAL_GPIO_Init>

}
 80217e6:	bf00      	nop
 80217e8:	3738      	adds	r7, #56	; 0x38
 80217ea:	46bd      	mov	sp, r7
 80217ec:	bd80      	pop	{r7, pc}
 80217ee:	bf00      	nop
 80217f0:	40023800 	.word	0x40023800
 80217f4:	40021000 	.word	0x40021000
 80217f8:	40020400 	.word	0x40020400
 80217fc:	40020c00 	.word	0x40020c00
 8021800:	40021400 	.word	0x40021400
 8021804:	10110000 	.word	0x10110000
 8021808:	40021800 	.word	0x40021800

0802180c <MX_GPIO_DeInit>:

/* USER CODE BEGIN 2 */
void MX_GPIO_DeInit(void) {
 802180c:	b580      	push	{r7, lr}
 802180e:	b088      	sub	sp, #32
 8021810:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOB,
 8021812:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8021816:	4847      	ldr	r0, [pc, #284]	; (8021934 <MX_GPIO_DeInit+0x128>)
 8021818:	f002 ffb0 	bl	802477c <HAL_GPIO_DeInit>
			DISP_SID_Pin | DISP_SCK_Pin | DISP_CS_Pin | BTN2_Pin | BTN1_Pin
					| BTN5_Pin);
	HAL_GPIO_DeInit(GPIOD, uSD_Detect_Pin | ESP32_EN_Pin);
 802181c:	2112      	movs	r1, #18
 802181e:	4846      	ldr	r0, [pc, #280]	; (8021938 <MX_GPIO_DeInit+0x12c>)
 8021820:	f002 ffac 	bl	802477c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE,
 8021824:	f64c 017f 	movw	r1, #51327	; 0xc87f
 8021828:	4844      	ldr	r0, [pc, #272]	; (802193c <MX_GPIO_DeInit+0x130>)
 802182a:	f002 ffa7 	bl	802477c <HAL_GPIO_DeInit>
			ALERT2_TMP275_Pin | ALERT1_TMP275_Pin | ALERT3_TMP275_Pin
					| ALERT0_TMP275_Pin | ALERT4_TMP275_Pin | INT_VCNL4200_Pin
					| DISP_CMD_Pin | DISP_RST_Pin | USB_PWR_EN_Pin
					| RESET_MB_Pin);
	HAL_GPIO_DeInit(GPIOF, TEC_ONOFF_Pin | TEC_CURDIR_Pin);
 802182e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8021832:	4843      	ldr	r0, [pc, #268]	; (8021940 <MX_GPIO_DeInit+0x134>)
 8021834:	f002 ffa2 	bl	802477c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOG, BTN4_Pin | BTN3_Pin);
 8021838:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 802183c:	4841      	ldr	r0, [pc, #260]	; (8021944 <MX_GPIO_DeInit+0x138>)
 802183e:	f002 ff9d 	bl	802477c <HAL_GPIO_DeInit>
	HAL_GPIO_Init(GPIOH, GPIO_PIN_8 | GPIO_PIN_7);
 8021842:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8021846:	4840      	ldr	r0, [pc, #256]	; (8021948 <MX_GPIO_DeInit+0x13c>)
 8021848:	f002 fdfe 	bl	8024448 <HAL_GPIO_Init>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 802184c:	2300      	movs	r3, #0
 802184e:	61fb      	str	r3, [r7, #28]
 8021850:	4b3e      	ldr	r3, [pc, #248]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021854:	4a3d      	ldr	r2, [pc, #244]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021856:	f043 0310 	orr.w	r3, r3, #16
 802185a:	6313      	str	r3, [r2, #48]	; 0x30
 802185c:	4b3b      	ldr	r3, [pc, #236]	; (802194c <MX_GPIO_DeInit+0x140>)
 802185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021860:	f003 0310 	and.w	r3, r3, #16
 8021864:	61fb      	str	r3, [r7, #28]
 8021866:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8021868:	2300      	movs	r3, #0
 802186a:	61bb      	str	r3, [r7, #24]
 802186c:	4b37      	ldr	r3, [pc, #220]	; (802194c <MX_GPIO_DeInit+0x140>)
 802186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021870:	4a36      	ldr	r2, [pc, #216]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021872:	f043 0302 	orr.w	r3, r3, #2
 8021876:	6313      	str	r3, [r2, #48]	; 0x30
 8021878:	4b34      	ldr	r3, [pc, #208]	; (802194c <MX_GPIO_DeInit+0x140>)
 802187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802187c:	f003 0302 	and.w	r3, r3, #2
 8021880:	61bb      	str	r3, [r7, #24]
 8021882:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8021884:	2300      	movs	r3, #0
 8021886:	617b      	str	r3, [r7, #20]
 8021888:	4b30      	ldr	r3, [pc, #192]	; (802194c <MX_GPIO_DeInit+0x140>)
 802188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802188c:	4a2f      	ldr	r2, [pc, #188]	; (802194c <MX_GPIO_DeInit+0x140>)
 802188e:	f043 0304 	orr.w	r3, r3, #4
 8021892:	6313      	str	r3, [r2, #48]	; 0x30
 8021894:	4b2d      	ldr	r3, [pc, #180]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021898:	f003 0304 	and.w	r3, r3, #4
 802189c:	617b      	str	r3, [r7, #20]
 802189e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80218a0:	2300      	movs	r3, #0
 80218a2:	613b      	str	r3, [r7, #16]
 80218a4:	4b29      	ldr	r3, [pc, #164]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218a8:	4a28      	ldr	r2, [pc, #160]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218aa:	f043 0301 	orr.w	r3, r3, #1
 80218ae:	6313      	str	r3, [r2, #48]	; 0x30
 80218b0:	4b26      	ldr	r3, [pc, #152]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218b4:	f003 0301 	and.w	r3, r3, #1
 80218b8:	613b      	str	r3, [r7, #16]
 80218ba:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80218bc:	2300      	movs	r3, #0
 80218be:	60fb      	str	r3, [r7, #12]
 80218c0:	4b22      	ldr	r3, [pc, #136]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218c4:	4a21      	ldr	r2, [pc, #132]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80218ca:	6313      	str	r3, [r2, #48]	; 0x30
 80218cc:	4b1f      	ldr	r3, [pc, #124]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80218d4:	60fb      	str	r3, [r7, #12]
 80218d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80218d8:	2300      	movs	r3, #0
 80218da:	60bb      	str	r3, [r7, #8]
 80218dc:	4b1b      	ldr	r3, [pc, #108]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218e0:	4a1a      	ldr	r2, [pc, #104]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218e2:	f043 0308 	orr.w	r3, r3, #8
 80218e6:	6313      	str	r3, [r2, #48]	; 0x30
 80218e8:	4b18      	ldr	r3, [pc, #96]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218ec:	f003 0308 	and.w	r3, r3, #8
 80218f0:	60bb      	str	r3, [r7, #8]
 80218f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80218f4:	2300      	movs	r3, #0
 80218f6:	607b      	str	r3, [r7, #4]
 80218f8:	4b14      	ldr	r3, [pc, #80]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218fc:	4a13      	ldr	r2, [pc, #76]	; (802194c <MX_GPIO_DeInit+0x140>)
 80218fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021902:	6313      	str	r3, [r2, #48]	; 0x30
 8021904:	4b11      	ldr	r3, [pc, #68]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802190c:	607b      	str	r3, [r7, #4]
 802190e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8021910:	2300      	movs	r3, #0
 8021912:	603b      	str	r3, [r7, #0]
 8021914:	4b0d      	ldr	r3, [pc, #52]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021918:	4a0c      	ldr	r2, [pc, #48]	; (802194c <MX_GPIO_DeInit+0x140>)
 802191a:	f043 0320 	orr.w	r3, r3, #32
 802191e:	6313      	str	r3, [r2, #48]	; 0x30
 8021920:	4b0a      	ldr	r3, [pc, #40]	; (802194c <MX_GPIO_DeInit+0x140>)
 8021922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021924:	f003 0320 	and.w	r3, r3, #32
 8021928:	603b      	str	r3, [r7, #0]
 802192a:	683b      	ldr	r3, [r7, #0]

}
 802192c:	bf00      	nop
 802192e:	3720      	adds	r7, #32
 8021930:	46bd      	mov	sp, r7
 8021932:	bd80      	pop	{r7, pc}
 8021934:	40020400 	.word	0x40020400
 8021938:	40020c00 	.word	0x40020c00
 802193c:	40021000 	.word	0x40021000
 8021940:	40021400 	.word	0x40021400
 8021944:	40021800 	.word	0x40021800
 8021948:	40021c00 	.word	0x40021c00
 802194c:	40023800 	.word	0x40023800

08021950 <draw_text>:
#include "st7565.h"
#include "graphics.h"
/*
 *
 */
bounding_box_t draw_text(char *string, unsigned char x, unsigned char y, unsigned char *font, unsigned char spacing,unsigned char inv) {
 8021950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021954:	b08a      	sub	sp, #40	; 0x28
 8021956:	af02      	add	r7, sp, #8
 8021958:	60f8      	str	r0, [r7, #12]
 802195a:	607b      	str	r3, [r7, #4]
 802195c:	460b      	mov	r3, r1
 802195e:	72fb      	strb	r3, [r7, #11]
 8021960:	4613      	mov	r3, r2
 8021962:	72bb      	strb	r3, [r7, #10]
	bounding_box_t ret;
	bounding_box_t tmp;

	ret.x1 = x;
 8021964:	7afb      	ldrb	r3, [r7, #11]
 8021966:	763b      	strb	r3, [r7, #24]
	ret.y1 = y;
 8021968:	7abb      	ldrb	r3, [r7, #10]
 802196a:	767b      	strb	r3, [r7, #25]
	draw_fill(x, y, x+text_width(string, font, spacing), y+text_height(string, font), inv);
 802196c:	7afd      	ldrb	r5, [r7, #11]
 802196e:	7abe      	ldrb	r6, [r7, #10]
 8021970:	7afc      	ldrb	r4, [r7, #11]
 8021972:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8021976:	461a      	mov	r2, r3
 8021978:	6879      	ldr	r1, [r7, #4]
 802197a:	68f8      	ldr	r0, [r7, #12]
 802197c:	f000 f917 	bl	8021bae <text_width>
 8021980:	4603      	mov	r3, r0
 8021982:	eb04 0803 	add.w	r8, r4, r3
 8021986:	7abc      	ldrb	r4, [r7, #10]
 8021988:	6879      	ldr	r1, [r7, #4]
 802198a:	68f8      	ldr	r0, [r7, #12]
 802198c:	f000 f902 	bl	8021b94 <text_height>
 8021990:	4603      	mov	r3, r0
 8021992:	18e2      	adds	r2, r4, r3
 8021994:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8021998:	9300      	str	r3, [sp, #0]
 802199a:	4613      	mov	r3, r2
 802199c:	4642      	mov	r2, r8
 802199e:	4631      	mov	r1, r6
 80219a0:	4628      	mov	r0, r5
 80219a2:	f000 f95e 	bl	8021c62 <draw_fill>

	spacing += 1;
 80219a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80219aa:	3301      	adds	r3, #1
 80219ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	// BUG: As we move right between chars we don't actually wipe the space
	while (*string != 0) {
 80219b0:	e012      	b.n	80219d8 <draw_text+0x88>
		tmp = draw_char(*string++, x, y, font,inv);
 80219b2:	68fb      	ldr	r3, [r7, #12]
 80219b4:	1c5a      	adds	r2, r3, #1
 80219b6:	60fa      	str	r2, [r7, #12]
 80219b8:	7818      	ldrb	r0, [r3, #0]
 80219ba:	7aba      	ldrb	r2, [r7, #10]
 80219bc:	7af9      	ldrb	r1, [r7, #11]
 80219be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80219c2:	9300      	str	r3, [sp, #0]
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	f000 f823 	bl	8021a10 <draw_char>
 80219ca:	4603      	mov	r3, r0
 80219cc:	617b      	str	r3, [r7, #20]

		// Leave a single space between characters
		x = tmp.x2 + spacing;
 80219ce:	7dba      	ldrb	r2, [r7, #22]
 80219d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80219d4:	4413      	add	r3, r2
 80219d6:	72fb      	strb	r3, [r7, #11]
	while (*string != 0) {
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	781b      	ldrb	r3, [r3, #0]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d1e8      	bne.n	80219b2 <draw_text+0x62>
	}

	ret.x2 = tmp.x2;
 80219e0:	7dbb      	ldrb	r3, [r7, #22]
 80219e2:	76bb      	strb	r3, [r7, #26]
	ret.y2 = tmp.y2;
 80219e4:	7dfb      	ldrb	r3, [r7, #23]
 80219e6:	76fb      	strb	r3, [r7, #27]

	return ret;
 80219e8:	69bb      	ldr	r3, [r7, #24]
 80219ea:	61fb      	str	r3, [r7, #28]
 80219ec:	2300      	movs	r3, #0
 80219ee:	7f3a      	ldrb	r2, [r7, #28]
 80219f0:	f362 0307 	bfi	r3, r2, #0, #8
 80219f4:	7f7a      	ldrb	r2, [r7, #29]
 80219f6:	f362 230f 	bfi	r3, r2, #8, #8
 80219fa:	7fba      	ldrb	r2, [r7, #30]
 80219fc:	f362 4317 	bfi	r3, r2, #16, #8
 8021a00:	7ffa      	ldrb	r2, [r7, #31]
 8021a02:	f362 631f 	bfi	r3, r2, #24, #8
}
 8021a06:	4618      	mov	r0, r3
 8021a08:	3720      	adds	r7, #32
 8021a0a:	46bd      	mov	sp, r7
 8021a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021a10 <draw_char>:
/*
 *
 */
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 8021a10:	b580      	push	{r7, lr}
 8021a12:	b086      	sub	sp, #24
 8021a14:	af00      	add	r7, sp, #0
 8021a16:	603b      	str	r3, [r7, #0]
 8021a18:	4603      	mov	r3, r0
 8021a1a:	71fb      	strb	r3, [r7, #7]
 8021a1c:	460b      	mov	r3, r1
 8021a1e:	71bb      	strb	r3, [r7, #6]
 8021a20:	4613      	mov	r3, r2
 8021a22:	717b      	strb	r3, [r7, #5]
	unsigned short pos;
	unsigned char width;
	bounding_box_t ret;

	ret.x1 = x;
 8021a24:	79bb      	ldrb	r3, [r7, #6]
 8021a26:	723b      	strb	r3, [r7, #8]
	ret.y1 = y;
 8021a28:	797b      	ldrb	r3, [r7, #5]
 8021a2a:	727b      	strb	r3, [r7, #9]
	ret.x2 = x;
 8021a2c:	79bb      	ldrb	r3, [r7, #6]
 8021a2e:	72bb      	strb	r3, [r7, #10]
	ret.y2 = y;
 8021a30:	797b      	ldrb	r3, [r7, #5]
 8021a32:	72fb      	strb	r3, [r7, #11]

	// Read first byte, should be 0x01 for proportional
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 8021a34:	683b      	ldr	r3, [r7, #0]
 8021a36:	781b      	ldrb	r3, [r3, #0]
 8021a38:	2b01      	cmp	r3, #1
 8021a3a:	d002      	beq.n	8021a42 <draw_char+0x32>
 8021a3c:	68bb      	ldr	r3, [r7, #8]
 8021a3e:	60fb      	str	r3, [r7, #12]
 8021a40:	e097      	b.n	8021b72 <draw_char+0x162>

	// Check second byte, should be 0x02 for "vertical ceiling"
	if (font[FONT_HEADER_ORIENTATION] != FONT_ORIENTATION_VERTICAL_CEILING) return ret;
 8021a42:	683b      	ldr	r3, [r7, #0]
 8021a44:	3301      	adds	r3, #1
 8021a46:	781b      	ldrb	r3, [r3, #0]
 8021a48:	2b02      	cmp	r3, #2
 8021a4a:	d002      	beq.n	8021a52 <draw_char+0x42>
 8021a4c:	68bb      	ldr	r3, [r7, #8]
 8021a4e:	60fb      	str	r3, [r7, #12]
 8021a50:	e08f      	b.n	8021b72 <draw_char+0x162>

	// Check that font start + number of bitmaps contains c
	if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return ret;
 8021a52:	683b      	ldr	r3, [r7, #0]
 8021a54:	3302      	adds	r3, #2
 8021a56:	781b      	ldrb	r3, [r3, #0]
 8021a58:	79fa      	ldrb	r2, [r7, #7]
 8021a5a:	429a      	cmp	r2, r3
 8021a5c:	d30a      	bcc.n	8021a74 <draw_char+0x64>
 8021a5e:	79fa      	ldrb	r2, [r7, #7]
 8021a60:	683b      	ldr	r3, [r7, #0]
 8021a62:	3302      	adds	r3, #2
 8021a64:	781b      	ldrb	r3, [r3, #0]
 8021a66:	4619      	mov	r1, r3
 8021a68:	683b      	ldr	r3, [r7, #0]
 8021a6a:	3303      	adds	r3, #3
 8021a6c:	781b      	ldrb	r3, [r3, #0]
 8021a6e:	440b      	add	r3, r1
 8021a70:	429a      	cmp	r2, r3
 8021a72:	dd02      	ble.n	8021a7a <draw_char+0x6a>
 8021a74:	68bb      	ldr	r3, [r7, #8]
 8021a76:	60fb      	str	r3, [r7, #12]
 8021a78:	e07b      	b.n	8021b72 <draw_char+0x162>

	// Adjust for start position of font vs. the char passed
	c -= font[FONT_HEADER_START];
 8021a7a:	683b      	ldr	r3, [r7, #0]
 8021a7c:	3302      	adds	r3, #2
 8021a7e:	781b      	ldrb	r3, [r3, #0]
 8021a80:	79fa      	ldrb	r2, [r7, #7]
 8021a82:	1ad3      	subs	r3, r2, r3
 8021a84:	71fb      	strb	r3, [r7, #7]

	// Work out where in the array the character is
	pos = font[c * FONT_HEADER_START + 5];
 8021a86:	79fb      	ldrb	r3, [r7, #7]
 8021a88:	005b      	lsls	r3, r3, #1
 8021a8a:	3305      	adds	r3, #5
 8021a8c:	683a      	ldr	r2, [r7, #0]
 8021a8e:	4413      	add	r3, r2
 8021a90:	781b      	ldrb	r3, [r3, #0]
 8021a92:	82fb      	strh	r3, [r7, #22]
	pos <<= 8;
 8021a94:	8afb      	ldrh	r3, [r7, #22]
 8021a96:	021b      	lsls	r3, r3, #8
 8021a98:	82fb      	strh	r3, [r7, #22]
	pos |= font[c * FONT_HEADER_START + 6];
 8021a9a:	79fb      	ldrb	r3, [r7, #7]
 8021a9c:	005b      	lsls	r3, r3, #1
 8021a9e:	3306      	adds	r3, #6
 8021aa0:	683a      	ldr	r2, [r7, #0]
 8021aa2:	4413      	add	r3, r2
 8021aa4:	781b      	ldrb	r3, [r3, #0]
 8021aa6:	b29a      	uxth	r2, r3
 8021aa8:	8afb      	ldrh	r3, [r7, #22]
 8021aaa:	4313      	orrs	r3, r2
 8021aac:	82fb      	strh	r3, [r7, #22]

	// Read first byte from this position, this gives letter width
	width = font[pos];
 8021aae:	8afb      	ldrh	r3, [r7, #22]
 8021ab0:	683a      	ldr	r2, [r7, #0]
 8021ab2:	4413      	add	r3, r2
 8021ab4:	781b      	ldrb	r3, [r3, #0]
 8021ab6:	74fb      	strb	r3, [r7, #19]

	// Draw left to right
	unsigned char i;
	for (i = 0; i < width; i++) {
 8021ab8:	2300      	movs	r3, #0
 8021aba:	757b      	strb	r3, [r7, #21]
 8021abc:	e045      	b.n	8021b4a <draw_char+0x13a>

		// Draw top to bottom
		for (unsigned char j = 0; j < font[FONT_HEADER_HEIGHT]; j++) {
 8021abe:	2300      	movs	r3, #0
 8021ac0:	753b      	strb	r3, [r7, #20]
 8021ac2:	e039      	b.n	8021b38 <draw_char+0x128>
			// Increment one data byte every 8 bits, or
			// at the start of a new column  HiTech optimizes
			// the modulo, so no need to try and avoid it.
			if (j % 8 == 0) pos++;
 8021ac4:	7d3b      	ldrb	r3, [r7, #20]
 8021ac6:	f003 0307 	and.w	r3, r3, #7
 8021aca:	b2db      	uxtb	r3, r3
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d102      	bne.n	8021ad6 <draw_char+0xc6>
 8021ad0:	8afb      	ldrh	r3, [r7, #22]
 8021ad2:	3301      	adds	r3, #1
 8021ad4:	82fb      	strh	r3, [r7, #22]

			if (font[pos] & 1 << (j % 8)) {
 8021ad6:	8afb      	ldrh	r3, [r7, #22]
 8021ad8:	683a      	ldr	r2, [r7, #0]
 8021ada:	4413      	add	r3, r2
 8021adc:	781b      	ldrb	r3, [r3, #0]
 8021ade:	461a      	mov	r2, r3
 8021ae0:	7d3b      	ldrb	r3, [r7, #20]
 8021ae2:	f003 0307 	and.w	r3, r3, #7
 8021ae6:	fa42 f303 	asr.w	r3, r2, r3
 8021aea:	f003 0301 	and.w	r3, r3, #1
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d012      	beq.n	8021b18 <draw_char+0x108>
				glcd_pixel(x + i, y + j, !inv);
 8021af2:	79ba      	ldrb	r2, [r7, #6]
 8021af4:	7d7b      	ldrb	r3, [r7, #21]
 8021af6:	4413      	add	r3, r2
 8021af8:	b2d8      	uxtb	r0, r3
 8021afa:	797a      	ldrb	r2, [r7, #5]
 8021afc:	7d3b      	ldrb	r3, [r7, #20]
 8021afe:	4413      	add	r3, r2
 8021b00:	b2d9      	uxtb	r1, r3
 8021b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	bf0c      	ite	eq
 8021b0a:	2301      	moveq	r3, #1
 8021b0c:	2300      	movne	r3, #0
 8021b0e:	b2db      	uxtb	r3, r3
 8021b10:	461a      	mov	r2, r3
 8021b12:	f000 fe85 	bl	8022820 <glcd_pixel>
 8021b16:	e00c      	b.n	8021b32 <draw_char+0x122>
			} else {
				glcd_pixel(x + i, y + j, inv);
 8021b18:	79ba      	ldrb	r2, [r7, #6]
 8021b1a:	7d7b      	ldrb	r3, [r7, #21]
 8021b1c:	4413      	add	r3, r2
 8021b1e:	b2d8      	uxtb	r0, r3
 8021b20:	797a      	ldrb	r2, [r7, #5]
 8021b22:	7d3b      	ldrb	r3, [r7, #20]
 8021b24:	4413      	add	r3, r2
 8021b26:	b2db      	uxtb	r3, r3
 8021b28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8021b2c:	4619      	mov	r1, r3
 8021b2e:	f000 fe77 	bl	8022820 <glcd_pixel>
		for (unsigned char j = 0; j < font[FONT_HEADER_HEIGHT]; j++) {
 8021b32:	7d3b      	ldrb	r3, [r7, #20]
 8021b34:	3301      	adds	r3, #1
 8021b36:	753b      	strb	r3, [r7, #20]
 8021b38:	683b      	ldr	r3, [r7, #0]
 8021b3a:	3304      	adds	r3, #4
 8021b3c:	781b      	ldrb	r3, [r3, #0]
 8021b3e:	7d3a      	ldrb	r2, [r7, #20]
 8021b40:	429a      	cmp	r2, r3
 8021b42:	d3bf      	bcc.n	8021ac4 <draw_char+0xb4>
	for (i = 0; i < width; i++) {
 8021b44:	7d7b      	ldrb	r3, [r7, #21]
 8021b46:	3301      	adds	r3, #1
 8021b48:	757b      	strb	r3, [r7, #21]
 8021b4a:	7d7a      	ldrb	r2, [r7, #21]
 8021b4c:	7cfb      	ldrb	r3, [r7, #19]
 8021b4e:	429a      	cmp	r2, r3
 8021b50:	d3b5      	bcc.n	8021abe <draw_char+0xae>
			}
		}
	}

	ret.x2 = ret.x1 + width - 1;
 8021b52:	7a3a      	ldrb	r2, [r7, #8]
 8021b54:	7cfb      	ldrb	r3, [r7, #19]
 8021b56:	4413      	add	r3, r2
 8021b58:	b2db      	uxtb	r3, r3
 8021b5a:	3b01      	subs	r3, #1
 8021b5c:	b2db      	uxtb	r3, r3
 8021b5e:	72bb      	strb	r3, [r7, #10]
	// TODO: Return the actual height drawn, rather than the height of the
	//		 font.
	//ret.y2 = ret.y1 + height;
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];
 8021b60:	7a7a      	ldrb	r2, [r7, #9]
 8021b62:	683b      	ldr	r3, [r7, #0]
 8021b64:	3304      	adds	r3, #4
 8021b66:	781b      	ldrb	r3, [r3, #0]
 8021b68:	4413      	add	r3, r2
 8021b6a:	b2db      	uxtb	r3, r3
 8021b6c:	72fb      	strb	r3, [r7, #11]

	return ret;
 8021b6e:	68bb      	ldr	r3, [r7, #8]
 8021b70:	60fb      	str	r3, [r7, #12]
 8021b72:	2300      	movs	r3, #0
 8021b74:	7b3a      	ldrb	r2, [r7, #12]
 8021b76:	f362 0307 	bfi	r3, r2, #0, #8
 8021b7a:	7b7a      	ldrb	r2, [r7, #13]
 8021b7c:	f362 230f 	bfi	r3, r2, #8, #8
 8021b80:	7bba      	ldrb	r2, [r7, #14]
 8021b82:	f362 4317 	bfi	r3, r2, #16, #8
 8021b86:	7bfa      	ldrb	r2, [r7, #15]
 8021b88:	f362 631f 	bfi	r3, r2, #24, #8
}
 8021b8c:	4618      	mov	r0, r3
 8021b8e:	3718      	adds	r7, #24
 8021b90:	46bd      	mov	sp, r7
 8021b92:	bd80      	pop	{r7, pc}

08021b94 <text_height>:
/*
 *
 */
unsigned char text_height(unsigned char *string, unsigned char *font) {
 8021b94:	b480      	push	{r7}
 8021b96:	b083      	sub	sp, #12
 8021b98:	af00      	add	r7, sp, #0
 8021b9a:	6078      	str	r0, [r7, #4]
 8021b9c:	6039      	str	r1, [r7, #0]
	// TODO: Possibly work out the actual pixel height.  Letters with
	//       descenders (like 'g') are taller than letters without (like 'k')

	// Height is stored in the header
	return font[FONT_HEADER_HEIGHT];
 8021b9e:	683b      	ldr	r3, [r7, #0]
 8021ba0:	791b      	ldrb	r3, [r3, #4]
}
 8021ba2:	4618      	mov	r0, r3
 8021ba4:	370c      	adds	r7, #12
 8021ba6:	46bd      	mov	sp, r7
 8021ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bac:	4770      	bx	lr

08021bae <text_width>:
/*
 *
 */
unsigned char text_width(unsigned char *string, unsigned char *font, unsigned char spacing) {
 8021bae:	b480      	push	{r7}
 8021bb0:	b087      	sub	sp, #28
 8021bb2:	af00      	add	r7, sp, #0
 8021bb4:	60f8      	str	r0, [r7, #12]
 8021bb6:	60b9      	str	r1, [r7, #8]
 8021bb8:	4613      	mov	r3, r2
 8021bba:	71fb      	strb	r3, [r7, #7]
	unsigned char width = 0;
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	75fb      	strb	r3, [r7, #23]
	unsigned char c;

	// TODO: Implement for fixed width fonts

	// Check font type, should be 0x01 for proportional
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 8021bc0:	68bb      	ldr	r3, [r7, #8]
 8021bc2:	781b      	ldrb	r3, [r3, #0]
 8021bc4:	2b01      	cmp	r3, #1
 8021bc6:	d03e      	beq.n	8021c46 <text_width+0x98>
 8021bc8:	2300      	movs	r3, #0
 8021bca:	e044      	b.n	8021c56 <text_width+0xa8>

	while (*string != 0) {
		c = *string++;
 8021bcc:	68fb      	ldr	r3, [r7, #12]
 8021bce:	1c5a      	adds	r2, r3, #1
 8021bd0:	60fa      	str	r2, [r7, #12]
 8021bd2:	781b      	ldrb	r3, [r3, #0]
 8021bd4:	75bb      	strb	r3, [r7, #22]

		// Check that font start + number of bitmaps contains c
		// TODO: Should we continue here but add 0 to width?
		if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return 0;
 8021bd6:	68bb      	ldr	r3, [r7, #8]
 8021bd8:	3302      	adds	r3, #2
 8021bda:	781b      	ldrb	r3, [r3, #0]
 8021bdc:	7dba      	ldrb	r2, [r7, #22]
 8021bde:	429a      	cmp	r2, r3
 8021be0:	d30a      	bcc.n	8021bf8 <text_width+0x4a>
 8021be2:	7dba      	ldrb	r2, [r7, #22]
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	3302      	adds	r3, #2
 8021be8:	781b      	ldrb	r3, [r3, #0]
 8021bea:	4619      	mov	r1, r3
 8021bec:	68bb      	ldr	r3, [r7, #8]
 8021bee:	3303      	adds	r3, #3
 8021bf0:	781b      	ldrb	r3, [r3, #0]
 8021bf2:	440b      	add	r3, r1
 8021bf4:	429a      	cmp	r2, r3
 8021bf6:	dd01      	ble.n	8021bfc <text_width+0x4e>
 8021bf8:	2300      	movs	r3, #0
 8021bfa:	e02c      	b.n	8021c56 <text_width+0xa8>

		// Adjust for start position of font vs. the char passed
		c -= font[FONT_HEADER_START];
 8021bfc:	68bb      	ldr	r3, [r7, #8]
 8021bfe:	3302      	adds	r3, #2
 8021c00:	781b      	ldrb	r3, [r3, #0]
 8021c02:	7dba      	ldrb	r2, [r7, #22]
 8021c04:	1ad3      	subs	r3, r2, r3
 8021c06:	75bb      	strb	r3, [r7, #22]

		// Work out where in the array the character is
		pos = font[c * FONT_HEADER_START + 5];
 8021c08:	7dbb      	ldrb	r3, [r7, #22]
 8021c0a:	005b      	lsls	r3, r3, #1
 8021c0c:	3305      	adds	r3, #5
 8021c0e:	68ba      	ldr	r2, [r7, #8]
 8021c10:	4413      	add	r3, r2
 8021c12:	781b      	ldrb	r3, [r3, #0]
 8021c14:	82bb      	strh	r3, [r7, #20]
		pos <<= 8;
 8021c16:	8abb      	ldrh	r3, [r7, #20]
 8021c18:	021b      	lsls	r3, r3, #8
 8021c1a:	82bb      	strh	r3, [r7, #20]
		pos |= font[c * FONT_HEADER_START + 6];
 8021c1c:	7dbb      	ldrb	r3, [r7, #22]
 8021c1e:	005b      	lsls	r3, r3, #1
 8021c20:	3306      	adds	r3, #6
 8021c22:	68ba      	ldr	r2, [r7, #8]
 8021c24:	4413      	add	r3, r2
 8021c26:	781b      	ldrb	r3, [r3, #0]
 8021c28:	b29a      	uxth	r2, r3
 8021c2a:	8abb      	ldrh	r3, [r7, #20]
 8021c2c:	4313      	orrs	r3, r2
 8021c2e:	82bb      	strh	r3, [r7, #20]

		// Read first byte from this position, this gives letter width
		width += font[pos];
 8021c30:	8abb      	ldrh	r3, [r7, #20]
 8021c32:	68ba      	ldr	r2, [r7, #8]
 8021c34:	4413      	add	r3, r2
 8021c36:	781a      	ldrb	r2, [r3, #0]
 8021c38:	7dfb      	ldrb	r3, [r7, #23]
 8021c3a:	4413      	add	r3, r2
 8021c3c:	75fb      	strb	r3, [r7, #23]

		// Allow for space between letters
		width += spacing;
 8021c3e:	7dfa      	ldrb	r2, [r7, #23]
 8021c40:	79fb      	ldrb	r3, [r7, #7]
 8021c42:	4413      	add	r3, r2
 8021c44:	75fb      	strb	r3, [r7, #23]
	while (*string != 0) {
 8021c46:	68fb      	ldr	r3, [r7, #12]
 8021c48:	781b      	ldrb	r3, [r3, #0]
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d1be      	bne.n	8021bcc <text_width+0x1e>
	}

	// The last letter wont have a space after it
	return width - spacing;
 8021c4e:	7dfa      	ldrb	r2, [r7, #23]
 8021c50:	79fb      	ldrb	r3, [r7, #7]
 8021c52:	1ad3      	subs	r3, r2, r3
 8021c54:	b2db      	uxtb	r3, r3
}
 8021c56:	4618      	mov	r0, r3
 8021c58:	371c      	adds	r7, #28
 8021c5a:	46bd      	mov	sp, r7
 8021c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c60:	4770      	bx	lr

08021c62 <draw_fill>:
}
/*
 *
 */
void draw_fill(int x1, int y1, int x2, int y2, char colour)
{
 8021c62:	b580      	push	{r7, lr}
 8021c64:	b088      	sub	sp, #32
 8021c66:	af02      	add	r7, sp, #8
 8021c68:	60f8      	str	r0, [r7, #12]
 8021c6a:	60b9      	str	r1, [r7, #8]
 8021c6c:	607a      	str	r2, [r7, #4]
 8021c6e:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<y2;i++)
 8021c70:	68bb      	ldr	r3, [r7, #8]
 8021c72:	617b      	str	r3, [r7, #20]
 8021c74:	e00b      	b.n	8021c8e <draw_fill+0x2c>
		draw_line(x1, i, x2,i, colour);
 8021c76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021c7a:	9300      	str	r3, [sp, #0]
 8021c7c:	697b      	ldr	r3, [r7, #20]
 8021c7e:	687a      	ldr	r2, [r7, #4]
 8021c80:	6979      	ldr	r1, [r7, #20]
 8021c82:	68f8      	ldr	r0, [r7, #12]
 8021c84:	f000 f80b 	bl	8021c9e <draw_line>
	for(int i=y1;i<y2;i++)
 8021c88:	697b      	ldr	r3, [r7, #20]
 8021c8a:	3301      	adds	r3, #1
 8021c8c:	617b      	str	r3, [r7, #20]
 8021c8e:	697a      	ldr	r2, [r7, #20]
 8021c90:	683b      	ldr	r3, [r7, #0]
 8021c92:	429a      	cmp	r2, r3
 8021c94:	dbef      	blt.n	8021c76 <draw_fill+0x14>
}
 8021c96:	bf00      	nop
 8021c98:	3718      	adds	r7, #24
 8021c9a:	46bd      	mov	sp, r7
 8021c9c:	bd80      	pop	{r7, pc}

08021c9e <draw_line>:
// Implementation of Bresenham's line algorithm
//
// This code credit Tom Ootjers, originally obtained from:
// http://tinyurl.com/czok7vx
void draw_line(int x1, int y1, int x2, int y2, char colour)
{
 8021c9e:	b580      	push	{r7, lr}
 8021ca0:	b092      	sub	sp, #72	; 0x48
 8021ca2:	af00      	add	r7, sp, #0
 8021ca4:	60f8      	str	r0, [r7, #12]
 8021ca6:	60b9      	str	r1, [r7, #8]
 8021ca8:	607a      	str	r2, [r7, #4]
 8021caa:	603b      	str	r3, [r7, #0]
	int xinc1, yinc1, den, num, numadd, numpixels, curpixel, xinc2, yinc2;

	int deltax = abs(x2 - x1);    	// The difference between the x's
 8021cac:	687a      	ldr	r2, [r7, #4]
 8021cae:	68fb      	ldr	r3, [r7, #12]
 8021cb0:	1ad3      	subs	r3, r2, r3
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	bfb8      	it	lt
 8021cb6:	425b      	neglt	r3, r3
 8021cb8:	61bb      	str	r3, [r7, #24]
	int deltay = abs(y2 - y1);    	// The difference between the y's
 8021cba:	683a      	ldr	r2, [r7, #0]
 8021cbc:	68bb      	ldr	r3, [r7, #8]
 8021cbe:	1ad3      	subs	r3, r2, r3
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	bfb8      	it	lt
 8021cc4:	425b      	neglt	r3, r3
 8021cc6:	617b      	str	r3, [r7, #20]
	int x = x1;                   	// Start x off at the first pixel
 8021cc8:	68fb      	ldr	r3, [r7, #12]
 8021cca:	623b      	str	r3, [r7, #32]
	int y = y1;                   	// Start y off at the first pixel
 8021ccc:	68bb      	ldr	r3, [r7, #8]
 8021cce:	61fb      	str	r3, [r7, #28]

	if (x2 >= x1) {             	// The x-values are increasing
 8021cd0:	687a      	ldr	r2, [r7, #4]
 8021cd2:	68fb      	ldr	r3, [r7, #12]
 8021cd4:	429a      	cmp	r2, r3
 8021cd6:	db04      	blt.n	8021ce2 <draw_line+0x44>
	  xinc1 = 1;
 8021cd8:	2301      	movs	r3, #1
 8021cda:	647b      	str	r3, [r7, #68]	; 0x44
	  xinc2 = 1;
 8021cdc:	2301      	movs	r3, #1
 8021cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8021ce0:	e005      	b.n	8021cee <draw_line+0x50>

    } else {          	         	// The x-values are decreasing
	  xinc1 = -1;
 8021ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8021ce6:	647b      	str	r3, [r7, #68]	; 0x44
	  xinc2 = -1;
 8021ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8021cec:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	if (y2 >= y1)       	      	// The y-values are increasing
 8021cee:	683a      	ldr	r2, [r7, #0]
 8021cf0:	68bb      	ldr	r3, [r7, #8]
 8021cf2:	429a      	cmp	r2, r3
 8021cf4:	db04      	blt.n	8021d00 <draw_line+0x62>
	{
	  yinc1 = 1;
 8021cf6:	2301      	movs	r3, #1
 8021cf8:	643b      	str	r3, [r7, #64]	; 0x40
	  yinc2 = 1;
 8021cfa:	2301      	movs	r3, #1
 8021cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8021cfe:	e005      	b.n	8021d0c <draw_line+0x6e>
	}
	else                    	  	// The y-values are decreasing
	{
	  yinc1 = -1;
 8021d00:	f04f 33ff 	mov.w	r3, #4294967295
 8021d04:	643b      	str	r3, [r7, #64]	; 0x40
	  yinc2 = -1;
 8021d06:	f04f 33ff 	mov.w	r3, #4294967295
 8021d0a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (deltax >= deltay)     		// There is at least one x-value for every y-value
 8021d0c:	69ba      	ldr	r2, [r7, #24]
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	429a      	cmp	r2, r3
 8021d12:	db0f      	blt.n	8021d34 <draw_line+0x96>
	{
	  xinc1 = 0;              		// Don't change the x when numerator >= denominator
 8021d14:	2300      	movs	r3, #0
 8021d16:	647b      	str	r3, [r7, #68]	; 0x44
	  yinc2 = 0;              		// Don't change the y for every iteration
 8021d18:	2300      	movs	r3, #0
 8021d1a:	627b      	str	r3, [r7, #36]	; 0x24
	  den = deltax;
 8021d1c:	69bb      	ldr	r3, [r7, #24]
 8021d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  num = deltax / 2;
 8021d20:	69bb      	ldr	r3, [r7, #24]
 8021d22:	0fda      	lsrs	r2, r3, #31
 8021d24:	4413      	add	r3, r2
 8021d26:	105b      	asrs	r3, r3, #1
 8021d28:	63bb      	str	r3, [r7, #56]	; 0x38
	  numadd = deltay;
 8021d2a:	697b      	ldr	r3, [r7, #20]
 8021d2c:	637b      	str	r3, [r7, #52]	; 0x34
	  numpixels = deltax;     		// There are more x-values than y-values
 8021d2e:	69bb      	ldr	r3, [r7, #24]
 8021d30:	633b      	str	r3, [r7, #48]	; 0x30
 8021d32:	e00e      	b.n	8021d52 <draw_line+0xb4>
	}
	else                      		// There is at least one y-value for every x-value
	{
	  xinc2 = 0;              		// Don't change the x for every iteration
 8021d34:	2300      	movs	r3, #0
 8021d36:	62bb      	str	r3, [r7, #40]	; 0x28
	  yinc1 = 0;              		// Don't change the y when numerator >= denominator
 8021d38:	2300      	movs	r3, #0
 8021d3a:	643b      	str	r3, [r7, #64]	; 0x40
	  den = deltay;
 8021d3c:	697b      	ldr	r3, [r7, #20]
 8021d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  num = deltay / 2;
 8021d40:	697b      	ldr	r3, [r7, #20]
 8021d42:	0fda      	lsrs	r2, r3, #31
 8021d44:	4413      	add	r3, r2
 8021d46:	105b      	asrs	r3, r3, #1
 8021d48:	63bb      	str	r3, [r7, #56]	; 0x38
	  numadd = deltax;
 8021d4a:	69bb      	ldr	r3, [r7, #24]
 8021d4c:	637b      	str	r3, [r7, #52]	; 0x34
	  numpixels = deltay;     		// There are more y-values than x-values
 8021d4e:	697b      	ldr	r3, [r7, #20]
 8021d50:	633b      	str	r3, [r7, #48]	; 0x30
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8021d52:	2300      	movs	r3, #0
 8021d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021d56:	e027      	b.n	8021da8 <draw_line+0x10a>
	{
	  glcd_pixel(x, y, colour);    	// Draw the current pixel
 8021d58:	6a3b      	ldr	r3, [r7, #32]
 8021d5a:	b2db      	uxtb	r3, r3
 8021d5c:	69fa      	ldr	r2, [r7, #28]
 8021d5e:	b2d1      	uxtb	r1, r2
 8021d60:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8021d64:	4618      	mov	r0, r3
 8021d66:	f000 fd5b 	bl	8022820 <glcd_pixel>
	  num += numadd;          		// Increase the numerator by the top of the fraction
 8021d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021d6e:	4413      	add	r3, r2
 8021d70:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (num >= den)         		// Check if numerator >= denominator
 8021d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021d76:	429a      	cmp	r2, r3
 8021d78:	db0b      	blt.n	8021d92 <draw_line+0xf4>
	  {
		num -= den;           		// Calculate the new numerator value
 8021d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021d7e:	1ad3      	subs	r3, r2, r3
 8021d80:	63bb      	str	r3, [r7, #56]	; 0x38
		x += xinc1;           		// Change the x as appropriate
 8021d82:	6a3a      	ldr	r2, [r7, #32]
 8021d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021d86:	4413      	add	r3, r2
 8021d88:	623b      	str	r3, [r7, #32]
		y += yinc1;           		// Change the y as appropriate
 8021d8a:	69fa      	ldr	r2, [r7, #28]
 8021d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021d8e:	4413      	add	r3, r2
 8021d90:	61fb      	str	r3, [r7, #28]
	  }
	  x += xinc2;             		// Change the x as appropriate
 8021d92:	6a3a      	ldr	r2, [r7, #32]
 8021d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d96:	4413      	add	r3, r2
 8021d98:	623b      	str	r3, [r7, #32]
	  y += yinc2;             		// Change the y as appropriate
 8021d9a:	69fa      	ldr	r2, [r7, #28]
 8021d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d9e:	4413      	add	r3, r2
 8021da0:	61fb      	str	r3, [r7, #28]
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8021da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021da4:	3301      	adds	r3, #1
 8021da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dac:	429a      	cmp	r2, r3
 8021dae:	ddd3      	ble.n	8021d58 <draw_line+0xba>
	}
}
 8021db0:	bf00      	nop
 8021db2:	3748      	adds	r7, #72	; 0x48
 8021db4:	46bd      	mov	sp, r7
 8021db6:	bd80      	pop	{r7, pc}

08021db8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8021db8:	b580      	push	{r7, lr}
 8021dba:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8021dbc:	4b12      	ldr	r3, [pc, #72]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dbe:	4a13      	ldr	r2, [pc, #76]	; (8021e0c <MX_I2C3_Init+0x54>)
 8021dc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8021dc2:	4b11      	ldr	r3, [pc, #68]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dc4:	4a12      	ldr	r2, [pc, #72]	; (8021e10 <MX_I2C3_Init+0x58>)
 8021dc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8021dc8:	4b0f      	ldr	r3, [pc, #60]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dca:	2200      	movs	r2, #0
 8021dcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8021dce:	4b0e      	ldr	r3, [pc, #56]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dd0:	2200      	movs	r2, #0
 8021dd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021dd4:	4b0c      	ldr	r3, [pc, #48]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021dda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021ddc:	4b0a      	ldr	r3, [pc, #40]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dde:	2200      	movs	r2, #0
 8021de0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8021de2:	4b09      	ldr	r3, [pc, #36]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021de4:	2200      	movs	r2, #0
 8021de6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021de8:	4b07      	ldr	r3, [pc, #28]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021dea:	2200      	movs	r2, #0
 8021dec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021dee:	4b06      	ldr	r3, [pc, #24]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021df0:	2200      	movs	r2, #0
 8021df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8021df4:	4804      	ldr	r0, [pc, #16]	; (8021e08 <MX_I2C3_Init+0x50>)
 8021df6:	f004 fadd 	bl	80263b4 <HAL_I2C_Init>
 8021dfa:	4603      	mov	r3, r0
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d001      	beq.n	8021e04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8021e00:	f000 f9d8 	bl	80221b4 <Error_Handler>
  }

}
 8021e04:	bf00      	nop
 8021e06:	bd80      	pop	{r7, pc}
 8021e08:	200013d0 	.word	0x200013d0
 8021e0c:	40005c00 	.word	0x40005c00
 8021e10:	000186a0 	.word	0x000186a0

08021e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8021e14:	b580      	push	{r7, lr}
 8021e16:	b08a      	sub	sp, #40	; 0x28
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021e1c:	f107 0314 	add.w	r3, r7, #20
 8021e20:	2200      	movs	r2, #0
 8021e22:	601a      	str	r2, [r3, #0]
 8021e24:	605a      	str	r2, [r3, #4]
 8021e26:	609a      	str	r2, [r3, #8]
 8021e28:	60da      	str	r2, [r3, #12]
 8021e2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	4a19      	ldr	r2, [pc, #100]	; (8021e98 <HAL_I2C_MspInit+0x84>)
 8021e32:	4293      	cmp	r3, r2
 8021e34:	d12c      	bne.n	8021e90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8021e36:	2300      	movs	r3, #0
 8021e38:	613b      	str	r3, [r7, #16]
 8021e3a:	4b18      	ldr	r3, [pc, #96]	; (8021e9c <HAL_I2C_MspInit+0x88>)
 8021e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e3e:	4a17      	ldr	r2, [pc, #92]	; (8021e9c <HAL_I2C_MspInit+0x88>)
 8021e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021e44:	6313      	str	r3, [r2, #48]	; 0x30
 8021e46:	4b15      	ldr	r3, [pc, #84]	; (8021e9c <HAL_I2C_MspInit+0x88>)
 8021e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021e4e:	613b      	str	r3, [r7, #16]
 8021e50:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH8     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8021e52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8021e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021e58:	2312      	movs	r3, #18
 8021e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021e5c:	2301      	movs	r3, #1
 8021e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e60:	2303      	movs	r3, #3
 8021e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021e64:	2304      	movs	r3, #4
 8021e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8021e68:	f107 0314 	add.w	r3, r7, #20
 8021e6c:	4619      	mov	r1, r3
 8021e6e:	480c      	ldr	r0, [pc, #48]	; (8021ea0 <HAL_I2C_MspInit+0x8c>)
 8021e70:	f002 faea 	bl	8024448 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021e74:	2300      	movs	r3, #0
 8021e76:	60fb      	str	r3, [r7, #12]
 8021e78:	4b08      	ldr	r3, [pc, #32]	; (8021e9c <HAL_I2C_MspInit+0x88>)
 8021e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e7c:	4a07      	ldr	r2, [pc, #28]	; (8021e9c <HAL_I2C_MspInit+0x88>)
 8021e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021e82:	6413      	str	r3, [r2, #64]	; 0x40
 8021e84:	4b05      	ldr	r3, [pc, #20]	; (8021e9c <HAL_I2C_MspInit+0x88>)
 8021e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021e8c:	60fb      	str	r3, [r7, #12]
 8021e8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8021e90:	bf00      	nop
 8021e92:	3728      	adds	r7, #40	; 0x28
 8021e94:	46bd      	mov	sp, r7
 8021e96:	bd80      	pop	{r7, pc}
 8021e98:	40005c00 	.word	0x40005c00
 8021e9c:	40023800 	.word	0x40023800
 8021ea0:	40021c00 	.word	0x40021c00

08021ea4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8021ea8:	4b09      	ldr	r3, [pc, #36]	; (8021ed0 <MX_IWDG_Init+0x2c>)
 8021eaa:	4a0a      	ldr	r2, [pc, #40]	; (8021ed4 <MX_IWDG_Init+0x30>)
 8021eac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8021eae:	4b08      	ldr	r3, [pc, #32]	; (8021ed0 <MX_IWDG_Init+0x2c>)
 8021eb0:	2206      	movs	r2, #6
 8021eb2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8021eb4:	4b06      	ldr	r3, [pc, #24]	; (8021ed0 <MX_IWDG_Init+0x2c>)
 8021eb6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8021eba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8021ebc:	4804      	ldr	r0, [pc, #16]	; (8021ed0 <MX_IWDG_Init+0x2c>)
 8021ebe:	f004 fbb1 	bl	8026624 <HAL_IWDG_Init>
 8021ec2:	4603      	mov	r3, r0
 8021ec4:	2b00      	cmp	r3, #0
 8021ec6:	d001      	beq.n	8021ecc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8021ec8:	f000 f974 	bl	80221b4 <Error_Handler>
  }

}
 8021ecc:	bf00      	nop
 8021ece:	bd80      	pop	{r7, pc}
 8021ed0:	20001424 	.word	0x20001424
 8021ed4:	40003000 	.word	0x40003000

08021ed8 <Peripherials_DeInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Peripherials_DeInit(void) {
 8021ed8:	b580      	push	{r7, lr}
 8021eda:	af00      	add	r7, sp, #0
//	BSP_SD_DeInit();
//	FATFS_DeInit();
	MX_FATFS_DeInit();
 8021edc:	f00c fb5e 	bl	802e59c <MX_FATFS_DeInit>
	HAL_UART_DeInit(&huart2);HAL_UART_MspDeInit(&huart2);
 8021ee0:	480c      	ldr	r0, [pc, #48]	; (8021f14 <Peripherials_DeInit+0x3c>)
 8021ee2:	f008 fdd0 	bl	802aa86 <HAL_UART_DeInit>
 8021ee6:	480b      	ldr	r0, [pc, #44]	; (8021f14 <Peripherials_DeInit+0x3c>)
 8021ee8:	f001 f9ea 	bl	80232c0 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart3);HAL_UART_MspDeInit(&huart3);
 8021eec:	480a      	ldr	r0, [pc, #40]	; (8021f18 <Peripherials_DeInit+0x40>)
 8021eee:	f008 fdca 	bl	802aa86 <HAL_UART_DeInit>
 8021ef2:	4809      	ldr	r0, [pc, #36]	; (8021f18 <Peripherials_DeInit+0x40>)
 8021ef4:	f001 f9e4 	bl	80232c0 <HAL_UART_MspDeInit>
	BSP_SD_DeInit();
 8021ef8:	f00c fc02 	bl	802e700 <BSP_SD_DeInit>
	MX_USB_HOST_DeInit();
 8021efc:	f012 fb2e 	bl	803455c <MX_USB_HOST_DeInit>
	MX_GPIO_DeInit();
 8021f00:	f7ff fc84 	bl	802180c <MX_GPIO_DeInit>
	__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8021f04:	4b05      	ldr	r3, [pc, #20]	; (8021f1c <Peripherials_DeInit+0x44>)
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8021f0c:	601a      	str	r2, [r3, #0]
}
 8021f0e:	bf00      	nop
 8021f10:	bd80      	pop	{r7, pc}
 8021f12:	bf00      	nop
 8021f14:	20001660 	.word	0x20001660
 8021f18:	20001620 	.word	0x20001620
 8021f1c:	20001424 	.word	0x20001424

08021f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021f20:	b580      	push	{r7, lr}
 8021f22:	b09e      	sub	sp, #120	; 0x78
 8021f24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8021f26:	f001 fa2d 	bl	8023384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8021f2a:	f000 f8ad 	bl	8022088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8021f2e:	f7ff fb5b 	bl	80215e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8021f32:	f7fe ffef 	bl	8020f14 <MX_DMA_Init>
  MX_I2C3_Init();
 8021f36:	f7ff ff3f 	bl	8021db8 <MX_I2C3_Init>
  MX_TIM4_Init();
 8021f3a:	f001 f80d 	bl	8022f58 <MX_TIM4_Init>
  MX_RTC_Init();
 8021f3e:	f000 fa03 	bl	8022348 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8021f42:	f000 fa71 	bl	8022428 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8021f46:	f00c fb09 	bl	802e55c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8021f4a:	f011 fe1f 	bl	8033b8c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8021f4e:	f001 f8d5 	bl	80230fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8021f52:	f001 f8fd 	bl	8023150 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 8021f56:	f012 fb0d 	bl	8034574 <MX_USB_HOST_Init>
  MX_CRC_Init();
 8021f5a:	f7fe ffa5 	bl	8020ea8 <MX_CRC_Init>
  MX_IWDG_Init();
 8021f5e:	f7ff ffa1 	bl	8021ea4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	RetargetInit(&huart3);
 8021f62:	483e      	ldr	r0, [pc, #248]	; (802205c <main+0x13c>)
 8021f64:	f000 f92a 	bl	80221bc <RetargetInit>
	/////////////////////////////////////////
	HAL_Delay(1000);
 8021f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021f6c:	f001 fa4c 	bl	8023408 <HAL_Delay>
	//////////////////////init LCD

	glcd_init(128,64);
 8021f70:	2140      	movs	r1, #64	; 0x40
 8021f72:	2080      	movs	r0, #128	; 0x80
 8021f74:	f000 fdda 	bl	8022b2c <glcd_init>
	glcd_flip_screen(XLR_YTB);
 8021f78:	2000      	movs	r0, #0
 8021f7a:	f000 fe4b 	bl	8022c14 <glcd_flip_screen>
	HAL_Delay(2000);
 8021f7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8021f82:	f001 fa41 	bl	8023408 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char tmpstr[100];
	uint8_t counter=0;
 8021f86:	2300      	movs	r3, #0
 8021f88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint16_t Data;
	 printf("Start application.%x\n\r",sharedmem);
 8021f8c:	4b34      	ldr	r3, [pc, #208]	; (8022060 <main+0x140>)
 8021f8e:	681b      	ldr	r3, [r3, #0]
 8021f90:	4619      	mov	r1, r3
 8021f92:	4834      	ldr	r0, [pc, #208]	; (8022064 <main+0x144>)
 8021f94:	f013 fb74 	bl	8035680 <iprintf>
	 HAL_FLASH_Unlock();
 8021f98:	f001 ffd4 	bl	8023f44 <HAL_FLASH_Unlock>
	 EE_Init();
 8021f9c:	f7fe ffe2 	bl	8020f64 <EE_Init>
	 EE_ReadVariable(VirtAddVarTab[0], &Data);
 8021fa0:	4b31      	ldr	r3, [pc, #196]	; (8022068 <main+0x148>)
 8021fa2:	881b      	ldrh	r3, [r3, #0]
 8021fa4:	1dba      	adds	r2, r7, #6
 8021fa6:	4611      	mov	r1, r2
 8021fa8:	4618      	mov	r0, r3
 8021faa:	f7ff f9dd 	bl	8021368 <EE_ReadVariable>
	 HAL_FLASH_Lock();
 8021fae:	f001 ffeb 	bl	8023f88 <HAL_FLASH_Lock>
	 printf("Application version:%d\n\r",Data);
 8021fb2:	88fb      	ldrh	r3, [r7, #6]
 8021fb4:	4619      	mov	r1, r3
 8021fb6:	482d      	ldr	r0, [pc, #180]	; (802206c <main+0x14c>)
 8021fb8:	f013 fb62 	bl	8035680 <iprintf>
	while (1)
  {
		HAL_IWDG_Refresh(&hiwdg);
 8021fbc:	482c      	ldr	r0, [pc, #176]	; (8022070 <main+0x150>)
 8021fbe:	f004 fb6a 	bl	8026696 <HAL_IWDG_Refresh>
		printf("Start application%d",counter);
 8021fc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8021fc6:	4619      	mov	r1, r3
 8021fc8:	482a      	ldr	r0, [pc, #168]	; (8022074 <main+0x154>)
 8021fca:	f013 fb59 	bl	8035680 <iprintf>
	 sprintf(tmpstr,"Start application%d",counter++);
 8021fce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8021fd2:	1c5a      	adds	r2, r3, #1
 8021fd4:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8021fd8:	461a      	mov	r2, r3
 8021fda:	f107 0308 	add.w	r3, r7, #8
 8021fde:	4925      	ldr	r1, [pc, #148]	; (8022074 <main+0x154>)
 8021fe0:	4618      	mov	r0, r3
 8021fe2:	f013 fc37 	bl	8035854 <siprintf>
	draw_text(tmpstr,0,0 , Tahoma8, 1,0);
 8021fe6:	f107 0008 	add.w	r0, r7, #8
 8021fea:	2300      	movs	r3, #0
 8021fec:	9301      	str	r3, [sp, #4]
 8021fee:	2301      	movs	r3, #1
 8021ff0:	9300      	str	r3, [sp, #0]
 8021ff2:	4b21      	ldr	r3, [pc, #132]	; (8022078 <main+0x158>)
 8021ff4:	2200      	movs	r2, #0
 8021ff6:	2100      	movs	r1, #0
 8021ff8:	f7ff fcaa 	bl	8021950 <draw_text>
	glcd_refresh();
 8021ffc:	f000 fcea 	bl	80229d4 <glcd_refresh>
//	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
//	 	 HAL_Delay(2000);
//	 HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);

//	 	HAL_Delay(2000);
	if(IS_BTN_PRESSED())
 8022000:	2110      	movs	r1, #16
 8022002:	481e      	ldr	r0, [pc, #120]	; (802207c <main+0x15c>)
 8022004:	f002 fcb4 	bl	8024970 <HAL_GPIO_ReadPin>
 8022008:	4603      	mov	r3, r0
 802200a:	2b00      	cmp	r3, #0
 802200c:	d10b      	bne.n	8022026 <main+0x106>
	{
		////set shared memory
		sharedmem=2;
 802200e:	4b14      	ldr	r3, [pc, #80]	; (8022060 <main+0x140>)
 8022010:	2202      	movs	r2, #2
 8022012:	601a      	str	r2, [r3, #0]
		Peripherials_DeInit();
 8022014:	f7ff ff60 	bl	8021ed8 <Peripherials_DeInit>
		HAL_Delay(100);
 8022018:	2064      	movs	r0, #100	; 0x64
 802201a:	f001 f9f5 	bl	8023408 <HAL_Delay>
		SCB->AIRCR= 0x05FA0000 | (uint32_t)0x04; //system reset
 802201e:	4b18      	ldr	r3, [pc, #96]	; (8022080 <main+0x160>)
 8022020:	4a18      	ldr	r2, [pc, #96]	; (8022084 <main+0x164>)
 8022022:	60da      	str	r2, [r3, #12]
				while(1);
 8022024:	e7fe      	b.n	8022024 <main+0x104>

	}
	if(IS_BTN_PRESSED1())
 8022026:	2108      	movs	r1, #8
 8022028:	4814      	ldr	r0, [pc, #80]	; (802207c <main+0x15c>)
 802202a:	f002 fca1 	bl	8024970 <HAL_GPIO_ReadPin>
 802202e:	4603      	mov	r3, r0
 8022030:	2b00      	cmp	r3, #0
 8022032:	d10b      	bne.n	802204c <main+0x12c>
	{
		sharedmem=4;
 8022034:	4b0a      	ldr	r3, [pc, #40]	; (8022060 <main+0x140>)
 8022036:	2204      	movs	r2, #4
 8022038:	601a      	str	r2, [r3, #0]
		Peripherials_DeInit();
 802203a:	f7ff ff4d 	bl	8021ed8 <Peripherials_DeInit>
		HAL_Delay(100);
 802203e:	2064      	movs	r0, #100	; 0x64
 8022040:	f001 f9e2 	bl	8023408 <HAL_Delay>
		SCB->AIRCR= 0x05FA0000 | (uint32_t)0x04; //system reset
 8022044:	4b0e      	ldr	r3, [pc, #56]	; (8022080 <main+0x160>)
 8022046:	4a0f      	ldr	r2, [pc, #60]	; (8022084 <main+0x164>)
 8022048:	60da      	str	r2, [r3, #12]
				while(1);
 802204a:	e7fe      	b.n	802204a <main+0x12a>
	}
	HAL_Delay(500);
 802204c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8022050:	f001 f9da 	bl	8023408 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8022054:	f012 fab4 	bl	80345c0 <MX_USB_HOST_Process>
		HAL_IWDG_Refresh(&hiwdg);
 8022058:	e7b0      	b.n	8021fbc <main+0x9c>
 802205a:	bf00      	nop
 802205c:	20001620 	.word	0x20001620
 8022060:	10000000 	.word	0x10000000
 8022064:	08037820 	.word	0x08037820
 8022068:	20000390 	.word	0x20000390
 802206c:	08037838 	.word	0x08037838
 8022070:	20001424 	.word	0x20001424
 8022074:	08037854 	.word	0x08037854
 8022078:	08037ea4 	.word	0x08037ea4
 802207c:	40020400 	.word	0x40020400
 8022080:	e000ed00 	.word	0xe000ed00
 8022084:	05fa0004 	.word	0x05fa0004

08022088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8022088:	b580      	push	{r7, lr}
 802208a:	b098      	sub	sp, #96	; 0x60
 802208c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802208e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022092:	2230      	movs	r2, #48	; 0x30
 8022094:	2100      	movs	r1, #0
 8022096:	4618      	mov	r0, r3
 8022098:	f012 fde5 	bl	8034c66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802209c:	f107 031c 	add.w	r3, r7, #28
 80220a0:	2200      	movs	r2, #0
 80220a2:	601a      	str	r2, [r3, #0]
 80220a4:	605a      	str	r2, [r3, #4]
 80220a6:	609a      	str	r2, [r3, #8]
 80220a8:	60da      	str	r2, [r3, #12]
 80220aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80220ac:	f107 030c 	add.w	r3, r7, #12
 80220b0:	2200      	movs	r2, #0
 80220b2:	601a      	str	r2, [r3, #0]
 80220b4:	605a      	str	r2, [r3, #4]
 80220b6:	609a      	str	r2, [r3, #8]
 80220b8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80220ba:	2300      	movs	r3, #0
 80220bc:	60bb      	str	r3, [r7, #8]
 80220be:	4b32      	ldr	r3, [pc, #200]	; (8022188 <SystemClock_Config+0x100>)
 80220c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80220c2:	4a31      	ldr	r2, [pc, #196]	; (8022188 <SystemClock_Config+0x100>)
 80220c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80220c8:	6413      	str	r3, [r2, #64]	; 0x40
 80220ca:	4b2f      	ldr	r3, [pc, #188]	; (8022188 <SystemClock_Config+0x100>)
 80220cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80220ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80220d2:	60bb      	str	r3, [r7, #8]
 80220d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80220d6:	2300      	movs	r3, #0
 80220d8:	607b      	str	r3, [r7, #4]
 80220da:	4b2c      	ldr	r3, [pc, #176]	; (802218c <SystemClock_Config+0x104>)
 80220dc:	681b      	ldr	r3, [r3, #0]
 80220de:	4a2b      	ldr	r2, [pc, #172]	; (802218c <SystemClock_Config+0x104>)
 80220e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80220e4:	6013      	str	r3, [r2, #0]
 80220e6:	4b29      	ldr	r3, [pc, #164]	; (802218c <SystemClock_Config+0x104>)
 80220e8:	681b      	ldr	r3, [r3, #0]
 80220ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80220ee:	607b      	str	r3, [r7, #4]
 80220f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80220f2:	230d      	movs	r3, #13
 80220f4:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80220f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80220fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80220fc:	2301      	movs	r3, #1
 80220fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8022100:	2301      	movs	r3, #1
 8022102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8022104:	2302      	movs	r3, #2
 8022106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8022108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802210c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 802210e:	2319      	movs	r3, #25
 8022110:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8022112:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8022116:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8022118:	2302      	movs	r3, #2
 802211a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 802211c:	2307      	movs	r3, #7
 802211e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8022120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022124:	4618      	mov	r0, r3
 8022126:	f005 fc49 	bl	80279bc <HAL_RCC_OscConfig>
 802212a:	4603      	mov	r3, r0
 802212c:	2b00      	cmp	r3, #0
 802212e:	d001      	beq.n	8022134 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8022130:	f000 f840 	bl	80221b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8022134:	230f      	movs	r3, #15
 8022136:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8022138:	2302      	movs	r3, #2
 802213a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802213c:	2300      	movs	r3, #0
 802213e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8022140:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022144:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8022146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802214a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802214c:	f107 031c 	add.w	r3, r7, #28
 8022150:	2105      	movs	r1, #5
 8022152:	4618      	mov	r0, r3
 8022154:	f005 fea2 	bl	8027e9c <HAL_RCC_ClockConfig>
 8022158:	4603      	mov	r3, r0
 802215a:	2b00      	cmp	r3, #0
 802215c:	d001      	beq.n	8022162 <SystemClock_Config+0xda>
  {
    Error_Handler();
 802215e:	f000 f829 	bl	80221b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8022162:	2302      	movs	r3, #2
 8022164:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8022166:	f44f 7380 	mov.w	r3, #256	; 0x100
 802216a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802216c:	f107 030c 	add.w	r3, r7, #12
 8022170:	4618      	mov	r0, r3
 8022172:	f006 f891 	bl	8028298 <HAL_RCCEx_PeriphCLKConfig>
 8022176:	4603      	mov	r3, r0
 8022178:	2b00      	cmp	r3, #0
 802217a:	d001      	beq.n	8022180 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 802217c:	f000 f81a 	bl	80221b4 <Error_Handler>
  }
}
 8022180:	bf00      	nop
 8022182:	3760      	adds	r7, #96	; 0x60
 8022184:	46bd      	mov	sp, r7
 8022186:	bd80      	pop	{r7, pc}
 8022188:	40023800 	.word	0x40023800
 802218c:	40007000 	.word	0x40007000

08022190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022190:	b580      	push	{r7, lr}
 8022192:	b082      	sub	sp, #8
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	681b      	ldr	r3, [r3, #0]
 802219c:	4a04      	ldr	r2, [pc, #16]	; (80221b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 802219e:	4293      	cmp	r3, r2
 80221a0:	d101      	bne.n	80221a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80221a2:	f001 f911 	bl	80233c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80221a6:	bf00      	nop
 80221a8:	3708      	adds	r7, #8
 80221aa:	46bd      	mov	sp, r7
 80221ac:	bd80      	pop	{r7, pc}
 80221ae:	bf00      	nop
 80221b0:	40010000 	.word	0x40010000

080221b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80221b4:	b480      	push	{r7}
 80221b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80221b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80221ba:	e7fe      	b.n	80221ba <Error_Handler+0x6>

080221bc <RetargetInit>:
#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;
void RetargetInit(UART_HandleTypeDef *huart) {
 80221bc:	b580      	push	{r7, lr}
 80221be:	b082      	sub	sp, #8
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	6078      	str	r0, [r7, #4]
	gHuart = huart;
 80221c4:	4a07      	ldr	r2, [pc, #28]	; (80221e4 <RetargetInit+0x28>)
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	6013      	str	r3, [r2, #0]
	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 80221ca:	4b07      	ldr	r3, [pc, #28]	; (80221e8 <RetargetInit+0x2c>)
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	6898      	ldr	r0, [r3, #8]
 80221d0:	2300      	movs	r3, #0
 80221d2:	2202      	movs	r2, #2
 80221d4:	2100      	movs	r1, #0
 80221d6:	f013 fa8f 	bl	80356f8 <setvbuf>
}
 80221da:	bf00      	nop
 80221dc:	3708      	adds	r7, #8
 80221de:	46bd      	mov	sp, r7
 80221e0:	bd80      	pop	{r7, pc}
 80221e2:	bf00      	nop
 80221e4:	20001430 	.word	0x20001430
 80221e8:	200001a0 	.word	0x200001a0

080221ec <_isatty>:

int _isatty(int fd) {
 80221ec:	b580      	push	{r7, lr}
 80221ee:	b082      	sub	sp, #8
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	db04      	blt.n	8022204 <_isatty+0x18>
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	2b02      	cmp	r3, #2
 80221fe:	dc01      	bgt.n	8022204 <_isatty+0x18>
		return 1;
 8022200:	2301      	movs	r3, #1
 8022202:	e005      	b.n	8022210 <_isatty+0x24>

	errno = EBADF;
 8022204:	f012 fcea 	bl	8034bdc <__errno>
 8022208:	4602      	mov	r2, r0
 802220a:	2309      	movs	r3, #9
 802220c:	6013      	str	r3, [r2, #0]
	return 0;
 802220e:	2300      	movs	r3, #0
}
 8022210:	4618      	mov	r0, r3
 8022212:	3708      	adds	r7, #8
 8022214:	46bd      	mov	sp, r7
 8022216:	bd80      	pop	{r7, pc}

08022218 <_write>:

int _write(int fd, char *ptr, int len) {
 8022218:	b580      	push	{r7, lr}
 802221a:	b086      	sub	sp, #24
 802221c:	af00      	add	r7, sp, #0
 802221e:	60f8      	str	r0, [r7, #12]
 8022220:	60b9      	str	r1, [r7, #8]
 8022222:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8022224:	68fb      	ldr	r3, [r7, #12]
 8022226:	2b01      	cmp	r3, #1
 8022228:	d002      	beq.n	8022230 <_write+0x18>
 802222a:	68fb      	ldr	r3, [r7, #12]
 802222c:	2b02      	cmp	r3, #2
 802222e:	d111      	bne.n	8022254 <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8022230:	4b0e      	ldr	r3, [pc, #56]	; (802226c <_write+0x54>)
 8022232:	6818      	ldr	r0, [r3, #0]
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	b29a      	uxth	r2, r3
 8022238:	f04f 33ff 	mov.w	r3, #4294967295
 802223c:	68b9      	ldr	r1, [r7, #8]
 802223e:	f008 fc4e 	bl	802aade <HAL_UART_Transmit>
 8022242:	4603      	mov	r3, r0
 8022244:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8022246:	7dfb      	ldrb	r3, [r7, #23]
 8022248:	2b00      	cmp	r3, #0
 802224a:	d101      	bne.n	8022250 <_write+0x38>
			return len;
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	e008      	b.n	8022262 <_write+0x4a>
		else
			return EIO;
 8022250:	2305      	movs	r3, #5
 8022252:	e006      	b.n	8022262 <_write+0x4a>
	}
	errno = EBADF;
 8022254:	f012 fcc2 	bl	8034bdc <__errno>
 8022258:	4602      	mov	r2, r0
 802225a:	2309      	movs	r3, #9
 802225c:	6013      	str	r3, [r2, #0]
	return -1;
 802225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022262:	4618      	mov	r0, r3
 8022264:	3718      	adds	r7, #24
 8022266:	46bd      	mov	sp, r7
 8022268:	bd80      	pop	{r7, pc}
 802226a:	bf00      	nop
 802226c:	20001430 	.word	0x20001430

08022270 <_close>:

int _close(int fd) {
 8022270:	b580      	push	{r7, lr}
 8022272:	b082      	sub	sp, #8
 8022274:	af00      	add	r7, sp, #0
 8022276:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	2b00      	cmp	r3, #0
 802227c:	db04      	blt.n	8022288 <_close+0x18>
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	2b02      	cmp	r3, #2
 8022282:	dc01      	bgt.n	8022288 <_close+0x18>
		return 0;
 8022284:	2300      	movs	r3, #0
 8022286:	e006      	b.n	8022296 <_close+0x26>

	errno = EBADF;
 8022288:	f012 fca8 	bl	8034bdc <__errno>
 802228c:	4602      	mov	r2, r0
 802228e:	2309      	movs	r3, #9
 8022290:	6013      	str	r3, [r2, #0]
	return -1;
 8022292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022296:	4618      	mov	r0, r3
 8022298:	3708      	adds	r7, #8
 802229a:	46bd      	mov	sp, r7
 802229c:	bd80      	pop	{r7, pc}

0802229e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 802229e:	b580      	push	{r7, lr}
 80222a0:	b084      	sub	sp, #16
 80222a2:	af00      	add	r7, sp, #0
 80222a4:	60f8      	str	r0, [r7, #12]
 80222a6:	60b9      	str	r1, [r7, #8]
 80222a8:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 80222aa:	f012 fc97 	bl	8034bdc <__errno>
 80222ae:	4602      	mov	r2, r0
 80222b0:	2309      	movs	r3, #9
 80222b2:	6013      	str	r3, [r2, #0]
	return -1;
 80222b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80222b8:	4618      	mov	r0, r3
 80222ba:	3710      	adds	r7, #16
 80222bc:	46bd      	mov	sp, r7
 80222be:	bd80      	pop	{r7, pc}

080222c0 <_read>:

int _read(int fd, char *ptr, int len) {
 80222c0:	b580      	push	{r7, lr}
 80222c2:	b086      	sub	sp, #24
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	60f8      	str	r0, [r7, #12]
 80222c8:	60b9      	str	r1, [r7, #8]
 80222ca:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 80222cc:	68fb      	ldr	r3, [r7, #12]
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d110      	bne.n	80222f4 <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 80222d2:	4b0e      	ldr	r3, [pc, #56]	; (802230c <_read+0x4c>)
 80222d4:	6818      	ldr	r0, [r3, #0]
 80222d6:	f04f 33ff 	mov.w	r3, #4294967295
 80222da:	2201      	movs	r2, #1
 80222dc:	68b9      	ldr	r1, [r7, #8]
 80222de:	f008 fc97 	bl	802ac10 <HAL_UART_Receive>
 80222e2:	4603      	mov	r3, r0
 80222e4:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 80222e6:	7dfb      	ldrb	r3, [r7, #23]
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d101      	bne.n	80222f0 <_read+0x30>
			return 1;
 80222ec:	2301      	movs	r3, #1
 80222ee:	e008      	b.n	8022302 <_read+0x42>
		else
			return EIO;
 80222f0:	2305      	movs	r3, #5
 80222f2:	e006      	b.n	8022302 <_read+0x42>
	}
	errno = EBADF;
 80222f4:	f012 fc72 	bl	8034bdc <__errno>
 80222f8:	4602      	mov	r2, r0
 80222fa:	2309      	movs	r3, #9
 80222fc:	6013      	str	r3, [r2, #0]
	return -1;
 80222fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022302:	4618      	mov	r0, r3
 8022304:	3718      	adds	r7, #24
 8022306:	46bd      	mov	sp, r7
 8022308:	bd80      	pop	{r7, pc}
 802230a:	bf00      	nop
 802230c:	20001430 	.word	0x20001430

08022310 <_fstat>:

int _fstat(int fd, struct stat *st) {
 8022310:	b580      	push	{r7, lr}
 8022312:	b082      	sub	sp, #8
 8022314:	af00      	add	r7, sp, #0
 8022316:	6078      	str	r0, [r7, #4]
 8022318:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	2b00      	cmp	r3, #0
 802231e:	db08      	blt.n	8022332 <_fstat+0x22>
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	2b02      	cmp	r3, #2
 8022324:	dc05      	bgt.n	8022332 <_fstat+0x22>
		st->st_mode = S_IFCHR;
 8022326:	683b      	ldr	r3, [r7, #0]
 8022328:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802232c:	605a      	str	r2, [r3, #4]
		return 0;
 802232e:	2300      	movs	r3, #0
 8022330:	e005      	b.n	802233e <_fstat+0x2e>
	}

	errno = EBADF;
 8022332:	f012 fc53 	bl	8034bdc <__errno>
 8022336:	4602      	mov	r2, r0
 8022338:	2309      	movs	r3, #9
 802233a:	6013      	str	r3, [r2, #0]
	return 0;
 802233c:	2300      	movs	r3, #0
}
 802233e:	4618      	mov	r0, r3
 8022340:	3708      	adds	r7, #8
 8022342:	46bd      	mov	sp, r7
 8022344:	bd80      	pop	{r7, pc}
	...

08022348 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8022348:	b580      	push	{r7, lr}
 802234a:	b086      	sub	sp, #24
 802234c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 802234e:	1d3b      	adds	r3, r7, #4
 8022350:	2200      	movs	r2, #0
 8022352:	601a      	str	r2, [r3, #0]
 8022354:	605a      	str	r2, [r3, #4]
 8022356:	609a      	str	r2, [r3, #8]
 8022358:	60da      	str	r2, [r3, #12]
 802235a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 802235c:	2300      	movs	r3, #0
 802235e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8022360:	4b24      	ldr	r3, [pc, #144]	; (80223f4 <MX_RTC_Init+0xac>)
 8022362:	4a25      	ldr	r2, [pc, #148]	; (80223f8 <MX_RTC_Init+0xb0>)
 8022364:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8022366:	4b23      	ldr	r3, [pc, #140]	; (80223f4 <MX_RTC_Init+0xac>)
 8022368:	2200      	movs	r2, #0
 802236a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 802236c:	4b21      	ldr	r3, [pc, #132]	; (80223f4 <MX_RTC_Init+0xac>)
 802236e:	227f      	movs	r2, #127	; 0x7f
 8022370:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8022372:	4b20      	ldr	r3, [pc, #128]	; (80223f4 <MX_RTC_Init+0xac>)
 8022374:	22ff      	movs	r2, #255	; 0xff
 8022376:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8022378:	4b1e      	ldr	r3, [pc, #120]	; (80223f4 <MX_RTC_Init+0xac>)
 802237a:	2200      	movs	r2, #0
 802237c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 802237e:	4b1d      	ldr	r3, [pc, #116]	; (80223f4 <MX_RTC_Init+0xac>)
 8022380:	2200      	movs	r2, #0
 8022382:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8022384:	4b1b      	ldr	r3, [pc, #108]	; (80223f4 <MX_RTC_Init+0xac>)
 8022386:	2200      	movs	r2, #0
 8022388:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 802238a:	481a      	ldr	r0, [pc, #104]	; (80223f4 <MX_RTC_Init+0xac>)
 802238c:	f006 f866 	bl	802845c <HAL_RTC_Init>
 8022390:	4603      	mov	r3, r0
 8022392:	2b00      	cmp	r3, #0
 8022394:	d001      	beq.n	802239a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8022396:	f7ff ff0d 	bl	80221b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 802239a:	2300      	movs	r3, #0
 802239c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 802239e:	2300      	movs	r3, #0
 80223a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80223a2:	2300      	movs	r3, #0
 80223a4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80223a6:	2300      	movs	r3, #0
 80223a8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80223aa:	2300      	movs	r3, #0
 80223ac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80223ae:	1d3b      	adds	r3, r7, #4
 80223b0:	2200      	movs	r2, #0
 80223b2:	4619      	mov	r1, r3
 80223b4:	480f      	ldr	r0, [pc, #60]	; (80223f4 <MX_RTC_Init+0xac>)
 80223b6:	f006 f8e2 	bl	802857e <HAL_RTC_SetTime>
 80223ba:	4603      	mov	r3, r0
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d001      	beq.n	80223c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80223c0:	f7ff fef8 	bl	80221b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80223c4:	2307      	movs	r3, #7
 80223c6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80223c8:	2308      	movs	r3, #8
 80223ca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 2;
 80223cc:	2302      	movs	r3, #2
 80223ce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80223d0:	2314      	movs	r3, #20
 80223d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80223d4:	463b      	mov	r3, r7
 80223d6:	2200      	movs	r2, #0
 80223d8:	4619      	mov	r1, r3
 80223da:	4806      	ldr	r0, [pc, #24]	; (80223f4 <MX_RTC_Init+0xac>)
 80223dc:	f006 f98c 	bl	80286f8 <HAL_RTC_SetDate>
 80223e0:	4603      	mov	r3, r0
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	d001      	beq.n	80223ea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80223e6:	f7ff fee5 	bl	80221b4 <Error_Handler>
  }

}
 80223ea:	bf00      	nop
 80223ec:	3718      	adds	r7, #24
 80223ee:	46bd      	mov	sp, r7
 80223f0:	bd80      	pop	{r7, pc}
 80223f2:	bf00      	nop
 80223f4:	20001434 	.word	0x20001434
 80223f8:	40002800 	.word	0x40002800

080223fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80223fc:	b480      	push	{r7}
 80223fe:	b083      	sub	sp, #12
 8022400:	af00      	add	r7, sp, #0
 8022402:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	681b      	ldr	r3, [r3, #0]
 8022408:	4a05      	ldr	r2, [pc, #20]	; (8022420 <HAL_RTC_MspInit+0x24>)
 802240a:	4293      	cmp	r3, r2
 802240c:	d102      	bne.n	8022414 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 802240e:	4b05      	ldr	r3, [pc, #20]	; (8022424 <HAL_RTC_MspInit+0x28>)
 8022410:	2201      	movs	r2, #1
 8022412:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8022414:	bf00      	nop
 8022416:	370c      	adds	r7, #12
 8022418:	46bd      	mov	sp, r7
 802241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802241e:	4770      	bx	lr
 8022420:	40002800 	.word	0x40002800
 8022424:	42470e3c 	.word	0x42470e3c

08022428 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8022428:	b480      	push	{r7}
 802242a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 802242c:	4b0c      	ldr	r3, [pc, #48]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 802242e:	4a0d      	ldr	r2, [pc, #52]	; (8022464 <MX_SDIO_SD_Init+0x3c>)
 8022430:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8022432:	4b0b      	ldr	r3, [pc, #44]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 8022434:	2200      	movs	r2, #0
 8022436:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8022438:	4b09      	ldr	r3, [pc, #36]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 802243a:	2200      	movs	r2, #0
 802243c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 802243e:	4b08      	ldr	r3, [pc, #32]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 8022440:	2200      	movs	r2, #0
 8022442:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8022444:	4b06      	ldr	r3, [pc, #24]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 8022446:	2200      	movs	r2, #0
 8022448:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 802244a:	4b05      	ldr	r3, [pc, #20]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 802244c:	2200      	movs	r2, #0
 802244e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8022450:	4b03      	ldr	r3, [pc, #12]	; (8022460 <MX_SDIO_SD_Init+0x38>)
 8022452:	2203      	movs	r2, #3
 8022454:	619a      	str	r2, [r3, #24]

}
 8022456:	bf00      	nop
 8022458:	46bd      	mov	sp, r7
 802245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802245e:	4770      	bx	lr
 8022460:	20001514 	.word	0x20001514
 8022464:	40012c00 	.word	0x40012c00

08022468 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8022468:	b580      	push	{r7, lr}
 802246a:	b08a      	sub	sp, #40	; 0x28
 802246c:	af00      	add	r7, sp, #0
 802246e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022470:	f107 0314 	add.w	r3, r7, #20
 8022474:	2200      	movs	r2, #0
 8022476:	601a      	str	r2, [r3, #0]
 8022478:	605a      	str	r2, [r3, #4]
 802247a:	609a      	str	r2, [r3, #8]
 802247c:	60da      	str	r2, [r3, #12]
 802247e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	4a68      	ldr	r2, [pc, #416]	; (8022628 <HAL_SD_MspInit+0x1c0>)
 8022486:	4293      	cmp	r3, r2
 8022488:	f040 80c9 	bne.w	802261e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 802248c:	2300      	movs	r3, #0
 802248e:	613b      	str	r3, [r7, #16]
 8022490:	4b66      	ldr	r3, [pc, #408]	; (802262c <HAL_SD_MspInit+0x1c4>)
 8022492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022494:	4a65      	ldr	r2, [pc, #404]	; (802262c <HAL_SD_MspInit+0x1c4>)
 8022496:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802249a:	6453      	str	r3, [r2, #68]	; 0x44
 802249c:	4b63      	ldr	r3, [pc, #396]	; (802262c <HAL_SD_MspInit+0x1c4>)
 802249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80224a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80224a4:	613b      	str	r3, [r7, #16]
 80224a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80224a8:	2300      	movs	r3, #0
 80224aa:	60fb      	str	r3, [r7, #12]
 80224ac:	4b5f      	ldr	r3, [pc, #380]	; (802262c <HAL_SD_MspInit+0x1c4>)
 80224ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224b0:	4a5e      	ldr	r2, [pc, #376]	; (802262c <HAL_SD_MspInit+0x1c4>)
 80224b2:	f043 0304 	orr.w	r3, r3, #4
 80224b6:	6313      	str	r3, [r2, #48]	; 0x30
 80224b8:	4b5c      	ldr	r3, [pc, #368]	; (802262c <HAL_SD_MspInit+0x1c4>)
 80224ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224bc:	f003 0304 	and.w	r3, r3, #4
 80224c0:	60fb      	str	r3, [r7, #12]
 80224c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80224c4:	2300      	movs	r3, #0
 80224c6:	60bb      	str	r3, [r7, #8]
 80224c8:	4b58      	ldr	r3, [pc, #352]	; (802262c <HAL_SD_MspInit+0x1c4>)
 80224ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224cc:	4a57      	ldr	r2, [pc, #348]	; (802262c <HAL_SD_MspInit+0x1c4>)
 80224ce:	f043 0308 	orr.w	r3, r3, #8
 80224d2:	6313      	str	r3, [r2, #48]	; 0x30
 80224d4:	4b55      	ldr	r3, [pc, #340]	; (802262c <HAL_SD_MspInit+0x1c4>)
 80224d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224d8:	f003 0308 	and.w	r3, r3, #8
 80224dc:	60bb      	str	r3, [r7, #8]
 80224de:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80224e0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80224e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80224e6:	2302      	movs	r3, #2
 80224e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80224ea:	2300      	movs	r3, #0
 80224ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80224ee:	2303      	movs	r3, #3
 80224f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80224f2:	230c      	movs	r3, #12
 80224f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80224f6:	f107 0314 	add.w	r3, r7, #20
 80224fa:	4619      	mov	r1, r3
 80224fc:	484c      	ldr	r0, [pc, #304]	; (8022630 <HAL_SD_MspInit+0x1c8>)
 80224fe:	f001 ffa3 	bl	8024448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8022502:	2304      	movs	r3, #4
 8022504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022506:	2302      	movs	r3, #2
 8022508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802250a:	2300      	movs	r3, #0
 802250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802250e:	2303      	movs	r3, #3
 8022510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8022512:	230c      	movs	r3, #12
 8022514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022516:	f107 0314 	add.w	r3, r7, #20
 802251a:	4619      	mov	r1, r3
 802251c:	4845      	ldr	r0, [pc, #276]	; (8022634 <HAL_SD_MspInit+0x1cc>)
 802251e:	f001 ff93 	bl	8024448 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8022522:	4b45      	ldr	r3, [pc, #276]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022524:	4a45      	ldr	r2, [pc, #276]	; (802263c <HAL_SD_MspInit+0x1d4>)
 8022526:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8022528:	4b43      	ldr	r3, [pc, #268]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 802252a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802252e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8022530:	4b41      	ldr	r3, [pc, #260]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022532:	2200      	movs	r2, #0
 8022534:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8022536:	4b40      	ldr	r3, [pc, #256]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022538:	2200      	movs	r2, #0
 802253a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 802253c:	4b3e      	ldr	r3, [pc, #248]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 802253e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022542:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8022544:	4b3c      	ldr	r3, [pc, #240]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802254a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 802254c:	4b3a      	ldr	r3, [pc, #232]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 802254e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8022552:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8022554:	4b38      	ldr	r3, [pc, #224]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022556:	2220      	movs	r2, #32
 8022558:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 802255a:	4b37      	ldr	r3, [pc, #220]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 802255c:	2200      	movs	r2, #0
 802255e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8022560:	4b35      	ldr	r3, [pc, #212]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022562:	2204      	movs	r2, #4
 8022564:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8022566:	4b34      	ldr	r3, [pc, #208]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022568:	2203      	movs	r2, #3
 802256a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 802256c:	4b32      	ldr	r3, [pc, #200]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 802256e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8022572:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8022574:	4b30      	ldr	r3, [pc, #192]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022576:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802257a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 802257c:	482e      	ldr	r0, [pc, #184]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 802257e:	f001 f893 	bl	80236a8 <HAL_DMA_Init>
 8022582:	4603      	mov	r3, r0
 8022584:	2b00      	cmp	r3, #0
 8022586:	d001      	beq.n	802258c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8022588:	f7ff fe14 	bl	80221b4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	4a2a      	ldr	r2, [pc, #168]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022590:	641a      	str	r2, [r3, #64]	; 0x40
 8022592:	4a29      	ldr	r2, [pc, #164]	; (8022638 <HAL_SD_MspInit+0x1d0>)
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8022598:	4b29      	ldr	r3, [pc, #164]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 802259a:	4a2a      	ldr	r2, [pc, #168]	; (8022644 <HAL_SD_MspInit+0x1dc>)
 802259c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 802259e:	4b28      	ldr	r3, [pc, #160]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80225a4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80225a6:	4b26      	ldr	r3, [pc, #152]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225a8:	2240      	movs	r2, #64	; 0x40
 80225aa:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80225ac:	4b24      	ldr	r3, [pc, #144]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225ae:	2200      	movs	r2, #0
 80225b0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80225b2:	4b23      	ldr	r3, [pc, #140]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80225b8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80225ba:	4b21      	ldr	r3, [pc, #132]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80225c0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80225c2:	4b1f      	ldr	r3, [pc, #124]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80225c8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80225ca:	4b1d      	ldr	r3, [pc, #116]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225cc:	2220      	movs	r2, #32
 80225ce:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80225d0:	4b1b      	ldr	r3, [pc, #108]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225d2:	2200      	movs	r2, #0
 80225d4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80225d6:	4b1a      	ldr	r3, [pc, #104]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225d8:	2204      	movs	r2, #4
 80225da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80225dc:	4b18      	ldr	r3, [pc, #96]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225de:	2203      	movs	r2, #3
 80225e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80225e2:	4b17      	ldr	r3, [pc, #92]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80225e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80225ea:	4b15      	ldr	r3, [pc, #84]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80225f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80225f2:	4813      	ldr	r0, [pc, #76]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 80225f4:	f001 f858 	bl	80236a8 <HAL_DMA_Init>
 80225f8:	4603      	mov	r3, r0
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d001      	beq.n	8022602 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80225fe:	f7ff fdd9 	bl	80221b4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	4a0e      	ldr	r2, [pc, #56]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 8022606:	63da      	str	r2, [r3, #60]	; 0x3c
 8022608:	4a0d      	ldr	r2, [pc, #52]	; (8022640 <HAL_SD_MspInit+0x1d8>)
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 802260e:	2200      	movs	r2, #0
 8022610:	2100      	movs	r1, #0
 8022612:	2031      	movs	r0, #49	; 0x31
 8022614:	f000 fff4 	bl	8023600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8022618:	2031      	movs	r0, #49	; 0x31
 802261a:	f001 f80d 	bl	8023638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 802261e:	bf00      	nop
 8022620:	3728      	adds	r7, #40	; 0x28
 8022622:	46bd      	mov	sp, r7
 8022624:	bd80      	pop	{r7, pc}
 8022626:	bf00      	nop
 8022628:	40012c00 	.word	0x40012c00
 802262c:	40023800 	.word	0x40023800
 8022630:	40020800 	.word	0x40020800
 8022634:	40020c00 	.word	0x40020c00
 8022638:	20001454 	.word	0x20001454
 802263c:	40026458 	.word	0x40026458
 8022640:	200014b4 	.word	0x200014b4
 8022644:	400264a0 	.word	0x400264a0

08022648 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8022648:	b580      	push	{r7, lr}
 802264a:	b082      	sub	sp, #8
 802264c:	af00      	add	r7, sp, #0
 802264e:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDIO)
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	4a11      	ldr	r2, [pc, #68]	; (802269c <HAL_SD_MspDeInit+0x54>)
 8022656:	4293      	cmp	r3, r2
 8022658:	d11b      	bne.n	8022692 <HAL_SD_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 802265a:	4b11      	ldr	r3, [pc, #68]	; (80226a0 <HAL_SD_MspDeInit+0x58>)
 802265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802265e:	4a10      	ldr	r2, [pc, #64]	; (80226a0 <HAL_SD_MspDeInit+0x58>)
 8022660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8022664:	6453      	str	r3, [r2, #68]	; 0x44
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PC8     ------> SDIO_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_8);
 8022666:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 802266a:	480e      	ldr	r0, [pc, #56]	; (80226a4 <HAL_SD_MspDeInit+0x5c>)
 802266c:	f002 f886 	bl	802477c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8022670:	2104      	movs	r1, #4
 8022672:	480d      	ldr	r0, [pc, #52]	; (80226a8 <HAL_SD_MspDeInit+0x60>)
 8022674:	f002 f882 	bl	802477c <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802267c:	4618      	mov	r0, r3
 802267e:	f001 f8c1 	bl	8023804 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022686:	4618      	mov	r0, r3
 8022688:	f001 f8bc 	bl	8023804 <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 802268c:	2031      	movs	r0, #49	; 0x31
 802268e:	f000 ffe1 	bl	8023654 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 8022692:	bf00      	nop
 8022694:	3708      	adds	r7, #8
 8022696:	46bd      	mov	sp, r7
 8022698:	bd80      	pop	{r7, pc}
 802269a:	bf00      	nop
 802269c:	40012c00 	.word	0x40012c00
 80226a0:	40023800 	.word	0x40023800
 80226a4:	40020800 	.word	0x40020800
 80226a8:	40020c00 	.word	0x40020c00

080226ac <st7567_usdelay>:
unsigned char *glcd_buffer;

#ifdef ST7565_DIRTY_PAGES
unsigned char glcd_dirty_pages;
#endif
void st7567_usdelay(uint16_t delay) {
 80226ac:	b480      	push	{r7}
 80226ae:	b085      	sub	sp, #20
 80226b0:	af00      	add	r7, sp, #0
 80226b2:	4603      	mov	r3, r0
 80226b4:	80fb      	strh	r3, [r7, #6]
	uint16_t t = (uint16_t) delay;
 80226b6:	88fb      	ldrh	r3, [r7, #6]
 80226b8:	81fb      	strh	r3, [r7, #14]
	while (t) {
 80226ba:	e003      	b.n	80226c4 <st7567_usdelay+0x18>
		__asm("nop");
 80226bc:	bf00      	nop
		t--;
 80226be:	89fb      	ldrh	r3, [r7, #14]
 80226c0:	3b01      	subs	r3, #1
 80226c2:	81fb      	strh	r3, [r7, #14]
	while (t) {
 80226c4:	89fb      	ldrh	r3, [r7, #14]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d1f8      	bne.n	80226bc <st7567_usdelay+0x10>
	}
}
 80226ca:	bf00      	nop
 80226cc:	3714      	adds	r7, #20
 80226ce:	46bd      	mov	sp, r7
 80226d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226d4:	4770      	bx	lr
	...

080226d8 <glcd_data>:
/*
 * SPI emulation
 * send data
 */
void glcd_data(uint8_t data) {
 80226d8:	b580      	push	{r7, lr}
 80226da:	b084      	sub	sp, #16
 80226dc:	af00      	add	r7, sp, #0
 80226de:	4603      	mov	r3, r0
 80226e0:	71fb      	strb	r3, [r7, #7]

	uint8_t bits = 0x80;
 80226e2:	2380      	movs	r3, #128	; 0x80
 80226e4:	73fb      	strb	r3, [r7, #15]
	ST7567_CMD_SET;
 80226e6:	2201      	movs	r2, #1
 80226e8:	2102      	movs	r1, #2
 80226ea:	4822      	ldr	r0, [pc, #136]	; (8022774 <glcd_data+0x9c>)
 80226ec:	f002 f958 	bl	80249a0 <HAL_GPIO_WritePin>
	ST7567_SCLK_RESET;
 80226f0:	2200      	movs	r2, #0
 80226f2:	2120      	movs	r1, #32
 80226f4:	4820      	ldr	r0, [pc, #128]	; (8022778 <glcd_data+0xa0>)
 80226f6:	f002 f953 	bl	80249a0 <HAL_GPIO_WritePin>
	ST7567_CS_RESET;
 80226fa:	2200      	movs	r2, #0
 80226fc:	2180      	movs	r1, #128	; 0x80
 80226fe:	481e      	ldr	r0, [pc, #120]	; (8022778 <glcd_data+0xa0>)
 8022700:	f002 f94e 	bl	80249a0 <HAL_GPIO_WritePin>

	while (bits) {
 8022704:	e025      	b.n	8022752 <glcd_data+0x7a>
		ST7567_SCLK_RESET;
 8022706:	2200      	movs	r2, #0
 8022708:	2120      	movs	r1, #32
 802270a:	481b      	ldr	r0, [pc, #108]	; (8022778 <glcd_data+0xa0>)
 802270c:	f002 f948 	bl	80249a0 <HAL_GPIO_WritePin>
		st7567_usdelay(1);
 8022710:	2001      	movs	r0, #1
 8022712:	f7ff ffcb 	bl	80226ac <st7567_usdelay>
		if (data & bits)
 8022716:	79fa      	ldrb	r2, [r7, #7]
 8022718:	7bfb      	ldrb	r3, [r7, #15]
 802271a:	4013      	ands	r3, r2
 802271c:	b2db      	uxtb	r3, r3
 802271e:	2b00      	cmp	r3, #0
 8022720:	d006      	beq.n	8022730 <glcd_data+0x58>
			ST7567_SID_SET;
 8022722:	2201      	movs	r2, #1
 8022724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022728:	4813      	ldr	r0, [pc, #76]	; (8022778 <glcd_data+0xa0>)
 802272a:	f002 f939 	bl	80249a0 <HAL_GPIO_WritePin>
 802272e:	e005      	b.n	802273c <glcd_data+0x64>
		else
			ST7567_SID_RESET;
 8022730:	2200      	movs	r2, #0
 8022732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022736:	4810      	ldr	r0, [pc, #64]	; (8022778 <glcd_data+0xa0>)
 8022738:	f002 f932 	bl	80249a0 <HAL_GPIO_WritePin>
		ST7567_SCLK_SET;
 802273c:	2201      	movs	r2, #1
 802273e:	2120      	movs	r1, #32
 8022740:	480d      	ldr	r0, [pc, #52]	; (8022778 <glcd_data+0xa0>)
 8022742:	f002 f92d 	bl	80249a0 <HAL_GPIO_WritePin>
		st7567_usdelay(1);
 8022746:	2001      	movs	r0, #1
 8022748:	f7ff ffb0 	bl	80226ac <st7567_usdelay>
		bits >>= 1;
 802274c:	7bfb      	ldrb	r3, [r7, #15]
 802274e:	085b      	lsrs	r3, r3, #1
 8022750:	73fb      	strb	r3, [r7, #15]
	while (bits) {
 8022752:	7bfb      	ldrb	r3, [r7, #15]
 8022754:	2b00      	cmp	r3, #0
 8022756:	d1d6      	bne.n	8022706 <glcd_data+0x2e>
	}
	ST7567_CS_SET;
 8022758:	2201      	movs	r2, #1
 802275a:	2180      	movs	r1, #128	; 0x80
 802275c:	4806      	ldr	r0, [pc, #24]	; (8022778 <glcd_data+0xa0>)
 802275e:	f002 f91f 	bl	80249a0 <HAL_GPIO_WritePin>
	ST7567_CMD_RESET;
 8022762:	2200      	movs	r2, #0
 8022764:	2102      	movs	r1, #2
 8022766:	4803      	ldr	r0, [pc, #12]	; (8022774 <glcd_data+0x9c>)
 8022768:	f002 f91a 	bl	80249a0 <HAL_GPIO_WritePin>

}
 802276c:	bf00      	nop
 802276e:	3710      	adds	r7, #16
 8022770:	46bd      	mov	sp, r7
 8022772:	bd80      	pop	{r7, pc}
 8022774:	40021000 	.word	0x40021000
 8022778:	40020400 	.word	0x40020400

0802277c <glcd_command>:

void glcd_command(uint8_t command) {
 802277c:	b580      	push	{r7, lr}
 802277e:	b084      	sub	sp, #16
 8022780:	af00      	add	r7, sp, #0
 8022782:	4603      	mov	r3, r0
 8022784:	71fb      	strb	r3, [r7, #7]

	uint8_t bits = 0x80;
 8022786:	2380      	movs	r3, #128	; 0x80
 8022788:	73fb      	strb	r3, [r7, #15]
	ST7567_CMD_RESET;
 802278a:	2200      	movs	r2, #0
 802278c:	2102      	movs	r1, #2
 802278e:	4822      	ldr	r0, [pc, #136]	; (8022818 <glcd_command+0x9c>)
 8022790:	f002 f906 	bl	80249a0 <HAL_GPIO_WritePin>
	ST7567_SCLK_RESET;
 8022794:	2200      	movs	r2, #0
 8022796:	2120      	movs	r1, #32
 8022798:	4820      	ldr	r0, [pc, #128]	; (802281c <glcd_command+0xa0>)
 802279a:	f002 f901 	bl	80249a0 <HAL_GPIO_WritePin>
	ST7567_CS_RESET;
 802279e:	2200      	movs	r2, #0
 80227a0:	2180      	movs	r1, #128	; 0x80
 80227a2:	481e      	ldr	r0, [pc, #120]	; (802281c <glcd_command+0xa0>)
 80227a4:	f002 f8fc 	bl	80249a0 <HAL_GPIO_WritePin>

	while (bits) {
 80227a8:	e025      	b.n	80227f6 <glcd_command+0x7a>
		ST7567_SCLK_RESET;
 80227aa:	2200      	movs	r2, #0
 80227ac:	2120      	movs	r1, #32
 80227ae:	481b      	ldr	r0, [pc, #108]	; (802281c <glcd_command+0xa0>)
 80227b0:	f002 f8f6 	bl	80249a0 <HAL_GPIO_WritePin>
		st7567_usdelay(1);
 80227b4:	2001      	movs	r0, #1
 80227b6:	f7ff ff79 	bl	80226ac <st7567_usdelay>
		if (command & bits)
 80227ba:	79fa      	ldrb	r2, [r7, #7]
 80227bc:	7bfb      	ldrb	r3, [r7, #15]
 80227be:	4013      	ands	r3, r2
 80227c0:	b2db      	uxtb	r3, r3
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	d006      	beq.n	80227d4 <glcd_command+0x58>
			ST7567_SID_SET;
 80227c6:	2201      	movs	r2, #1
 80227c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80227cc:	4813      	ldr	r0, [pc, #76]	; (802281c <glcd_command+0xa0>)
 80227ce:	f002 f8e7 	bl	80249a0 <HAL_GPIO_WritePin>
 80227d2:	e005      	b.n	80227e0 <glcd_command+0x64>
		else
			ST7567_SID_RESET;
 80227d4:	2200      	movs	r2, #0
 80227d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80227da:	4810      	ldr	r0, [pc, #64]	; (802281c <glcd_command+0xa0>)
 80227dc:	f002 f8e0 	bl	80249a0 <HAL_GPIO_WritePin>
		ST7567_SCLK_SET;
 80227e0:	2201      	movs	r2, #1
 80227e2:	2120      	movs	r1, #32
 80227e4:	480d      	ldr	r0, [pc, #52]	; (802281c <glcd_command+0xa0>)
 80227e6:	f002 f8db 	bl	80249a0 <HAL_GPIO_WritePin>
		st7567_usdelay(1);
 80227ea:	2001      	movs	r0, #1
 80227ec:	f7ff ff5e 	bl	80226ac <st7567_usdelay>
		bits >>= 1;
 80227f0:	7bfb      	ldrb	r3, [r7, #15]
 80227f2:	085b      	lsrs	r3, r3, #1
 80227f4:	73fb      	strb	r3, [r7, #15]
	while (bits) {
 80227f6:	7bfb      	ldrb	r3, [r7, #15]
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	d1d6      	bne.n	80227aa <glcd_command+0x2e>
	}
	ST7567_CS_SET;
 80227fc:	2201      	movs	r2, #1
 80227fe:	2180      	movs	r1, #128	; 0x80
 8022800:	4806      	ldr	r0, [pc, #24]	; (802281c <glcd_command+0xa0>)
 8022802:	f002 f8cd 	bl	80249a0 <HAL_GPIO_WritePin>
	ST7567_CMD_SET;
 8022806:	2201      	movs	r2, #1
 8022808:	2102      	movs	r1, #2
 802280a:	4803      	ldr	r0, [pc, #12]	; (8022818 <glcd_command+0x9c>)
 802280c:	f002 f8c8 	bl	80249a0 <HAL_GPIO_WritePin>
}
 8022810:	bf00      	nop
 8022812:	3710      	adds	r7, #16
 8022814:	46bd      	mov	sp, r7
 8022816:	bd80      	pop	{r7, pc}
 8022818:	40021000 	.word	0x40021000
 802281c:	40020400 	.word	0x40020400

08022820 <glcd_pixel>:
/*
 *
 */
void glcd_pixel(unsigned char x, unsigned char y, unsigned char colour) {
 8022820:	b480      	push	{r7}
 8022822:	b085      	sub	sp, #20
 8022824:	af00      	add	r7, sp, #0
 8022826:	4603      	mov	r3, r0
 8022828:	71fb      	strb	r3, [r7, #7]
 802282a:	460b      	mov	r3, r1
 802282c:	71bb      	strb	r3, [r7, #6]
 802282e:	4613      	mov	r3, r2
 8022830:	717b      	strb	r3, [r7, #5]
//		return;

//	// Real screen coordinates are 0-63, not 1-64.
//	x -= 1;
//	y -= 1;
	if (glcd_flipped == 0 || glcd_flipped == 1) {
 8022832:	4b46      	ldr	r3, [pc, #280]	; (802294c <glcd_pixel+0x12c>)
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d003      	beq.n	8022842 <glcd_pixel+0x22>
 802283a:	4b44      	ldr	r3, [pc, #272]	; (802294c <glcd_pixel+0x12c>)
 802283c:	781b      	ldrb	r3, [r3, #0]
 802283e:	2b01      	cmp	r3, #1
 8022840:	d13d      	bne.n	80228be <glcd_pixel+0x9e>
		unsigned short array_pos = x + ((y / 8) * glcd_width);
 8022842:	79fb      	ldrb	r3, [r7, #7]
 8022844:	b29a      	uxth	r2, r3
 8022846:	79bb      	ldrb	r3, [r7, #6]
 8022848:	08db      	lsrs	r3, r3, #3
 802284a:	b2db      	uxtb	r3, r3
 802284c:	b299      	uxth	r1, r3
 802284e:	4b40      	ldr	r3, [pc, #256]	; (8022950 <glcd_pixel+0x130>)
 8022850:	881b      	ldrh	r3, [r3, #0]
 8022852:	fb11 f303 	smulbb	r3, r1, r3
 8022856:	b29b      	uxth	r3, r3
 8022858:	4413      	add	r3, r2
 802285a:	81bb      	strh	r3, [r7, #12]
#ifdef ST7565_DIRTY_PAGES
	#warning ** ST7565_DIRTY_PAGES enabled, only changed pages will be written to the GLCD **
		glcd_dirty_pages |= 1 << (array_pos / 128);
	#endif

		if (colour) {
 802285c:	797b      	ldrb	r3, [r7, #5]
 802285e:	2b00      	cmp	r3, #0
 8022860:	d015      	beq.n	802288e <glcd_pixel+0x6e>
			glcd_buffer[array_pos] |= 1 << (y % 8);
 8022862:	4b3c      	ldr	r3, [pc, #240]	; (8022954 <glcd_pixel+0x134>)
 8022864:	681a      	ldr	r2, [r3, #0]
 8022866:	89bb      	ldrh	r3, [r7, #12]
 8022868:	4413      	add	r3, r2
 802286a:	781b      	ldrb	r3, [r3, #0]
 802286c:	b25a      	sxtb	r2, r3
 802286e:	79bb      	ldrb	r3, [r7, #6]
 8022870:	f003 0307 	and.w	r3, r3, #7
 8022874:	2101      	movs	r1, #1
 8022876:	fa01 f303 	lsl.w	r3, r1, r3
 802287a:	b25b      	sxtb	r3, r3
 802287c:	4313      	orrs	r3, r2
 802287e:	b259      	sxtb	r1, r3
 8022880:	4b34      	ldr	r3, [pc, #208]	; (8022954 <glcd_pixel+0x134>)
 8022882:	681a      	ldr	r2, [r3, #0]
 8022884:	89bb      	ldrh	r3, [r7, #12]
 8022886:	4413      	add	r3, r2
 8022888:	b2ca      	uxtb	r2, r1
 802288a:	701a      	strb	r2, [r3, #0]
	if (glcd_flipped == 0 || glcd_flipped == 1) {
 802288c:	e058      	b.n	8022940 <glcd_pixel+0x120>
		} else {
			glcd_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 802288e:	4b31      	ldr	r3, [pc, #196]	; (8022954 <glcd_pixel+0x134>)
 8022890:	681a      	ldr	r2, [r3, #0]
 8022892:	89bb      	ldrh	r3, [r7, #12]
 8022894:	4413      	add	r3, r2
 8022896:	781b      	ldrb	r3, [r3, #0]
 8022898:	b25a      	sxtb	r2, r3
 802289a:	79bb      	ldrb	r3, [r7, #6]
 802289c:	f003 0307 	and.w	r3, r3, #7
 80228a0:	2101      	movs	r1, #1
 80228a2:	fa01 f303 	lsl.w	r3, r1, r3
 80228a6:	b25b      	sxtb	r3, r3
 80228a8:	43db      	mvns	r3, r3
 80228aa:	b25b      	sxtb	r3, r3
 80228ac:	4013      	ands	r3, r2
 80228ae:	b259      	sxtb	r1, r3
 80228b0:	4b28      	ldr	r3, [pc, #160]	; (8022954 <glcd_pixel+0x134>)
 80228b2:	681a      	ldr	r2, [r3, #0]
 80228b4:	89bb      	ldrh	r3, [r7, #12]
 80228b6:	4413      	add	r3, r2
 80228b8:	b2ca      	uxtb	r2, r1
 80228ba:	701a      	strb	r2, [r3, #0]
	if (glcd_flipped == 0 || glcd_flipped == 1) {
 80228bc:	e040      	b.n	8022940 <glcd_pixel+0x120>
		}
	} else {
		unsigned short array_pos = (x / 8 + (y * glcd_width) / 8);
 80228be:	79fb      	ldrb	r3, [r7, #7]
 80228c0:	08db      	lsrs	r3, r3, #3
 80228c2:	b2db      	uxtb	r3, r3
 80228c4:	b29a      	uxth	r2, r3
 80228c6:	79bb      	ldrb	r3, [r7, #6]
 80228c8:	4921      	ldr	r1, [pc, #132]	; (8022950 <glcd_pixel+0x130>)
 80228ca:	8809      	ldrh	r1, [r1, #0]
 80228cc:	fb01 f303 	mul.w	r3, r1, r3
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	da00      	bge.n	80228d6 <glcd_pixel+0xb6>
 80228d4:	3307      	adds	r3, #7
 80228d6:	10db      	asrs	r3, r3, #3
 80228d8:	b29b      	uxth	r3, r3
 80228da:	4413      	add	r3, r2
 80228dc:	81fb      	strh	r3, [r7, #14]
		if (colour) {
 80228de:	797b      	ldrb	r3, [r7, #5]
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	d015      	beq.n	8022910 <glcd_pixel+0xf0>
			glcd_buffer[array_pos] |= 1 << (x % 8);
 80228e4:	4b1b      	ldr	r3, [pc, #108]	; (8022954 <glcd_pixel+0x134>)
 80228e6:	681a      	ldr	r2, [r3, #0]
 80228e8:	89fb      	ldrh	r3, [r7, #14]
 80228ea:	4413      	add	r3, r2
 80228ec:	781b      	ldrb	r3, [r3, #0]
 80228ee:	b25a      	sxtb	r2, r3
 80228f0:	79fb      	ldrb	r3, [r7, #7]
 80228f2:	f003 0307 	and.w	r3, r3, #7
 80228f6:	2101      	movs	r1, #1
 80228f8:	fa01 f303 	lsl.w	r3, r1, r3
 80228fc:	b25b      	sxtb	r3, r3
 80228fe:	4313      	orrs	r3, r2
 8022900:	b259      	sxtb	r1, r3
 8022902:	4b14      	ldr	r3, [pc, #80]	; (8022954 <glcd_pixel+0x134>)
 8022904:	681a      	ldr	r2, [r3, #0]
 8022906:	89fb      	ldrh	r3, [r7, #14]
 8022908:	4413      	add	r3, r2
 802290a:	b2ca      	uxtb	r2, r1
 802290c:	701a      	strb	r2, [r3, #0]
		} else {
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
		}
	}
}
 802290e:	e017      	b.n	8022940 <glcd_pixel+0x120>
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
 8022910:	4b10      	ldr	r3, [pc, #64]	; (8022954 <glcd_pixel+0x134>)
 8022912:	681a      	ldr	r2, [r3, #0]
 8022914:	89fb      	ldrh	r3, [r7, #14]
 8022916:	4413      	add	r3, r2
 8022918:	781b      	ldrb	r3, [r3, #0]
 802291a:	b25a      	sxtb	r2, r3
 802291c:	79fb      	ldrb	r3, [r7, #7]
 802291e:	f003 0307 	and.w	r3, r3, #7
 8022922:	2101      	movs	r1, #1
 8022924:	fa01 f303 	lsl.w	r3, r1, r3
 8022928:	b25b      	sxtb	r3, r3
 802292a:	43db      	mvns	r3, r3
 802292c:	b25b      	sxtb	r3, r3
 802292e:	4013      	ands	r3, r2
 8022930:	b259      	sxtb	r1, r3
 8022932:	4b08      	ldr	r3, [pc, #32]	; (8022954 <glcd_pixel+0x134>)
 8022934:	681a      	ldr	r2, [r3, #0]
 8022936:	89fb      	ldrh	r3, [r7, #14]
 8022938:	4413      	add	r3, r2
 802293a:	b2ca      	uxtb	r2, r1
 802293c:	701a      	strb	r2, [r3, #0]
}
 802293e:	e7ff      	b.n	8022940 <glcd_pixel+0x120>
 8022940:	bf00      	nop
 8022942:	3714      	adds	r7, #20
 8022944:	46bd      	mov	sp, r7
 8022946:	f85d 7b04 	ldr.w	r7, [sp], #4
 802294a:	4770      	bx	lr
 802294c:	20000396 	.word	0x20000396
 8022950:	2000159c 	.word	0x2000159c
 8022954:	20001598 	.word	0x20001598

08022958 <glcd_blank>:

void glcd_blank() {
 8022958:	b580      	push	{r7, lr}
 802295a:	b084      	sub	sp, #16
 802295c:	af00      	add	r7, sp, #0
	// Reset the internal buffer
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
 802295e:	2301      	movs	r3, #1
 8022960:	60fb      	str	r3, [r7, #12]
 8022962:	e008      	b.n	8022976 <glcd_blank+0x1e>
		glcd_buffer[n] = 0;
 8022964:	4b1a      	ldr	r3, [pc, #104]	; (80229d0 <glcd_blank+0x78>)
 8022966:	681a      	ldr	r2, [r3, #0]
 8022968:	68fb      	ldr	r3, [r7, #12]
 802296a:	4413      	add	r3, r2
 802296c:	2200      	movs	r2, #0
 802296e:	701a      	strb	r2, [r3, #0]
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
 8022970:	68fb      	ldr	r3, [r7, #12]
 8022972:	3301      	adds	r3, #1
 8022974:	60fb      	str	r3, [r7, #12]
 8022976:	68fb      	ldr	r3, [r7, #12]
 8022978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802297c:	dbf2      	blt.n	8022964 <glcd_blank+0xc>
	}

	// Clear the actual screen
	for (int y = 0; y < 8; y++) {
 802297e:	2300      	movs	r3, #0
 8022980:	60bb      	str	r3, [r7, #8]
 8022982:	e01d      	b.n	80229c0 <glcd_blank+0x68>
		glcd_command(GLCD_CMD_SET_PAGE | y);
 8022984:	68bb      	ldr	r3, [r7, #8]
 8022986:	b25b      	sxtb	r3, r3
 8022988:	f063 034f 	orn	r3, r3, #79	; 0x4f
 802298c:	b25b      	sxtb	r3, r3
 802298e:	b2db      	uxtb	r3, r3
 8022990:	4618      	mov	r0, r3
 8022992:	f7ff fef3 	bl	802277c <glcd_command>

		// Reset column to 0 (the left side)
		glcd_command(GLCD_CMD_COLUMN_LOWER);
 8022996:	2000      	movs	r0, #0
 8022998:	f7ff fef0 	bl	802277c <glcd_command>
		glcd_command(GLCD_CMD_COLUMN_UPPER);
 802299c:	2010      	movs	r0, #16
 802299e:	f7ff feed 	bl	802277c <glcd_command>

		// We iterate to 132 as the internal buffer is 65*132, not
		// 64*124.
		for (int x = 0; x < 132; x++) {
 80229a2:	2300      	movs	r3, #0
 80229a4:	607b      	str	r3, [r7, #4]
 80229a6:	e005      	b.n	80229b4 <glcd_blank+0x5c>
			glcd_data(0x00);
 80229a8:	2000      	movs	r0, #0
 80229aa:	f7ff fe95 	bl	80226d8 <glcd_data>
		for (int x = 0; x < 132; x++) {
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	3301      	adds	r3, #1
 80229b2:	607b      	str	r3, [r7, #4]
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	2b83      	cmp	r3, #131	; 0x83
 80229b8:	ddf6      	ble.n	80229a8 <glcd_blank+0x50>
	for (int y = 0; y < 8; y++) {
 80229ba:	68bb      	ldr	r3, [r7, #8]
 80229bc:	3301      	adds	r3, #1
 80229be:	60bb      	str	r3, [r7, #8]
 80229c0:	68bb      	ldr	r3, [r7, #8]
 80229c2:	2b07      	cmp	r3, #7
 80229c4:	ddde      	ble.n	8022984 <glcd_blank+0x2c>
		}
	}
}
 80229c6:	bf00      	nop
 80229c8:	3710      	adds	r7, #16
 80229ca:	46bd      	mov	sp, r7
 80229cc:	bd80      	pop	{r7, pc}
 80229ce:	bf00      	nop
 80229d0:	20001598 	.word	0x20001598

080229d4 <glcd_refresh>:

void glcd_refresh() {
 80229d4:	b580      	push	{r7, lr}
 80229d6:	b084      	sub	sp, #16
 80229d8:	af00      	add	r7, sp, #0
	for (int y = 0; y < 8; y++) {
 80229da:	2300      	movs	r3, #0
 80229dc:	60fb      	str	r3, [r7, #12]
 80229de:	e05b      	b.n	8022a98 <glcd_refresh+0xc4>
#ifdef ST7565_DIRTY_PAGES
        // Only copy this page if it is marked as "dirty"
        if (!(glcd_dirty_pages & (1 << y))) continue;
#endif

		glcd_command(GLCD_CMD_SET_PAGE | y);
 80229e0:	68fb      	ldr	r3, [r7, #12]
 80229e2:	b25b      	sxtb	r3, r3
 80229e4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80229e8:	b25b      	sxtb	r3, r3
 80229ea:	b2db      	uxtb	r3, r3
 80229ec:	4618      	mov	r0, r3
 80229ee:	f7ff fec5 	bl	802277c <glcd_command>
		// pixels differently, the ST7565_REVERSE define allows this to
		// be controlled if necessary.
#ifdef ST7565_REVERSE
		if (!glcd_flipped) {
#else
		if (glcd_flipped == 0 || glcd_flipped == 2) {
 80229f2:	4b2d      	ldr	r3, [pc, #180]	; (8022aa8 <glcd_refresh+0xd4>)
 80229f4:	781b      	ldrb	r3, [r3, #0]
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d003      	beq.n	8022a02 <glcd_refresh+0x2e>
 80229fa:	4b2b      	ldr	r3, [pc, #172]	; (8022aa8 <glcd_refresh+0xd4>)
 80229fc:	781b      	ldrb	r3, [r3, #0]
 80229fe:	2b02      	cmp	r3, #2
 8022a00:	d103      	bne.n	8022a0a <glcd_refresh+0x36>
#endif
			glcd_command(GLCD_CMD_COLUMN_LOWER | 4);
 8022a02:	2004      	movs	r0, #4
 8022a04:	f7ff feba 	bl	802277c <glcd_command>
 8022a08:	e002      	b.n	8022a10 <glcd_refresh+0x3c>
		} else {
			glcd_command(GLCD_CMD_COLUMN_LOWER);
 8022a0a:	2000      	movs	r0, #0
 8022a0c:	f7ff feb6 	bl	802277c <glcd_command>
		}
		glcd_command(GLCD_CMD_COLUMN_UPPER);
 8022a10:	2010      	movs	r0, #16
 8022a12:	f7ff feb3 	bl	802277c <glcd_command>
		if (glcd_flipped == 0 || glcd_flipped == 1) {
 8022a16:	4b24      	ldr	r3, [pc, #144]	; (8022aa8 <glcd_refresh+0xd4>)
 8022a18:	781b      	ldrb	r3, [r3, #0]
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d003      	beq.n	8022a26 <glcd_refresh+0x52>
 8022a1e:	4b22      	ldr	r3, [pc, #136]	; (8022aa8 <glcd_refresh+0xd4>)
 8022a20:	781b      	ldrb	r3, [r3, #0]
 8022a22:	2b01      	cmp	r3, #1
 8022a24:	d118      	bne.n	8022a58 <glcd_refresh+0x84>
			for (int x = 0; x < 128; x++) {
 8022a26:	2300      	movs	r3, #0
 8022a28:	60bb      	str	r3, [r7, #8]
 8022a2a:	e011      	b.n	8022a50 <glcd_refresh+0x7c>
				glcd_data(glcd_buffer[y * glcd_width + x]);
 8022a2c:	4b1f      	ldr	r3, [pc, #124]	; (8022aac <glcd_refresh+0xd8>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	4a1f      	ldr	r2, [pc, #124]	; (8022ab0 <glcd_refresh+0xdc>)
 8022a32:	8812      	ldrh	r2, [r2, #0]
 8022a34:	4611      	mov	r1, r2
 8022a36:	68fa      	ldr	r2, [r7, #12]
 8022a38:	fb02 f101 	mul.w	r1, r2, r1
 8022a3c:	68ba      	ldr	r2, [r7, #8]
 8022a3e:	440a      	add	r2, r1
 8022a40:	4413      	add	r3, r2
 8022a42:	781b      	ldrb	r3, [r3, #0]
 8022a44:	4618      	mov	r0, r3
 8022a46:	f7ff fe47 	bl	80226d8 <glcd_data>
			for (int x = 0; x < 128; x++) {
 8022a4a:	68bb      	ldr	r3, [r7, #8]
 8022a4c:	3301      	adds	r3, #1
 8022a4e:	60bb      	str	r3, [r7, #8]
 8022a50:	68bb      	ldr	r3, [r7, #8]
 8022a52:	2b7f      	cmp	r3, #127	; 0x7f
 8022a54:	ddea      	ble.n	8022a2c <glcd_refresh+0x58>
 8022a56:	e01c      	b.n	8022a92 <glcd_refresh+0xbe>
			}
		} else {
			for (int x = 0; x < 128; x++) {
 8022a58:	2300      	movs	r3, #0
 8022a5a:	607b      	str	r3, [r7, #4]
 8022a5c:	e016      	b.n	8022a8c <glcd_refresh+0xb8>
				glcd_data(glcd_buffer[y + x * glcd_width / 8]);
 8022a5e:	4b13      	ldr	r3, [pc, #76]	; (8022aac <glcd_refresh+0xd8>)
 8022a60:	681a      	ldr	r2, [r3, #0]
 8022a62:	4b13      	ldr	r3, [pc, #76]	; (8022ab0 <glcd_refresh+0xdc>)
 8022a64:	881b      	ldrh	r3, [r3, #0]
 8022a66:	4619      	mov	r1, r3
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	fb03 f301 	mul.w	r3, r3, r1
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	da00      	bge.n	8022a74 <glcd_refresh+0xa0>
 8022a72:	3307      	adds	r3, #7
 8022a74:	10db      	asrs	r3, r3, #3
 8022a76:	4619      	mov	r1, r3
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	440b      	add	r3, r1
 8022a7c:	4413      	add	r3, r2
 8022a7e:	781b      	ldrb	r3, [r3, #0]
 8022a80:	4618      	mov	r0, r3
 8022a82:	f7ff fe29 	bl	80226d8 <glcd_data>
			for (int x = 0; x < 128; x++) {
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	3301      	adds	r3, #1
 8022a8a:	607b      	str	r3, [r7, #4]
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8022a90:	dde5      	ble.n	8022a5e <glcd_refresh+0x8a>
	for (int y = 0; y < 8; y++) {
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	3301      	adds	r3, #1
 8022a96:	60fb      	str	r3, [r7, #12]
 8022a98:	68fb      	ldr	r3, [r7, #12]
 8022a9a:	2b07      	cmp	r3, #7
 8022a9c:	dda0      	ble.n	80229e0 <glcd_refresh+0xc>
#ifdef ST7565_DIRTY_PAGES
    // All pages have now been updated, reset the indicator.
    glcd_dirty_pages = 0;
#endif

}
 8022a9e:	bf00      	nop
 8022aa0:	3710      	adds	r7, #16
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	bd80      	pop	{r7, pc}
 8022aa6:	bf00      	nop
 8022aa8:	20000396 	.word	0x20000396
 8022aac:	20001598 	.word	0x20001598
 8022ab0:	2000159c 	.word	0x2000159c

08022ab4 <glcd_backlight>:
/*
 *
 */
void glcd_backlight(uint8_t brightness) {
 8022ab4:	b580      	push	{r7, lr}
 8022ab6:	b08a      	sub	sp, #40	; 0x28
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	4603      	mov	r3, r0
 8022abc:	71fb      	strb	r3, [r7, #7]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8022abe:	f107 030c 	add.w	r3, r7, #12
 8022ac2:	2200      	movs	r2, #0
 8022ac4:	601a      	str	r2, [r3, #0]
 8022ac6:	605a      	str	r2, [r3, #4]
 8022ac8:	609a      	str	r2, [r3, #8]
 8022aca:	60da      	str	r2, [r3, #12]
 8022acc:	611a      	str	r2, [r3, #16]
 8022ace:	615a      	str	r2, [r3, #20]
 8022ad0:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8022ad2:	2360      	movs	r3, #96	; 0x60
 8022ad4:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = (uint16_t) (__HAL_TIM_GET_AUTORELOAD(&DISP_BACK_TIMER)
 8022ad6:	4b13      	ldr	r3, [pc, #76]	; (8022b24 <glcd_backlight+0x70>)
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022adc:	b29a      	uxth	r2, r3
 8022ade:	79fb      	ldrb	r3, [r7, #7]
 8022ae0:	b29b      	uxth	r3, r3
 8022ae2:	fb12 f303 	smulbb	r3, r2, r3
 8022ae6:	b29b      	uxth	r3, r3
			* brightness) / 100;
 8022ae8:	4a0f      	ldr	r2, [pc, #60]	; (8022b28 <glcd_backlight+0x74>)
 8022aea:	fba2 2303 	umull	r2, r3, r2, r3
 8022aee:	095b      	lsrs	r3, r3, #5
 8022af0:	b29b      	uxth	r3, r3
	sConfigOC.Pulse = (uint16_t) (__HAL_TIM_GET_AUTORELOAD(&DISP_BACK_TIMER)
 8022af2:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8022af4:	2302      	movs	r3, #2
 8022af6:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8022af8:	2300      	movs	r3, #0
 8022afa:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 8022afc:	f107 030c 	add.w	r3, r7, #12
 8022b00:	220c      	movs	r2, #12
 8022b02:	4619      	mov	r1, r3
 8022b04:	4807      	ldr	r0, [pc, #28]	; (8022b24 <glcd_backlight+0x70>)
 8022b06:	f007 fa2b 	bl	8029f60 <HAL_TIM_PWM_ConfigChannel>
 8022b0a:	4603      	mov	r3, r0
 8022b0c:	2b00      	cmp	r3, #0
 8022b0e:	d001      	beq.n	8022b14 <glcd_backlight+0x60>
	DISP_BACK_CHANNEL) != HAL_OK) {
		Error_Handler();
 8022b10:	f7ff fb50 	bl	80221b4 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&DISP_BACK_TIMER, DISP_BACK_CHANNEL);
 8022b14:	210c      	movs	r1, #12
 8022b16:	4803      	ldr	r0, [pc, #12]	; (8022b24 <glcd_backlight+0x70>)
 8022b18:	f007 f8dc 	bl	8029cd4 <HAL_TIM_PWM_Start>
}
 8022b1c:	bf00      	nop
 8022b1e:	3728      	adds	r7, #40	; 0x28
 8022b20:	46bd      	mov	sp, r7
 8022b22:	bd80      	pop	{r7, pc}
 8022b24:	200015e0 	.word	0x200015e0
 8022b28:	51eb851f 	.word	0x51eb851f

08022b2c <glcd_init>:
/*
 *
 */
void glcd_init(uint16_t width, uint16_t height) {
 8022b2c:	b580      	push	{r7, lr}
 8022b2e:	b082      	sub	sp, #8
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	4603      	mov	r3, r0
 8022b34:	460a      	mov	r2, r1
 8022b36:	80fb      	strh	r3, [r7, #6]
 8022b38:	4613      	mov	r3, r2
 8022b3a:	80bb      	strh	r3, [r7, #4]
//	unsigned char glcd_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
	free(glcd_buffer);
 8022b3c:	4b30      	ldr	r3, [pc, #192]	; (8022c00 <glcd_init+0xd4>)
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	4618      	mov	r0, r3
 8022b42:	f012 f87d 	bl	8034c40 <free>
	glcd_width = width;
 8022b46:	4a2f      	ldr	r2, [pc, #188]	; (8022c04 <glcd_init+0xd8>)
 8022b48:	88fb      	ldrh	r3, [r7, #6]
 8022b4a:	8013      	strh	r3, [r2, #0]
	glcd_height = height;
 8022b4c:	4a2e      	ldr	r2, [pc, #184]	; (8022c08 <glcd_init+0xdc>)
 8022b4e:	88bb      	ldrh	r3, [r7, #4]
 8022b50:	8013      	strh	r3, [r2, #0]
	glcd_buffer = malloc(
			(sizeof(unsigned char)) * (size_t) glcd_width
 8022b52:	4b2c      	ldr	r3, [pc, #176]	; (8022c04 <glcd_init+0xd8>)
 8022b54:	881b      	ldrh	r3, [r3, #0]
 8022b56:	461a      	mov	r2, r3
					* (size_t) glcd_height);
 8022b58:	4b2b      	ldr	r3, [pc, #172]	; (8022c08 <glcd_init+0xdc>)
 8022b5a:	881b      	ldrh	r3, [r3, #0]
	glcd_buffer = malloc(
 8022b5c:	fb03 f302 	mul.w	r3, r3, r2
 8022b60:	4618      	mov	r0, r3
 8022b62:	f012 f865 	bl	8034c30 <malloc>
 8022b66:	4603      	mov	r3, r0
 8022b68:	461a      	mov	r2, r3
 8022b6a:	4b25      	ldr	r3, [pc, #148]	; (8022c00 <glcd_init+0xd4>)
 8022b6c:	601a      	str	r2, [r3, #0]

	// Select the chip
	ST7567_CS_RESET;
 8022b6e:	2200      	movs	r2, #0
 8022b70:	2180      	movs	r1, #128	; 0x80
 8022b72:	4826      	ldr	r0, [pc, #152]	; (8022c0c <glcd_init+0xe0>)
 8022b74:	f001 ff14 	bl	80249a0 <HAL_GPIO_WritePin>

	ST7567_RST_RESET;
 8022b78:	2200      	movs	r2, #0
 8022b7a:	2101      	movs	r1, #1
 8022b7c:	4824      	ldr	r0, [pc, #144]	; (8022c10 <glcd_init+0xe4>)
 8022b7e:	f001 ff0f 	bl	80249a0 <HAL_GPIO_WritePin>

	// Datasheet says "wait for power to stabilise" but gives
	// no specific time!
	HAL_Delay(50);
 8022b82:	2032      	movs	r0, #50	; 0x32
 8022b84:	f000 fc40 	bl	8023408 <HAL_Delay>

	ST7567_RST_SET;
 8022b88:	2201      	movs	r2, #1
 8022b8a:	2101      	movs	r1, #1
 8022b8c:	4820      	ldr	r0, [pc, #128]	; (8022c10 <glcd_init+0xe4>)
 8022b8e:	f001 ff07 	bl	80249a0 <HAL_GPIO_WritePin>
	//software reset
	glcd_command(GLCD_CMD_RESET);
 8022b92:	20e2      	movs	r0, #226	; 0xe2
 8022b94:	f7ff fdf2 	bl	802277c <glcd_command>
	// Set LCD bias to 1/9th
	glcd_command(GLCD_CMD_BIAS_7);
 8022b98:	20a3      	movs	r0, #163	; 0xa3
 8022b9a:	f7ff fdef 	bl	802277c <glcd_command>

	// Horizontal output direction (ADC segment driver selection)
	glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 8022b9e:	20a1      	movs	r0, #161	; 0xa1
 8022ba0:	f7ff fdec 	bl	802277c <glcd_command>

	// Vertical output direction (common output mode selection)
	glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 8022ba4:	20c8      	movs	r0, #200	; 0xc8
 8022ba6:	f7ff fde9 	bl	802277c <glcd_command>

	// Set internal resistor.  A suitable middle value is used as
	// the default.
	glcd_command(GLCD_CMD_RESISTOR | 0x04);
 8022baa:	2024      	movs	r0, #36	; 0x24
 8022bac:	f7ff fde6 	bl	802277c <glcd_command>

	// Power control setting (datasheet step 7)
	// Note: Skipping straight to 0x7 works with my hardware.
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x4);
 8022bb0:	202c      	movs	r0, #44	; 0x2c
 8022bb2:	f7ff fde3 	bl	802277c <glcd_command>
	//	DelayMs(50);
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x6);
 8022bb6:	202e      	movs	r0, #46	; 0x2e
 8022bb8:	f7ff fde0 	bl	802277c <glcd_command>
	//	DelayMs(50);
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x7);
 8022bbc:	202f      	movs	r0, #47	; 0x2f
 8022bbe:	f7ff fddd 	bl	802277c <glcd_command>
	//	DelayMs(10);

	// Volume set (brightness control).  A middle value is used here
	// also.
	glcd_command(GLCD_CMD_VOLUME_MODE);
 8022bc2:	2081      	movs	r0, #129	; 0x81
 8022bc4:	f7ff fdda 	bl	802277c <glcd_command>
	glcd_command(0x10);
 8022bc8:	2010      	movs	r0, #16
 8022bca:	f7ff fdd7 	bl	802277c <glcd_command>

	// Reset start position to the top
	glcd_command(GLCD_CMD_DISPLAY_START);
 8022bce:	2040      	movs	r0, #64	; 0x40
 8022bd0:	f7ff fdd4 	bl	802277c <glcd_command>

	// Turn the display on
	glcd_command(GLCD_CMD_DISPLAY_ON);
 8022bd4:	20af      	movs	r0, #175	; 0xaf
 8022bd6:	f7ff fdd1 	bl	802277c <glcd_command>

	// Unselect the chip
	ST7567_CS_SET;
 8022bda:	2201      	movs	r2, #1
 8022bdc:	2180      	movs	r1, #128	; 0x80
 8022bde:	480b      	ldr	r0, [pc, #44]	; (8022c0c <glcd_init+0xe0>)
 8022be0:	f001 fede 	bl	80249a0 <HAL_GPIO_WritePin>
	glcd_blank();
 8022be4:	f7ff feb8 	bl	8022958 <glcd_blank>
	glcd_backlight(50);
 8022be8:	2032      	movs	r0, #50	; 0x32
 8022bea:	f7ff ff63 	bl	8022ab4 <glcd_backlight>
	glcd_contrast(4, 16);
 8022bee:	2110      	movs	r1, #16
 8022bf0:	2004      	movs	r0, #4
 8022bf2:	f000 f851 	bl	8022c98 <glcd_contrast>
}
 8022bf6:	bf00      	nop
 8022bf8:	3708      	adds	r7, #8
 8022bfa:	46bd      	mov	sp, r7
 8022bfc:	bd80      	pop	{r7, pc}
 8022bfe:	bf00      	nop
 8022c00:	20001598 	.word	0x20001598
 8022c04:	2000159c 	.word	0x2000159c
 8022c08:	2000159e 	.word	0x2000159e
 8022c0c:	40020400 	.word	0x40020400
 8022c10:	40021000 	.word	0x40021000

08022c14 <glcd_flip_screen>:
/*
 *  flip screen
 *  flip=1, R->L and B->T
 *  flip=0, L->R and T->B
 */
void glcd_flip_screen(unsigned char flip) {
 8022c14:	b580      	push	{r7, lr}
 8022c16:	b082      	sub	sp, #8
 8022c18:	af00      	add	r7, sp, #0
 8022c1a:	4603      	mov	r3, r0
 8022c1c:	71fb      	strb	r3, [r7, #7]
	switch (flip) {
 8022c1e:	79fb      	ldrb	r3, [r7, #7]
 8022c20:	2b03      	cmp	r3, #3
 8022c22:	d833      	bhi.n	8022c8c <glcd_flip_screen+0x78>
 8022c24:	a201      	add	r2, pc, #4	; (adr r2, 8022c2c <glcd_flip_screen+0x18>)
 8022c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c2a:	bf00      	nop
 8022c2c:	08022c3d 	.word	0x08022c3d
 8022c30:	08022c51 	.word	0x08022c51
 8022c34:	08022c65 	.word	0x08022c65
 8022c38:	08022c79 	.word	0x08022c79
	case XLR_YTB:	//X=L->R,	y=T->B,	position(0,0)=(L,T)
		glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 8022c3c:	20a1      	movs	r0, #161	; 0xa1
 8022c3e:	f7ff fd9d 	bl	802277c <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_NORMAL);
 8022c42:	20c0      	movs	r0, #192	; 0xc0
 8022c44:	f7ff fd9a 	bl	802277c <glcd_command>
		glcd_flipped = 0;
 8022c48:	4b12      	ldr	r3, [pc, #72]	; (8022c94 <glcd_flip_screen+0x80>)
 8022c4a:	2200      	movs	r2, #0
 8022c4c:	701a      	strb	r2, [r3, #0]
		break;
 8022c4e:	e01d      	b.n	8022c8c <glcd_flip_screen+0x78>
	case XRL_YBT:	//X=R->L,	Y=B->T,	position(0,0)=(R,B)
		glcd_command(GLCD_CMD_HORIZONTAL_NORMAL);
 8022c50:	20a0      	movs	r0, #160	; 0xa0
 8022c52:	f7ff fd93 	bl	802277c <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 8022c56:	20c8      	movs	r0, #200	; 0xc8
 8022c58:	f7ff fd90 	bl	802277c <glcd_command>
		glcd_flipped = 1;
 8022c5c:	4b0d      	ldr	r3, [pc, #52]	; (8022c94 <glcd_flip_screen+0x80>)
 8022c5e:	2201      	movs	r2, #1
 8022c60:	701a      	strb	r2, [r3, #0]
		break;
 8022c62:	e013      	b.n	8022c8c <glcd_flip_screen+0x78>
	case XBT_YLR:	//X=B->T,	Y=L->R,	position(0,0)=(B,L)
		glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 8022c64:	20a1      	movs	r0, #161	; 0xa1
 8022c66:	f7ff fd89 	bl	802277c <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 8022c6a:	20c8      	movs	r0, #200	; 0xc8
 8022c6c:	f7ff fd86 	bl	802277c <glcd_command>
		glcd_flipped = 2;
 8022c70:	4b08      	ldr	r3, [pc, #32]	; (8022c94 <glcd_flip_screen+0x80>)
 8022c72:	2202      	movs	r2, #2
 8022c74:	701a      	strb	r2, [r3, #0]
		break;
 8022c76:	e009      	b.n	8022c8c <glcd_flip_screen+0x78>
	case XTB_YRL:	//X=T->B,	Y=R->L,	position(0,0)=(T,R)
		glcd_command(GLCD_CMD_HORIZONTAL_NORMAL);
 8022c78:	20a0      	movs	r0, #160	; 0xa0
 8022c7a:	f7ff fd7f 	bl	802277c <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_NORMAL);
 8022c7e:	20c0      	movs	r0, #192	; 0xc0
 8022c80:	f7ff fd7c 	bl	802277c <glcd_command>
		glcd_flipped = 3;
 8022c84:	4b03      	ldr	r3, [pc, #12]	; (8022c94 <glcd_flip_screen+0x80>)
 8022c86:	2203      	movs	r2, #3
 8022c88:	701a      	strb	r2, [r3, #0]
		break;
 8022c8a:	bf00      	nop
	}
}
 8022c8c:	bf00      	nop
 8022c8e:	3708      	adds	r7, #8
 8022c90:	46bd      	mov	sp, r7
 8022c92:	bd80      	pop	{r7, pc}
 8022c94:	20000396 	.word	0x20000396

08022c98 <glcd_contrast>:
	glcd_refresh();
}
/*
 *  set contrast of st7565
 */
void glcd_contrast(char resistor_ratio, char contrast) {
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	b082      	sub	sp, #8
 8022c9c:	af00      	add	r7, sp, #0
 8022c9e:	4603      	mov	r3, r0
 8022ca0:	460a      	mov	r2, r1
 8022ca2:	71fb      	strb	r3, [r7, #7]
 8022ca4:	4613      	mov	r3, r2
 8022ca6:	71bb      	strb	r3, [r7, #6]
	if (resistor_ratio > 7 || contrast > 63)
 8022ca8:	79fb      	ldrb	r3, [r7, #7]
 8022caa:	2b07      	cmp	r3, #7
 8022cac:	d811      	bhi.n	8022cd2 <glcd_contrast+0x3a>
 8022cae:	79bb      	ldrb	r3, [r7, #6]
 8022cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8022cb2:	d80e      	bhi.n	8022cd2 <glcd_contrast+0x3a>
		return;

	glcd_command(GLCD_CMD_RESISTOR | resistor_ratio);
 8022cb4:	79fb      	ldrb	r3, [r7, #7]
 8022cb6:	f043 0320 	orr.w	r3, r3, #32
 8022cba:	b2db      	uxtb	r3, r3
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f7ff fd5d 	bl	802277c <glcd_command>
	glcd_command(GLCD_CMD_VOLUME_MODE);
 8022cc2:	2081      	movs	r0, #129	; 0x81
 8022cc4:	f7ff fd5a 	bl	802277c <glcd_command>
	glcd_command(contrast);
 8022cc8:	79bb      	ldrb	r3, [r7, #6]
 8022cca:	4618      	mov	r0, r3
 8022ccc:	f7ff fd56 	bl	802277c <glcd_command>
 8022cd0:	e000      	b.n	8022cd4 <glcd_contrast+0x3c>
		return;
 8022cd2:	bf00      	nop
}
 8022cd4:	3708      	adds	r7, #8
 8022cd6:	46bd      	mov	sp, r7
 8022cd8:	bd80      	pop	{r7, pc}
	...

08022cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8022cdc:	b480      	push	{r7}
 8022cde:	b083      	sub	sp, #12
 8022ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022ce2:	2300      	movs	r3, #0
 8022ce4:	607b      	str	r3, [r7, #4]
 8022ce6:	4b10      	ldr	r3, [pc, #64]	; (8022d28 <HAL_MspInit+0x4c>)
 8022ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022cea:	4a0f      	ldr	r2, [pc, #60]	; (8022d28 <HAL_MspInit+0x4c>)
 8022cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8022cf2:	4b0d      	ldr	r3, [pc, #52]	; (8022d28 <HAL_MspInit+0x4c>)
 8022cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022cfa:	607b      	str	r3, [r7, #4]
 8022cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8022cfe:	2300      	movs	r3, #0
 8022d00:	603b      	str	r3, [r7, #0]
 8022d02:	4b09      	ldr	r3, [pc, #36]	; (8022d28 <HAL_MspInit+0x4c>)
 8022d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022d06:	4a08      	ldr	r2, [pc, #32]	; (8022d28 <HAL_MspInit+0x4c>)
 8022d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8022d0e:	4b06      	ldr	r3, [pc, #24]	; (8022d28 <HAL_MspInit+0x4c>)
 8022d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022d16:	603b      	str	r3, [r7, #0]
 8022d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8022d1a:	bf00      	nop
 8022d1c:	370c      	adds	r7, #12
 8022d1e:	46bd      	mov	sp, r7
 8022d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d24:	4770      	bx	lr
 8022d26:	bf00      	nop
 8022d28:	40023800 	.word	0x40023800

08022d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8022d2c:	b580      	push	{r7, lr}
 8022d2e:	b08c      	sub	sp, #48	; 0x30
 8022d30:	af00      	add	r7, sp, #0
 8022d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8022d34:	2300      	movs	r3, #0
 8022d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8022d38:	2300      	movs	r3, #0
 8022d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8022d3c:	2200      	movs	r2, #0
 8022d3e:	6879      	ldr	r1, [r7, #4]
 8022d40:	2019      	movs	r0, #25
 8022d42:	f000 fc5d 	bl	8023600 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8022d46:	2019      	movs	r0, #25
 8022d48:	f000 fc76 	bl	8023638 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8022d4c:	2300      	movs	r3, #0
 8022d4e:	60fb      	str	r3, [r7, #12]
 8022d50:	4b1f      	ldr	r3, [pc, #124]	; (8022dd0 <HAL_InitTick+0xa4>)
 8022d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022d54:	4a1e      	ldr	r2, [pc, #120]	; (8022dd0 <HAL_InitTick+0xa4>)
 8022d56:	f043 0301 	orr.w	r3, r3, #1
 8022d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8022d5c:	4b1c      	ldr	r3, [pc, #112]	; (8022dd0 <HAL_InitTick+0xa4>)
 8022d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022d60:	f003 0301 	and.w	r3, r3, #1
 8022d64:	60fb      	str	r3, [r7, #12]
 8022d66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8022d68:	f107 0210 	add.w	r2, r7, #16
 8022d6c:	f107 0314 	add.w	r3, r7, #20
 8022d70:	4611      	mov	r1, r2
 8022d72:	4618      	mov	r0, r3
 8022d74:	f005 fa5e 	bl	8028234 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8022d78:	f005 fa48 	bl	802820c <HAL_RCC_GetPCLK2Freq>
 8022d7c:	4603      	mov	r3, r0
 8022d7e:	005b      	lsls	r3, r3, #1
 8022d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8022d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d84:	4a13      	ldr	r2, [pc, #76]	; (8022dd4 <HAL_InitTick+0xa8>)
 8022d86:	fba2 2303 	umull	r2, r3, r2, r3
 8022d8a:	0c9b      	lsrs	r3, r3, #18
 8022d8c:	3b01      	subs	r3, #1
 8022d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8022d90:	4b11      	ldr	r3, [pc, #68]	; (8022dd8 <HAL_InitTick+0xac>)
 8022d92:	4a12      	ldr	r2, [pc, #72]	; (8022ddc <HAL_InitTick+0xb0>)
 8022d94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8022d96:	4b10      	ldr	r3, [pc, #64]	; (8022dd8 <HAL_InitTick+0xac>)
 8022d98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8022d9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8022d9e:	4a0e      	ldr	r2, [pc, #56]	; (8022dd8 <HAL_InitTick+0xac>)
 8022da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022da2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8022da4:	4b0c      	ldr	r3, [pc, #48]	; (8022dd8 <HAL_InitTick+0xac>)
 8022da6:	2200      	movs	r2, #0
 8022da8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022daa:	4b0b      	ldr	r3, [pc, #44]	; (8022dd8 <HAL_InitTick+0xac>)
 8022dac:	2200      	movs	r2, #0
 8022dae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8022db0:	4809      	ldr	r0, [pc, #36]	; (8022dd8 <HAL_InitTick+0xac>)
 8022db2:	f006 ff0a 	bl	8029bca <HAL_TIM_Base_Init>
 8022db6:	4603      	mov	r3, r0
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d104      	bne.n	8022dc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8022dbc:	4806      	ldr	r0, [pc, #24]	; (8022dd8 <HAL_InitTick+0xac>)
 8022dbe:	f006 ff2f 	bl	8029c20 <HAL_TIM_Base_Start_IT>
 8022dc2:	4603      	mov	r3, r0
 8022dc4:	e000      	b.n	8022dc8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8022dc6:	2301      	movs	r3, #1
}
 8022dc8:	4618      	mov	r0, r3
 8022dca:	3730      	adds	r7, #48	; 0x30
 8022dcc:	46bd      	mov	sp, r7
 8022dce:	bd80      	pop	{r7, pc}
 8022dd0:	40023800 	.word	0x40023800
 8022dd4:	431bde83 	.word	0x431bde83
 8022dd8:	200015a0 	.word	0x200015a0
 8022ddc:	40010000 	.word	0x40010000

08022de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8022de0:	b480      	push	{r7}
 8022de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8022de4:	e7fe      	b.n	8022de4 <NMI_Handler+0x4>

08022de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8022de6:	b480      	push	{r7}
 8022de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8022dea:	e7fe      	b.n	8022dea <HardFault_Handler+0x4>

08022dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8022dec:	b480      	push	{r7}
 8022dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8022df0:	e7fe      	b.n	8022df0 <MemManage_Handler+0x4>

08022df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8022df2:	b480      	push	{r7}
 8022df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8022df6:	e7fe      	b.n	8022df6 <BusFault_Handler+0x4>

08022df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8022df8:	b480      	push	{r7}
 8022dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8022dfc:	e7fe      	b.n	8022dfc <UsageFault_Handler+0x4>

08022dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8022dfe:	b480      	push	{r7}
 8022e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8022e02:	bf00      	nop
 8022e04:	46bd      	mov	sp, r7
 8022e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e0a:	4770      	bx	lr

08022e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8022e0c:	b480      	push	{r7}
 8022e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8022e10:	bf00      	nop
 8022e12:	46bd      	mov	sp, r7
 8022e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e18:	4770      	bx	lr

08022e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8022e1a:	b480      	push	{r7}
 8022e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8022e1e:	bf00      	nop
 8022e20:	46bd      	mov	sp, r7
 8022e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e26:	4770      	bx	lr

08022e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8022e28:	b580      	push	{r7, lr}
 8022e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8022e2c:	4802      	ldr	r0, [pc, #8]	; (8022e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8022e2e:	f006 ff8f 	bl	8029d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8022e32:	bf00      	nop
 8022e34:	bd80      	pop	{r7, pc}
 8022e36:	bf00      	nop
 8022e38:	200015a0 	.word	0x200015a0

08022e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8022e3c:	b580      	push	{r7, lr}
 8022e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8022e40:	4802      	ldr	r0, [pc, #8]	; (8022e4c <USART2_IRQHandler+0x10>)
 8022e42:	f007 ff8b 	bl	802ad5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8022e46:	bf00      	nop
 8022e48:	bd80      	pop	{r7, pc}
 8022e4a:	bf00      	nop
 8022e4c:	20001660 	.word	0x20001660

08022e50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8022e50:	b580      	push	{r7, lr}
 8022e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8022e54:	4802      	ldr	r0, [pc, #8]	; (8022e60 <USART3_IRQHandler+0x10>)
 8022e56:	f007 ff81 	bl	802ad5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8022e5a:	bf00      	nop
 8022e5c:	bd80      	pop	{r7, pc}
 8022e5e:	bf00      	nop
 8022e60:	20001620 	.word	0x20001620

08022e64 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8022e64:	b580      	push	{r7, lr}
 8022e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8022e68:	4802      	ldr	r0, [pc, #8]	; (8022e74 <SDIO_IRQHandler+0x10>)
 8022e6a:	f005 ffe9 	bl	8028e40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8022e6e:	bf00      	nop
 8022e70:	bd80      	pop	{r7, pc}
 8022e72:	bf00      	nop
 8022e74:	20001514 	.word	0x20001514

08022e78 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8022e7c:	4802      	ldr	r0, [pc, #8]	; (8022e88 <DMA2_Stream3_IRQHandler+0x10>)
 8022e7e:	f000 fd99 	bl	80239b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8022e82:	bf00      	nop
 8022e84:	bd80      	pop	{r7, pc}
 8022e86:	bf00      	nop
 8022e88:	20001454 	.word	0x20001454

08022e8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8022e8c:	b580      	push	{r7, lr}
 8022e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8022e90:	4802      	ldr	r0, [pc, #8]	; (8022e9c <OTG_FS_IRQHandler+0x10>)
 8022e92:	f003 fd60 	bl	8026956 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8022e96:	bf00      	nop
 8022e98:	bd80      	pop	{r7, pc}
 8022e9a:	bf00      	nop
 8022e9c:	20006c74 	.word	0x20006c74

08022ea0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8022ea0:	b580      	push	{r7, lr}
 8022ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8022ea4:	4802      	ldr	r0, [pc, #8]	; (8022eb0 <DMA2_Stream6_IRQHandler+0x10>)
 8022ea6:	f000 fd85 	bl	80239b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8022eaa:	bf00      	nop
 8022eac:	bd80      	pop	{r7, pc}
 8022eae:	bf00      	nop
 8022eb0:	200014b4 	.word	0x200014b4

08022eb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8022eb4:	b580      	push	{r7, lr}
 8022eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8022eb8:	4802      	ldr	r0, [pc, #8]	; (8022ec4 <OTG_HS_IRQHandler+0x10>)
 8022eba:	f002 f819 	bl	8024ef0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8022ebe:	bf00      	nop
 8022ec0:	bd80      	pop	{r7, pc}
 8022ec2:	bf00      	nop
 8022ec4:	20007454 	.word	0x20007454

08022ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022ec8:	b580      	push	{r7, lr}
 8022eca:	b086      	sub	sp, #24
 8022ecc:	af00      	add	r7, sp, #0
 8022ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022ed0:	4a14      	ldr	r2, [pc, #80]	; (8022f24 <_sbrk+0x5c>)
 8022ed2:	4b15      	ldr	r3, [pc, #84]	; (8022f28 <_sbrk+0x60>)
 8022ed4:	1ad3      	subs	r3, r2, r3
 8022ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022ed8:	697b      	ldr	r3, [r7, #20]
 8022eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022edc:	4b13      	ldr	r3, [pc, #76]	; (8022f2c <_sbrk+0x64>)
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	2b00      	cmp	r3, #0
 8022ee2:	d102      	bne.n	8022eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022ee4:	4b11      	ldr	r3, [pc, #68]	; (8022f2c <_sbrk+0x64>)
 8022ee6:	4a12      	ldr	r2, [pc, #72]	; (8022f30 <_sbrk+0x68>)
 8022ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8022eea:	4b10      	ldr	r3, [pc, #64]	; (8022f2c <_sbrk+0x64>)
 8022eec:	681a      	ldr	r2, [r3, #0]
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	4413      	add	r3, r2
 8022ef2:	693a      	ldr	r2, [r7, #16]
 8022ef4:	429a      	cmp	r2, r3
 8022ef6:	d207      	bcs.n	8022f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8022ef8:	f011 fe70 	bl	8034bdc <__errno>
 8022efc:	4602      	mov	r2, r0
 8022efe:	230c      	movs	r3, #12
 8022f00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8022f02:	f04f 33ff 	mov.w	r3, #4294967295
 8022f06:	e009      	b.n	8022f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8022f08:	4b08      	ldr	r3, [pc, #32]	; (8022f2c <_sbrk+0x64>)
 8022f0a:	681b      	ldr	r3, [r3, #0]
 8022f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8022f0e:	4b07      	ldr	r3, [pc, #28]	; (8022f2c <_sbrk+0x64>)
 8022f10:	681a      	ldr	r2, [r3, #0]
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	4413      	add	r3, r2
 8022f16:	4a05      	ldr	r2, [pc, #20]	; (8022f2c <_sbrk+0x64>)
 8022f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8022f1a:	68fb      	ldr	r3, [r7, #12]
}
 8022f1c:	4618      	mov	r0, r3
 8022f1e:	3718      	adds	r7, #24
 8022f20:	46bd      	mov	sp, r7
 8022f22:	bd80      	pop	{r7, pc}
 8022f24:	20020000 	.word	0x20020000
 8022f28:	00001000 	.word	0x00001000
 8022f2c:	20000398 	.word	0x20000398
 8022f30:	20007720 	.word	0x20007720

08022f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8022f34:	b480      	push	{r7}
 8022f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8022f38:	4b06      	ldr	r3, [pc, #24]	; (8022f54 <SystemInit+0x20>)
 8022f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022f3e:	4a05      	ldr	r2, [pc, #20]	; (8022f54 <SystemInit+0x20>)
 8022f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8022f48:	bf00      	nop
 8022f4a:	46bd      	mov	sp, r7
 8022f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f50:	4770      	bx	lr
 8022f52:	bf00      	nop
 8022f54:	e000ed00 	.word	0xe000ed00

08022f58 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8022f58:	b580      	push	{r7, lr}
 8022f5a:	b08e      	sub	sp, #56	; 0x38
 8022f5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8022f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022f62:	2200      	movs	r2, #0
 8022f64:	601a      	str	r2, [r3, #0]
 8022f66:	605a      	str	r2, [r3, #4]
 8022f68:	609a      	str	r2, [r3, #8]
 8022f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022f6c:	f107 0320 	add.w	r3, r7, #32
 8022f70:	2200      	movs	r2, #0
 8022f72:	601a      	str	r2, [r3, #0]
 8022f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8022f76:	1d3b      	adds	r3, r7, #4
 8022f78:	2200      	movs	r2, #0
 8022f7a:	601a      	str	r2, [r3, #0]
 8022f7c:	605a      	str	r2, [r3, #4]
 8022f7e:	609a      	str	r2, [r3, #8]
 8022f80:	60da      	str	r2, [r3, #12]
 8022f82:	611a      	str	r2, [r3, #16]
 8022f84:	615a      	str	r2, [r3, #20]
 8022f86:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8022f88:	4b2c      	ldr	r3, [pc, #176]	; (802303c <MX_TIM4_Init+0xe4>)
 8022f8a:	4a2d      	ldr	r2, [pc, #180]	; (8023040 <MX_TIM4_Init+0xe8>)
 8022f8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8022f8e:	4b2b      	ldr	r3, [pc, #172]	; (802303c <MX_TIM4_Init+0xe4>)
 8022f90:	2229      	movs	r2, #41	; 0x29
 8022f92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022f94:	4b29      	ldr	r3, [pc, #164]	; (802303c <MX_TIM4_Init+0xe4>)
 8022f96:	2200      	movs	r2, #0
 8022f98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8022f9a:	4b28      	ldr	r3, [pc, #160]	; (802303c <MX_TIM4_Init+0xe4>)
 8022f9c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8022fa0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022fa2:	4b26      	ldr	r3, [pc, #152]	; (802303c <MX_TIM4_Init+0xe4>)
 8022fa4:	2200      	movs	r2, #0
 8022fa6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022fa8:	4b24      	ldr	r3, [pc, #144]	; (802303c <MX_TIM4_Init+0xe4>)
 8022faa:	2200      	movs	r2, #0
 8022fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8022fae:	4823      	ldr	r0, [pc, #140]	; (802303c <MX_TIM4_Init+0xe4>)
 8022fb0:	f006 fe0b 	bl	8029bca <HAL_TIM_Base_Init>
 8022fb4:	4603      	mov	r3, r0
 8022fb6:	2b00      	cmp	r3, #0
 8022fb8:	d001      	beq.n	8022fbe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8022fba:	f7ff f8fb 	bl	80221b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8022fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8022fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022fc8:	4619      	mov	r1, r3
 8022fca:	481c      	ldr	r0, [pc, #112]	; (802303c <MX_TIM4_Init+0xe4>)
 8022fcc:	f007 f88e 	bl	802a0ec <HAL_TIM_ConfigClockSource>
 8022fd0:	4603      	mov	r3, r0
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d001      	beq.n	8022fda <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8022fd6:	f7ff f8ed 	bl	80221b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8022fda:	4818      	ldr	r0, [pc, #96]	; (802303c <MX_TIM4_Init+0xe4>)
 8022fdc:	f006 fe44 	bl	8029c68 <HAL_TIM_PWM_Init>
 8022fe0:	4603      	mov	r3, r0
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d001      	beq.n	8022fea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8022fe6:	f7ff f8e5 	bl	80221b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022fea:	2300      	movs	r3, #0
 8022fec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022fee:	2300      	movs	r3, #0
 8022ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8022ff2:	f107 0320 	add.w	r3, r7, #32
 8022ff6:	4619      	mov	r1, r3
 8022ff8:	4810      	ldr	r0, [pc, #64]	; (802303c <MX_TIM4_Init+0xe4>)
 8022ffa:	f007 fc67 	bl	802a8cc <HAL_TIMEx_MasterConfigSynchronization>
 8022ffe:	4603      	mov	r3, r0
 8023000:	2b00      	cmp	r3, #0
 8023002:	d001      	beq.n	8023008 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8023004:	f7ff f8d6 	bl	80221b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023008:	2360      	movs	r3, #96	; 0x60
 802300a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 802300c:	23f9      	movs	r3, #249	; 0xf9
 802300e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8023010:	2302      	movs	r3, #2
 8023012:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023014:	2300      	movs	r3, #0
 8023016:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023018:	1d3b      	adds	r3, r7, #4
 802301a:	220c      	movs	r2, #12
 802301c:	4619      	mov	r1, r3
 802301e:	4807      	ldr	r0, [pc, #28]	; (802303c <MX_TIM4_Init+0xe4>)
 8023020:	f006 ff9e 	bl	8029f60 <HAL_TIM_PWM_ConfigChannel>
 8023024:	4603      	mov	r3, r0
 8023026:	2b00      	cmp	r3, #0
 8023028:	d001      	beq.n	802302e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 802302a:	f7ff f8c3 	bl	80221b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 802302e:	4803      	ldr	r0, [pc, #12]	; (802303c <MX_TIM4_Init+0xe4>)
 8023030:	f000 f82a 	bl	8023088 <HAL_TIM_MspPostInit>

}
 8023034:	bf00      	nop
 8023036:	3738      	adds	r7, #56	; 0x38
 8023038:	46bd      	mov	sp, r7
 802303a:	bd80      	pop	{r7, pc}
 802303c:	200015e0 	.word	0x200015e0
 8023040:	40000800 	.word	0x40000800

08023044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8023044:	b480      	push	{r7}
 8023046:	b085      	sub	sp, #20
 8023048:	af00      	add	r7, sp, #0
 802304a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	4a0b      	ldr	r2, [pc, #44]	; (8023080 <HAL_TIM_Base_MspInit+0x3c>)
 8023052:	4293      	cmp	r3, r2
 8023054:	d10d      	bne.n	8023072 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8023056:	2300      	movs	r3, #0
 8023058:	60fb      	str	r3, [r7, #12]
 802305a:	4b0a      	ldr	r3, [pc, #40]	; (8023084 <HAL_TIM_Base_MspInit+0x40>)
 802305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802305e:	4a09      	ldr	r2, [pc, #36]	; (8023084 <HAL_TIM_Base_MspInit+0x40>)
 8023060:	f043 0304 	orr.w	r3, r3, #4
 8023064:	6413      	str	r3, [r2, #64]	; 0x40
 8023066:	4b07      	ldr	r3, [pc, #28]	; (8023084 <HAL_TIM_Base_MspInit+0x40>)
 8023068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802306a:	f003 0304 	and.w	r3, r3, #4
 802306e:	60fb      	str	r3, [r7, #12]
 8023070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8023072:	bf00      	nop
 8023074:	3714      	adds	r7, #20
 8023076:	46bd      	mov	sp, r7
 8023078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802307c:	4770      	bx	lr
 802307e:	bf00      	nop
 8023080:	40000800 	.word	0x40000800
 8023084:	40023800 	.word	0x40023800

08023088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8023088:	b580      	push	{r7, lr}
 802308a:	b088      	sub	sp, #32
 802308c:	af00      	add	r7, sp, #0
 802308e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023090:	f107 030c 	add.w	r3, r7, #12
 8023094:	2200      	movs	r2, #0
 8023096:	601a      	str	r2, [r3, #0]
 8023098:	605a      	str	r2, [r3, #4]
 802309a:	609a      	str	r2, [r3, #8]
 802309c:	60da      	str	r2, [r3, #12]
 802309e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	4a12      	ldr	r2, [pc, #72]	; (80230f0 <HAL_TIM_MspPostInit+0x68>)
 80230a6:	4293      	cmp	r3, r2
 80230a8:	d11e      	bne.n	80230e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80230aa:	2300      	movs	r3, #0
 80230ac:	60bb      	str	r3, [r7, #8]
 80230ae:	4b11      	ldr	r3, [pc, #68]	; (80230f4 <HAL_TIM_MspPostInit+0x6c>)
 80230b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230b2:	4a10      	ldr	r2, [pc, #64]	; (80230f4 <HAL_TIM_MspPostInit+0x6c>)
 80230b4:	f043 0302 	orr.w	r3, r3, #2
 80230b8:	6313      	str	r3, [r2, #48]	; 0x30
 80230ba:	4b0e      	ldr	r3, [pc, #56]	; (80230f4 <HAL_TIM_MspPostInit+0x6c>)
 80230bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230be:	f003 0302 	and.w	r3, r3, #2
 80230c2:	60bb      	str	r3, [r7, #8]
 80230c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = DISP_LEDA_Pin;
 80230c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80230ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80230cc:	2302      	movs	r3, #2
 80230ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80230d0:	2300      	movs	r3, #0
 80230d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80230d4:	2300      	movs	r3, #0
 80230d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80230d8:	2302      	movs	r3, #2
 80230da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 80230dc:	f107 030c 	add.w	r3, r7, #12
 80230e0:	4619      	mov	r1, r3
 80230e2:	4805      	ldr	r0, [pc, #20]	; (80230f8 <HAL_TIM_MspPostInit+0x70>)
 80230e4:	f001 f9b0 	bl	8024448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80230e8:	bf00      	nop
 80230ea:	3720      	adds	r7, #32
 80230ec:	46bd      	mov	sp, r7
 80230ee:	bd80      	pop	{r7, pc}
 80230f0:	40000800 	.word	0x40000800
 80230f4:	40023800 	.word	0x40023800
 80230f8:	40020400 	.word	0x40020400

080230fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8023100:	4b11      	ldr	r3, [pc, #68]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023102:	4a12      	ldr	r2, [pc, #72]	; (802314c <MX_USART2_UART_Init+0x50>)
 8023104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8023106:	4b10      	ldr	r3, [pc, #64]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802310c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802310e:	4b0e      	ldr	r3, [pc, #56]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023110:	2200      	movs	r2, #0
 8023112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8023114:	4b0c      	ldr	r3, [pc, #48]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023116:	2200      	movs	r2, #0
 8023118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802311a:	4b0b      	ldr	r3, [pc, #44]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 802311c:	2200      	movs	r2, #0
 802311e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8023120:	4b09      	ldr	r3, [pc, #36]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023122:	220c      	movs	r2, #12
 8023124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8023126:	4b08      	ldr	r3, [pc, #32]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023128:	2200      	movs	r2, #0
 802312a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802312c:	4b06      	ldr	r3, [pc, #24]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 802312e:	2200      	movs	r2, #0
 8023130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8023132:	4805      	ldr	r0, [pc, #20]	; (8023148 <MX_USART2_UART_Init+0x4c>)
 8023134:	f007 fc5a 	bl	802a9ec <HAL_UART_Init>
 8023138:	4603      	mov	r3, r0
 802313a:	2b00      	cmp	r3, #0
 802313c:	d001      	beq.n	8023142 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802313e:	f7ff f839 	bl	80221b4 <Error_Handler>
  }

}
 8023142:	bf00      	nop
 8023144:	bd80      	pop	{r7, pc}
 8023146:	bf00      	nop
 8023148:	20001660 	.word	0x20001660
 802314c:	40004400 	.word	0x40004400

08023150 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8023150:	b580      	push	{r7, lr}
 8023152:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8023154:	4b11      	ldr	r3, [pc, #68]	; (802319c <MX_USART3_UART_Init+0x4c>)
 8023156:	4a12      	ldr	r2, [pc, #72]	; (80231a0 <MX_USART3_UART_Init+0x50>)
 8023158:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 802315a:	4b10      	ldr	r3, [pc, #64]	; (802319c <MX_USART3_UART_Init+0x4c>)
 802315c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8023160:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8023162:	4b0e      	ldr	r3, [pc, #56]	; (802319c <MX_USART3_UART_Init+0x4c>)
 8023164:	2200      	movs	r2, #0
 8023166:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8023168:	4b0c      	ldr	r3, [pc, #48]	; (802319c <MX_USART3_UART_Init+0x4c>)
 802316a:	2200      	movs	r2, #0
 802316c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 802316e:	4b0b      	ldr	r3, [pc, #44]	; (802319c <MX_USART3_UART_Init+0x4c>)
 8023170:	2200      	movs	r2, #0
 8023172:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8023174:	4b09      	ldr	r3, [pc, #36]	; (802319c <MX_USART3_UART_Init+0x4c>)
 8023176:	220c      	movs	r2, #12
 8023178:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802317a:	4b08      	ldr	r3, [pc, #32]	; (802319c <MX_USART3_UART_Init+0x4c>)
 802317c:	2200      	movs	r2, #0
 802317e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8023180:	4b06      	ldr	r3, [pc, #24]	; (802319c <MX_USART3_UART_Init+0x4c>)
 8023182:	2200      	movs	r2, #0
 8023184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8023186:	4805      	ldr	r0, [pc, #20]	; (802319c <MX_USART3_UART_Init+0x4c>)
 8023188:	f007 fc30 	bl	802a9ec <HAL_UART_Init>
 802318c:	4603      	mov	r3, r0
 802318e:	2b00      	cmp	r3, #0
 8023190:	d001      	beq.n	8023196 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8023192:	f7ff f80f 	bl	80221b4 <Error_Handler>
  }

}
 8023196:	bf00      	nop
 8023198:	bd80      	pop	{r7, pc}
 802319a:	bf00      	nop
 802319c:	20001620 	.word	0x20001620
 80231a0:	40004800 	.word	0x40004800

080231a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80231a4:	b580      	push	{r7, lr}
 80231a6:	b08c      	sub	sp, #48	; 0x30
 80231a8:	af00      	add	r7, sp, #0
 80231aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80231ac:	f107 031c 	add.w	r3, r7, #28
 80231b0:	2200      	movs	r2, #0
 80231b2:	601a      	str	r2, [r3, #0]
 80231b4:	605a      	str	r2, [r3, #4]
 80231b6:	609a      	str	r2, [r3, #8]
 80231b8:	60da      	str	r2, [r3, #12]
 80231ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	4a3a      	ldr	r2, [pc, #232]	; (80232ac <HAL_UART_MspInit+0x108>)
 80231c2:	4293      	cmp	r3, r2
 80231c4:	d134      	bne.n	8023230 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80231c6:	2300      	movs	r3, #0
 80231c8:	61bb      	str	r3, [r7, #24]
 80231ca:	4b39      	ldr	r3, [pc, #228]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 80231cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231ce:	4a38      	ldr	r2, [pc, #224]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 80231d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80231d4:	6413      	str	r3, [r2, #64]	; 0x40
 80231d6:	4b36      	ldr	r3, [pc, #216]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 80231d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80231de:	61bb      	str	r3, [r7, #24]
 80231e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80231e2:	2300      	movs	r3, #0
 80231e4:	617b      	str	r3, [r7, #20]
 80231e6:	4b32      	ldr	r3, [pc, #200]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 80231e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231ea:	4a31      	ldr	r2, [pc, #196]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 80231ec:	f043 0308 	orr.w	r3, r3, #8
 80231f0:	6313      	str	r3, [r2, #48]	; 0x30
 80231f2:	4b2f      	ldr	r3, [pc, #188]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 80231f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231f6:	f003 0308 	and.w	r3, r3, #8
 80231fa:	617b      	str	r3, [r7, #20]
 80231fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80231fe:	2360      	movs	r3, #96	; 0x60
 8023200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023202:	2302      	movs	r3, #2
 8023204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023206:	2300      	movs	r3, #0
 8023208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802320a:	2303      	movs	r3, #3
 802320c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802320e:	2307      	movs	r3, #7
 8023210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023212:	f107 031c 	add.w	r3, r7, #28
 8023216:	4619      	mov	r1, r3
 8023218:	4826      	ldr	r0, [pc, #152]	; (80232b4 <HAL_UART_MspInit+0x110>)
 802321a:	f001 f915 	bl	8024448 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 802321e:	2200      	movs	r2, #0
 8023220:	2100      	movs	r1, #0
 8023222:	2026      	movs	r0, #38	; 0x26
 8023224:	f000 f9ec 	bl	8023600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8023228:	2026      	movs	r0, #38	; 0x26
 802322a:	f000 fa05 	bl	8023638 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802322e:	e039      	b.n	80232a4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8023230:	687b      	ldr	r3, [r7, #4]
 8023232:	681b      	ldr	r3, [r3, #0]
 8023234:	4a20      	ldr	r2, [pc, #128]	; (80232b8 <HAL_UART_MspInit+0x114>)
 8023236:	4293      	cmp	r3, r2
 8023238:	d134      	bne.n	80232a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 802323a:	2300      	movs	r3, #0
 802323c:	613b      	str	r3, [r7, #16]
 802323e:	4b1c      	ldr	r3, [pc, #112]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 8023240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023242:	4a1b      	ldr	r2, [pc, #108]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 8023244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023248:	6413      	str	r3, [r2, #64]	; 0x40
 802324a:	4b19      	ldr	r3, [pc, #100]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 802324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023252:	613b      	str	r3, [r7, #16]
 8023254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023256:	2300      	movs	r3, #0
 8023258:	60fb      	str	r3, [r7, #12]
 802325a:	4b15      	ldr	r3, [pc, #84]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 802325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802325e:	4a14      	ldr	r2, [pc, #80]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 8023260:	f043 0302 	orr.w	r3, r3, #2
 8023264:	6313      	str	r3, [r2, #48]	; 0x30
 8023266:	4b12      	ldr	r3, [pc, #72]	; (80232b0 <HAL_UART_MspInit+0x10c>)
 8023268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802326a:	f003 0302 	and.w	r3, r3, #2
 802326e:	60fb      	str	r3, [r7, #12]
 8023270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8023272:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8023276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023278:	2302      	movs	r3, #2
 802327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802327c:	2300      	movs	r3, #0
 802327e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023280:	2303      	movs	r3, #3
 8023282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8023284:	2307      	movs	r3, #7
 8023286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023288:	f107 031c 	add.w	r3, r7, #28
 802328c:	4619      	mov	r1, r3
 802328e:	480b      	ldr	r0, [pc, #44]	; (80232bc <HAL_UART_MspInit+0x118>)
 8023290:	f001 f8da 	bl	8024448 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8023294:	2200      	movs	r2, #0
 8023296:	2100      	movs	r1, #0
 8023298:	2027      	movs	r0, #39	; 0x27
 802329a:	f000 f9b1 	bl	8023600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802329e:	2027      	movs	r0, #39	; 0x27
 80232a0:	f000 f9ca 	bl	8023638 <HAL_NVIC_EnableIRQ>
}
 80232a4:	bf00      	nop
 80232a6:	3730      	adds	r7, #48	; 0x30
 80232a8:	46bd      	mov	sp, r7
 80232aa:	bd80      	pop	{r7, pc}
 80232ac:	40004400 	.word	0x40004400
 80232b0:	40023800 	.word	0x40023800
 80232b4:	40020c00 	.word	0x40020c00
 80232b8:	40004800 	.word	0x40004800
 80232bc:	40020400 	.word	0x40020400

080232c0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80232c0:	b580      	push	{r7, lr}
 80232c2:	b082      	sub	sp, #8
 80232c4:	af00      	add	r7, sp, #0
 80232c6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	681b      	ldr	r3, [r3, #0]
 80232cc:	4a13      	ldr	r2, [pc, #76]	; (802331c <HAL_UART_MspDeInit+0x5c>)
 80232ce:	4293      	cmp	r3, r2
 80232d0:	d10d      	bne.n	80232ee <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80232d2:	4b13      	ldr	r3, [pc, #76]	; (8023320 <HAL_UART_MspDeInit+0x60>)
 80232d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232d6:	4a12      	ldr	r2, [pc, #72]	; (8023320 <HAL_UART_MspDeInit+0x60>)
 80232d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80232dc:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6|GPIO_PIN_5);
 80232de:	2160      	movs	r1, #96	; 0x60
 80232e0:	4810      	ldr	r0, [pc, #64]	; (8023324 <HAL_UART_MspDeInit+0x64>)
 80232e2:	f001 fa4b 	bl	802477c <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80232e6:	2026      	movs	r0, #38	; 0x26
 80232e8:	f000 f9b4 	bl	8023654 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 80232ec:	e012      	b.n	8023314 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART3)
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	4a0d      	ldr	r2, [pc, #52]	; (8023328 <HAL_UART_MspDeInit+0x68>)
 80232f4:	4293      	cmp	r3, r2
 80232f6:	d10d      	bne.n	8023314 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 80232f8:	4b09      	ldr	r3, [pc, #36]	; (8023320 <HAL_UART_MspDeInit+0x60>)
 80232fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232fc:	4a08      	ldr	r2, [pc, #32]	; (8023320 <HAL_UART_MspDeInit+0x60>)
 80232fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023302:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8023304:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8023308:	4808      	ldr	r0, [pc, #32]	; (802332c <HAL_UART_MspDeInit+0x6c>)
 802330a:	f001 fa37 	bl	802477c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 802330e:	2027      	movs	r0, #39	; 0x27
 8023310:	f000 f9a0 	bl	8023654 <HAL_NVIC_DisableIRQ>
}
 8023314:	bf00      	nop
 8023316:	3708      	adds	r7, #8
 8023318:	46bd      	mov	sp, r7
 802331a:	bd80      	pop	{r7, pc}
 802331c:	40004400 	.word	0x40004400
 8023320:	40023800 	.word	0x40023800
 8023324:	40020c00 	.word	0x40020c00
 8023328:	40004800 	.word	0x40004800
 802332c:	40020400 	.word	0x40020400

08023330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8023330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8023368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8023334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8023336:	e003      	b.n	8023340 <LoopCopyDataInit>

08023338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8023338:	4b0c      	ldr	r3, [pc, #48]	; (802336c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802333a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802333c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802333e:	3104      	adds	r1, #4

08023340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8023340:	480b      	ldr	r0, [pc, #44]	; (8023370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8023342:	4b0c      	ldr	r3, [pc, #48]	; (8023374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8023344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8023346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8023348:	d3f6      	bcc.n	8023338 <CopyDataInit>
  ldr  r2, =_sbss
 802334a:	4a0b      	ldr	r2, [pc, #44]	; (8023378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802334c:	e002      	b.n	8023354 <LoopFillZerobss>

0802334e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802334e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8023350:	f842 3b04 	str.w	r3, [r2], #4

08023354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8023354:	4b09      	ldr	r3, [pc, #36]	; (802337c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8023356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8023358:	d3f9      	bcc.n	802334e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802335a:	f7ff fdeb 	bl	8022f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802335e:	f011 fc43 	bl	8034be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8023362:	f7fe fddd 	bl	8021f20 <main>
  bx  lr    
 8023366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8023368:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 802336c:	08038640 	.word	0x08038640
  ldr  r0, =_sdata
 8023370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8023374:	20000370 	.word	0x20000370
  ldr  r2, =_sbss
 8023378:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 802337c:	2000771c 	.word	0x2000771c

08023380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8023380:	e7fe      	b.n	8023380 <ADC_IRQHandler>
	...

08023384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023384:	b580      	push	{r7, lr}
 8023386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023388:	4b0e      	ldr	r3, [pc, #56]	; (80233c4 <HAL_Init+0x40>)
 802338a:	681b      	ldr	r3, [r3, #0]
 802338c:	4a0d      	ldr	r2, [pc, #52]	; (80233c4 <HAL_Init+0x40>)
 802338e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023394:	4b0b      	ldr	r3, [pc, #44]	; (80233c4 <HAL_Init+0x40>)
 8023396:	681b      	ldr	r3, [r3, #0]
 8023398:	4a0a      	ldr	r2, [pc, #40]	; (80233c4 <HAL_Init+0x40>)
 802339a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802339e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80233a0:	4b08      	ldr	r3, [pc, #32]	; (80233c4 <HAL_Init+0x40>)
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	4a07      	ldr	r2, [pc, #28]	; (80233c4 <HAL_Init+0x40>)
 80233a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80233aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80233ac:	2003      	movs	r0, #3
 80233ae:	f000 f91c 	bl	80235ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80233b2:	2000      	movs	r0, #0
 80233b4:	f7ff fcba 	bl	8022d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80233b8:	f7ff fc90 	bl	8022cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80233bc:	2300      	movs	r3, #0
}
 80233be:	4618      	mov	r0, r3
 80233c0:	bd80      	pop	{r7, pc}
 80233c2:	bf00      	nop
 80233c4:	40023c00 	.word	0x40023c00

080233c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80233c8:	b480      	push	{r7}
 80233ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80233cc:	4b06      	ldr	r3, [pc, #24]	; (80233e8 <HAL_IncTick+0x20>)
 80233ce:	781b      	ldrb	r3, [r3, #0]
 80233d0:	461a      	mov	r2, r3
 80233d2:	4b06      	ldr	r3, [pc, #24]	; (80233ec <HAL_IncTick+0x24>)
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	4413      	add	r3, r2
 80233d8:	4a04      	ldr	r2, [pc, #16]	; (80233ec <HAL_IncTick+0x24>)
 80233da:	6013      	str	r3, [r2, #0]
}
 80233dc:	bf00      	nop
 80233de:	46bd      	mov	sp, r7
 80233e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233e4:	4770      	bx	lr
 80233e6:	bf00      	nop
 80233e8:	20000008 	.word	0x20000008
 80233ec:	200016a0 	.word	0x200016a0

080233f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80233f0:	b480      	push	{r7}
 80233f2:	af00      	add	r7, sp, #0
  return uwTick;
 80233f4:	4b03      	ldr	r3, [pc, #12]	; (8023404 <HAL_GetTick+0x14>)
 80233f6:	681b      	ldr	r3, [r3, #0]
}
 80233f8:	4618      	mov	r0, r3
 80233fa:	46bd      	mov	sp, r7
 80233fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023400:	4770      	bx	lr
 8023402:	bf00      	nop
 8023404:	200016a0 	.word	0x200016a0

08023408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023408:	b580      	push	{r7, lr}
 802340a:	b084      	sub	sp, #16
 802340c:	af00      	add	r7, sp, #0
 802340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023410:	f7ff ffee 	bl	80233f0 <HAL_GetTick>
 8023414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802341a:	68fb      	ldr	r3, [r7, #12]
 802341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023420:	d005      	beq.n	802342e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8023422:	4b09      	ldr	r3, [pc, #36]	; (8023448 <HAL_Delay+0x40>)
 8023424:	781b      	ldrb	r3, [r3, #0]
 8023426:	461a      	mov	r2, r3
 8023428:	68fb      	ldr	r3, [r7, #12]
 802342a:	4413      	add	r3, r2
 802342c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802342e:	bf00      	nop
 8023430:	f7ff ffde 	bl	80233f0 <HAL_GetTick>
 8023434:	4602      	mov	r2, r0
 8023436:	68bb      	ldr	r3, [r7, #8]
 8023438:	1ad3      	subs	r3, r2, r3
 802343a:	68fa      	ldr	r2, [r7, #12]
 802343c:	429a      	cmp	r2, r3
 802343e:	d8f7      	bhi.n	8023430 <HAL_Delay+0x28>
  {
  }
}
 8023440:	bf00      	nop
 8023442:	3710      	adds	r7, #16
 8023444:	46bd      	mov	sp, r7
 8023446:	bd80      	pop	{r7, pc}
 8023448:	20000008 	.word	0x20000008

0802344c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802344c:	b480      	push	{r7}
 802344e:	b085      	sub	sp, #20
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	f003 0307 	and.w	r3, r3, #7
 802345a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802345c:	4b0c      	ldr	r3, [pc, #48]	; (8023490 <__NVIC_SetPriorityGrouping+0x44>)
 802345e:	68db      	ldr	r3, [r3, #12]
 8023460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8023462:	68ba      	ldr	r2, [r7, #8]
 8023464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023468:	4013      	ands	r3, r2
 802346a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802346c:	68fb      	ldr	r3, [r7, #12]
 802346e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8023470:	68bb      	ldr	r3, [r7, #8]
 8023472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8023474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802347c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802347e:	4a04      	ldr	r2, [pc, #16]	; (8023490 <__NVIC_SetPriorityGrouping+0x44>)
 8023480:	68bb      	ldr	r3, [r7, #8]
 8023482:	60d3      	str	r3, [r2, #12]
}
 8023484:	bf00      	nop
 8023486:	3714      	adds	r7, #20
 8023488:	46bd      	mov	sp, r7
 802348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802348e:	4770      	bx	lr
 8023490:	e000ed00 	.word	0xe000ed00

08023494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023494:	b480      	push	{r7}
 8023496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023498:	4b04      	ldr	r3, [pc, #16]	; (80234ac <__NVIC_GetPriorityGrouping+0x18>)
 802349a:	68db      	ldr	r3, [r3, #12]
 802349c:	0a1b      	lsrs	r3, r3, #8
 802349e:	f003 0307 	and.w	r3, r3, #7
}
 80234a2:	4618      	mov	r0, r3
 80234a4:	46bd      	mov	sp, r7
 80234a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234aa:	4770      	bx	lr
 80234ac:	e000ed00 	.word	0xe000ed00

080234b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80234b0:	b480      	push	{r7}
 80234b2:	b083      	sub	sp, #12
 80234b4:	af00      	add	r7, sp, #0
 80234b6:	4603      	mov	r3, r0
 80234b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80234ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234be:	2b00      	cmp	r3, #0
 80234c0:	db0b      	blt.n	80234da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80234c2:	79fb      	ldrb	r3, [r7, #7]
 80234c4:	f003 021f 	and.w	r2, r3, #31
 80234c8:	4907      	ldr	r1, [pc, #28]	; (80234e8 <__NVIC_EnableIRQ+0x38>)
 80234ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234ce:	095b      	lsrs	r3, r3, #5
 80234d0:	2001      	movs	r0, #1
 80234d2:	fa00 f202 	lsl.w	r2, r0, r2
 80234d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80234da:	bf00      	nop
 80234dc:	370c      	adds	r7, #12
 80234de:	46bd      	mov	sp, r7
 80234e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234e4:	4770      	bx	lr
 80234e6:	bf00      	nop
 80234e8:	e000e100 	.word	0xe000e100

080234ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80234ec:	b480      	push	{r7}
 80234ee:	b083      	sub	sp, #12
 80234f0:	af00      	add	r7, sp, #0
 80234f2:	4603      	mov	r3, r0
 80234f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80234f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	db10      	blt.n	8023520 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80234fe:	79fb      	ldrb	r3, [r7, #7]
 8023500:	f003 021f 	and.w	r2, r3, #31
 8023504:	4909      	ldr	r1, [pc, #36]	; (802352c <__NVIC_DisableIRQ+0x40>)
 8023506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802350a:	095b      	lsrs	r3, r3, #5
 802350c:	2001      	movs	r0, #1
 802350e:	fa00 f202 	lsl.w	r2, r0, r2
 8023512:	3320      	adds	r3, #32
 8023514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8023518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 802351c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8023520:	bf00      	nop
 8023522:	370c      	adds	r7, #12
 8023524:	46bd      	mov	sp, r7
 8023526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802352a:	4770      	bx	lr
 802352c:	e000e100 	.word	0xe000e100

08023530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023530:	b480      	push	{r7}
 8023532:	b083      	sub	sp, #12
 8023534:	af00      	add	r7, sp, #0
 8023536:	4603      	mov	r3, r0
 8023538:	6039      	str	r1, [r7, #0]
 802353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023540:	2b00      	cmp	r3, #0
 8023542:	db0a      	blt.n	802355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023544:	683b      	ldr	r3, [r7, #0]
 8023546:	b2da      	uxtb	r2, r3
 8023548:	490c      	ldr	r1, [pc, #48]	; (802357c <__NVIC_SetPriority+0x4c>)
 802354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802354e:	0112      	lsls	r2, r2, #4
 8023550:	b2d2      	uxtb	r2, r2
 8023552:	440b      	add	r3, r1
 8023554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023558:	e00a      	b.n	8023570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802355a:	683b      	ldr	r3, [r7, #0]
 802355c:	b2da      	uxtb	r2, r3
 802355e:	4908      	ldr	r1, [pc, #32]	; (8023580 <__NVIC_SetPriority+0x50>)
 8023560:	79fb      	ldrb	r3, [r7, #7]
 8023562:	f003 030f 	and.w	r3, r3, #15
 8023566:	3b04      	subs	r3, #4
 8023568:	0112      	lsls	r2, r2, #4
 802356a:	b2d2      	uxtb	r2, r2
 802356c:	440b      	add	r3, r1
 802356e:	761a      	strb	r2, [r3, #24]
}
 8023570:	bf00      	nop
 8023572:	370c      	adds	r7, #12
 8023574:	46bd      	mov	sp, r7
 8023576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802357a:	4770      	bx	lr
 802357c:	e000e100 	.word	0xe000e100
 8023580:	e000ed00 	.word	0xe000ed00

08023584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023584:	b480      	push	{r7}
 8023586:	b089      	sub	sp, #36	; 0x24
 8023588:	af00      	add	r7, sp, #0
 802358a:	60f8      	str	r0, [r7, #12]
 802358c:	60b9      	str	r1, [r7, #8]
 802358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023590:	68fb      	ldr	r3, [r7, #12]
 8023592:	f003 0307 	and.w	r3, r3, #7
 8023596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023598:	69fb      	ldr	r3, [r7, #28]
 802359a:	f1c3 0307 	rsb	r3, r3, #7
 802359e:	2b04      	cmp	r3, #4
 80235a0:	bf28      	it	cs
 80235a2:	2304      	movcs	r3, #4
 80235a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80235a6:	69fb      	ldr	r3, [r7, #28]
 80235a8:	3304      	adds	r3, #4
 80235aa:	2b06      	cmp	r3, #6
 80235ac:	d902      	bls.n	80235b4 <NVIC_EncodePriority+0x30>
 80235ae:	69fb      	ldr	r3, [r7, #28]
 80235b0:	3b03      	subs	r3, #3
 80235b2:	e000      	b.n	80235b6 <NVIC_EncodePriority+0x32>
 80235b4:	2300      	movs	r3, #0
 80235b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80235b8:	f04f 32ff 	mov.w	r2, #4294967295
 80235bc:	69bb      	ldr	r3, [r7, #24]
 80235be:	fa02 f303 	lsl.w	r3, r2, r3
 80235c2:	43da      	mvns	r2, r3
 80235c4:	68bb      	ldr	r3, [r7, #8]
 80235c6:	401a      	ands	r2, r3
 80235c8:	697b      	ldr	r3, [r7, #20]
 80235ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80235cc:	f04f 31ff 	mov.w	r1, #4294967295
 80235d0:	697b      	ldr	r3, [r7, #20]
 80235d2:	fa01 f303 	lsl.w	r3, r1, r3
 80235d6:	43d9      	mvns	r1, r3
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80235dc:	4313      	orrs	r3, r2
         );
}
 80235de:	4618      	mov	r0, r3
 80235e0:	3724      	adds	r7, #36	; 0x24
 80235e2:	46bd      	mov	sp, r7
 80235e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235e8:	4770      	bx	lr

080235ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80235ea:	b580      	push	{r7, lr}
 80235ec:	b082      	sub	sp, #8
 80235ee:	af00      	add	r7, sp, #0
 80235f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80235f2:	6878      	ldr	r0, [r7, #4]
 80235f4:	f7ff ff2a 	bl	802344c <__NVIC_SetPriorityGrouping>
}
 80235f8:	bf00      	nop
 80235fa:	3708      	adds	r7, #8
 80235fc:	46bd      	mov	sp, r7
 80235fe:	bd80      	pop	{r7, pc}

08023600 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8023600:	b580      	push	{r7, lr}
 8023602:	b086      	sub	sp, #24
 8023604:	af00      	add	r7, sp, #0
 8023606:	4603      	mov	r3, r0
 8023608:	60b9      	str	r1, [r7, #8]
 802360a:	607a      	str	r2, [r7, #4]
 802360c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802360e:	2300      	movs	r3, #0
 8023610:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8023612:	f7ff ff3f 	bl	8023494 <__NVIC_GetPriorityGrouping>
 8023616:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023618:	687a      	ldr	r2, [r7, #4]
 802361a:	68b9      	ldr	r1, [r7, #8]
 802361c:	6978      	ldr	r0, [r7, #20]
 802361e:	f7ff ffb1 	bl	8023584 <NVIC_EncodePriority>
 8023622:	4602      	mov	r2, r0
 8023624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023628:	4611      	mov	r1, r2
 802362a:	4618      	mov	r0, r3
 802362c:	f7ff ff80 	bl	8023530 <__NVIC_SetPriority>
}
 8023630:	bf00      	nop
 8023632:	3718      	adds	r7, #24
 8023634:	46bd      	mov	sp, r7
 8023636:	bd80      	pop	{r7, pc}

08023638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023638:	b580      	push	{r7, lr}
 802363a:	b082      	sub	sp, #8
 802363c:	af00      	add	r7, sp, #0
 802363e:	4603      	mov	r3, r0
 8023640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8023642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023646:	4618      	mov	r0, r3
 8023648:	f7ff ff32 	bl	80234b0 <__NVIC_EnableIRQ>
}
 802364c:	bf00      	nop
 802364e:	3708      	adds	r7, #8
 8023650:	46bd      	mov	sp, r7
 8023652:	bd80      	pop	{r7, pc}

08023654 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8023654:	b580      	push	{r7, lr}
 8023656:	b082      	sub	sp, #8
 8023658:	af00      	add	r7, sp, #0
 802365a:	4603      	mov	r3, r0
 802365c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 802365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023662:	4618      	mov	r0, r3
 8023664:	f7ff ff42 	bl	80234ec <__NVIC_DisableIRQ>
}
 8023668:	bf00      	nop
 802366a:	3708      	adds	r7, #8
 802366c:	46bd      	mov	sp, r7
 802366e:	bd80      	pop	{r7, pc}

08023670 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8023670:	b580      	push	{r7, lr}
 8023672:	b082      	sub	sp, #8
 8023674:	af00      	add	r7, sp, #0
 8023676:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	2b00      	cmp	r3, #0
 802367c:	d101      	bne.n	8023682 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802367e:	2301      	movs	r3, #1
 8023680:	e00e      	b.n	80236a0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	795b      	ldrb	r3, [r3, #5]
 8023686:	b2db      	uxtb	r3, r3
 8023688:	2b00      	cmp	r3, #0
 802368a:	d105      	bne.n	8023698 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	2200      	movs	r2, #0
 8023690:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8023692:	6878      	ldr	r0, [r7, #4]
 8023694:	f7fd fc1c 	bl	8020ed0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	2201      	movs	r2, #1
 802369c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802369e:	2300      	movs	r3, #0
}
 80236a0:	4618      	mov	r0, r3
 80236a2:	3708      	adds	r7, #8
 80236a4:	46bd      	mov	sp, r7
 80236a6:	bd80      	pop	{r7, pc}

080236a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80236a8:	b580      	push	{r7, lr}
 80236aa:	b086      	sub	sp, #24
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80236b0:	2300      	movs	r3, #0
 80236b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80236b4:	f7ff fe9c 	bl	80233f0 <HAL_GetTick>
 80236b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	2b00      	cmp	r3, #0
 80236be:	d101      	bne.n	80236c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80236c0:	2301      	movs	r3, #1
 80236c2:	e099      	b.n	80237f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	2200      	movs	r2, #0
 80236c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	2202      	movs	r2, #2
 80236d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80236d4:	687b      	ldr	r3, [r7, #4]
 80236d6:	681b      	ldr	r3, [r3, #0]
 80236d8:	681a      	ldr	r2, [r3, #0]
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	681b      	ldr	r3, [r3, #0]
 80236de:	f022 0201 	bic.w	r2, r2, #1
 80236e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80236e4:	e00f      	b.n	8023706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80236e6:	f7ff fe83 	bl	80233f0 <HAL_GetTick>
 80236ea:	4602      	mov	r2, r0
 80236ec:	693b      	ldr	r3, [r7, #16]
 80236ee:	1ad3      	subs	r3, r2, r3
 80236f0:	2b05      	cmp	r3, #5
 80236f2:	d908      	bls.n	8023706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	2220      	movs	r2, #32
 80236f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	2203      	movs	r2, #3
 80236fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023702:	2303      	movs	r3, #3
 8023704:	e078      	b.n	80237f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	681b      	ldr	r3, [r3, #0]
 802370a:	681b      	ldr	r3, [r3, #0]
 802370c:	f003 0301 	and.w	r3, r3, #1
 8023710:	2b00      	cmp	r3, #0
 8023712:	d1e8      	bne.n	80236e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	681b      	ldr	r3, [r3, #0]
 802371a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802371c:	697a      	ldr	r2, [r7, #20]
 802371e:	4b38      	ldr	r3, [pc, #224]	; (8023800 <HAL_DMA_Init+0x158>)
 8023720:	4013      	ands	r3, r2
 8023722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	685a      	ldr	r2, [r3, #4]
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	689b      	ldr	r3, [r3, #8]
 802372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	691b      	ldr	r3, [r3, #16]
 8023738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	699b      	ldr	r3, [r3, #24]
 8023744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023746:	687b      	ldr	r3, [r7, #4]
 8023748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	6a1b      	ldr	r3, [r3, #32]
 8023750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023752:	697a      	ldr	r2, [r7, #20]
 8023754:	4313      	orrs	r3, r2
 8023756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802375c:	2b04      	cmp	r3, #4
 802375e:	d107      	bne.n	8023770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8023760:	687b      	ldr	r3, [r7, #4]
 8023762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023764:	687b      	ldr	r3, [r7, #4]
 8023766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023768:	4313      	orrs	r3, r2
 802376a:	697a      	ldr	r2, [r7, #20]
 802376c:	4313      	orrs	r3, r2
 802376e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	681b      	ldr	r3, [r3, #0]
 8023774:	697a      	ldr	r2, [r7, #20]
 8023776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023778:	687b      	ldr	r3, [r7, #4]
 802377a:	681b      	ldr	r3, [r3, #0]
 802377c:	695b      	ldr	r3, [r3, #20]
 802377e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8023780:	697b      	ldr	r3, [r7, #20]
 8023782:	f023 0307 	bic.w	r3, r3, #7
 8023786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802378c:	697a      	ldr	r2, [r7, #20]
 802378e:	4313      	orrs	r3, r2
 8023790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023792:	687b      	ldr	r3, [r7, #4]
 8023794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023796:	2b04      	cmp	r3, #4
 8023798:	d117      	bne.n	80237ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802379e:	697a      	ldr	r2, [r7, #20]
 80237a0:	4313      	orrs	r3, r2
 80237a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d00e      	beq.n	80237ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80237ac:	6878      	ldr	r0, [r7, #4]
 80237ae:	f000 fafb 	bl	8023da8 <DMA_CheckFifoParam>
 80237b2:	4603      	mov	r3, r0
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d008      	beq.n	80237ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	2240      	movs	r2, #64	; 0x40
 80237bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	2201      	movs	r2, #1
 80237c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80237c6:	2301      	movs	r3, #1
 80237c8:	e016      	b.n	80237f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80237ca:	687b      	ldr	r3, [r7, #4]
 80237cc:	681b      	ldr	r3, [r3, #0]
 80237ce:	697a      	ldr	r2, [r7, #20]
 80237d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80237d2:	6878      	ldr	r0, [r7, #4]
 80237d4:	f000 fab2 	bl	8023d3c <DMA_CalcBaseAndBitshift>
 80237d8:	4603      	mov	r3, r0
 80237da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80237dc:	687b      	ldr	r3, [r7, #4]
 80237de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80237e0:	223f      	movs	r2, #63	; 0x3f
 80237e2:	409a      	lsls	r2, r3
 80237e4:	68fb      	ldr	r3, [r7, #12]
 80237e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	2200      	movs	r2, #0
 80237ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	2201      	movs	r2, #1
 80237f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80237f6:	2300      	movs	r3, #0
}
 80237f8:	4618      	mov	r0, r3
 80237fa:	3718      	adds	r7, #24
 80237fc:	46bd      	mov	sp, r7
 80237fe:	bd80      	pop	{r7, pc}
 8023800:	f010803f 	.word	0xf010803f

08023804 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023804:	b580      	push	{r7, lr}
 8023806:	b084      	sub	sp, #16
 8023808:	af00      	add	r7, sp, #0
 802380a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802380c:	687b      	ldr	r3, [r7, #4]
 802380e:	2b00      	cmp	r3, #0
 8023810:	d101      	bne.n	8023816 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8023812:	2301      	movs	r3, #1
 8023814:	e050      	b.n	80238b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8023816:	687b      	ldr	r3, [r7, #4]
 8023818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802381c:	b2db      	uxtb	r3, r3
 802381e:	2b02      	cmp	r3, #2
 8023820:	d101      	bne.n	8023826 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8023822:	2302      	movs	r3, #2
 8023824:	e048      	b.n	80238b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	681b      	ldr	r3, [r3, #0]
 802382a:	681a      	ldr	r2, [r3, #0]
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	f022 0201 	bic.w	r2, r2, #1
 8023834:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023836:	687b      	ldr	r3, [r7, #4]
 8023838:	681b      	ldr	r3, [r3, #0]
 802383a:	2200      	movs	r2, #0
 802383c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 802383e:	687b      	ldr	r3, [r7, #4]
 8023840:	681b      	ldr	r3, [r3, #0]
 8023842:	2200      	movs	r2, #0
 8023844:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	2200      	movs	r2, #0
 802384c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	681b      	ldr	r3, [r3, #0]
 8023852:	2200      	movs	r2, #0
 8023854:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023856:	687b      	ldr	r3, [r7, #4]
 8023858:	681b      	ldr	r3, [r3, #0]
 802385a:	2200      	movs	r2, #0
 802385c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	681b      	ldr	r3, [r3, #0]
 8023862:	2221      	movs	r2, #33	; 0x21
 8023864:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023866:	6878      	ldr	r0, [r7, #4]
 8023868:	f000 fa68 	bl	8023d3c <DMA_CalcBaseAndBitshift>
 802386c:	4603      	mov	r3, r0
 802386e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	2200      	movs	r2, #0
 8023874:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023876:	687b      	ldr	r3, [r7, #4]
 8023878:	2200      	movs	r2, #0
 802387a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 802387c:	687b      	ldr	r3, [r7, #4]
 802387e:	2200      	movs	r2, #0
 8023880:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8023882:	687b      	ldr	r3, [r7, #4]
 8023884:	2200      	movs	r2, #0
 8023886:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	2200      	movs	r2, #0
 802388c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	2200      	movs	r2, #0
 8023892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023898:	223f      	movs	r2, #63	; 0x3f
 802389a:	409a      	lsls	r2, r3
 802389c:	68fb      	ldr	r3, [r7, #12]
 802389e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	2200      	movs	r2, #0
 80238a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	2200      	movs	r2, #0
 80238aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	2200      	movs	r2, #0
 80238b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80238b6:	2300      	movs	r3, #0
}
 80238b8:	4618      	mov	r0, r3
 80238ba:	3710      	adds	r7, #16
 80238bc:	46bd      	mov	sp, r7
 80238be:	bd80      	pop	{r7, pc}

080238c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80238c0:	b580      	push	{r7, lr}
 80238c2:	b086      	sub	sp, #24
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	60f8      	str	r0, [r7, #12]
 80238c8:	60b9      	str	r1, [r7, #8]
 80238ca:	607a      	str	r2, [r7, #4]
 80238cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80238ce:	2300      	movs	r3, #0
 80238d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80238d2:	68fb      	ldr	r3, [r7, #12]
 80238d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80238d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80238d8:	68fb      	ldr	r3, [r7, #12]
 80238da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80238de:	2b01      	cmp	r3, #1
 80238e0:	d101      	bne.n	80238e6 <HAL_DMA_Start_IT+0x26>
 80238e2:	2302      	movs	r3, #2
 80238e4:	e040      	b.n	8023968 <HAL_DMA_Start_IT+0xa8>
 80238e6:	68fb      	ldr	r3, [r7, #12]
 80238e8:	2201      	movs	r2, #1
 80238ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80238ee:	68fb      	ldr	r3, [r7, #12]
 80238f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80238f4:	b2db      	uxtb	r3, r3
 80238f6:	2b01      	cmp	r3, #1
 80238f8:	d12f      	bne.n	802395a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80238fa:	68fb      	ldr	r3, [r7, #12]
 80238fc:	2202      	movs	r2, #2
 80238fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023902:	68fb      	ldr	r3, [r7, #12]
 8023904:	2200      	movs	r2, #0
 8023906:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8023908:	683b      	ldr	r3, [r7, #0]
 802390a:	687a      	ldr	r2, [r7, #4]
 802390c:	68b9      	ldr	r1, [r7, #8]
 802390e:	68f8      	ldr	r0, [r7, #12]
 8023910:	f000 f9e6 	bl	8023ce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023918:	223f      	movs	r2, #63	; 0x3f
 802391a:	409a      	lsls	r2, r3
 802391c:	693b      	ldr	r3, [r7, #16]
 802391e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8023920:	68fb      	ldr	r3, [r7, #12]
 8023922:	681b      	ldr	r3, [r3, #0]
 8023924:	681a      	ldr	r2, [r3, #0]
 8023926:	68fb      	ldr	r3, [r7, #12]
 8023928:	681b      	ldr	r3, [r3, #0]
 802392a:	f042 0216 	orr.w	r2, r2, #22
 802392e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8023930:	68fb      	ldr	r3, [r7, #12]
 8023932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023934:	2b00      	cmp	r3, #0
 8023936:	d007      	beq.n	8023948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8023938:	68fb      	ldr	r3, [r7, #12]
 802393a:	681b      	ldr	r3, [r3, #0]
 802393c:	681a      	ldr	r2, [r3, #0]
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	f042 0208 	orr.w	r2, r2, #8
 8023946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8023948:	68fb      	ldr	r3, [r7, #12]
 802394a:	681b      	ldr	r3, [r3, #0]
 802394c:	681a      	ldr	r2, [r3, #0]
 802394e:	68fb      	ldr	r3, [r7, #12]
 8023950:	681b      	ldr	r3, [r3, #0]
 8023952:	f042 0201 	orr.w	r2, r2, #1
 8023956:	601a      	str	r2, [r3, #0]
 8023958:	e005      	b.n	8023966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802395a:	68fb      	ldr	r3, [r7, #12]
 802395c:	2200      	movs	r2, #0
 802395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8023962:	2302      	movs	r3, #2
 8023964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8023966:	7dfb      	ldrb	r3, [r7, #23]
}
 8023968:	4618      	mov	r0, r3
 802396a:	3718      	adds	r7, #24
 802396c:	46bd      	mov	sp, r7
 802396e:	bd80      	pop	{r7, pc}

08023970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023970:	b480      	push	{r7}
 8023972:	b083      	sub	sp, #12
 8023974:	af00      	add	r7, sp, #0
 8023976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802397e:	b2db      	uxtb	r3, r3
 8023980:	2b02      	cmp	r3, #2
 8023982:	d004      	beq.n	802398e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	2280      	movs	r2, #128	; 0x80
 8023988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802398a:	2301      	movs	r3, #1
 802398c:	e00c      	b.n	80239a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802398e:	687b      	ldr	r3, [r7, #4]
 8023990:	2205      	movs	r2, #5
 8023992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	681a      	ldr	r2, [r3, #0]
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	681b      	ldr	r3, [r3, #0]
 80239a0:	f022 0201 	bic.w	r2, r2, #1
 80239a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80239a6:	2300      	movs	r3, #0
}
 80239a8:	4618      	mov	r0, r3
 80239aa:	370c      	adds	r7, #12
 80239ac:	46bd      	mov	sp, r7
 80239ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239b2:	4770      	bx	lr

080239b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b086      	sub	sp, #24
 80239b8:	af00      	add	r7, sp, #0
 80239ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80239bc:	2300      	movs	r3, #0
 80239be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80239c0:	4b92      	ldr	r3, [pc, #584]	; (8023c0c <HAL_DMA_IRQHandler+0x258>)
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	4a92      	ldr	r2, [pc, #584]	; (8023c10 <HAL_DMA_IRQHandler+0x25c>)
 80239c6:	fba2 2303 	umull	r2, r3, r2, r3
 80239ca:	0a9b      	lsrs	r3, r3, #10
 80239cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80239d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80239d4:	693b      	ldr	r3, [r7, #16]
 80239d6:	681b      	ldr	r3, [r3, #0]
 80239d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80239de:	2208      	movs	r2, #8
 80239e0:	409a      	lsls	r2, r3
 80239e2:	68fb      	ldr	r3, [r7, #12]
 80239e4:	4013      	ands	r3, r2
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d01a      	beq.n	8023a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	681b      	ldr	r3, [r3, #0]
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	f003 0304 	and.w	r3, r3, #4
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d013      	beq.n	8023a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	681a      	ldr	r2, [r3, #0]
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	f022 0204 	bic.w	r2, r2, #4
 8023a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a0c:	2208      	movs	r2, #8
 8023a0e:	409a      	lsls	r2, r3
 8023a10:	693b      	ldr	r3, [r7, #16]
 8023a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a18:	f043 0201 	orr.w	r2, r3, #1
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a24:	2201      	movs	r2, #1
 8023a26:	409a      	lsls	r2, r3
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	4013      	ands	r3, r2
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d012      	beq.n	8023a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	695b      	ldr	r3, [r3, #20]
 8023a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	d00b      	beq.n	8023a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a42:	2201      	movs	r2, #1
 8023a44:	409a      	lsls	r2, r3
 8023a46:	693b      	ldr	r3, [r7, #16]
 8023a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a4e:	f043 0202 	orr.w	r2, r3, #2
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a5a:	2204      	movs	r2, #4
 8023a5c:	409a      	lsls	r2, r3
 8023a5e:	68fb      	ldr	r3, [r7, #12]
 8023a60:	4013      	ands	r3, r2
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d012      	beq.n	8023a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	681b      	ldr	r3, [r3, #0]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	f003 0302 	and.w	r3, r3, #2
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	d00b      	beq.n	8023a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8023a74:	687b      	ldr	r3, [r7, #4]
 8023a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a78:	2204      	movs	r2, #4
 8023a7a:	409a      	lsls	r2, r3
 8023a7c:	693b      	ldr	r3, [r7, #16]
 8023a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a84:	f043 0204 	orr.w	r2, r3, #4
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a90:	2210      	movs	r2, #16
 8023a92:	409a      	lsls	r2, r3
 8023a94:	68fb      	ldr	r3, [r7, #12]
 8023a96:	4013      	ands	r3, r2
 8023a98:	2b00      	cmp	r3, #0
 8023a9a:	d043      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	681b      	ldr	r3, [r3, #0]
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	f003 0308 	and.w	r3, r3, #8
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d03c      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023aae:	2210      	movs	r2, #16
 8023ab0:	409a      	lsls	r2, r3
 8023ab2:	693b      	ldr	r3, [r7, #16]
 8023ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	d018      	beq.n	8023af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023ac4:	687b      	ldr	r3, [r7, #4]
 8023ac6:	681b      	ldr	r3, [r3, #0]
 8023ac8:	681b      	ldr	r3, [r3, #0]
 8023aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	d108      	bne.n	8023ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8023ad2:	687b      	ldr	r3, [r7, #4]
 8023ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d024      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ade:	6878      	ldr	r0, [r7, #4]
 8023ae0:	4798      	blx	r3
 8023ae2:	e01f      	b.n	8023b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	d01b      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023af0:	6878      	ldr	r0, [r7, #4]
 8023af2:	4798      	blx	r3
 8023af4:	e016      	b.n	8023b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	681b      	ldr	r3, [r3, #0]
 8023afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d107      	bne.n	8023b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	681b      	ldr	r3, [r3, #0]
 8023b08:	681a      	ldr	r2, [r3, #0]
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	f022 0208 	bic.w	r2, r2, #8
 8023b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d003      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b20:	6878      	ldr	r0, [r7, #4]
 8023b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b28:	2220      	movs	r2, #32
 8023b2a:	409a      	lsls	r2, r3
 8023b2c:	68fb      	ldr	r3, [r7, #12]
 8023b2e:	4013      	ands	r3, r2
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	f000 808e 	beq.w	8023c52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	681b      	ldr	r3, [r3, #0]
 8023b3a:	681b      	ldr	r3, [r3, #0]
 8023b3c:	f003 0310 	and.w	r3, r3, #16
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	f000 8086 	beq.w	8023c52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b4a:	2220      	movs	r2, #32
 8023b4c:	409a      	lsls	r2, r3
 8023b4e:	693b      	ldr	r3, [r7, #16]
 8023b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023b58:	b2db      	uxtb	r3, r3
 8023b5a:	2b05      	cmp	r3, #5
 8023b5c:	d136      	bne.n	8023bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	681a      	ldr	r2, [r3, #0]
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	f022 0216 	bic.w	r2, r2, #22
 8023b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	681b      	ldr	r3, [r3, #0]
 8023b72:	695a      	ldr	r2, [r3, #20]
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	681b      	ldr	r3, [r3, #0]
 8023b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	d103      	bne.n	8023b8e <HAL_DMA_IRQHandler+0x1da>
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b8a:	2b00      	cmp	r3, #0
 8023b8c:	d007      	beq.n	8023b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	681a      	ldr	r2, [r3, #0]
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	681b      	ldr	r3, [r3, #0]
 8023b98:	f022 0208 	bic.w	r2, r2, #8
 8023b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023b9e:	687b      	ldr	r3, [r7, #4]
 8023ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023ba2:	223f      	movs	r2, #63	; 0x3f
 8023ba4:	409a      	lsls	r2, r3
 8023ba6:	693b      	ldr	r3, [r7, #16]
 8023ba8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	2200      	movs	r2, #0
 8023bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	2201      	movs	r2, #1
 8023bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8023bba:	687b      	ldr	r3, [r7, #4]
 8023bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	d07d      	beq.n	8023cbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023bc6:	6878      	ldr	r0, [r7, #4]
 8023bc8:	4798      	blx	r3
        }
        return;
 8023bca:	e078      	b.n	8023cbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	681b      	ldr	r3, [r3, #0]
 8023bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d01c      	beq.n	8023c14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	681b      	ldr	r3, [r3, #0]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	d108      	bne.n	8023bfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	d030      	beq.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bf4:	6878      	ldr	r0, [r7, #4]
 8023bf6:	4798      	blx	r3
 8023bf8:	e02b      	b.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d027      	beq.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c06:	6878      	ldr	r0, [r7, #4]
 8023c08:	4798      	blx	r3
 8023c0a:	e022      	b.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
 8023c0c:	20000000 	.word	0x20000000
 8023c10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	681b      	ldr	r3, [r3, #0]
 8023c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023c1e:	2b00      	cmp	r3, #0
 8023c20:	d10f      	bne.n	8023c42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	681b      	ldr	r3, [r3, #0]
 8023c26:	681a      	ldr	r2, [r3, #0]
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	f022 0210 	bic.w	r2, r2, #16
 8023c30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	2200      	movs	r2, #0
 8023c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	2201      	movs	r2, #1
 8023c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8023c42:	687b      	ldr	r3, [r7, #4]
 8023c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	d003      	beq.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c4e:	6878      	ldr	r0, [r7, #4]
 8023c50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d032      	beq.n	8023cc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023c5e:	f003 0301 	and.w	r3, r3, #1
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d022      	beq.n	8023cac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	2205      	movs	r2, #5
 8023c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	681a      	ldr	r2, [r3, #0]
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	f022 0201 	bic.w	r2, r2, #1
 8023c7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8023c7e:	68bb      	ldr	r3, [r7, #8]
 8023c80:	3301      	adds	r3, #1
 8023c82:	60bb      	str	r3, [r7, #8]
 8023c84:	697a      	ldr	r2, [r7, #20]
 8023c86:	429a      	cmp	r2, r3
 8023c88:	d307      	bcc.n	8023c9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	f003 0301 	and.w	r3, r3, #1
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d1f2      	bne.n	8023c7e <HAL_DMA_IRQHandler+0x2ca>
 8023c98:	e000      	b.n	8023c9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8023c9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8023c9c:	687b      	ldr	r3, [r7, #4]
 8023c9e:	2200      	movs	r2, #0
 8023ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	2201      	movs	r2, #1
 8023ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	d005      	beq.n	8023cc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023cb8:	6878      	ldr	r0, [r7, #4]
 8023cba:	4798      	blx	r3
 8023cbc:	e000      	b.n	8023cc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8023cbe:	bf00      	nop
    }
  }
}
 8023cc0:	3718      	adds	r7, #24
 8023cc2:	46bd      	mov	sp, r7
 8023cc4:	bd80      	pop	{r7, pc}
 8023cc6:	bf00      	nop

08023cc8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8023cc8:	b480      	push	{r7}
 8023cca:	b083      	sub	sp, #12
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8023cd0:	687b      	ldr	r3, [r7, #4]
 8023cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8023cd4:	4618      	mov	r0, r3
 8023cd6:	370c      	adds	r7, #12
 8023cd8:	46bd      	mov	sp, r7
 8023cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cde:	4770      	bx	lr

08023ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8023ce0:	b480      	push	{r7}
 8023ce2:	b085      	sub	sp, #20
 8023ce4:	af00      	add	r7, sp, #0
 8023ce6:	60f8      	str	r0, [r7, #12]
 8023ce8:	60b9      	str	r1, [r7, #8]
 8023cea:	607a      	str	r2, [r7, #4]
 8023cec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8023cee:	68fb      	ldr	r3, [r7, #12]
 8023cf0:	681b      	ldr	r3, [r3, #0]
 8023cf2:	681a      	ldr	r2, [r3, #0]
 8023cf4:	68fb      	ldr	r3, [r7, #12]
 8023cf6:	681b      	ldr	r3, [r3, #0]
 8023cf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023cfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8023cfe:	68fb      	ldr	r3, [r7, #12]
 8023d00:	681b      	ldr	r3, [r3, #0]
 8023d02:	683a      	ldr	r2, [r7, #0]
 8023d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8023d06:	68fb      	ldr	r3, [r7, #12]
 8023d08:	689b      	ldr	r3, [r3, #8]
 8023d0a:	2b40      	cmp	r3, #64	; 0x40
 8023d0c:	d108      	bne.n	8023d20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8023d0e:	68fb      	ldr	r3, [r7, #12]
 8023d10:	681b      	ldr	r3, [r3, #0]
 8023d12:	687a      	ldr	r2, [r7, #4]
 8023d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8023d16:	68fb      	ldr	r3, [r7, #12]
 8023d18:	681b      	ldr	r3, [r3, #0]
 8023d1a:	68ba      	ldr	r2, [r7, #8]
 8023d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8023d1e:	e007      	b.n	8023d30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8023d20:	68fb      	ldr	r3, [r7, #12]
 8023d22:	681b      	ldr	r3, [r3, #0]
 8023d24:	68ba      	ldr	r2, [r7, #8]
 8023d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	687a      	ldr	r2, [r7, #4]
 8023d2e:	60da      	str	r2, [r3, #12]
}
 8023d30:	bf00      	nop
 8023d32:	3714      	adds	r7, #20
 8023d34:	46bd      	mov	sp, r7
 8023d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d3a:	4770      	bx	lr

08023d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023d3c:	b480      	push	{r7}
 8023d3e:	b085      	sub	sp, #20
 8023d40:	af00      	add	r7, sp, #0
 8023d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	681b      	ldr	r3, [r3, #0]
 8023d48:	b2db      	uxtb	r3, r3
 8023d4a:	3b10      	subs	r3, #16
 8023d4c:	4a14      	ldr	r2, [pc, #80]	; (8023da0 <DMA_CalcBaseAndBitshift+0x64>)
 8023d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8023d52:	091b      	lsrs	r3, r3, #4
 8023d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023d56:	4a13      	ldr	r2, [pc, #76]	; (8023da4 <DMA_CalcBaseAndBitshift+0x68>)
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	4413      	add	r3, r2
 8023d5c:	781b      	ldrb	r3, [r3, #0]
 8023d5e:	461a      	mov	r2, r3
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023d64:	68fb      	ldr	r3, [r7, #12]
 8023d66:	2b03      	cmp	r3, #3
 8023d68:	d909      	bls.n	8023d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023d6a:	687b      	ldr	r3, [r7, #4]
 8023d6c:	681b      	ldr	r3, [r3, #0]
 8023d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023d72:	f023 0303 	bic.w	r3, r3, #3
 8023d76:	1d1a      	adds	r2, r3, #4
 8023d78:	687b      	ldr	r3, [r7, #4]
 8023d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8023d7c:	e007      	b.n	8023d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	681b      	ldr	r3, [r3, #0]
 8023d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023d86:	f023 0303 	bic.w	r3, r3, #3
 8023d8a:	687a      	ldr	r2, [r7, #4]
 8023d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023d8e:	687b      	ldr	r3, [r7, #4]
 8023d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023d92:	4618      	mov	r0, r3
 8023d94:	3714      	adds	r7, #20
 8023d96:	46bd      	mov	sp, r7
 8023d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d9c:	4770      	bx	lr
 8023d9e:	bf00      	nop
 8023da0:	aaaaaaab 	.word	0xaaaaaaab
 8023da4:	08038340 	.word	0x08038340

08023da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023da8:	b480      	push	{r7}
 8023daa:	b085      	sub	sp, #20
 8023dac:	af00      	add	r7, sp, #0
 8023dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023db0:	2300      	movs	r3, #0
 8023db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	699b      	ldr	r3, [r3, #24]
 8023dbe:	2b00      	cmp	r3, #0
 8023dc0:	d11f      	bne.n	8023e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023dc2:	68bb      	ldr	r3, [r7, #8]
 8023dc4:	2b03      	cmp	r3, #3
 8023dc6:	d855      	bhi.n	8023e74 <DMA_CheckFifoParam+0xcc>
 8023dc8:	a201      	add	r2, pc, #4	; (adr r2, 8023dd0 <DMA_CheckFifoParam+0x28>)
 8023dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023dce:	bf00      	nop
 8023dd0:	08023de1 	.word	0x08023de1
 8023dd4:	08023df3 	.word	0x08023df3
 8023dd8:	08023de1 	.word	0x08023de1
 8023ddc:	08023e75 	.word	0x08023e75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	d045      	beq.n	8023e78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8023dec:	2301      	movs	r3, #1
 8023dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023df0:	e042      	b.n	8023e78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023df2:	687b      	ldr	r3, [r7, #4]
 8023df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023dfa:	d13f      	bne.n	8023e7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8023dfc:	2301      	movs	r3, #1
 8023dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023e00:	e03c      	b.n	8023e7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	699b      	ldr	r3, [r3, #24]
 8023e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023e0a:	d121      	bne.n	8023e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023e0c:	68bb      	ldr	r3, [r7, #8]
 8023e0e:	2b03      	cmp	r3, #3
 8023e10:	d836      	bhi.n	8023e80 <DMA_CheckFifoParam+0xd8>
 8023e12:	a201      	add	r2, pc, #4	; (adr r2, 8023e18 <DMA_CheckFifoParam+0x70>)
 8023e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023e18:	08023e29 	.word	0x08023e29
 8023e1c:	08023e2f 	.word	0x08023e2f
 8023e20:	08023e29 	.word	0x08023e29
 8023e24:	08023e41 	.word	0x08023e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023e28:	2301      	movs	r3, #1
 8023e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8023e2c:	e02f      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d024      	beq.n	8023e84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8023e3a:	2301      	movs	r3, #1
 8023e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023e3e:	e021      	b.n	8023e84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023e48:	d11e      	bne.n	8023e88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023e4e:	e01b      	b.n	8023e88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023e50:	68bb      	ldr	r3, [r7, #8]
 8023e52:	2b02      	cmp	r3, #2
 8023e54:	d902      	bls.n	8023e5c <DMA_CheckFifoParam+0xb4>
 8023e56:	2b03      	cmp	r3, #3
 8023e58:	d003      	beq.n	8023e62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023e5a:	e018      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8023e5c:	2301      	movs	r3, #1
 8023e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8023e60:	e015      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023e6a:	2b00      	cmp	r3, #0
 8023e6c:	d00e      	beq.n	8023e8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8023e6e:	2301      	movs	r3, #1
 8023e70:	73fb      	strb	r3, [r7, #15]
      break;
 8023e72:	e00b      	b.n	8023e8c <DMA_CheckFifoParam+0xe4>
      break;
 8023e74:	bf00      	nop
 8023e76:	e00a      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      break;
 8023e78:	bf00      	nop
 8023e7a:	e008      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      break;
 8023e7c:	bf00      	nop
 8023e7e:	e006      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      break;
 8023e80:	bf00      	nop
 8023e82:	e004      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      break;
 8023e84:	bf00      	nop
 8023e86:	e002      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      break;   
 8023e88:	bf00      	nop
 8023e8a:	e000      	b.n	8023e8e <DMA_CheckFifoParam+0xe6>
      break;
 8023e8c:	bf00      	nop
    }
  } 
  
  return status; 
 8023e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e90:	4618      	mov	r0, r3
 8023e92:	3714      	adds	r7, #20
 8023e94:	46bd      	mov	sp, r7
 8023e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e9a:	4770      	bx	lr

08023e9c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8023e9c:	b580      	push	{r7, lr}
 8023e9e:	b086      	sub	sp, #24
 8023ea0:	af00      	add	r7, sp, #0
 8023ea2:	60f8      	str	r0, [r7, #12]
 8023ea4:	60b9      	str	r1, [r7, #8]
 8023ea6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8023eaa:	2301      	movs	r3, #1
 8023eac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8023eae:	4b23      	ldr	r3, [pc, #140]	; (8023f3c <HAL_FLASH_Program+0xa0>)
 8023eb0:	7e1b      	ldrb	r3, [r3, #24]
 8023eb2:	2b01      	cmp	r3, #1
 8023eb4:	d101      	bne.n	8023eba <HAL_FLASH_Program+0x1e>
 8023eb6:	2302      	movs	r3, #2
 8023eb8:	e03b      	b.n	8023f32 <HAL_FLASH_Program+0x96>
 8023eba:	4b20      	ldr	r3, [pc, #128]	; (8023f3c <HAL_FLASH_Program+0xa0>)
 8023ebc:	2201      	movs	r2, #1
 8023ebe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8023ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8023ec4:	f000 f870 	bl	8023fa8 <FLASH_WaitForLastOperation>
 8023ec8:	4603      	mov	r3, r0
 8023eca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8023ecc:	7dfb      	ldrb	r3, [r7, #23]
 8023ece:	2b00      	cmp	r3, #0
 8023ed0:	d12b      	bne.n	8023f2a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8023ed2:	68fb      	ldr	r3, [r7, #12]
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	d105      	bne.n	8023ee4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8023ed8:	783b      	ldrb	r3, [r7, #0]
 8023eda:	4619      	mov	r1, r3
 8023edc:	68b8      	ldr	r0, [r7, #8]
 8023ede:	f000 f919 	bl	8024114 <FLASH_Program_Byte>
 8023ee2:	e016      	b.n	8023f12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8023ee4:	68fb      	ldr	r3, [r7, #12]
 8023ee6:	2b01      	cmp	r3, #1
 8023ee8:	d105      	bne.n	8023ef6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8023eea:	883b      	ldrh	r3, [r7, #0]
 8023eec:	4619      	mov	r1, r3
 8023eee:	68b8      	ldr	r0, [r7, #8]
 8023ef0:	f000 f8ec 	bl	80240cc <FLASH_Program_HalfWord>
 8023ef4:	e00d      	b.n	8023f12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8023ef6:	68fb      	ldr	r3, [r7, #12]
 8023ef8:	2b02      	cmp	r3, #2
 8023efa:	d105      	bne.n	8023f08 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8023efc:	683b      	ldr	r3, [r7, #0]
 8023efe:	4619      	mov	r1, r3
 8023f00:	68b8      	ldr	r0, [r7, #8]
 8023f02:	f000 f8c1 	bl	8024088 <FLASH_Program_Word>
 8023f06:	e004      	b.n	8023f12 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8023f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023f0c:	68b8      	ldr	r0, [r7, #8]
 8023f0e:	f000 f88b 	bl	8024028 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8023f12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8023f16:	f000 f847 	bl	8023fa8 <FLASH_WaitForLastOperation>
 8023f1a:	4603      	mov	r3, r0
 8023f1c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8023f1e:	4b08      	ldr	r3, [pc, #32]	; (8023f40 <HAL_FLASH_Program+0xa4>)
 8023f20:	691b      	ldr	r3, [r3, #16]
 8023f22:	4a07      	ldr	r2, [pc, #28]	; (8023f40 <HAL_FLASH_Program+0xa4>)
 8023f24:	f023 0301 	bic.w	r3, r3, #1
 8023f28:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8023f2a:	4b04      	ldr	r3, [pc, #16]	; (8023f3c <HAL_FLASH_Program+0xa0>)
 8023f2c:	2200      	movs	r2, #0
 8023f2e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8023f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8023f32:	4618      	mov	r0, r3
 8023f34:	3718      	adds	r7, #24
 8023f36:	46bd      	mov	sp, r7
 8023f38:	bd80      	pop	{r7, pc}
 8023f3a:	bf00      	nop
 8023f3c:	200016a4 	.word	0x200016a4
 8023f40:	40023c00 	.word	0x40023c00

08023f44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8023f44:	b480      	push	{r7}
 8023f46:	b083      	sub	sp, #12
 8023f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8023f4a:	2300      	movs	r3, #0
 8023f4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8023f4e:	4b0b      	ldr	r3, [pc, #44]	; (8023f7c <HAL_FLASH_Unlock+0x38>)
 8023f50:	691b      	ldr	r3, [r3, #16]
 8023f52:	2b00      	cmp	r3, #0
 8023f54:	da0b      	bge.n	8023f6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8023f56:	4b09      	ldr	r3, [pc, #36]	; (8023f7c <HAL_FLASH_Unlock+0x38>)
 8023f58:	4a09      	ldr	r2, [pc, #36]	; (8023f80 <HAL_FLASH_Unlock+0x3c>)
 8023f5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8023f5c:	4b07      	ldr	r3, [pc, #28]	; (8023f7c <HAL_FLASH_Unlock+0x38>)
 8023f5e:	4a09      	ldr	r2, [pc, #36]	; (8023f84 <HAL_FLASH_Unlock+0x40>)
 8023f60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8023f62:	4b06      	ldr	r3, [pc, #24]	; (8023f7c <HAL_FLASH_Unlock+0x38>)
 8023f64:	691b      	ldr	r3, [r3, #16]
 8023f66:	2b00      	cmp	r3, #0
 8023f68:	da01      	bge.n	8023f6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8023f6a:	2301      	movs	r3, #1
 8023f6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8023f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8023f70:	4618      	mov	r0, r3
 8023f72:	370c      	adds	r7, #12
 8023f74:	46bd      	mov	sp, r7
 8023f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f7a:	4770      	bx	lr
 8023f7c:	40023c00 	.word	0x40023c00
 8023f80:	45670123 	.word	0x45670123
 8023f84:	cdef89ab 	.word	0xcdef89ab

08023f88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8023f88:	b480      	push	{r7}
 8023f8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8023f8c:	4b05      	ldr	r3, [pc, #20]	; (8023fa4 <HAL_FLASH_Lock+0x1c>)
 8023f8e:	691b      	ldr	r3, [r3, #16]
 8023f90:	4a04      	ldr	r2, [pc, #16]	; (8023fa4 <HAL_FLASH_Lock+0x1c>)
 8023f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8023f96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8023f98:	2300      	movs	r3, #0
}
 8023f9a:	4618      	mov	r0, r3
 8023f9c:	46bd      	mov	sp, r7
 8023f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa2:	4770      	bx	lr
 8023fa4:	40023c00 	.word	0x40023c00

08023fa8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8023fa8:	b580      	push	{r7, lr}
 8023faa:	b084      	sub	sp, #16
 8023fac:	af00      	add	r7, sp, #0
 8023fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8023fb0:	2300      	movs	r3, #0
 8023fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8023fb4:	4b1a      	ldr	r3, [pc, #104]	; (8024020 <FLASH_WaitForLastOperation+0x78>)
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8023fba:	f7ff fa19 	bl	80233f0 <HAL_GetTick>
 8023fbe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8023fc0:	e010      	b.n	8023fe4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023fc8:	d00c      	beq.n	8023fe4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d007      	beq.n	8023fe0 <FLASH_WaitForLastOperation+0x38>
 8023fd0:	f7ff fa0e 	bl	80233f0 <HAL_GetTick>
 8023fd4:	4602      	mov	r2, r0
 8023fd6:	68fb      	ldr	r3, [r7, #12]
 8023fd8:	1ad3      	subs	r3, r2, r3
 8023fda:	687a      	ldr	r2, [r7, #4]
 8023fdc:	429a      	cmp	r2, r3
 8023fde:	d201      	bcs.n	8023fe4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8023fe0:	2303      	movs	r3, #3
 8023fe2:	e019      	b.n	8024018 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8023fe4:	4b0f      	ldr	r3, [pc, #60]	; (8024024 <FLASH_WaitForLastOperation+0x7c>)
 8023fe6:	68db      	ldr	r3, [r3, #12]
 8023fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023fec:	2b00      	cmp	r3, #0
 8023fee:	d1e8      	bne.n	8023fc2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8023ff0:	4b0c      	ldr	r3, [pc, #48]	; (8024024 <FLASH_WaitForLastOperation+0x7c>)
 8023ff2:	68db      	ldr	r3, [r3, #12]
 8023ff4:	f003 0301 	and.w	r3, r3, #1
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d002      	beq.n	8024002 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8023ffc:	4b09      	ldr	r3, [pc, #36]	; (8024024 <FLASH_WaitForLastOperation+0x7c>)
 8023ffe:	2201      	movs	r2, #1
 8024000:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8024002:	4b08      	ldr	r3, [pc, #32]	; (8024024 <FLASH_WaitForLastOperation+0x7c>)
 8024004:	68db      	ldr	r3, [r3, #12]
 8024006:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802400a:	2b00      	cmp	r3, #0
 802400c:	d003      	beq.n	8024016 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802400e:	f000 f8a3 	bl	8024158 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8024012:	2301      	movs	r3, #1
 8024014:	e000      	b.n	8024018 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8024016:	2300      	movs	r3, #0
  
}  
 8024018:	4618      	mov	r0, r3
 802401a:	3710      	adds	r7, #16
 802401c:	46bd      	mov	sp, r7
 802401e:	bd80      	pop	{r7, pc}
 8024020:	200016a4 	.word	0x200016a4
 8024024:	40023c00 	.word	0x40023c00

08024028 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8024028:	b490      	push	{r4, r7}
 802402a:	b084      	sub	sp, #16
 802402c:	af00      	add	r7, sp, #0
 802402e:	60f8      	str	r0, [r7, #12]
 8024030:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024034:	4b13      	ldr	r3, [pc, #76]	; (8024084 <FLASH_Program_DoubleWord+0x5c>)
 8024036:	691b      	ldr	r3, [r3, #16]
 8024038:	4a12      	ldr	r2, [pc, #72]	; (8024084 <FLASH_Program_DoubleWord+0x5c>)
 802403a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802403e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8024040:	4b10      	ldr	r3, [pc, #64]	; (8024084 <FLASH_Program_DoubleWord+0x5c>)
 8024042:	691b      	ldr	r3, [r3, #16]
 8024044:	4a0f      	ldr	r2, [pc, #60]	; (8024084 <FLASH_Program_DoubleWord+0x5c>)
 8024046:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802404a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802404c:	4b0d      	ldr	r3, [pc, #52]	; (8024084 <FLASH_Program_DoubleWord+0x5c>)
 802404e:	691b      	ldr	r3, [r3, #16]
 8024050:	4a0c      	ldr	r2, [pc, #48]	; (8024084 <FLASH_Program_DoubleWord+0x5c>)
 8024052:	f043 0301 	orr.w	r3, r3, #1
 8024056:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8024058:	68fb      	ldr	r3, [r7, #12]
 802405a:	683a      	ldr	r2, [r7, #0]
 802405c:	601a      	str	r2, [r3, #0]
 802405e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8024062:	e9d7 1200 	ldrd	r1, r2, [r7]
 8024066:	f04f 0300 	mov.w	r3, #0
 802406a:	f04f 0400 	mov.w	r4, #0
 802406e:	0013      	movs	r3, r2
 8024070:	2400      	movs	r4, #0
 8024072:	68fa      	ldr	r2, [r7, #12]
 8024074:	3204      	adds	r2, #4
 8024076:	6013      	str	r3, [r2, #0]
}
 8024078:	bf00      	nop
 802407a:	3710      	adds	r7, #16
 802407c:	46bd      	mov	sp, r7
 802407e:	bc90      	pop	{r4, r7}
 8024080:	4770      	bx	lr
 8024082:	bf00      	nop
 8024084:	40023c00 	.word	0x40023c00

08024088 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8024088:	b480      	push	{r7}
 802408a:	b083      	sub	sp, #12
 802408c:	af00      	add	r7, sp, #0
 802408e:	6078      	str	r0, [r7, #4]
 8024090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024092:	4b0d      	ldr	r3, [pc, #52]	; (80240c8 <FLASH_Program_Word+0x40>)
 8024094:	691b      	ldr	r3, [r3, #16]
 8024096:	4a0c      	ldr	r2, [pc, #48]	; (80240c8 <FLASH_Program_Word+0x40>)
 8024098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802409c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802409e:	4b0a      	ldr	r3, [pc, #40]	; (80240c8 <FLASH_Program_Word+0x40>)
 80240a0:	691b      	ldr	r3, [r3, #16]
 80240a2:	4a09      	ldr	r2, [pc, #36]	; (80240c8 <FLASH_Program_Word+0x40>)
 80240a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80240a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80240aa:	4b07      	ldr	r3, [pc, #28]	; (80240c8 <FLASH_Program_Word+0x40>)
 80240ac:	691b      	ldr	r3, [r3, #16]
 80240ae:	4a06      	ldr	r2, [pc, #24]	; (80240c8 <FLASH_Program_Word+0x40>)
 80240b0:	f043 0301 	orr.w	r3, r3, #1
 80240b4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80240b6:	687b      	ldr	r3, [r7, #4]
 80240b8:	683a      	ldr	r2, [r7, #0]
 80240ba:	601a      	str	r2, [r3, #0]
}
 80240bc:	bf00      	nop
 80240be:	370c      	adds	r7, #12
 80240c0:	46bd      	mov	sp, r7
 80240c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240c6:	4770      	bx	lr
 80240c8:	40023c00 	.word	0x40023c00

080240cc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80240cc:	b480      	push	{r7}
 80240ce:	b083      	sub	sp, #12
 80240d0:	af00      	add	r7, sp, #0
 80240d2:	6078      	str	r0, [r7, #4]
 80240d4:	460b      	mov	r3, r1
 80240d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80240d8:	4b0d      	ldr	r3, [pc, #52]	; (8024110 <FLASH_Program_HalfWord+0x44>)
 80240da:	691b      	ldr	r3, [r3, #16]
 80240dc:	4a0c      	ldr	r2, [pc, #48]	; (8024110 <FLASH_Program_HalfWord+0x44>)
 80240de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80240e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80240e4:	4b0a      	ldr	r3, [pc, #40]	; (8024110 <FLASH_Program_HalfWord+0x44>)
 80240e6:	691b      	ldr	r3, [r3, #16]
 80240e8:	4a09      	ldr	r2, [pc, #36]	; (8024110 <FLASH_Program_HalfWord+0x44>)
 80240ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80240ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80240f0:	4b07      	ldr	r3, [pc, #28]	; (8024110 <FLASH_Program_HalfWord+0x44>)
 80240f2:	691b      	ldr	r3, [r3, #16]
 80240f4:	4a06      	ldr	r2, [pc, #24]	; (8024110 <FLASH_Program_HalfWord+0x44>)
 80240f6:	f043 0301 	orr.w	r3, r3, #1
 80240fa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	887a      	ldrh	r2, [r7, #2]
 8024100:	801a      	strh	r2, [r3, #0]
}
 8024102:	bf00      	nop
 8024104:	370c      	adds	r7, #12
 8024106:	46bd      	mov	sp, r7
 8024108:	f85d 7b04 	ldr.w	r7, [sp], #4
 802410c:	4770      	bx	lr
 802410e:	bf00      	nop
 8024110:	40023c00 	.word	0x40023c00

08024114 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8024114:	b480      	push	{r7}
 8024116:	b083      	sub	sp, #12
 8024118:	af00      	add	r7, sp, #0
 802411a:	6078      	str	r0, [r7, #4]
 802411c:	460b      	mov	r3, r1
 802411e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024120:	4b0c      	ldr	r3, [pc, #48]	; (8024154 <FLASH_Program_Byte+0x40>)
 8024122:	691b      	ldr	r3, [r3, #16]
 8024124:	4a0b      	ldr	r2, [pc, #44]	; (8024154 <FLASH_Program_Byte+0x40>)
 8024126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802412a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802412c:	4b09      	ldr	r3, [pc, #36]	; (8024154 <FLASH_Program_Byte+0x40>)
 802412e:	4a09      	ldr	r2, [pc, #36]	; (8024154 <FLASH_Program_Byte+0x40>)
 8024130:	691b      	ldr	r3, [r3, #16]
 8024132:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024134:	4b07      	ldr	r3, [pc, #28]	; (8024154 <FLASH_Program_Byte+0x40>)
 8024136:	691b      	ldr	r3, [r3, #16]
 8024138:	4a06      	ldr	r2, [pc, #24]	; (8024154 <FLASH_Program_Byte+0x40>)
 802413a:	f043 0301 	orr.w	r3, r3, #1
 802413e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8024140:	687b      	ldr	r3, [r7, #4]
 8024142:	78fa      	ldrb	r2, [r7, #3]
 8024144:	701a      	strb	r2, [r3, #0]
}
 8024146:	bf00      	nop
 8024148:	370c      	adds	r7, #12
 802414a:	46bd      	mov	sp, r7
 802414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024150:	4770      	bx	lr
 8024152:	bf00      	nop
 8024154:	40023c00 	.word	0x40023c00

08024158 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8024158:	b480      	push	{r7}
 802415a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802415c:	4b27      	ldr	r3, [pc, #156]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 802415e:	68db      	ldr	r3, [r3, #12]
 8024160:	f003 0310 	and.w	r3, r3, #16
 8024164:	2b00      	cmp	r3, #0
 8024166:	d008      	beq.n	802417a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8024168:	4b25      	ldr	r3, [pc, #148]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 802416a:	69db      	ldr	r3, [r3, #28]
 802416c:	f043 0310 	orr.w	r3, r3, #16
 8024170:	4a23      	ldr	r2, [pc, #140]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 8024172:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8024174:	4b21      	ldr	r3, [pc, #132]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 8024176:	2210      	movs	r2, #16
 8024178:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802417a:	4b20      	ldr	r3, [pc, #128]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 802417c:	68db      	ldr	r3, [r3, #12]
 802417e:	f003 0320 	and.w	r3, r3, #32
 8024182:	2b00      	cmp	r3, #0
 8024184:	d008      	beq.n	8024198 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8024186:	4b1e      	ldr	r3, [pc, #120]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 8024188:	69db      	ldr	r3, [r3, #28]
 802418a:	f043 0308 	orr.w	r3, r3, #8
 802418e:	4a1c      	ldr	r2, [pc, #112]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 8024190:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8024192:	4b1a      	ldr	r3, [pc, #104]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 8024194:	2220      	movs	r2, #32
 8024196:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8024198:	4b18      	ldr	r3, [pc, #96]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 802419a:	68db      	ldr	r3, [r3, #12]
 802419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d008      	beq.n	80241b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80241a4:	4b16      	ldr	r3, [pc, #88]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 80241a6:	69db      	ldr	r3, [r3, #28]
 80241a8:	f043 0304 	orr.w	r3, r3, #4
 80241ac:	4a14      	ldr	r2, [pc, #80]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 80241ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80241b0:	4b12      	ldr	r3, [pc, #72]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 80241b2:	2240      	movs	r2, #64	; 0x40
 80241b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80241b6:	4b11      	ldr	r3, [pc, #68]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 80241b8:	68db      	ldr	r3, [r3, #12]
 80241ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80241be:	2b00      	cmp	r3, #0
 80241c0:	d008      	beq.n	80241d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80241c2:	4b0f      	ldr	r3, [pc, #60]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 80241c4:	69db      	ldr	r3, [r3, #28]
 80241c6:	f043 0302 	orr.w	r3, r3, #2
 80241ca:	4a0d      	ldr	r2, [pc, #52]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 80241cc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80241ce:	4b0b      	ldr	r3, [pc, #44]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 80241d0:	2280      	movs	r2, #128	; 0x80
 80241d2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80241d4:	4b09      	ldr	r3, [pc, #36]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 80241d6:	68db      	ldr	r3, [r3, #12]
 80241d8:	f003 0302 	and.w	r3, r3, #2
 80241dc:	2b00      	cmp	r3, #0
 80241de:	d008      	beq.n	80241f2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80241e0:	4b07      	ldr	r3, [pc, #28]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 80241e2:	69db      	ldr	r3, [r3, #28]
 80241e4:	f043 0320 	orr.w	r3, r3, #32
 80241e8:	4a05      	ldr	r2, [pc, #20]	; (8024200 <FLASH_SetErrorCode+0xa8>)
 80241ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80241ec:	4b03      	ldr	r3, [pc, #12]	; (80241fc <FLASH_SetErrorCode+0xa4>)
 80241ee:	2202      	movs	r2, #2
 80241f0:	60da      	str	r2, [r3, #12]
  }
}
 80241f2:	bf00      	nop
 80241f4:	46bd      	mov	sp, r7
 80241f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241fa:	4770      	bx	lr
 80241fc:	40023c00 	.word	0x40023c00
 8024200:	200016a4 	.word	0x200016a4

08024204 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8024204:	b580      	push	{r7, lr}
 8024206:	b084      	sub	sp, #16
 8024208:	af00      	add	r7, sp, #0
 802420a:	6078      	str	r0, [r7, #4]
 802420c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802420e:	2301      	movs	r3, #1
 8024210:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8024212:	2300      	movs	r3, #0
 8024214:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8024216:	4b31      	ldr	r3, [pc, #196]	; (80242dc <HAL_FLASHEx_Erase+0xd8>)
 8024218:	7e1b      	ldrb	r3, [r3, #24]
 802421a:	2b01      	cmp	r3, #1
 802421c:	d101      	bne.n	8024222 <HAL_FLASHEx_Erase+0x1e>
 802421e:	2302      	movs	r3, #2
 8024220:	e058      	b.n	80242d4 <HAL_FLASHEx_Erase+0xd0>
 8024222:	4b2e      	ldr	r3, [pc, #184]	; (80242dc <HAL_FLASHEx_Erase+0xd8>)
 8024224:	2201      	movs	r2, #1
 8024226:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024228:	f24c 3050 	movw	r0, #50000	; 0xc350
 802422c:	f7ff febc 	bl	8023fa8 <FLASH_WaitForLastOperation>
 8024230:	4603      	mov	r3, r0
 8024232:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8024234:	7bfb      	ldrb	r3, [r7, #15]
 8024236:	2b00      	cmp	r3, #0
 8024238:	d148      	bne.n	80242cc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802423a:	683b      	ldr	r3, [r7, #0]
 802423c:	f04f 32ff 	mov.w	r2, #4294967295
 8024240:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8024242:	687b      	ldr	r3, [r7, #4]
 8024244:	681b      	ldr	r3, [r3, #0]
 8024246:	2b01      	cmp	r3, #1
 8024248:	d115      	bne.n	8024276 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802424a:	687b      	ldr	r3, [r7, #4]
 802424c:	691b      	ldr	r3, [r3, #16]
 802424e:	b2da      	uxtb	r2, r3
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	685b      	ldr	r3, [r3, #4]
 8024254:	4619      	mov	r1, r3
 8024256:	4610      	mov	r0, r2
 8024258:	f000 f844 	bl	80242e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802425c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024260:	f7ff fea2 	bl	8023fa8 <FLASH_WaitForLastOperation>
 8024264:	4603      	mov	r3, r0
 8024266:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8024268:	4b1d      	ldr	r3, [pc, #116]	; (80242e0 <HAL_FLASHEx_Erase+0xdc>)
 802426a:	691b      	ldr	r3, [r3, #16]
 802426c:	4a1c      	ldr	r2, [pc, #112]	; (80242e0 <HAL_FLASHEx_Erase+0xdc>)
 802426e:	f023 0304 	bic.w	r3, r3, #4
 8024272:	6113      	str	r3, [r2, #16]
 8024274:	e028      	b.n	80242c8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	689b      	ldr	r3, [r3, #8]
 802427a:	60bb      	str	r3, [r7, #8]
 802427c:	e01c      	b.n	80242b8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802427e:	687b      	ldr	r3, [r7, #4]
 8024280:	691b      	ldr	r3, [r3, #16]
 8024282:	b2db      	uxtb	r3, r3
 8024284:	4619      	mov	r1, r3
 8024286:	68b8      	ldr	r0, [r7, #8]
 8024288:	f000 f850 	bl	802432c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802428c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024290:	f7ff fe8a 	bl	8023fa8 <FLASH_WaitForLastOperation>
 8024294:	4603      	mov	r3, r0
 8024296:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8024298:	4b11      	ldr	r3, [pc, #68]	; (80242e0 <HAL_FLASHEx_Erase+0xdc>)
 802429a:	691b      	ldr	r3, [r3, #16]
 802429c:	4a10      	ldr	r2, [pc, #64]	; (80242e0 <HAL_FLASHEx_Erase+0xdc>)
 802429e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80242a2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80242a4:	7bfb      	ldrb	r3, [r7, #15]
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	d003      	beq.n	80242b2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80242aa:	683b      	ldr	r3, [r7, #0]
 80242ac:	68ba      	ldr	r2, [r7, #8]
 80242ae:	601a      	str	r2, [r3, #0]
          break;
 80242b0:	e00a      	b.n	80242c8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80242b2:	68bb      	ldr	r3, [r7, #8]
 80242b4:	3301      	adds	r3, #1
 80242b6:	60bb      	str	r3, [r7, #8]
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	68da      	ldr	r2, [r3, #12]
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	689b      	ldr	r3, [r3, #8]
 80242c0:	4413      	add	r3, r2
 80242c2:	68ba      	ldr	r2, [r7, #8]
 80242c4:	429a      	cmp	r2, r3
 80242c6:	d3da      	bcc.n	802427e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80242c8:	f000 f878 	bl	80243bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80242cc:	4b03      	ldr	r3, [pc, #12]	; (80242dc <HAL_FLASHEx_Erase+0xd8>)
 80242ce:	2200      	movs	r2, #0
 80242d0:	761a      	strb	r2, [r3, #24]

  return status;
 80242d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80242d4:	4618      	mov	r0, r3
 80242d6:	3710      	adds	r7, #16
 80242d8:	46bd      	mov	sp, r7
 80242da:	bd80      	pop	{r7, pc}
 80242dc:	200016a4 	.word	0x200016a4
 80242e0:	40023c00 	.word	0x40023c00

080242e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80242e4:	b480      	push	{r7}
 80242e6:	b083      	sub	sp, #12
 80242e8:	af00      	add	r7, sp, #0
 80242ea:	4603      	mov	r3, r0
 80242ec:	6039      	str	r1, [r7, #0]
 80242ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80242f0:	4b0d      	ldr	r3, [pc, #52]	; (8024328 <FLASH_MassErase+0x44>)
 80242f2:	691b      	ldr	r3, [r3, #16]
 80242f4:	4a0c      	ldr	r2, [pc, #48]	; (8024328 <FLASH_MassErase+0x44>)
 80242f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80242fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80242fc:	4b0a      	ldr	r3, [pc, #40]	; (8024328 <FLASH_MassErase+0x44>)
 80242fe:	691b      	ldr	r3, [r3, #16]
 8024300:	4a09      	ldr	r2, [pc, #36]	; (8024328 <FLASH_MassErase+0x44>)
 8024302:	f043 0304 	orr.w	r3, r3, #4
 8024306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8024308:	4b07      	ldr	r3, [pc, #28]	; (8024328 <FLASH_MassErase+0x44>)
 802430a:	691a      	ldr	r2, [r3, #16]
 802430c:	79fb      	ldrb	r3, [r7, #7]
 802430e:	021b      	lsls	r3, r3, #8
 8024310:	4313      	orrs	r3, r2
 8024312:	4a05      	ldr	r2, [pc, #20]	; (8024328 <FLASH_MassErase+0x44>)
 8024314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024318:	6113      	str	r3, [r2, #16]
}
 802431a:	bf00      	nop
 802431c:	370c      	adds	r7, #12
 802431e:	46bd      	mov	sp, r7
 8024320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024324:	4770      	bx	lr
 8024326:	bf00      	nop
 8024328:	40023c00 	.word	0x40023c00

0802432c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802432c:	b480      	push	{r7}
 802432e:	b085      	sub	sp, #20
 8024330:	af00      	add	r7, sp, #0
 8024332:	6078      	str	r0, [r7, #4]
 8024334:	460b      	mov	r3, r1
 8024336:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8024338:	2300      	movs	r3, #0
 802433a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802433c:	78fb      	ldrb	r3, [r7, #3]
 802433e:	2b00      	cmp	r3, #0
 8024340:	d102      	bne.n	8024348 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8024342:	2300      	movs	r3, #0
 8024344:	60fb      	str	r3, [r7, #12]
 8024346:	e010      	b.n	802436a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8024348:	78fb      	ldrb	r3, [r7, #3]
 802434a:	2b01      	cmp	r3, #1
 802434c:	d103      	bne.n	8024356 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802434e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024352:	60fb      	str	r3, [r7, #12]
 8024354:	e009      	b.n	802436a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8024356:	78fb      	ldrb	r3, [r7, #3]
 8024358:	2b02      	cmp	r3, #2
 802435a:	d103      	bne.n	8024364 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 802435c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024360:	60fb      	str	r3, [r7, #12]
 8024362:	e002      	b.n	802436a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8024364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024368:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802436a:	4b13      	ldr	r3, [pc, #76]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 802436c:	691b      	ldr	r3, [r3, #16]
 802436e:	4a12      	ldr	r2, [pc, #72]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 8024370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024374:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8024376:	4b10      	ldr	r3, [pc, #64]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 8024378:	691a      	ldr	r2, [r3, #16]
 802437a:	490f      	ldr	r1, [pc, #60]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 802437c:	68fb      	ldr	r3, [r7, #12]
 802437e:	4313      	orrs	r3, r2
 8024380:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8024382:	4b0d      	ldr	r3, [pc, #52]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 8024384:	691b      	ldr	r3, [r3, #16]
 8024386:	4a0c      	ldr	r2, [pc, #48]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 8024388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802438c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802438e:	4b0a      	ldr	r3, [pc, #40]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 8024390:	691a      	ldr	r2, [r3, #16]
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	00db      	lsls	r3, r3, #3
 8024396:	4313      	orrs	r3, r2
 8024398:	4a07      	ldr	r2, [pc, #28]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 802439a:	f043 0302 	orr.w	r3, r3, #2
 802439e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80243a0:	4b05      	ldr	r3, [pc, #20]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 80243a2:	691b      	ldr	r3, [r3, #16]
 80243a4:	4a04      	ldr	r2, [pc, #16]	; (80243b8 <FLASH_Erase_Sector+0x8c>)
 80243a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80243aa:	6113      	str	r3, [r2, #16]
}
 80243ac:	bf00      	nop
 80243ae:	3714      	adds	r7, #20
 80243b0:	46bd      	mov	sp, r7
 80243b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b6:	4770      	bx	lr
 80243b8:	40023c00 	.word	0x40023c00

080243bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80243bc:	b480      	push	{r7}
 80243be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80243c0:	4b20      	ldr	r3, [pc, #128]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243c2:	681b      	ldr	r3, [r3, #0]
 80243c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	d017      	beq.n	80243fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80243cc:	4b1d      	ldr	r3, [pc, #116]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243ce:	681b      	ldr	r3, [r3, #0]
 80243d0:	4a1c      	ldr	r2, [pc, #112]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80243d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80243d8:	4b1a      	ldr	r3, [pc, #104]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243da:	681b      	ldr	r3, [r3, #0]
 80243dc:	4a19      	ldr	r2, [pc, #100]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80243e2:	6013      	str	r3, [r2, #0]
 80243e4:	4b17      	ldr	r3, [pc, #92]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243e6:	681b      	ldr	r3, [r3, #0]
 80243e8:	4a16      	ldr	r2, [pc, #88]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80243ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80243f0:	4b14      	ldr	r3, [pc, #80]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	4a13      	ldr	r2, [pc, #76]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80243fa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80243fc:	4b11      	ldr	r3, [pc, #68]	; (8024444 <FLASH_FlushCaches+0x88>)
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024404:	2b00      	cmp	r3, #0
 8024406:	d017      	beq.n	8024438 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8024408:	4b0e      	ldr	r3, [pc, #56]	; (8024444 <FLASH_FlushCaches+0x88>)
 802440a:	681b      	ldr	r3, [r3, #0]
 802440c:	4a0d      	ldr	r2, [pc, #52]	; (8024444 <FLASH_FlushCaches+0x88>)
 802440e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024412:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8024414:	4b0b      	ldr	r3, [pc, #44]	; (8024444 <FLASH_FlushCaches+0x88>)
 8024416:	681b      	ldr	r3, [r3, #0]
 8024418:	4a0a      	ldr	r2, [pc, #40]	; (8024444 <FLASH_FlushCaches+0x88>)
 802441a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802441e:	6013      	str	r3, [r2, #0]
 8024420:	4b08      	ldr	r3, [pc, #32]	; (8024444 <FLASH_FlushCaches+0x88>)
 8024422:	681b      	ldr	r3, [r3, #0]
 8024424:	4a07      	ldr	r2, [pc, #28]	; (8024444 <FLASH_FlushCaches+0x88>)
 8024426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802442a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802442c:	4b05      	ldr	r3, [pc, #20]	; (8024444 <FLASH_FlushCaches+0x88>)
 802442e:	681b      	ldr	r3, [r3, #0]
 8024430:	4a04      	ldr	r2, [pc, #16]	; (8024444 <FLASH_FlushCaches+0x88>)
 8024432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024436:	6013      	str	r3, [r2, #0]
  }
}
 8024438:	bf00      	nop
 802443a:	46bd      	mov	sp, r7
 802443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024440:	4770      	bx	lr
 8024442:	bf00      	nop
 8024444:	40023c00 	.word	0x40023c00

08024448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024448:	b480      	push	{r7}
 802444a:	b089      	sub	sp, #36	; 0x24
 802444c:	af00      	add	r7, sp, #0
 802444e:	6078      	str	r0, [r7, #4]
 8024450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024452:	2300      	movs	r3, #0
 8024454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024456:	2300      	movs	r3, #0
 8024458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802445a:	2300      	movs	r3, #0
 802445c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802445e:	2300      	movs	r3, #0
 8024460:	61fb      	str	r3, [r7, #28]
 8024462:	e16b      	b.n	802473c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024464:	2201      	movs	r2, #1
 8024466:	69fb      	ldr	r3, [r7, #28]
 8024468:	fa02 f303 	lsl.w	r3, r2, r3
 802446c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802446e:	683b      	ldr	r3, [r7, #0]
 8024470:	681b      	ldr	r3, [r3, #0]
 8024472:	697a      	ldr	r2, [r7, #20]
 8024474:	4013      	ands	r3, r2
 8024476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024478:	693a      	ldr	r2, [r7, #16]
 802447a:	697b      	ldr	r3, [r7, #20]
 802447c:	429a      	cmp	r2, r3
 802447e:	f040 815a 	bne.w	8024736 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8024482:	683b      	ldr	r3, [r7, #0]
 8024484:	685b      	ldr	r3, [r3, #4]
 8024486:	2b01      	cmp	r3, #1
 8024488:	d00b      	beq.n	80244a2 <HAL_GPIO_Init+0x5a>
 802448a:	683b      	ldr	r3, [r7, #0]
 802448c:	685b      	ldr	r3, [r3, #4]
 802448e:	2b02      	cmp	r3, #2
 8024490:	d007      	beq.n	80244a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024492:	683b      	ldr	r3, [r7, #0]
 8024494:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8024496:	2b11      	cmp	r3, #17
 8024498:	d003      	beq.n	80244a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802449a:	683b      	ldr	r3, [r7, #0]
 802449c:	685b      	ldr	r3, [r3, #4]
 802449e:	2b12      	cmp	r3, #18
 80244a0:	d130      	bne.n	8024504 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	689b      	ldr	r3, [r3, #8]
 80244a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80244a8:	69fb      	ldr	r3, [r7, #28]
 80244aa:	005b      	lsls	r3, r3, #1
 80244ac:	2203      	movs	r2, #3
 80244ae:	fa02 f303 	lsl.w	r3, r2, r3
 80244b2:	43db      	mvns	r3, r3
 80244b4:	69ba      	ldr	r2, [r7, #24]
 80244b6:	4013      	ands	r3, r2
 80244b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80244ba:	683b      	ldr	r3, [r7, #0]
 80244bc:	68da      	ldr	r2, [r3, #12]
 80244be:	69fb      	ldr	r3, [r7, #28]
 80244c0:	005b      	lsls	r3, r3, #1
 80244c2:	fa02 f303 	lsl.w	r3, r2, r3
 80244c6:	69ba      	ldr	r2, [r7, #24]
 80244c8:	4313      	orrs	r3, r2
 80244ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	69ba      	ldr	r2, [r7, #24]
 80244d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	685b      	ldr	r3, [r3, #4]
 80244d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80244d8:	2201      	movs	r2, #1
 80244da:	69fb      	ldr	r3, [r7, #28]
 80244dc:	fa02 f303 	lsl.w	r3, r2, r3
 80244e0:	43db      	mvns	r3, r3
 80244e2:	69ba      	ldr	r2, [r7, #24]
 80244e4:	4013      	ands	r3, r2
 80244e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80244e8:	683b      	ldr	r3, [r7, #0]
 80244ea:	685b      	ldr	r3, [r3, #4]
 80244ec:	091b      	lsrs	r3, r3, #4
 80244ee:	f003 0201 	and.w	r2, r3, #1
 80244f2:	69fb      	ldr	r3, [r7, #28]
 80244f4:	fa02 f303 	lsl.w	r3, r2, r3
 80244f8:	69ba      	ldr	r2, [r7, #24]
 80244fa:	4313      	orrs	r3, r2
 80244fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80244fe:	687b      	ldr	r3, [r7, #4]
 8024500:	69ba      	ldr	r2, [r7, #24]
 8024502:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	68db      	ldr	r3, [r3, #12]
 8024508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802450a:	69fb      	ldr	r3, [r7, #28]
 802450c:	005b      	lsls	r3, r3, #1
 802450e:	2203      	movs	r2, #3
 8024510:	fa02 f303 	lsl.w	r3, r2, r3
 8024514:	43db      	mvns	r3, r3
 8024516:	69ba      	ldr	r2, [r7, #24]
 8024518:	4013      	ands	r3, r2
 802451a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802451c:	683b      	ldr	r3, [r7, #0]
 802451e:	689a      	ldr	r2, [r3, #8]
 8024520:	69fb      	ldr	r3, [r7, #28]
 8024522:	005b      	lsls	r3, r3, #1
 8024524:	fa02 f303 	lsl.w	r3, r2, r3
 8024528:	69ba      	ldr	r2, [r7, #24]
 802452a:	4313      	orrs	r3, r2
 802452c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	69ba      	ldr	r2, [r7, #24]
 8024532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024534:	683b      	ldr	r3, [r7, #0]
 8024536:	685b      	ldr	r3, [r3, #4]
 8024538:	2b02      	cmp	r3, #2
 802453a:	d003      	beq.n	8024544 <HAL_GPIO_Init+0xfc>
 802453c:	683b      	ldr	r3, [r7, #0]
 802453e:	685b      	ldr	r3, [r3, #4]
 8024540:	2b12      	cmp	r3, #18
 8024542:	d123      	bne.n	802458c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024544:	69fb      	ldr	r3, [r7, #28]
 8024546:	08da      	lsrs	r2, r3, #3
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	3208      	adds	r2, #8
 802454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024552:	69fb      	ldr	r3, [r7, #28]
 8024554:	f003 0307 	and.w	r3, r3, #7
 8024558:	009b      	lsls	r3, r3, #2
 802455a:	220f      	movs	r2, #15
 802455c:	fa02 f303 	lsl.w	r3, r2, r3
 8024560:	43db      	mvns	r3, r3
 8024562:	69ba      	ldr	r2, [r7, #24]
 8024564:	4013      	ands	r3, r2
 8024566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024568:	683b      	ldr	r3, [r7, #0]
 802456a:	691a      	ldr	r2, [r3, #16]
 802456c:	69fb      	ldr	r3, [r7, #28]
 802456e:	f003 0307 	and.w	r3, r3, #7
 8024572:	009b      	lsls	r3, r3, #2
 8024574:	fa02 f303 	lsl.w	r3, r2, r3
 8024578:	69ba      	ldr	r2, [r7, #24]
 802457a:	4313      	orrs	r3, r2
 802457c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802457e:	69fb      	ldr	r3, [r7, #28]
 8024580:	08da      	lsrs	r2, r3, #3
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	3208      	adds	r2, #8
 8024586:	69b9      	ldr	r1, [r7, #24]
 8024588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802458c:	687b      	ldr	r3, [r7, #4]
 802458e:	681b      	ldr	r3, [r3, #0]
 8024590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024592:	69fb      	ldr	r3, [r7, #28]
 8024594:	005b      	lsls	r3, r3, #1
 8024596:	2203      	movs	r2, #3
 8024598:	fa02 f303 	lsl.w	r3, r2, r3
 802459c:	43db      	mvns	r3, r3
 802459e:	69ba      	ldr	r2, [r7, #24]
 80245a0:	4013      	ands	r3, r2
 80245a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80245a4:	683b      	ldr	r3, [r7, #0]
 80245a6:	685b      	ldr	r3, [r3, #4]
 80245a8:	f003 0203 	and.w	r2, r3, #3
 80245ac:	69fb      	ldr	r3, [r7, #28]
 80245ae:	005b      	lsls	r3, r3, #1
 80245b0:	fa02 f303 	lsl.w	r3, r2, r3
 80245b4:	69ba      	ldr	r2, [r7, #24]
 80245b6:	4313      	orrs	r3, r2
 80245b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80245ba:	687b      	ldr	r3, [r7, #4]
 80245bc:	69ba      	ldr	r2, [r7, #24]
 80245be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80245c0:	683b      	ldr	r3, [r7, #0]
 80245c2:	685b      	ldr	r3, [r3, #4]
 80245c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80245c8:	2b00      	cmp	r3, #0
 80245ca:	f000 80b4 	beq.w	8024736 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80245ce:	2300      	movs	r3, #0
 80245d0:	60fb      	str	r3, [r7, #12]
 80245d2:	4b5f      	ldr	r3, [pc, #380]	; (8024750 <HAL_GPIO_Init+0x308>)
 80245d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80245d6:	4a5e      	ldr	r2, [pc, #376]	; (8024750 <HAL_GPIO_Init+0x308>)
 80245d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80245dc:	6453      	str	r3, [r2, #68]	; 0x44
 80245de:	4b5c      	ldr	r3, [pc, #368]	; (8024750 <HAL_GPIO_Init+0x308>)
 80245e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80245e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80245e6:	60fb      	str	r3, [r7, #12]
 80245e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80245ea:	4a5a      	ldr	r2, [pc, #360]	; (8024754 <HAL_GPIO_Init+0x30c>)
 80245ec:	69fb      	ldr	r3, [r7, #28]
 80245ee:	089b      	lsrs	r3, r3, #2
 80245f0:	3302      	adds	r3, #2
 80245f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80245f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80245f8:	69fb      	ldr	r3, [r7, #28]
 80245fa:	f003 0303 	and.w	r3, r3, #3
 80245fe:	009b      	lsls	r3, r3, #2
 8024600:	220f      	movs	r2, #15
 8024602:	fa02 f303 	lsl.w	r3, r2, r3
 8024606:	43db      	mvns	r3, r3
 8024608:	69ba      	ldr	r2, [r7, #24]
 802460a:	4013      	ands	r3, r2
 802460c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	4a51      	ldr	r2, [pc, #324]	; (8024758 <HAL_GPIO_Init+0x310>)
 8024612:	4293      	cmp	r3, r2
 8024614:	d02b      	beq.n	802466e <HAL_GPIO_Init+0x226>
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	4a50      	ldr	r2, [pc, #320]	; (802475c <HAL_GPIO_Init+0x314>)
 802461a:	4293      	cmp	r3, r2
 802461c:	d025      	beq.n	802466a <HAL_GPIO_Init+0x222>
 802461e:	687b      	ldr	r3, [r7, #4]
 8024620:	4a4f      	ldr	r2, [pc, #316]	; (8024760 <HAL_GPIO_Init+0x318>)
 8024622:	4293      	cmp	r3, r2
 8024624:	d01f      	beq.n	8024666 <HAL_GPIO_Init+0x21e>
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	4a4e      	ldr	r2, [pc, #312]	; (8024764 <HAL_GPIO_Init+0x31c>)
 802462a:	4293      	cmp	r3, r2
 802462c:	d019      	beq.n	8024662 <HAL_GPIO_Init+0x21a>
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	4a4d      	ldr	r2, [pc, #308]	; (8024768 <HAL_GPIO_Init+0x320>)
 8024632:	4293      	cmp	r3, r2
 8024634:	d013      	beq.n	802465e <HAL_GPIO_Init+0x216>
 8024636:	687b      	ldr	r3, [r7, #4]
 8024638:	4a4c      	ldr	r2, [pc, #304]	; (802476c <HAL_GPIO_Init+0x324>)
 802463a:	4293      	cmp	r3, r2
 802463c:	d00d      	beq.n	802465a <HAL_GPIO_Init+0x212>
 802463e:	687b      	ldr	r3, [r7, #4]
 8024640:	4a4b      	ldr	r2, [pc, #300]	; (8024770 <HAL_GPIO_Init+0x328>)
 8024642:	4293      	cmp	r3, r2
 8024644:	d007      	beq.n	8024656 <HAL_GPIO_Init+0x20e>
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	4a4a      	ldr	r2, [pc, #296]	; (8024774 <HAL_GPIO_Init+0x32c>)
 802464a:	4293      	cmp	r3, r2
 802464c:	d101      	bne.n	8024652 <HAL_GPIO_Init+0x20a>
 802464e:	2307      	movs	r3, #7
 8024650:	e00e      	b.n	8024670 <HAL_GPIO_Init+0x228>
 8024652:	2308      	movs	r3, #8
 8024654:	e00c      	b.n	8024670 <HAL_GPIO_Init+0x228>
 8024656:	2306      	movs	r3, #6
 8024658:	e00a      	b.n	8024670 <HAL_GPIO_Init+0x228>
 802465a:	2305      	movs	r3, #5
 802465c:	e008      	b.n	8024670 <HAL_GPIO_Init+0x228>
 802465e:	2304      	movs	r3, #4
 8024660:	e006      	b.n	8024670 <HAL_GPIO_Init+0x228>
 8024662:	2303      	movs	r3, #3
 8024664:	e004      	b.n	8024670 <HAL_GPIO_Init+0x228>
 8024666:	2302      	movs	r3, #2
 8024668:	e002      	b.n	8024670 <HAL_GPIO_Init+0x228>
 802466a:	2301      	movs	r3, #1
 802466c:	e000      	b.n	8024670 <HAL_GPIO_Init+0x228>
 802466e:	2300      	movs	r3, #0
 8024670:	69fa      	ldr	r2, [r7, #28]
 8024672:	f002 0203 	and.w	r2, r2, #3
 8024676:	0092      	lsls	r2, r2, #2
 8024678:	4093      	lsls	r3, r2
 802467a:	69ba      	ldr	r2, [r7, #24]
 802467c:	4313      	orrs	r3, r2
 802467e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024680:	4934      	ldr	r1, [pc, #208]	; (8024754 <HAL_GPIO_Init+0x30c>)
 8024682:	69fb      	ldr	r3, [r7, #28]
 8024684:	089b      	lsrs	r3, r3, #2
 8024686:	3302      	adds	r3, #2
 8024688:	69ba      	ldr	r2, [r7, #24]
 802468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802468e:	4b3a      	ldr	r3, [pc, #232]	; (8024778 <HAL_GPIO_Init+0x330>)
 8024690:	681b      	ldr	r3, [r3, #0]
 8024692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024694:	693b      	ldr	r3, [r7, #16]
 8024696:	43db      	mvns	r3, r3
 8024698:	69ba      	ldr	r2, [r7, #24]
 802469a:	4013      	ands	r3, r2
 802469c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802469e:	683b      	ldr	r3, [r7, #0]
 80246a0:	685b      	ldr	r3, [r3, #4]
 80246a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80246a6:	2b00      	cmp	r3, #0
 80246a8:	d003      	beq.n	80246b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80246aa:	69ba      	ldr	r2, [r7, #24]
 80246ac:	693b      	ldr	r3, [r7, #16]
 80246ae:	4313      	orrs	r3, r2
 80246b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80246b2:	4a31      	ldr	r2, [pc, #196]	; (8024778 <HAL_GPIO_Init+0x330>)
 80246b4:	69bb      	ldr	r3, [r7, #24]
 80246b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80246b8:	4b2f      	ldr	r3, [pc, #188]	; (8024778 <HAL_GPIO_Init+0x330>)
 80246ba:	685b      	ldr	r3, [r3, #4]
 80246bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80246be:	693b      	ldr	r3, [r7, #16]
 80246c0:	43db      	mvns	r3, r3
 80246c2:	69ba      	ldr	r2, [r7, #24]
 80246c4:	4013      	ands	r3, r2
 80246c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80246c8:	683b      	ldr	r3, [r7, #0]
 80246ca:	685b      	ldr	r3, [r3, #4]
 80246cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	d003      	beq.n	80246dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80246d4:	69ba      	ldr	r2, [r7, #24]
 80246d6:	693b      	ldr	r3, [r7, #16]
 80246d8:	4313      	orrs	r3, r2
 80246da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80246dc:	4a26      	ldr	r2, [pc, #152]	; (8024778 <HAL_GPIO_Init+0x330>)
 80246de:	69bb      	ldr	r3, [r7, #24]
 80246e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80246e2:	4b25      	ldr	r3, [pc, #148]	; (8024778 <HAL_GPIO_Init+0x330>)
 80246e4:	689b      	ldr	r3, [r3, #8]
 80246e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80246e8:	693b      	ldr	r3, [r7, #16]
 80246ea:	43db      	mvns	r3, r3
 80246ec:	69ba      	ldr	r2, [r7, #24]
 80246ee:	4013      	ands	r3, r2
 80246f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80246f2:	683b      	ldr	r3, [r7, #0]
 80246f4:	685b      	ldr	r3, [r3, #4]
 80246f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80246fa:	2b00      	cmp	r3, #0
 80246fc:	d003      	beq.n	8024706 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80246fe:	69ba      	ldr	r2, [r7, #24]
 8024700:	693b      	ldr	r3, [r7, #16]
 8024702:	4313      	orrs	r3, r2
 8024704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024706:	4a1c      	ldr	r2, [pc, #112]	; (8024778 <HAL_GPIO_Init+0x330>)
 8024708:	69bb      	ldr	r3, [r7, #24]
 802470a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802470c:	4b1a      	ldr	r3, [pc, #104]	; (8024778 <HAL_GPIO_Init+0x330>)
 802470e:	68db      	ldr	r3, [r3, #12]
 8024710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024712:	693b      	ldr	r3, [r7, #16]
 8024714:	43db      	mvns	r3, r3
 8024716:	69ba      	ldr	r2, [r7, #24]
 8024718:	4013      	ands	r3, r2
 802471a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 802471c:	683b      	ldr	r3, [r7, #0]
 802471e:	685b      	ldr	r3, [r3, #4]
 8024720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024724:	2b00      	cmp	r3, #0
 8024726:	d003      	beq.n	8024730 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8024728:	69ba      	ldr	r2, [r7, #24]
 802472a:	693b      	ldr	r3, [r7, #16]
 802472c:	4313      	orrs	r3, r2
 802472e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024730:	4a11      	ldr	r2, [pc, #68]	; (8024778 <HAL_GPIO_Init+0x330>)
 8024732:	69bb      	ldr	r3, [r7, #24]
 8024734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024736:	69fb      	ldr	r3, [r7, #28]
 8024738:	3301      	adds	r3, #1
 802473a:	61fb      	str	r3, [r7, #28]
 802473c:	69fb      	ldr	r3, [r7, #28]
 802473e:	2b0f      	cmp	r3, #15
 8024740:	f67f ae90 	bls.w	8024464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024744:	bf00      	nop
 8024746:	3724      	adds	r7, #36	; 0x24
 8024748:	46bd      	mov	sp, r7
 802474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802474e:	4770      	bx	lr
 8024750:	40023800 	.word	0x40023800
 8024754:	40013800 	.word	0x40013800
 8024758:	40020000 	.word	0x40020000
 802475c:	40020400 	.word	0x40020400
 8024760:	40020800 	.word	0x40020800
 8024764:	40020c00 	.word	0x40020c00
 8024768:	40021000 	.word	0x40021000
 802476c:	40021400 	.word	0x40021400
 8024770:	40021800 	.word	0x40021800
 8024774:	40021c00 	.word	0x40021c00
 8024778:	40013c00 	.word	0x40013c00

0802477c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802477c:	b480      	push	{r7}
 802477e:	b087      	sub	sp, #28
 8024780:	af00      	add	r7, sp, #0
 8024782:	6078      	str	r0, [r7, #4]
 8024784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024786:	2300      	movs	r3, #0
 8024788:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802478a:	2300      	movs	r3, #0
 802478c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 802478e:	2300      	movs	r3, #0
 8024790:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024792:	2300      	movs	r3, #0
 8024794:	617b      	str	r3, [r7, #20]
 8024796:	e0cd      	b.n	8024934 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024798:	2201      	movs	r2, #1
 802479a:	697b      	ldr	r3, [r7, #20]
 802479c:	fa02 f303 	lsl.w	r3, r2, r3
 80247a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80247a2:	683a      	ldr	r2, [r7, #0]
 80247a4:	693b      	ldr	r3, [r7, #16]
 80247a6:	4013      	ands	r3, r2
 80247a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80247aa:	68fa      	ldr	r2, [r7, #12]
 80247ac:	693b      	ldr	r3, [r7, #16]
 80247ae:	429a      	cmp	r2, r3
 80247b0:	f040 80bd 	bne.w	802492e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80247b4:	4a64      	ldr	r2, [pc, #400]	; (8024948 <HAL_GPIO_DeInit+0x1cc>)
 80247b6:	697b      	ldr	r3, [r7, #20]
 80247b8:	089b      	lsrs	r3, r3, #2
 80247ba:	3302      	adds	r3, #2
 80247bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80247c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80247c2:	697b      	ldr	r3, [r7, #20]
 80247c4:	f003 0303 	and.w	r3, r3, #3
 80247c8:	009b      	lsls	r3, r3, #2
 80247ca:	220f      	movs	r2, #15
 80247cc:	fa02 f303 	lsl.w	r3, r2, r3
 80247d0:	68ba      	ldr	r2, [r7, #8]
 80247d2:	4013      	ands	r3, r2
 80247d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80247d6:	687b      	ldr	r3, [r7, #4]
 80247d8:	4a5c      	ldr	r2, [pc, #368]	; (802494c <HAL_GPIO_DeInit+0x1d0>)
 80247da:	4293      	cmp	r3, r2
 80247dc:	d02b      	beq.n	8024836 <HAL_GPIO_DeInit+0xba>
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	4a5b      	ldr	r2, [pc, #364]	; (8024950 <HAL_GPIO_DeInit+0x1d4>)
 80247e2:	4293      	cmp	r3, r2
 80247e4:	d025      	beq.n	8024832 <HAL_GPIO_DeInit+0xb6>
 80247e6:	687b      	ldr	r3, [r7, #4]
 80247e8:	4a5a      	ldr	r2, [pc, #360]	; (8024954 <HAL_GPIO_DeInit+0x1d8>)
 80247ea:	4293      	cmp	r3, r2
 80247ec:	d01f      	beq.n	802482e <HAL_GPIO_DeInit+0xb2>
 80247ee:	687b      	ldr	r3, [r7, #4]
 80247f0:	4a59      	ldr	r2, [pc, #356]	; (8024958 <HAL_GPIO_DeInit+0x1dc>)
 80247f2:	4293      	cmp	r3, r2
 80247f4:	d019      	beq.n	802482a <HAL_GPIO_DeInit+0xae>
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	4a58      	ldr	r2, [pc, #352]	; (802495c <HAL_GPIO_DeInit+0x1e0>)
 80247fa:	4293      	cmp	r3, r2
 80247fc:	d013      	beq.n	8024826 <HAL_GPIO_DeInit+0xaa>
 80247fe:	687b      	ldr	r3, [r7, #4]
 8024800:	4a57      	ldr	r2, [pc, #348]	; (8024960 <HAL_GPIO_DeInit+0x1e4>)
 8024802:	4293      	cmp	r3, r2
 8024804:	d00d      	beq.n	8024822 <HAL_GPIO_DeInit+0xa6>
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	4a56      	ldr	r2, [pc, #344]	; (8024964 <HAL_GPIO_DeInit+0x1e8>)
 802480a:	4293      	cmp	r3, r2
 802480c:	d007      	beq.n	802481e <HAL_GPIO_DeInit+0xa2>
 802480e:	687b      	ldr	r3, [r7, #4]
 8024810:	4a55      	ldr	r2, [pc, #340]	; (8024968 <HAL_GPIO_DeInit+0x1ec>)
 8024812:	4293      	cmp	r3, r2
 8024814:	d101      	bne.n	802481a <HAL_GPIO_DeInit+0x9e>
 8024816:	2307      	movs	r3, #7
 8024818:	e00e      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 802481a:	2308      	movs	r3, #8
 802481c:	e00c      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 802481e:	2306      	movs	r3, #6
 8024820:	e00a      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 8024822:	2305      	movs	r3, #5
 8024824:	e008      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 8024826:	2304      	movs	r3, #4
 8024828:	e006      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 802482a:	2303      	movs	r3, #3
 802482c:	e004      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 802482e:	2302      	movs	r3, #2
 8024830:	e002      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 8024832:	2301      	movs	r3, #1
 8024834:	e000      	b.n	8024838 <HAL_GPIO_DeInit+0xbc>
 8024836:	2300      	movs	r3, #0
 8024838:	697a      	ldr	r2, [r7, #20]
 802483a:	f002 0203 	and.w	r2, r2, #3
 802483e:	0092      	lsls	r2, r2, #2
 8024840:	4093      	lsls	r3, r2
 8024842:	68ba      	ldr	r2, [r7, #8]
 8024844:	429a      	cmp	r2, r3
 8024846:	d132      	bne.n	80248ae <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024848:	4b48      	ldr	r3, [pc, #288]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 802484a:	681a      	ldr	r2, [r3, #0]
 802484c:	68fb      	ldr	r3, [r7, #12]
 802484e:	43db      	mvns	r3, r3
 8024850:	4946      	ldr	r1, [pc, #280]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 8024852:	4013      	ands	r3, r2
 8024854:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024856:	4b45      	ldr	r3, [pc, #276]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 8024858:	685a      	ldr	r2, [r3, #4]
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	43db      	mvns	r3, r3
 802485e:	4943      	ldr	r1, [pc, #268]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 8024860:	4013      	ands	r3, r2
 8024862:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024864:	4b41      	ldr	r3, [pc, #260]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 8024866:	689a      	ldr	r2, [r3, #8]
 8024868:	68fb      	ldr	r3, [r7, #12]
 802486a:	43db      	mvns	r3, r3
 802486c:	493f      	ldr	r1, [pc, #252]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 802486e:	4013      	ands	r3, r2
 8024870:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024872:	4b3e      	ldr	r3, [pc, #248]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 8024874:	68da      	ldr	r2, [r3, #12]
 8024876:	68fb      	ldr	r3, [r7, #12]
 8024878:	43db      	mvns	r3, r3
 802487a:	493c      	ldr	r1, [pc, #240]	; (802496c <HAL_GPIO_DeInit+0x1f0>)
 802487c:	4013      	ands	r3, r2
 802487e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024880:	697b      	ldr	r3, [r7, #20]
 8024882:	f003 0303 	and.w	r3, r3, #3
 8024886:	009b      	lsls	r3, r3, #2
 8024888:	220f      	movs	r2, #15
 802488a:	fa02 f303 	lsl.w	r3, r2, r3
 802488e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024890:	4a2d      	ldr	r2, [pc, #180]	; (8024948 <HAL_GPIO_DeInit+0x1cc>)
 8024892:	697b      	ldr	r3, [r7, #20]
 8024894:	089b      	lsrs	r3, r3, #2
 8024896:	3302      	adds	r3, #2
 8024898:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802489c:	68bb      	ldr	r3, [r7, #8]
 802489e:	43da      	mvns	r2, r3
 80248a0:	4829      	ldr	r0, [pc, #164]	; (8024948 <HAL_GPIO_DeInit+0x1cc>)
 80248a2:	697b      	ldr	r3, [r7, #20]
 80248a4:	089b      	lsrs	r3, r3, #2
 80248a6:	400a      	ands	r2, r1
 80248a8:	3302      	adds	r3, #2
 80248aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	681a      	ldr	r2, [r3, #0]
 80248b2:	697b      	ldr	r3, [r7, #20]
 80248b4:	005b      	lsls	r3, r3, #1
 80248b6:	2103      	movs	r1, #3
 80248b8:	fa01 f303 	lsl.w	r3, r1, r3
 80248bc:	43db      	mvns	r3, r3
 80248be:	401a      	ands	r2, r3
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80248c4:	697b      	ldr	r3, [r7, #20]
 80248c6:	08da      	lsrs	r2, r3, #3
 80248c8:	687b      	ldr	r3, [r7, #4]
 80248ca:	3208      	adds	r2, #8
 80248cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80248d0:	697b      	ldr	r3, [r7, #20]
 80248d2:	f003 0307 	and.w	r3, r3, #7
 80248d6:	009b      	lsls	r3, r3, #2
 80248d8:	220f      	movs	r2, #15
 80248da:	fa02 f303 	lsl.w	r3, r2, r3
 80248de:	43db      	mvns	r3, r3
 80248e0:	697a      	ldr	r2, [r7, #20]
 80248e2:	08d2      	lsrs	r2, r2, #3
 80248e4:	4019      	ands	r1, r3
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	3208      	adds	r2, #8
 80248ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80248ee:	687b      	ldr	r3, [r7, #4]
 80248f0:	68da      	ldr	r2, [r3, #12]
 80248f2:	697b      	ldr	r3, [r7, #20]
 80248f4:	005b      	lsls	r3, r3, #1
 80248f6:	2103      	movs	r1, #3
 80248f8:	fa01 f303 	lsl.w	r3, r1, r3
 80248fc:	43db      	mvns	r3, r3
 80248fe:	401a      	ands	r2, r3
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024904:	687b      	ldr	r3, [r7, #4]
 8024906:	685a      	ldr	r2, [r3, #4]
 8024908:	2101      	movs	r1, #1
 802490a:	697b      	ldr	r3, [r7, #20]
 802490c:	fa01 f303 	lsl.w	r3, r1, r3
 8024910:	43db      	mvns	r3, r3
 8024912:	401a      	ands	r2, r3
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024918:	687b      	ldr	r3, [r7, #4]
 802491a:	689a      	ldr	r2, [r3, #8]
 802491c:	697b      	ldr	r3, [r7, #20]
 802491e:	005b      	lsls	r3, r3, #1
 8024920:	2103      	movs	r1, #3
 8024922:	fa01 f303 	lsl.w	r3, r1, r3
 8024926:	43db      	mvns	r3, r3
 8024928:	401a      	ands	r2, r3
 802492a:	687b      	ldr	r3, [r7, #4]
 802492c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802492e:	697b      	ldr	r3, [r7, #20]
 8024930:	3301      	adds	r3, #1
 8024932:	617b      	str	r3, [r7, #20]
 8024934:	697b      	ldr	r3, [r7, #20]
 8024936:	2b0f      	cmp	r3, #15
 8024938:	f67f af2e 	bls.w	8024798 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 802493c:	bf00      	nop
 802493e:	371c      	adds	r7, #28
 8024940:	46bd      	mov	sp, r7
 8024942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024946:	4770      	bx	lr
 8024948:	40013800 	.word	0x40013800
 802494c:	40020000 	.word	0x40020000
 8024950:	40020400 	.word	0x40020400
 8024954:	40020800 	.word	0x40020800
 8024958:	40020c00 	.word	0x40020c00
 802495c:	40021000 	.word	0x40021000
 8024960:	40021400 	.word	0x40021400
 8024964:	40021800 	.word	0x40021800
 8024968:	40021c00 	.word	0x40021c00
 802496c:	40013c00 	.word	0x40013c00

08024970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8024970:	b480      	push	{r7}
 8024972:	b085      	sub	sp, #20
 8024974:	af00      	add	r7, sp, #0
 8024976:	6078      	str	r0, [r7, #4]
 8024978:	460b      	mov	r3, r1
 802497a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	691a      	ldr	r2, [r3, #16]
 8024980:	887b      	ldrh	r3, [r7, #2]
 8024982:	4013      	ands	r3, r2
 8024984:	2b00      	cmp	r3, #0
 8024986:	d002      	beq.n	802498e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8024988:	2301      	movs	r3, #1
 802498a:	73fb      	strb	r3, [r7, #15]
 802498c:	e001      	b.n	8024992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802498e:	2300      	movs	r3, #0
 8024990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8024992:	7bfb      	ldrb	r3, [r7, #15]
}
 8024994:	4618      	mov	r0, r3
 8024996:	3714      	adds	r7, #20
 8024998:	46bd      	mov	sp, r7
 802499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802499e:	4770      	bx	lr

080249a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80249a0:	b480      	push	{r7}
 80249a2:	b083      	sub	sp, #12
 80249a4:	af00      	add	r7, sp, #0
 80249a6:	6078      	str	r0, [r7, #4]
 80249a8:	460b      	mov	r3, r1
 80249aa:	807b      	strh	r3, [r7, #2]
 80249ac:	4613      	mov	r3, r2
 80249ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80249b0:	787b      	ldrb	r3, [r7, #1]
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	d003      	beq.n	80249be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80249b6:	887a      	ldrh	r2, [r7, #2]
 80249b8:	687b      	ldr	r3, [r7, #4]
 80249ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80249bc:	e003      	b.n	80249c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80249be:	887b      	ldrh	r3, [r7, #2]
 80249c0:	041a      	lsls	r2, r3, #16
 80249c2:	687b      	ldr	r3, [r7, #4]
 80249c4:	619a      	str	r2, [r3, #24]
}
 80249c6:	bf00      	nop
 80249c8:	370c      	adds	r7, #12
 80249ca:	46bd      	mov	sp, r7
 80249cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249d0:	4770      	bx	lr

080249d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80249d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80249d4:	b08f      	sub	sp, #60	; 0x3c
 80249d6:	af0a      	add	r7, sp, #40	; 0x28
 80249d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	2b00      	cmp	r3, #0
 80249de:	d101      	bne.n	80249e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80249e0:	2301      	movs	r3, #1
 80249e2:	e054      	b.n	8024a8e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80249e4:	687b      	ldr	r3, [r7, #4]
 80249e6:	681b      	ldr	r3, [r3, #0]
 80249e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80249ea:	687b      	ldr	r3, [r7, #4]
 80249ec:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80249f0:	b2db      	uxtb	r3, r3
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d106      	bne.n	8024a04 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80249f6:	687b      	ldr	r3, [r7, #4]
 80249f8:	2200      	movs	r2, #0
 80249fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80249fe:	6878      	ldr	r0, [r7, #4]
 8024a00:	f00f fe16 	bl	8034630 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	2203      	movs	r2, #3
 8024a08:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	d102      	bne.n	8024a1e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8024a18:	687b      	ldr	r3, [r7, #4]
 8024a1a:	2200      	movs	r2, #0
 8024a1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	681b      	ldr	r3, [r3, #0]
 8024a22:	4618      	mov	r0, r3
 8024a24:	f007 fde5 	bl	802c5f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8024a28:	687b      	ldr	r3, [r7, #4]
 8024a2a:	681b      	ldr	r3, [r3, #0]
 8024a2c:	603b      	str	r3, [r7, #0]
 8024a2e:	687e      	ldr	r6, [r7, #4]
 8024a30:	466d      	mov	r5, sp
 8024a32:	f106 0410 	add.w	r4, r6, #16
 8024a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8024a46:	1d33      	adds	r3, r6, #4
 8024a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024a4a:	6838      	ldr	r0, [r7, #0]
 8024a4c:	f007 fcbc 	bl	802c3c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8024a50:	687b      	ldr	r3, [r7, #4]
 8024a52:	681b      	ldr	r3, [r3, #0]
 8024a54:	2101      	movs	r1, #1
 8024a56:	4618      	mov	r0, r3
 8024a58:	f007 fddc 	bl	802c614 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	603b      	str	r3, [r7, #0]
 8024a62:	687e      	ldr	r6, [r7, #4]
 8024a64:	466d      	mov	r5, sp
 8024a66:	f106 0410 	add.w	r4, r6, #16
 8024a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024a72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024a76:	e885 0003 	stmia.w	r5, {r0, r1}
 8024a7a:	1d33      	adds	r3, r6, #4
 8024a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024a7e:	6838      	ldr	r0, [r7, #0]
 8024a80:	f008 ffc8 	bl	802da14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	2201      	movs	r2, #1
 8024a88:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8024a8c:	2300      	movs	r3, #0
}
 8024a8e:	4618      	mov	r0, r3
 8024a90:	3714      	adds	r7, #20
 8024a92:	46bd      	mov	sp, r7
 8024a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024a96 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8024a96:	b590      	push	{r4, r7, lr}
 8024a98:	b089      	sub	sp, #36	; 0x24
 8024a9a:	af04      	add	r7, sp, #16
 8024a9c:	6078      	str	r0, [r7, #4]
 8024a9e:	4608      	mov	r0, r1
 8024aa0:	4611      	mov	r1, r2
 8024aa2:	461a      	mov	r2, r3
 8024aa4:	4603      	mov	r3, r0
 8024aa6:	70fb      	strb	r3, [r7, #3]
 8024aa8:	460b      	mov	r3, r1
 8024aaa:	70bb      	strb	r3, [r7, #2]
 8024aac:	4613      	mov	r3, r2
 8024aae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8024ab6:	2b01      	cmp	r3, #1
 8024ab8:	d101      	bne.n	8024abe <HAL_HCD_HC_Init+0x28>
 8024aba:	2302      	movs	r3, #2
 8024abc:	e07f      	b.n	8024bbe <HAL_HCD_HC_Init+0x128>
 8024abe:	687b      	ldr	r3, [r7, #4]
 8024ac0:	2201      	movs	r2, #1
 8024ac2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8024ac6:	78fa      	ldrb	r2, [r7, #3]
 8024ac8:	6879      	ldr	r1, [r7, #4]
 8024aca:	4613      	mov	r3, r2
 8024acc:	009b      	lsls	r3, r3, #2
 8024ace:	4413      	add	r3, r2
 8024ad0:	00db      	lsls	r3, r3, #3
 8024ad2:	440b      	add	r3, r1
 8024ad4:	333d      	adds	r3, #61	; 0x3d
 8024ad6:	2200      	movs	r2, #0
 8024ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8024ada:	78fa      	ldrb	r2, [r7, #3]
 8024adc:	6879      	ldr	r1, [r7, #4]
 8024ade:	4613      	mov	r3, r2
 8024ae0:	009b      	lsls	r3, r3, #2
 8024ae2:	4413      	add	r3, r2
 8024ae4:	00db      	lsls	r3, r3, #3
 8024ae6:	440b      	add	r3, r1
 8024ae8:	3338      	adds	r3, #56	; 0x38
 8024aea:	787a      	ldrb	r2, [r7, #1]
 8024aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8024aee:	78fa      	ldrb	r2, [r7, #3]
 8024af0:	6879      	ldr	r1, [r7, #4]
 8024af2:	4613      	mov	r3, r2
 8024af4:	009b      	lsls	r3, r3, #2
 8024af6:	4413      	add	r3, r2
 8024af8:	00db      	lsls	r3, r3, #3
 8024afa:	440b      	add	r3, r1
 8024afc:	3340      	adds	r3, #64	; 0x40
 8024afe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8024b00:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024b02:	78fa      	ldrb	r2, [r7, #3]
 8024b04:	6879      	ldr	r1, [r7, #4]
 8024b06:	4613      	mov	r3, r2
 8024b08:	009b      	lsls	r3, r3, #2
 8024b0a:	4413      	add	r3, r2
 8024b0c:	00db      	lsls	r3, r3, #3
 8024b0e:	440b      	add	r3, r1
 8024b10:	3339      	adds	r3, #57	; 0x39
 8024b12:	78fa      	ldrb	r2, [r7, #3]
 8024b14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8024b16:	78fa      	ldrb	r2, [r7, #3]
 8024b18:	6879      	ldr	r1, [r7, #4]
 8024b1a:	4613      	mov	r3, r2
 8024b1c:	009b      	lsls	r3, r3, #2
 8024b1e:	4413      	add	r3, r2
 8024b20:	00db      	lsls	r3, r3, #3
 8024b22:	440b      	add	r3, r1
 8024b24:	333f      	adds	r3, #63	; 0x3f
 8024b26:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8024b2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8024b2c:	78fa      	ldrb	r2, [r7, #3]
 8024b2e:	78bb      	ldrb	r3, [r7, #2]
 8024b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024b34:	b2d8      	uxtb	r0, r3
 8024b36:	6879      	ldr	r1, [r7, #4]
 8024b38:	4613      	mov	r3, r2
 8024b3a:	009b      	lsls	r3, r3, #2
 8024b3c:	4413      	add	r3, r2
 8024b3e:	00db      	lsls	r3, r3, #3
 8024b40:	440b      	add	r3, r1
 8024b42:	333a      	adds	r3, #58	; 0x3a
 8024b44:	4602      	mov	r2, r0
 8024b46:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8024b48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	da0a      	bge.n	8024b66 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8024b50:	78fa      	ldrb	r2, [r7, #3]
 8024b52:	6879      	ldr	r1, [r7, #4]
 8024b54:	4613      	mov	r3, r2
 8024b56:	009b      	lsls	r3, r3, #2
 8024b58:	4413      	add	r3, r2
 8024b5a:	00db      	lsls	r3, r3, #3
 8024b5c:	440b      	add	r3, r1
 8024b5e:	333b      	adds	r3, #59	; 0x3b
 8024b60:	2201      	movs	r2, #1
 8024b62:	701a      	strb	r2, [r3, #0]
 8024b64:	e009      	b.n	8024b7a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8024b66:	78fa      	ldrb	r2, [r7, #3]
 8024b68:	6879      	ldr	r1, [r7, #4]
 8024b6a:	4613      	mov	r3, r2
 8024b6c:	009b      	lsls	r3, r3, #2
 8024b6e:	4413      	add	r3, r2
 8024b70:	00db      	lsls	r3, r3, #3
 8024b72:	440b      	add	r3, r1
 8024b74:	333b      	adds	r3, #59	; 0x3b
 8024b76:	2200      	movs	r2, #0
 8024b78:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8024b7a:	78fa      	ldrb	r2, [r7, #3]
 8024b7c:	6879      	ldr	r1, [r7, #4]
 8024b7e:	4613      	mov	r3, r2
 8024b80:	009b      	lsls	r3, r3, #2
 8024b82:	4413      	add	r3, r2
 8024b84:	00db      	lsls	r3, r3, #3
 8024b86:	440b      	add	r3, r1
 8024b88:	333c      	adds	r3, #60	; 0x3c
 8024b8a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8024b8e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8024b90:	687b      	ldr	r3, [r7, #4]
 8024b92:	6818      	ldr	r0, [r3, #0]
 8024b94:	787c      	ldrb	r4, [r7, #1]
 8024b96:	78ba      	ldrb	r2, [r7, #2]
 8024b98:	78f9      	ldrb	r1, [r7, #3]
 8024b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024b9c:	9302      	str	r3, [sp, #8]
 8024b9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8024ba2:	9301      	str	r3, [sp, #4]
 8024ba4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8024ba8:	9300      	str	r3, [sp, #0]
 8024baa:	4623      	mov	r3, r4
 8024bac:	f009 f8b4 	bl	802dd18 <USB_HC_Init>
 8024bb0:	4603      	mov	r3, r0
 8024bb2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	2200      	movs	r2, #0
 8024bb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8024bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8024bbe:	4618      	mov	r0, r3
 8024bc0:	3714      	adds	r7, #20
 8024bc2:	46bd      	mov	sp, r7
 8024bc4:	bd90      	pop	{r4, r7, pc}

08024bc6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8024bc6:	b580      	push	{r7, lr}
 8024bc8:	b084      	sub	sp, #16
 8024bca:	af00      	add	r7, sp, #0
 8024bcc:	6078      	str	r0, [r7, #4]
 8024bce:	460b      	mov	r3, r1
 8024bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8024bd2:	2300      	movs	r3, #0
 8024bd4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8024bdc:	2b01      	cmp	r3, #1
 8024bde:	d101      	bne.n	8024be4 <HAL_HCD_HC_Halt+0x1e>
 8024be0:	2302      	movs	r3, #2
 8024be2:	e00f      	b.n	8024c04 <HAL_HCD_HC_Halt+0x3e>
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	2201      	movs	r2, #1
 8024be8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	681b      	ldr	r3, [r3, #0]
 8024bf0:	78fa      	ldrb	r2, [r7, #3]
 8024bf2:	4611      	mov	r1, r2
 8024bf4:	4618      	mov	r0, r3
 8024bf6:	f009 faf0 	bl	802e1da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	2200      	movs	r2, #0
 8024bfe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8024c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8024c04:	4618      	mov	r0, r3
 8024c06:	3710      	adds	r7, #16
 8024c08:	46bd      	mov	sp, r7
 8024c0a:	bd80      	pop	{r7, pc}

08024c0c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8024c0c:	b580      	push	{r7, lr}
 8024c0e:	b082      	sub	sp, #8
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	6078      	str	r0, [r7, #4]
 8024c14:	4608      	mov	r0, r1
 8024c16:	4611      	mov	r1, r2
 8024c18:	461a      	mov	r2, r3
 8024c1a:	4603      	mov	r3, r0
 8024c1c:	70fb      	strb	r3, [r7, #3]
 8024c1e:	460b      	mov	r3, r1
 8024c20:	70bb      	strb	r3, [r7, #2]
 8024c22:	4613      	mov	r3, r2
 8024c24:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8024c26:	78fa      	ldrb	r2, [r7, #3]
 8024c28:	6879      	ldr	r1, [r7, #4]
 8024c2a:	4613      	mov	r3, r2
 8024c2c:	009b      	lsls	r3, r3, #2
 8024c2e:	4413      	add	r3, r2
 8024c30:	00db      	lsls	r3, r3, #3
 8024c32:	440b      	add	r3, r1
 8024c34:	333b      	adds	r3, #59	; 0x3b
 8024c36:	78ba      	ldrb	r2, [r7, #2]
 8024c38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8024c3a:	78fa      	ldrb	r2, [r7, #3]
 8024c3c:	6879      	ldr	r1, [r7, #4]
 8024c3e:	4613      	mov	r3, r2
 8024c40:	009b      	lsls	r3, r3, #2
 8024c42:	4413      	add	r3, r2
 8024c44:	00db      	lsls	r3, r3, #3
 8024c46:	440b      	add	r3, r1
 8024c48:	333f      	adds	r3, #63	; 0x3f
 8024c4a:	787a      	ldrb	r2, [r7, #1]
 8024c4c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8024c4e:	7c3b      	ldrb	r3, [r7, #16]
 8024c50:	2b00      	cmp	r3, #0
 8024c52:	d114      	bne.n	8024c7e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8024c54:	78fa      	ldrb	r2, [r7, #3]
 8024c56:	6879      	ldr	r1, [r7, #4]
 8024c58:	4613      	mov	r3, r2
 8024c5a:	009b      	lsls	r3, r3, #2
 8024c5c:	4413      	add	r3, r2
 8024c5e:	00db      	lsls	r3, r3, #3
 8024c60:	440b      	add	r3, r1
 8024c62:	3342      	adds	r3, #66	; 0x42
 8024c64:	2203      	movs	r2, #3
 8024c66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8024c68:	78fa      	ldrb	r2, [r7, #3]
 8024c6a:	6879      	ldr	r1, [r7, #4]
 8024c6c:	4613      	mov	r3, r2
 8024c6e:	009b      	lsls	r3, r3, #2
 8024c70:	4413      	add	r3, r2
 8024c72:	00db      	lsls	r3, r3, #3
 8024c74:	440b      	add	r3, r1
 8024c76:	333d      	adds	r3, #61	; 0x3d
 8024c78:	7f3a      	ldrb	r2, [r7, #28]
 8024c7a:	701a      	strb	r2, [r3, #0]
 8024c7c:	e009      	b.n	8024c92 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024c7e:	78fa      	ldrb	r2, [r7, #3]
 8024c80:	6879      	ldr	r1, [r7, #4]
 8024c82:	4613      	mov	r3, r2
 8024c84:	009b      	lsls	r3, r3, #2
 8024c86:	4413      	add	r3, r2
 8024c88:	00db      	lsls	r3, r3, #3
 8024c8a:	440b      	add	r3, r1
 8024c8c:	3342      	adds	r3, #66	; 0x42
 8024c8e:	2202      	movs	r2, #2
 8024c90:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8024c92:	787b      	ldrb	r3, [r7, #1]
 8024c94:	2b03      	cmp	r3, #3
 8024c96:	f200 80d6 	bhi.w	8024e46 <HAL_HCD_HC_SubmitRequest+0x23a>
 8024c9a:	a201      	add	r2, pc, #4	; (adr r2, 8024ca0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8024c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ca0:	08024cb1 	.word	0x08024cb1
 8024ca4:	08024e31 	.word	0x08024e31
 8024ca8:	08024d1d 	.word	0x08024d1d
 8024cac:	08024da7 	.word	0x08024da7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8024cb0:	7c3b      	ldrb	r3, [r7, #16]
 8024cb2:	2b01      	cmp	r3, #1
 8024cb4:	f040 80c9 	bne.w	8024e4a <HAL_HCD_HC_SubmitRequest+0x23e>
 8024cb8:	78bb      	ldrb	r3, [r7, #2]
 8024cba:	2b00      	cmp	r3, #0
 8024cbc:	f040 80c5 	bne.w	8024e4a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8024cc0:	8b3b      	ldrh	r3, [r7, #24]
 8024cc2:	2b00      	cmp	r3, #0
 8024cc4:	d109      	bne.n	8024cda <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8024cc6:	78fa      	ldrb	r2, [r7, #3]
 8024cc8:	6879      	ldr	r1, [r7, #4]
 8024cca:	4613      	mov	r3, r2
 8024ccc:	009b      	lsls	r3, r3, #2
 8024cce:	4413      	add	r3, r2
 8024cd0:	00db      	lsls	r3, r3, #3
 8024cd2:	440b      	add	r3, r1
 8024cd4:	3351      	adds	r3, #81	; 0x51
 8024cd6:	2201      	movs	r2, #1
 8024cd8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024cda:	78fa      	ldrb	r2, [r7, #3]
 8024cdc:	6879      	ldr	r1, [r7, #4]
 8024cde:	4613      	mov	r3, r2
 8024ce0:	009b      	lsls	r3, r3, #2
 8024ce2:	4413      	add	r3, r2
 8024ce4:	00db      	lsls	r3, r3, #3
 8024ce6:	440b      	add	r3, r1
 8024ce8:	3351      	adds	r3, #81	; 0x51
 8024cea:	781b      	ldrb	r3, [r3, #0]
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	d10a      	bne.n	8024d06 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024cf0:	78fa      	ldrb	r2, [r7, #3]
 8024cf2:	6879      	ldr	r1, [r7, #4]
 8024cf4:	4613      	mov	r3, r2
 8024cf6:	009b      	lsls	r3, r3, #2
 8024cf8:	4413      	add	r3, r2
 8024cfa:	00db      	lsls	r3, r3, #3
 8024cfc:	440b      	add	r3, r1
 8024cfe:	3342      	adds	r3, #66	; 0x42
 8024d00:	2200      	movs	r2, #0
 8024d02:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024d04:	e0a1      	b.n	8024e4a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024d06:	78fa      	ldrb	r2, [r7, #3]
 8024d08:	6879      	ldr	r1, [r7, #4]
 8024d0a:	4613      	mov	r3, r2
 8024d0c:	009b      	lsls	r3, r3, #2
 8024d0e:	4413      	add	r3, r2
 8024d10:	00db      	lsls	r3, r3, #3
 8024d12:	440b      	add	r3, r1
 8024d14:	3342      	adds	r3, #66	; 0x42
 8024d16:	2202      	movs	r2, #2
 8024d18:	701a      	strb	r2, [r3, #0]
      break;
 8024d1a:	e096      	b.n	8024e4a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8024d1c:	78bb      	ldrb	r3, [r7, #2]
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d120      	bne.n	8024d64 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024d22:	78fa      	ldrb	r2, [r7, #3]
 8024d24:	6879      	ldr	r1, [r7, #4]
 8024d26:	4613      	mov	r3, r2
 8024d28:	009b      	lsls	r3, r3, #2
 8024d2a:	4413      	add	r3, r2
 8024d2c:	00db      	lsls	r3, r3, #3
 8024d2e:	440b      	add	r3, r1
 8024d30:	3351      	adds	r3, #81	; 0x51
 8024d32:	781b      	ldrb	r3, [r3, #0]
 8024d34:	2b00      	cmp	r3, #0
 8024d36:	d10a      	bne.n	8024d4e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024d38:	78fa      	ldrb	r2, [r7, #3]
 8024d3a:	6879      	ldr	r1, [r7, #4]
 8024d3c:	4613      	mov	r3, r2
 8024d3e:	009b      	lsls	r3, r3, #2
 8024d40:	4413      	add	r3, r2
 8024d42:	00db      	lsls	r3, r3, #3
 8024d44:	440b      	add	r3, r1
 8024d46:	3342      	adds	r3, #66	; 0x42
 8024d48:	2200      	movs	r2, #0
 8024d4a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8024d4c:	e07e      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024d4e:	78fa      	ldrb	r2, [r7, #3]
 8024d50:	6879      	ldr	r1, [r7, #4]
 8024d52:	4613      	mov	r3, r2
 8024d54:	009b      	lsls	r3, r3, #2
 8024d56:	4413      	add	r3, r2
 8024d58:	00db      	lsls	r3, r3, #3
 8024d5a:	440b      	add	r3, r1
 8024d5c:	3342      	adds	r3, #66	; 0x42
 8024d5e:	2202      	movs	r2, #2
 8024d60:	701a      	strb	r2, [r3, #0]
      break;
 8024d62:	e073      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024d64:	78fa      	ldrb	r2, [r7, #3]
 8024d66:	6879      	ldr	r1, [r7, #4]
 8024d68:	4613      	mov	r3, r2
 8024d6a:	009b      	lsls	r3, r3, #2
 8024d6c:	4413      	add	r3, r2
 8024d6e:	00db      	lsls	r3, r3, #3
 8024d70:	440b      	add	r3, r1
 8024d72:	3350      	adds	r3, #80	; 0x50
 8024d74:	781b      	ldrb	r3, [r3, #0]
 8024d76:	2b00      	cmp	r3, #0
 8024d78:	d10a      	bne.n	8024d90 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024d7a:	78fa      	ldrb	r2, [r7, #3]
 8024d7c:	6879      	ldr	r1, [r7, #4]
 8024d7e:	4613      	mov	r3, r2
 8024d80:	009b      	lsls	r3, r3, #2
 8024d82:	4413      	add	r3, r2
 8024d84:	00db      	lsls	r3, r3, #3
 8024d86:	440b      	add	r3, r1
 8024d88:	3342      	adds	r3, #66	; 0x42
 8024d8a:	2200      	movs	r2, #0
 8024d8c:	701a      	strb	r2, [r3, #0]
      break;
 8024d8e:	e05d      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024d90:	78fa      	ldrb	r2, [r7, #3]
 8024d92:	6879      	ldr	r1, [r7, #4]
 8024d94:	4613      	mov	r3, r2
 8024d96:	009b      	lsls	r3, r3, #2
 8024d98:	4413      	add	r3, r2
 8024d9a:	00db      	lsls	r3, r3, #3
 8024d9c:	440b      	add	r3, r1
 8024d9e:	3342      	adds	r3, #66	; 0x42
 8024da0:	2202      	movs	r2, #2
 8024da2:	701a      	strb	r2, [r3, #0]
      break;
 8024da4:	e052      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8024da6:	78bb      	ldrb	r3, [r7, #2]
 8024da8:	2b00      	cmp	r3, #0
 8024daa:	d120      	bne.n	8024dee <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024dac:	78fa      	ldrb	r2, [r7, #3]
 8024dae:	6879      	ldr	r1, [r7, #4]
 8024db0:	4613      	mov	r3, r2
 8024db2:	009b      	lsls	r3, r3, #2
 8024db4:	4413      	add	r3, r2
 8024db6:	00db      	lsls	r3, r3, #3
 8024db8:	440b      	add	r3, r1
 8024dba:	3351      	adds	r3, #81	; 0x51
 8024dbc:	781b      	ldrb	r3, [r3, #0]
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d10a      	bne.n	8024dd8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024dc2:	78fa      	ldrb	r2, [r7, #3]
 8024dc4:	6879      	ldr	r1, [r7, #4]
 8024dc6:	4613      	mov	r3, r2
 8024dc8:	009b      	lsls	r3, r3, #2
 8024dca:	4413      	add	r3, r2
 8024dcc:	00db      	lsls	r3, r3, #3
 8024dce:	440b      	add	r3, r1
 8024dd0:	3342      	adds	r3, #66	; 0x42
 8024dd2:	2200      	movs	r2, #0
 8024dd4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024dd6:	e039      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024dd8:	78fa      	ldrb	r2, [r7, #3]
 8024dda:	6879      	ldr	r1, [r7, #4]
 8024ddc:	4613      	mov	r3, r2
 8024dde:	009b      	lsls	r3, r3, #2
 8024de0:	4413      	add	r3, r2
 8024de2:	00db      	lsls	r3, r3, #3
 8024de4:	440b      	add	r3, r1
 8024de6:	3342      	adds	r3, #66	; 0x42
 8024de8:	2202      	movs	r2, #2
 8024dea:	701a      	strb	r2, [r3, #0]
      break;
 8024dec:	e02e      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024dee:	78fa      	ldrb	r2, [r7, #3]
 8024df0:	6879      	ldr	r1, [r7, #4]
 8024df2:	4613      	mov	r3, r2
 8024df4:	009b      	lsls	r3, r3, #2
 8024df6:	4413      	add	r3, r2
 8024df8:	00db      	lsls	r3, r3, #3
 8024dfa:	440b      	add	r3, r1
 8024dfc:	3350      	adds	r3, #80	; 0x50
 8024dfe:	781b      	ldrb	r3, [r3, #0]
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	d10a      	bne.n	8024e1a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024e04:	78fa      	ldrb	r2, [r7, #3]
 8024e06:	6879      	ldr	r1, [r7, #4]
 8024e08:	4613      	mov	r3, r2
 8024e0a:	009b      	lsls	r3, r3, #2
 8024e0c:	4413      	add	r3, r2
 8024e0e:	00db      	lsls	r3, r3, #3
 8024e10:	440b      	add	r3, r1
 8024e12:	3342      	adds	r3, #66	; 0x42
 8024e14:	2200      	movs	r2, #0
 8024e16:	701a      	strb	r2, [r3, #0]
      break;
 8024e18:	e018      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024e1a:	78fa      	ldrb	r2, [r7, #3]
 8024e1c:	6879      	ldr	r1, [r7, #4]
 8024e1e:	4613      	mov	r3, r2
 8024e20:	009b      	lsls	r3, r3, #2
 8024e22:	4413      	add	r3, r2
 8024e24:	00db      	lsls	r3, r3, #3
 8024e26:	440b      	add	r3, r1
 8024e28:	3342      	adds	r3, #66	; 0x42
 8024e2a:	2202      	movs	r2, #2
 8024e2c:	701a      	strb	r2, [r3, #0]
      break;
 8024e2e:	e00d      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024e30:	78fa      	ldrb	r2, [r7, #3]
 8024e32:	6879      	ldr	r1, [r7, #4]
 8024e34:	4613      	mov	r3, r2
 8024e36:	009b      	lsls	r3, r3, #2
 8024e38:	4413      	add	r3, r2
 8024e3a:	00db      	lsls	r3, r3, #3
 8024e3c:	440b      	add	r3, r1
 8024e3e:	3342      	adds	r3, #66	; 0x42
 8024e40:	2200      	movs	r2, #0
 8024e42:	701a      	strb	r2, [r3, #0]
      break;
 8024e44:	e002      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8024e46:	bf00      	nop
 8024e48:	e000      	b.n	8024e4c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8024e4a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8024e4c:	78fa      	ldrb	r2, [r7, #3]
 8024e4e:	6879      	ldr	r1, [r7, #4]
 8024e50:	4613      	mov	r3, r2
 8024e52:	009b      	lsls	r3, r3, #2
 8024e54:	4413      	add	r3, r2
 8024e56:	00db      	lsls	r3, r3, #3
 8024e58:	440b      	add	r3, r1
 8024e5a:	3344      	adds	r3, #68	; 0x44
 8024e5c:	697a      	ldr	r2, [r7, #20]
 8024e5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8024e60:	78fa      	ldrb	r2, [r7, #3]
 8024e62:	8b39      	ldrh	r1, [r7, #24]
 8024e64:	6878      	ldr	r0, [r7, #4]
 8024e66:	4613      	mov	r3, r2
 8024e68:	009b      	lsls	r3, r3, #2
 8024e6a:	4413      	add	r3, r2
 8024e6c:	00db      	lsls	r3, r3, #3
 8024e6e:	4403      	add	r3, r0
 8024e70:	3348      	adds	r3, #72	; 0x48
 8024e72:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8024e74:	78fa      	ldrb	r2, [r7, #3]
 8024e76:	6879      	ldr	r1, [r7, #4]
 8024e78:	4613      	mov	r3, r2
 8024e7a:	009b      	lsls	r3, r3, #2
 8024e7c:	4413      	add	r3, r2
 8024e7e:	00db      	lsls	r3, r3, #3
 8024e80:	440b      	add	r3, r1
 8024e82:	335c      	adds	r3, #92	; 0x5c
 8024e84:	2200      	movs	r2, #0
 8024e86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8024e88:	78fa      	ldrb	r2, [r7, #3]
 8024e8a:	6879      	ldr	r1, [r7, #4]
 8024e8c:	4613      	mov	r3, r2
 8024e8e:	009b      	lsls	r3, r3, #2
 8024e90:	4413      	add	r3, r2
 8024e92:	00db      	lsls	r3, r3, #3
 8024e94:	440b      	add	r3, r1
 8024e96:	334c      	adds	r3, #76	; 0x4c
 8024e98:	2200      	movs	r2, #0
 8024e9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024e9c:	78fa      	ldrb	r2, [r7, #3]
 8024e9e:	6879      	ldr	r1, [r7, #4]
 8024ea0:	4613      	mov	r3, r2
 8024ea2:	009b      	lsls	r3, r3, #2
 8024ea4:	4413      	add	r3, r2
 8024ea6:	00db      	lsls	r3, r3, #3
 8024ea8:	440b      	add	r3, r1
 8024eaa:	3339      	adds	r3, #57	; 0x39
 8024eac:	78fa      	ldrb	r2, [r7, #3]
 8024eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8024eb0:	78fa      	ldrb	r2, [r7, #3]
 8024eb2:	6879      	ldr	r1, [r7, #4]
 8024eb4:	4613      	mov	r3, r2
 8024eb6:	009b      	lsls	r3, r3, #2
 8024eb8:	4413      	add	r3, r2
 8024eba:	00db      	lsls	r3, r3, #3
 8024ebc:	440b      	add	r3, r1
 8024ebe:	335d      	adds	r3, #93	; 0x5d
 8024ec0:	2200      	movs	r2, #0
 8024ec2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	6818      	ldr	r0, [r3, #0]
 8024ec8:	78fa      	ldrb	r2, [r7, #3]
 8024eca:	4613      	mov	r3, r2
 8024ecc:	009b      	lsls	r3, r3, #2
 8024ece:	4413      	add	r3, r2
 8024ed0:	00db      	lsls	r3, r3, #3
 8024ed2:	3338      	adds	r3, #56	; 0x38
 8024ed4:	687a      	ldr	r2, [r7, #4]
 8024ed6:	18d1      	adds	r1, r2, r3
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	691b      	ldr	r3, [r3, #16]
 8024edc:	b2db      	uxtb	r3, r3
 8024ede:	461a      	mov	r2, r3
 8024ee0:	f009 f824 	bl	802df2c <USB_HC_StartXfer>
 8024ee4:	4603      	mov	r3, r0
}
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	3708      	adds	r7, #8
 8024eea:	46bd      	mov	sp, r7
 8024eec:	bd80      	pop	{r7, pc}
 8024eee:	bf00      	nop

08024ef0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8024ef0:	b580      	push	{r7, lr}
 8024ef2:	b086      	sub	sp, #24
 8024ef4:	af00      	add	r7, sp, #0
 8024ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	681b      	ldr	r3, [r3, #0]
 8024efc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024efe:	693b      	ldr	r3, [r7, #16]
 8024f00:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8024f02:	687b      	ldr	r3, [r7, #4]
 8024f04:	681b      	ldr	r3, [r3, #0]
 8024f06:	4618      	mov	r0, r3
 8024f08:	f008 fcc0 	bl	802d88c <USB_GetMode>
 8024f0c:	4603      	mov	r3, r0
 8024f0e:	2b01      	cmp	r3, #1
 8024f10:	f040 80ef 	bne.w	80250f2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	681b      	ldr	r3, [r3, #0]
 8024f18:	4618      	mov	r0, r3
 8024f1a:	f008 fc24 	bl	802d766 <USB_ReadInterrupts>
 8024f1e:	4603      	mov	r3, r0
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	f000 80e5 	beq.w	80250f0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	4618      	mov	r0, r3
 8024f2c:	f008 fc1b 	bl	802d766 <USB_ReadInterrupts>
 8024f30:	4603      	mov	r3, r0
 8024f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024f3a:	d104      	bne.n	8024f46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8024f3c:	687b      	ldr	r3, [r7, #4]
 8024f3e:	681b      	ldr	r3, [r3, #0]
 8024f40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8024f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8024f46:	687b      	ldr	r3, [r7, #4]
 8024f48:	681b      	ldr	r3, [r3, #0]
 8024f4a:	4618      	mov	r0, r3
 8024f4c:	f008 fc0b 	bl	802d766 <USB_ReadInterrupts>
 8024f50:	4603      	mov	r3, r0
 8024f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024f5a:	d104      	bne.n	8024f66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	681b      	ldr	r3, [r3, #0]
 8024f60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8024f64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	681b      	ldr	r3, [r3, #0]
 8024f6a:	4618      	mov	r0, r3
 8024f6c:	f008 fbfb 	bl	802d766 <USB_ReadInterrupts>
 8024f70:	4603      	mov	r3, r0
 8024f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024f76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024f7a:	d104      	bne.n	8024f86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8024f7c:	687b      	ldr	r3, [r7, #4]
 8024f7e:	681b      	ldr	r3, [r3, #0]
 8024f80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8024f84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	4618      	mov	r0, r3
 8024f8c:	f008 fbeb 	bl	802d766 <USB_ReadInterrupts>
 8024f90:	4603      	mov	r3, r0
 8024f92:	f003 0302 	and.w	r3, r3, #2
 8024f96:	2b02      	cmp	r3, #2
 8024f98:	d103      	bne.n	8024fa2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	681b      	ldr	r3, [r3, #0]
 8024f9e:	2202      	movs	r2, #2
 8024fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	681b      	ldr	r3, [r3, #0]
 8024fa6:	4618      	mov	r0, r3
 8024fa8:	f008 fbdd 	bl	802d766 <USB_ReadInterrupts>
 8024fac:	4603      	mov	r3, r0
 8024fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024fb6:	d115      	bne.n	8024fe4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	681b      	ldr	r3, [r3, #0]
 8024fbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8024fc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8024fc2:	68fb      	ldr	r3, [r7, #12]
 8024fc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8024fc8:	681b      	ldr	r3, [r3, #0]
 8024fca:	f003 0301 	and.w	r3, r3, #1
 8024fce:	2b00      	cmp	r3, #0
 8024fd0:	d108      	bne.n	8024fe4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8024fd2:	6878      	ldr	r0, [r7, #4]
 8024fd4:	f00f fb98 	bl	8034708 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	681b      	ldr	r3, [r3, #0]
 8024fdc:	2101      	movs	r1, #1
 8024fde:	4618      	mov	r0, r3
 8024fe0:	f008 fdd4 	bl	802db8c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8024fe4:	687b      	ldr	r3, [r7, #4]
 8024fe6:	681b      	ldr	r3, [r3, #0]
 8024fe8:	4618      	mov	r0, r3
 8024fea:	f008 fbbc 	bl	802d766 <USB_ReadInterrupts>
 8024fee:	4603      	mov	r3, r0
 8024ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024ff8:	d102      	bne.n	8025000 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8024ffa:	6878      	ldr	r0, [r7, #4]
 8024ffc:	f001 f966 	bl	80262cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	4618      	mov	r0, r3
 8025006:	f008 fbae 	bl	802d766 <USB_ReadInterrupts>
 802500a:	4603      	mov	r3, r0
 802500c:	f003 0308 	and.w	r3, r3, #8
 8025010:	2b08      	cmp	r3, #8
 8025012:	d106      	bne.n	8025022 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8025014:	6878      	ldr	r0, [r7, #4]
 8025016:	f00f fb5b 	bl	80346d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 802501a:	687b      	ldr	r3, [r7, #4]
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	2208      	movs	r2, #8
 8025020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	681b      	ldr	r3, [r3, #0]
 8025026:	4618      	mov	r0, r3
 8025028:	f008 fb9d 	bl	802d766 <USB_ReadInterrupts>
 802502c:	4603      	mov	r3, r0
 802502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8025036:	d138      	bne.n	80250aa <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	4618      	mov	r0, r3
 802503e:	f009 f8bb 	bl	802e1b8 <USB_HC_ReadInterrupt>
 8025042:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025044:	2300      	movs	r3, #0
 8025046:	617b      	str	r3, [r7, #20]
 8025048:	e025      	b.n	8025096 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 802504a:	697b      	ldr	r3, [r7, #20]
 802504c:	f003 030f 	and.w	r3, r3, #15
 8025050:	68ba      	ldr	r2, [r7, #8]
 8025052:	fa22 f303 	lsr.w	r3, r2, r3
 8025056:	f003 0301 	and.w	r3, r3, #1
 802505a:	2b00      	cmp	r3, #0
 802505c:	d018      	beq.n	8025090 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 802505e:	697b      	ldr	r3, [r7, #20]
 8025060:	015a      	lsls	r2, r3, #5
 8025062:	68fb      	ldr	r3, [r7, #12]
 8025064:	4413      	add	r3, r2
 8025066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802506a:	681b      	ldr	r3, [r3, #0]
 802506c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025074:	d106      	bne.n	8025084 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8025076:	697b      	ldr	r3, [r7, #20]
 8025078:	b2db      	uxtb	r3, r3
 802507a:	4619      	mov	r1, r3
 802507c:	6878      	ldr	r0, [r7, #4]
 802507e:	f000 f8cf 	bl	8025220 <HCD_HC_IN_IRQHandler>
 8025082:	e005      	b.n	8025090 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8025084:	697b      	ldr	r3, [r7, #20]
 8025086:	b2db      	uxtb	r3, r3
 8025088:	4619      	mov	r1, r3
 802508a:	6878      	ldr	r0, [r7, #4]
 802508c:	f000 fcfd 	bl	8025a8a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025090:	697b      	ldr	r3, [r7, #20]
 8025092:	3301      	adds	r3, #1
 8025094:	617b      	str	r3, [r7, #20]
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	689b      	ldr	r3, [r3, #8]
 802509a:	697a      	ldr	r2, [r7, #20]
 802509c:	429a      	cmp	r2, r3
 802509e:	d3d4      	bcc.n	802504a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80250a0:	687b      	ldr	r3, [r7, #4]
 80250a2:	681b      	ldr	r3, [r3, #0]
 80250a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80250a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80250aa:	687b      	ldr	r3, [r7, #4]
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	4618      	mov	r0, r3
 80250b0:	f008 fb59 	bl	802d766 <USB_ReadInterrupts>
 80250b4:	4603      	mov	r3, r0
 80250b6:	f003 0310 	and.w	r3, r3, #16
 80250ba:	2b10      	cmp	r3, #16
 80250bc:	d101      	bne.n	80250c2 <HAL_HCD_IRQHandler+0x1d2>
 80250be:	2301      	movs	r3, #1
 80250c0:	e000      	b.n	80250c4 <HAL_HCD_IRQHandler+0x1d4>
 80250c2:	2300      	movs	r3, #0
 80250c4:	2b00      	cmp	r3, #0
 80250c6:	d014      	beq.n	80250f2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80250c8:	687b      	ldr	r3, [r7, #4]
 80250ca:	681b      	ldr	r3, [r3, #0]
 80250cc:	699a      	ldr	r2, [r3, #24]
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	681b      	ldr	r3, [r3, #0]
 80250d2:	f022 0210 	bic.w	r2, r2, #16
 80250d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80250d8:	6878      	ldr	r0, [r7, #4]
 80250da:	f001 f84b 	bl	8026174 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80250de:	687b      	ldr	r3, [r7, #4]
 80250e0:	681b      	ldr	r3, [r3, #0]
 80250e2:	699a      	ldr	r2, [r3, #24]
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	681b      	ldr	r3, [r3, #0]
 80250e8:	f042 0210 	orr.w	r2, r2, #16
 80250ec:	619a      	str	r2, [r3, #24]
 80250ee:	e000      	b.n	80250f2 <HAL_HCD_IRQHandler+0x202>
      return;
 80250f0:	bf00      	nop
    }
  }
}
 80250f2:	3718      	adds	r7, #24
 80250f4:	46bd      	mov	sp, r7
 80250f6:	bd80      	pop	{r7, pc}

080250f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80250f8:	b580      	push	{r7, lr}
 80250fa:	b082      	sub	sp, #8
 80250fc:	af00      	add	r7, sp, #0
 80250fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025100:	687b      	ldr	r3, [r7, #4]
 8025102:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8025106:	2b01      	cmp	r3, #1
 8025108:	d101      	bne.n	802510e <HAL_HCD_Start+0x16>
 802510a:	2302      	movs	r3, #2
 802510c:	e013      	b.n	8025136 <HAL_HCD_Start+0x3e>
 802510e:	687b      	ldr	r3, [r7, #4]
 8025110:	2201      	movs	r2, #1
 8025112:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	681b      	ldr	r3, [r3, #0]
 802511a:	4618      	mov	r0, r3
 802511c:	f007 fa58 	bl	802c5d0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8025120:	687b      	ldr	r3, [r7, #4]
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	2101      	movs	r1, #1
 8025126:	4618      	mov	r0, r3
 8025128:	f008 fd94 	bl	802dc54 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 802512c:	687b      	ldr	r3, [r7, #4]
 802512e:	2200      	movs	r2, #0
 8025130:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8025134:	2300      	movs	r3, #0
}
 8025136:	4618      	mov	r0, r3
 8025138:	3708      	adds	r7, #8
 802513a:	46bd      	mov	sp, r7
 802513c:	bd80      	pop	{r7, pc}

0802513e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 802513e:	b580      	push	{r7, lr}
 8025140:	b082      	sub	sp, #8
 8025142:	af00      	add	r7, sp, #0
 8025144:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 802514c:	2b01      	cmp	r3, #1
 802514e:	d101      	bne.n	8025154 <HAL_HCD_Stop+0x16>
 8025150:	2302      	movs	r3, #2
 8025152:	e00d      	b.n	8025170 <HAL_HCD_Stop+0x32>
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	2201      	movs	r2, #1
 8025158:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	681b      	ldr	r3, [r3, #0]
 8025160:	4618      	mov	r0, r3
 8025162:	f009 f975 	bl	802e450 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025166:	687b      	ldr	r3, [r7, #4]
 8025168:	2200      	movs	r2, #0
 802516a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 802516e:	2300      	movs	r3, #0
}
 8025170:	4618      	mov	r0, r3
 8025172:	3708      	adds	r7, #8
 8025174:	46bd      	mov	sp, r7
 8025176:	bd80      	pop	{r7, pc}

08025178 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8025178:	b580      	push	{r7, lr}
 802517a:	b082      	sub	sp, #8
 802517c:	af00      	add	r7, sp, #0
 802517e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8025180:	687b      	ldr	r3, [r7, #4]
 8025182:	681b      	ldr	r3, [r3, #0]
 8025184:	4618      	mov	r0, r3
 8025186:	f008 fd3b 	bl	802dc00 <USB_ResetPort>
 802518a:	4603      	mov	r3, r0
}
 802518c:	4618      	mov	r0, r3
 802518e:	3708      	adds	r7, #8
 8025190:	46bd      	mov	sp, r7
 8025192:	bd80      	pop	{r7, pc}

08025194 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025194:	b480      	push	{r7}
 8025196:	b083      	sub	sp, #12
 8025198:	af00      	add	r7, sp, #0
 802519a:	6078      	str	r0, [r7, #4]
 802519c:	460b      	mov	r3, r1
 802519e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80251a0:	78fa      	ldrb	r2, [r7, #3]
 80251a2:	6879      	ldr	r1, [r7, #4]
 80251a4:	4613      	mov	r3, r2
 80251a6:	009b      	lsls	r3, r3, #2
 80251a8:	4413      	add	r3, r2
 80251aa:	00db      	lsls	r3, r3, #3
 80251ac:	440b      	add	r3, r1
 80251ae:	335c      	adds	r3, #92	; 0x5c
 80251b0:	781b      	ldrb	r3, [r3, #0]
}
 80251b2:	4618      	mov	r0, r3
 80251b4:	370c      	adds	r7, #12
 80251b6:	46bd      	mov	sp, r7
 80251b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251bc:	4770      	bx	lr

080251be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80251be:	b480      	push	{r7}
 80251c0:	b083      	sub	sp, #12
 80251c2:	af00      	add	r7, sp, #0
 80251c4:	6078      	str	r0, [r7, #4]
 80251c6:	460b      	mov	r3, r1
 80251c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80251ca:	78fa      	ldrb	r2, [r7, #3]
 80251cc:	6879      	ldr	r1, [r7, #4]
 80251ce:	4613      	mov	r3, r2
 80251d0:	009b      	lsls	r3, r3, #2
 80251d2:	4413      	add	r3, r2
 80251d4:	00db      	lsls	r3, r3, #3
 80251d6:	440b      	add	r3, r1
 80251d8:	334c      	adds	r3, #76	; 0x4c
 80251da:	681b      	ldr	r3, [r3, #0]
}
 80251dc:	4618      	mov	r0, r3
 80251de:	370c      	adds	r7, #12
 80251e0:	46bd      	mov	sp, r7
 80251e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251e6:	4770      	bx	lr

080251e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80251e8:	b580      	push	{r7, lr}
 80251ea:	b082      	sub	sp, #8
 80251ec:	af00      	add	r7, sp, #0
 80251ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80251f0:	687b      	ldr	r3, [r7, #4]
 80251f2:	681b      	ldr	r3, [r3, #0]
 80251f4:	4618      	mov	r0, r3
 80251f6:	f008 fd7d 	bl	802dcf4 <USB_GetCurrentFrame>
 80251fa:	4603      	mov	r3, r0
}
 80251fc:	4618      	mov	r0, r3
 80251fe:	3708      	adds	r7, #8
 8025200:	46bd      	mov	sp, r7
 8025202:	bd80      	pop	{r7, pc}

08025204 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8025204:	b580      	push	{r7, lr}
 8025206:	b082      	sub	sp, #8
 8025208:	af00      	add	r7, sp, #0
 802520a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	681b      	ldr	r3, [r3, #0]
 8025210:	4618      	mov	r0, r3
 8025212:	f008 fd58 	bl	802dcc6 <USB_GetHostSpeed>
 8025216:	4603      	mov	r3, r0
}
 8025218:	4618      	mov	r0, r3
 802521a:	3708      	adds	r7, #8
 802521c:	46bd      	mov	sp, r7
 802521e:	bd80      	pop	{r7, pc}

08025220 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025220:	b580      	push	{r7, lr}
 8025222:	b086      	sub	sp, #24
 8025224:	af00      	add	r7, sp, #0
 8025226:	6078      	str	r0, [r7, #4]
 8025228:	460b      	mov	r3, r1
 802522a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802522c:	687b      	ldr	r3, [r7, #4]
 802522e:	681b      	ldr	r3, [r3, #0]
 8025230:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025232:	697b      	ldr	r3, [r7, #20]
 8025234:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025236:	78fb      	ldrb	r3, [r7, #3]
 8025238:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 802523a:	68fb      	ldr	r3, [r7, #12]
 802523c:	015a      	lsls	r2, r3, #5
 802523e:	693b      	ldr	r3, [r7, #16]
 8025240:	4413      	add	r3, r2
 8025242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025246:	689b      	ldr	r3, [r3, #8]
 8025248:	f003 0304 	and.w	r3, r3, #4
 802524c:	2b04      	cmp	r3, #4
 802524e:	d119      	bne.n	8025284 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025250:	68fb      	ldr	r3, [r7, #12]
 8025252:	015a      	lsls	r2, r3, #5
 8025254:	693b      	ldr	r3, [r7, #16]
 8025256:	4413      	add	r3, r2
 8025258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802525c:	461a      	mov	r2, r3
 802525e:	2304      	movs	r3, #4
 8025260:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025262:	68fb      	ldr	r3, [r7, #12]
 8025264:	015a      	lsls	r2, r3, #5
 8025266:	693b      	ldr	r3, [r7, #16]
 8025268:	4413      	add	r3, r2
 802526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802526e:	68db      	ldr	r3, [r3, #12]
 8025270:	68fa      	ldr	r2, [r7, #12]
 8025272:	0151      	lsls	r1, r2, #5
 8025274:	693a      	ldr	r2, [r7, #16]
 8025276:	440a      	add	r2, r1
 8025278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802527c:	f043 0302 	orr.w	r3, r3, #2
 8025280:	60d3      	str	r3, [r2, #12]
 8025282:	e0ce      	b.n	8025422 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025284:	68fb      	ldr	r3, [r7, #12]
 8025286:	015a      	lsls	r2, r3, #5
 8025288:	693b      	ldr	r3, [r7, #16]
 802528a:	4413      	add	r3, r2
 802528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025290:	689b      	ldr	r3, [r3, #8]
 8025292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802529a:	d12c      	bne.n	80252f6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 802529c:	68fb      	ldr	r3, [r7, #12]
 802529e:	015a      	lsls	r2, r3, #5
 80252a0:	693b      	ldr	r3, [r7, #16]
 80252a2:	4413      	add	r3, r2
 80252a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252a8:	461a      	mov	r2, r3
 80252aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80252ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80252b0:	6879      	ldr	r1, [r7, #4]
 80252b2:	68fa      	ldr	r2, [r7, #12]
 80252b4:	4613      	mov	r3, r2
 80252b6:	009b      	lsls	r3, r3, #2
 80252b8:	4413      	add	r3, r2
 80252ba:	00db      	lsls	r3, r3, #3
 80252bc:	440b      	add	r3, r1
 80252be:	335d      	adds	r3, #93	; 0x5d
 80252c0:	2207      	movs	r2, #7
 80252c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80252c4:	68fb      	ldr	r3, [r7, #12]
 80252c6:	015a      	lsls	r2, r3, #5
 80252c8:	693b      	ldr	r3, [r7, #16]
 80252ca:	4413      	add	r3, r2
 80252cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252d0:	68db      	ldr	r3, [r3, #12]
 80252d2:	68fa      	ldr	r2, [r7, #12]
 80252d4:	0151      	lsls	r1, r2, #5
 80252d6:	693a      	ldr	r2, [r7, #16]
 80252d8:	440a      	add	r2, r1
 80252da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80252de:	f043 0302 	orr.w	r3, r3, #2
 80252e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	68fa      	ldr	r2, [r7, #12]
 80252ea:	b2d2      	uxtb	r2, r2
 80252ec:	4611      	mov	r1, r2
 80252ee:	4618      	mov	r0, r3
 80252f0:	f008 ff73 	bl	802e1da <USB_HC_Halt>
 80252f4:	e095      	b.n	8025422 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80252f6:	68fb      	ldr	r3, [r7, #12]
 80252f8:	015a      	lsls	r2, r3, #5
 80252fa:	693b      	ldr	r3, [r7, #16]
 80252fc:	4413      	add	r3, r2
 80252fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025302:	689b      	ldr	r3, [r3, #8]
 8025304:	f003 0320 	and.w	r3, r3, #32
 8025308:	2b20      	cmp	r3, #32
 802530a:	d109      	bne.n	8025320 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 802530c:	68fb      	ldr	r3, [r7, #12]
 802530e:	015a      	lsls	r2, r3, #5
 8025310:	693b      	ldr	r3, [r7, #16]
 8025312:	4413      	add	r3, r2
 8025314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025318:	461a      	mov	r2, r3
 802531a:	2320      	movs	r3, #32
 802531c:	6093      	str	r3, [r2, #8]
 802531e:	e080      	b.n	8025422 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8025320:	68fb      	ldr	r3, [r7, #12]
 8025322:	015a      	lsls	r2, r3, #5
 8025324:	693b      	ldr	r3, [r7, #16]
 8025326:	4413      	add	r3, r2
 8025328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802532c:	689b      	ldr	r3, [r3, #8]
 802532e:	f003 0308 	and.w	r3, r3, #8
 8025332:	2b08      	cmp	r3, #8
 8025334:	d134      	bne.n	80253a0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025336:	68fb      	ldr	r3, [r7, #12]
 8025338:	015a      	lsls	r2, r3, #5
 802533a:	693b      	ldr	r3, [r7, #16]
 802533c:	4413      	add	r3, r2
 802533e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025342:	68db      	ldr	r3, [r3, #12]
 8025344:	68fa      	ldr	r2, [r7, #12]
 8025346:	0151      	lsls	r1, r2, #5
 8025348:	693a      	ldr	r2, [r7, #16]
 802534a:	440a      	add	r2, r1
 802534c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025350:	f043 0302 	orr.w	r3, r3, #2
 8025354:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8025356:	6879      	ldr	r1, [r7, #4]
 8025358:	68fa      	ldr	r2, [r7, #12]
 802535a:	4613      	mov	r3, r2
 802535c:	009b      	lsls	r3, r3, #2
 802535e:	4413      	add	r3, r2
 8025360:	00db      	lsls	r3, r3, #3
 8025362:	440b      	add	r3, r1
 8025364:	335d      	adds	r3, #93	; 0x5d
 8025366:	2205      	movs	r2, #5
 8025368:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 802536a:	68fb      	ldr	r3, [r7, #12]
 802536c:	015a      	lsls	r2, r3, #5
 802536e:	693b      	ldr	r3, [r7, #16]
 8025370:	4413      	add	r3, r2
 8025372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025376:	461a      	mov	r2, r3
 8025378:	2310      	movs	r3, #16
 802537a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 802537c:	68fb      	ldr	r3, [r7, #12]
 802537e:	015a      	lsls	r2, r3, #5
 8025380:	693b      	ldr	r3, [r7, #16]
 8025382:	4413      	add	r3, r2
 8025384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025388:	461a      	mov	r2, r3
 802538a:	2308      	movs	r3, #8
 802538c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802538e:	687b      	ldr	r3, [r7, #4]
 8025390:	681b      	ldr	r3, [r3, #0]
 8025392:	68fa      	ldr	r2, [r7, #12]
 8025394:	b2d2      	uxtb	r2, r2
 8025396:	4611      	mov	r1, r2
 8025398:	4618      	mov	r0, r3
 802539a:	f008 ff1e 	bl	802e1da <USB_HC_Halt>
 802539e:	e040      	b.n	8025422 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80253a0:	68fb      	ldr	r3, [r7, #12]
 80253a2:	015a      	lsls	r2, r3, #5
 80253a4:	693b      	ldr	r3, [r7, #16]
 80253a6:	4413      	add	r3, r2
 80253a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253ac:	689b      	ldr	r3, [r3, #8]
 80253ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80253b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80253b6:	d134      	bne.n	8025422 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80253b8:	68fb      	ldr	r3, [r7, #12]
 80253ba:	015a      	lsls	r2, r3, #5
 80253bc:	693b      	ldr	r3, [r7, #16]
 80253be:	4413      	add	r3, r2
 80253c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253c4:	68db      	ldr	r3, [r3, #12]
 80253c6:	68fa      	ldr	r2, [r7, #12]
 80253c8:	0151      	lsls	r1, r2, #5
 80253ca:	693a      	ldr	r2, [r7, #16]
 80253cc:	440a      	add	r2, r1
 80253ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80253d2:	f043 0302 	orr.w	r3, r3, #2
 80253d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	68fa      	ldr	r2, [r7, #12]
 80253de:	b2d2      	uxtb	r2, r2
 80253e0:	4611      	mov	r1, r2
 80253e2:	4618      	mov	r0, r3
 80253e4:	f008 fef9 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80253e8:	68fb      	ldr	r3, [r7, #12]
 80253ea:	015a      	lsls	r2, r3, #5
 80253ec:	693b      	ldr	r3, [r7, #16]
 80253ee:	4413      	add	r3, r2
 80253f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253f4:	461a      	mov	r2, r3
 80253f6:	2310      	movs	r3, #16
 80253f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80253fa:	6879      	ldr	r1, [r7, #4]
 80253fc:	68fa      	ldr	r2, [r7, #12]
 80253fe:	4613      	mov	r3, r2
 8025400:	009b      	lsls	r3, r3, #2
 8025402:	4413      	add	r3, r2
 8025404:	00db      	lsls	r3, r3, #3
 8025406:	440b      	add	r3, r1
 8025408:	335d      	adds	r3, #93	; 0x5d
 802540a:	2208      	movs	r2, #8
 802540c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 802540e:	68fb      	ldr	r3, [r7, #12]
 8025410:	015a      	lsls	r2, r3, #5
 8025412:	693b      	ldr	r3, [r7, #16]
 8025414:	4413      	add	r3, r2
 8025416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802541a:	461a      	mov	r2, r3
 802541c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025420:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025422:	68fb      	ldr	r3, [r7, #12]
 8025424:	015a      	lsls	r2, r3, #5
 8025426:	693b      	ldr	r3, [r7, #16]
 8025428:	4413      	add	r3, r2
 802542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802542e:	689b      	ldr	r3, [r3, #8]
 8025430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025438:	d122      	bne.n	8025480 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 802543a:	68fb      	ldr	r3, [r7, #12]
 802543c:	015a      	lsls	r2, r3, #5
 802543e:	693b      	ldr	r3, [r7, #16]
 8025440:	4413      	add	r3, r2
 8025442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025446:	68db      	ldr	r3, [r3, #12]
 8025448:	68fa      	ldr	r2, [r7, #12]
 802544a:	0151      	lsls	r1, r2, #5
 802544c:	693a      	ldr	r2, [r7, #16]
 802544e:	440a      	add	r2, r1
 8025450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025454:	f043 0302 	orr.w	r3, r3, #2
 8025458:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	681b      	ldr	r3, [r3, #0]
 802545e:	68fa      	ldr	r2, [r7, #12]
 8025460:	b2d2      	uxtb	r2, r2
 8025462:	4611      	mov	r1, r2
 8025464:	4618      	mov	r0, r3
 8025466:	f008 feb8 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 802546a:	68fb      	ldr	r3, [r7, #12]
 802546c:	015a      	lsls	r2, r3, #5
 802546e:	693b      	ldr	r3, [r7, #16]
 8025470:	4413      	add	r3, r2
 8025472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025476:	461a      	mov	r2, r3
 8025478:	f44f 7300 	mov.w	r3, #512	; 0x200
 802547c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 802547e:	e300      	b.n	8025a82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025480:	68fb      	ldr	r3, [r7, #12]
 8025482:	015a      	lsls	r2, r3, #5
 8025484:	693b      	ldr	r3, [r7, #16]
 8025486:	4413      	add	r3, r2
 8025488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802548c:	689b      	ldr	r3, [r3, #8]
 802548e:	f003 0301 	and.w	r3, r3, #1
 8025492:	2b01      	cmp	r3, #1
 8025494:	f040 80fd 	bne.w	8025692 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	691b      	ldr	r3, [r3, #16]
 802549c:	2b00      	cmp	r3, #0
 802549e:	d01b      	beq.n	80254d8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80254a0:	6879      	ldr	r1, [r7, #4]
 80254a2:	68fa      	ldr	r2, [r7, #12]
 80254a4:	4613      	mov	r3, r2
 80254a6:	009b      	lsls	r3, r3, #2
 80254a8:	4413      	add	r3, r2
 80254aa:	00db      	lsls	r3, r3, #3
 80254ac:	440b      	add	r3, r1
 80254ae:	3348      	adds	r3, #72	; 0x48
 80254b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80254b2:	68fb      	ldr	r3, [r7, #12]
 80254b4:	0159      	lsls	r1, r3, #5
 80254b6:	693b      	ldr	r3, [r7, #16]
 80254b8:	440b      	add	r3, r1
 80254ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80254be:	691b      	ldr	r3, [r3, #16]
 80254c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80254c4:	1ad1      	subs	r1, r2, r3
 80254c6:	6878      	ldr	r0, [r7, #4]
 80254c8:	68fa      	ldr	r2, [r7, #12]
 80254ca:	4613      	mov	r3, r2
 80254cc:	009b      	lsls	r3, r3, #2
 80254ce:	4413      	add	r3, r2
 80254d0:	00db      	lsls	r3, r3, #3
 80254d2:	4403      	add	r3, r0
 80254d4:	334c      	adds	r3, #76	; 0x4c
 80254d6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80254d8:	6879      	ldr	r1, [r7, #4]
 80254da:	68fa      	ldr	r2, [r7, #12]
 80254dc:	4613      	mov	r3, r2
 80254de:	009b      	lsls	r3, r3, #2
 80254e0:	4413      	add	r3, r2
 80254e2:	00db      	lsls	r3, r3, #3
 80254e4:	440b      	add	r3, r1
 80254e6:	335d      	adds	r3, #93	; 0x5d
 80254e8:	2201      	movs	r2, #1
 80254ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80254ec:	6879      	ldr	r1, [r7, #4]
 80254ee:	68fa      	ldr	r2, [r7, #12]
 80254f0:	4613      	mov	r3, r2
 80254f2:	009b      	lsls	r3, r3, #2
 80254f4:	4413      	add	r3, r2
 80254f6:	00db      	lsls	r3, r3, #3
 80254f8:	440b      	add	r3, r1
 80254fa:	3358      	adds	r3, #88	; 0x58
 80254fc:	2200      	movs	r2, #0
 80254fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025500:	68fb      	ldr	r3, [r7, #12]
 8025502:	015a      	lsls	r2, r3, #5
 8025504:	693b      	ldr	r3, [r7, #16]
 8025506:	4413      	add	r3, r2
 8025508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802550c:	461a      	mov	r2, r3
 802550e:	2301      	movs	r3, #1
 8025510:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025512:	6879      	ldr	r1, [r7, #4]
 8025514:	68fa      	ldr	r2, [r7, #12]
 8025516:	4613      	mov	r3, r2
 8025518:	009b      	lsls	r3, r3, #2
 802551a:	4413      	add	r3, r2
 802551c:	00db      	lsls	r3, r3, #3
 802551e:	440b      	add	r3, r1
 8025520:	333f      	adds	r3, #63	; 0x3f
 8025522:	781b      	ldrb	r3, [r3, #0]
 8025524:	2b00      	cmp	r3, #0
 8025526:	d00a      	beq.n	802553e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025528:	6879      	ldr	r1, [r7, #4]
 802552a:	68fa      	ldr	r2, [r7, #12]
 802552c:	4613      	mov	r3, r2
 802552e:	009b      	lsls	r3, r3, #2
 8025530:	4413      	add	r3, r2
 8025532:	00db      	lsls	r3, r3, #3
 8025534:	440b      	add	r3, r1
 8025536:	333f      	adds	r3, #63	; 0x3f
 8025538:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802553a:	2b02      	cmp	r3, #2
 802553c:	d121      	bne.n	8025582 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 802553e:	68fb      	ldr	r3, [r7, #12]
 8025540:	015a      	lsls	r2, r3, #5
 8025542:	693b      	ldr	r3, [r7, #16]
 8025544:	4413      	add	r3, r2
 8025546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802554a:	68db      	ldr	r3, [r3, #12]
 802554c:	68fa      	ldr	r2, [r7, #12]
 802554e:	0151      	lsls	r1, r2, #5
 8025550:	693a      	ldr	r2, [r7, #16]
 8025552:	440a      	add	r2, r1
 8025554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025558:	f043 0302 	orr.w	r3, r3, #2
 802555c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	681b      	ldr	r3, [r3, #0]
 8025562:	68fa      	ldr	r2, [r7, #12]
 8025564:	b2d2      	uxtb	r2, r2
 8025566:	4611      	mov	r1, r2
 8025568:	4618      	mov	r0, r3
 802556a:	f008 fe36 	bl	802e1da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 802556e:	68fb      	ldr	r3, [r7, #12]
 8025570:	015a      	lsls	r2, r3, #5
 8025572:	693b      	ldr	r3, [r7, #16]
 8025574:	4413      	add	r3, r2
 8025576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802557a:	461a      	mov	r2, r3
 802557c:	2310      	movs	r3, #16
 802557e:	6093      	str	r3, [r2, #8]
 8025580:	e070      	b.n	8025664 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025582:	6879      	ldr	r1, [r7, #4]
 8025584:	68fa      	ldr	r2, [r7, #12]
 8025586:	4613      	mov	r3, r2
 8025588:	009b      	lsls	r3, r3, #2
 802558a:	4413      	add	r3, r2
 802558c:	00db      	lsls	r3, r3, #3
 802558e:	440b      	add	r3, r1
 8025590:	333f      	adds	r3, #63	; 0x3f
 8025592:	781b      	ldrb	r3, [r3, #0]
 8025594:	2b03      	cmp	r3, #3
 8025596:	d12a      	bne.n	80255ee <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025598:	68fb      	ldr	r3, [r7, #12]
 802559a:	015a      	lsls	r2, r3, #5
 802559c:	693b      	ldr	r3, [r7, #16]
 802559e:	4413      	add	r3, r2
 80255a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255a4:	681b      	ldr	r3, [r3, #0]
 80255a6:	68fa      	ldr	r2, [r7, #12]
 80255a8:	0151      	lsls	r1, r2, #5
 80255aa:	693a      	ldr	r2, [r7, #16]
 80255ac:	440a      	add	r2, r1
 80255ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80255b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80255b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80255b8:	6879      	ldr	r1, [r7, #4]
 80255ba:	68fa      	ldr	r2, [r7, #12]
 80255bc:	4613      	mov	r3, r2
 80255be:	009b      	lsls	r3, r3, #2
 80255c0:	4413      	add	r3, r2
 80255c2:	00db      	lsls	r3, r3, #3
 80255c4:	440b      	add	r3, r1
 80255c6:	335c      	adds	r3, #92	; 0x5c
 80255c8:	2201      	movs	r2, #1
 80255ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80255cc:	68fb      	ldr	r3, [r7, #12]
 80255ce:	b2d8      	uxtb	r0, r3
 80255d0:	6879      	ldr	r1, [r7, #4]
 80255d2:	68fa      	ldr	r2, [r7, #12]
 80255d4:	4613      	mov	r3, r2
 80255d6:	009b      	lsls	r3, r3, #2
 80255d8:	4413      	add	r3, r2
 80255da:	00db      	lsls	r3, r3, #3
 80255dc:	440b      	add	r3, r1
 80255de:	335c      	adds	r3, #92	; 0x5c
 80255e0:	781b      	ldrb	r3, [r3, #0]
 80255e2:	461a      	mov	r2, r3
 80255e4:	4601      	mov	r1, r0
 80255e6:	6878      	ldr	r0, [r7, #4]
 80255e8:	f00f f89c 	bl	8034724 <HAL_HCD_HC_NotifyURBChange_Callback>
 80255ec:	e03a      	b.n	8025664 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80255ee:	6879      	ldr	r1, [r7, #4]
 80255f0:	68fa      	ldr	r2, [r7, #12]
 80255f2:	4613      	mov	r3, r2
 80255f4:	009b      	lsls	r3, r3, #2
 80255f6:	4413      	add	r3, r2
 80255f8:	00db      	lsls	r3, r3, #3
 80255fa:	440b      	add	r3, r1
 80255fc:	333f      	adds	r3, #63	; 0x3f
 80255fe:	781b      	ldrb	r3, [r3, #0]
 8025600:	2b01      	cmp	r3, #1
 8025602:	d12f      	bne.n	8025664 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025604:	6879      	ldr	r1, [r7, #4]
 8025606:	68fa      	ldr	r2, [r7, #12]
 8025608:	4613      	mov	r3, r2
 802560a:	009b      	lsls	r3, r3, #2
 802560c:	4413      	add	r3, r2
 802560e:	00db      	lsls	r3, r3, #3
 8025610:	440b      	add	r3, r1
 8025612:	335c      	adds	r3, #92	; 0x5c
 8025614:	2201      	movs	r2, #1
 8025616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025618:	6879      	ldr	r1, [r7, #4]
 802561a:	68fa      	ldr	r2, [r7, #12]
 802561c:	4613      	mov	r3, r2
 802561e:	009b      	lsls	r3, r3, #2
 8025620:	4413      	add	r3, r2
 8025622:	00db      	lsls	r3, r3, #3
 8025624:	440b      	add	r3, r1
 8025626:	3350      	adds	r3, #80	; 0x50
 8025628:	781b      	ldrb	r3, [r3, #0]
 802562a:	f083 0301 	eor.w	r3, r3, #1
 802562e:	b2d8      	uxtb	r0, r3
 8025630:	6879      	ldr	r1, [r7, #4]
 8025632:	68fa      	ldr	r2, [r7, #12]
 8025634:	4613      	mov	r3, r2
 8025636:	009b      	lsls	r3, r3, #2
 8025638:	4413      	add	r3, r2
 802563a:	00db      	lsls	r3, r3, #3
 802563c:	440b      	add	r3, r1
 802563e:	3350      	adds	r3, #80	; 0x50
 8025640:	4602      	mov	r2, r0
 8025642:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025644:	68fb      	ldr	r3, [r7, #12]
 8025646:	b2d8      	uxtb	r0, r3
 8025648:	6879      	ldr	r1, [r7, #4]
 802564a:	68fa      	ldr	r2, [r7, #12]
 802564c:	4613      	mov	r3, r2
 802564e:	009b      	lsls	r3, r3, #2
 8025650:	4413      	add	r3, r2
 8025652:	00db      	lsls	r3, r3, #3
 8025654:	440b      	add	r3, r1
 8025656:	335c      	adds	r3, #92	; 0x5c
 8025658:	781b      	ldrb	r3, [r3, #0]
 802565a:	461a      	mov	r2, r3
 802565c:	4601      	mov	r1, r0
 802565e:	6878      	ldr	r0, [r7, #4]
 8025660:	f00f f860 	bl	8034724 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8025664:	6879      	ldr	r1, [r7, #4]
 8025666:	68fa      	ldr	r2, [r7, #12]
 8025668:	4613      	mov	r3, r2
 802566a:	009b      	lsls	r3, r3, #2
 802566c:	4413      	add	r3, r2
 802566e:	00db      	lsls	r3, r3, #3
 8025670:	440b      	add	r3, r1
 8025672:	3350      	adds	r3, #80	; 0x50
 8025674:	781b      	ldrb	r3, [r3, #0]
 8025676:	f083 0301 	eor.w	r3, r3, #1
 802567a:	b2d8      	uxtb	r0, r3
 802567c:	6879      	ldr	r1, [r7, #4]
 802567e:	68fa      	ldr	r2, [r7, #12]
 8025680:	4613      	mov	r3, r2
 8025682:	009b      	lsls	r3, r3, #2
 8025684:	4413      	add	r3, r2
 8025686:	00db      	lsls	r3, r3, #3
 8025688:	440b      	add	r3, r1
 802568a:	3350      	adds	r3, #80	; 0x50
 802568c:	4602      	mov	r2, r0
 802568e:	701a      	strb	r2, [r3, #0]
}
 8025690:	e1f7      	b.n	8025a82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025692:	68fb      	ldr	r3, [r7, #12]
 8025694:	015a      	lsls	r2, r3, #5
 8025696:	693b      	ldr	r3, [r7, #16]
 8025698:	4413      	add	r3, r2
 802569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802569e:	689b      	ldr	r3, [r3, #8]
 80256a0:	f003 0302 	and.w	r3, r3, #2
 80256a4:	2b02      	cmp	r3, #2
 80256a6:	f040 811a 	bne.w	80258de <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80256aa:	68fb      	ldr	r3, [r7, #12]
 80256ac:	015a      	lsls	r2, r3, #5
 80256ae:	693b      	ldr	r3, [r7, #16]
 80256b0:	4413      	add	r3, r2
 80256b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256b6:	68db      	ldr	r3, [r3, #12]
 80256b8:	68fa      	ldr	r2, [r7, #12]
 80256ba:	0151      	lsls	r1, r2, #5
 80256bc:	693a      	ldr	r2, [r7, #16]
 80256be:	440a      	add	r2, r1
 80256c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80256c4:	f023 0302 	bic.w	r3, r3, #2
 80256c8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80256ca:	6879      	ldr	r1, [r7, #4]
 80256cc:	68fa      	ldr	r2, [r7, #12]
 80256ce:	4613      	mov	r3, r2
 80256d0:	009b      	lsls	r3, r3, #2
 80256d2:	4413      	add	r3, r2
 80256d4:	00db      	lsls	r3, r3, #3
 80256d6:	440b      	add	r3, r1
 80256d8:	335d      	adds	r3, #93	; 0x5d
 80256da:	781b      	ldrb	r3, [r3, #0]
 80256dc:	2b01      	cmp	r3, #1
 80256de:	d10a      	bne.n	80256f6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80256e0:	6879      	ldr	r1, [r7, #4]
 80256e2:	68fa      	ldr	r2, [r7, #12]
 80256e4:	4613      	mov	r3, r2
 80256e6:	009b      	lsls	r3, r3, #2
 80256e8:	4413      	add	r3, r2
 80256ea:	00db      	lsls	r3, r3, #3
 80256ec:	440b      	add	r3, r1
 80256ee:	335c      	adds	r3, #92	; 0x5c
 80256f0:	2201      	movs	r2, #1
 80256f2:	701a      	strb	r2, [r3, #0]
 80256f4:	e0d9      	b.n	80258aa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80256f6:	6879      	ldr	r1, [r7, #4]
 80256f8:	68fa      	ldr	r2, [r7, #12]
 80256fa:	4613      	mov	r3, r2
 80256fc:	009b      	lsls	r3, r3, #2
 80256fe:	4413      	add	r3, r2
 8025700:	00db      	lsls	r3, r3, #3
 8025702:	440b      	add	r3, r1
 8025704:	335d      	adds	r3, #93	; 0x5d
 8025706:	781b      	ldrb	r3, [r3, #0]
 8025708:	2b05      	cmp	r3, #5
 802570a:	d10a      	bne.n	8025722 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 802570c:	6879      	ldr	r1, [r7, #4]
 802570e:	68fa      	ldr	r2, [r7, #12]
 8025710:	4613      	mov	r3, r2
 8025712:	009b      	lsls	r3, r3, #2
 8025714:	4413      	add	r3, r2
 8025716:	00db      	lsls	r3, r3, #3
 8025718:	440b      	add	r3, r1
 802571a:	335c      	adds	r3, #92	; 0x5c
 802571c:	2205      	movs	r2, #5
 802571e:	701a      	strb	r2, [r3, #0]
 8025720:	e0c3      	b.n	80258aa <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025722:	6879      	ldr	r1, [r7, #4]
 8025724:	68fa      	ldr	r2, [r7, #12]
 8025726:	4613      	mov	r3, r2
 8025728:	009b      	lsls	r3, r3, #2
 802572a:	4413      	add	r3, r2
 802572c:	00db      	lsls	r3, r3, #3
 802572e:	440b      	add	r3, r1
 8025730:	335d      	adds	r3, #93	; 0x5d
 8025732:	781b      	ldrb	r3, [r3, #0]
 8025734:	2b06      	cmp	r3, #6
 8025736:	d00a      	beq.n	802574e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025738:	6879      	ldr	r1, [r7, #4]
 802573a:	68fa      	ldr	r2, [r7, #12]
 802573c:	4613      	mov	r3, r2
 802573e:	009b      	lsls	r3, r3, #2
 8025740:	4413      	add	r3, r2
 8025742:	00db      	lsls	r3, r3, #3
 8025744:	440b      	add	r3, r1
 8025746:	335d      	adds	r3, #93	; 0x5d
 8025748:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802574a:	2b08      	cmp	r3, #8
 802574c:	d156      	bne.n	80257fc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 802574e:	6879      	ldr	r1, [r7, #4]
 8025750:	68fa      	ldr	r2, [r7, #12]
 8025752:	4613      	mov	r3, r2
 8025754:	009b      	lsls	r3, r3, #2
 8025756:	4413      	add	r3, r2
 8025758:	00db      	lsls	r3, r3, #3
 802575a:	440b      	add	r3, r1
 802575c:	3358      	adds	r3, #88	; 0x58
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	1c59      	adds	r1, r3, #1
 8025762:	6878      	ldr	r0, [r7, #4]
 8025764:	68fa      	ldr	r2, [r7, #12]
 8025766:	4613      	mov	r3, r2
 8025768:	009b      	lsls	r3, r3, #2
 802576a:	4413      	add	r3, r2
 802576c:	00db      	lsls	r3, r3, #3
 802576e:	4403      	add	r3, r0
 8025770:	3358      	adds	r3, #88	; 0x58
 8025772:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8025774:	6879      	ldr	r1, [r7, #4]
 8025776:	68fa      	ldr	r2, [r7, #12]
 8025778:	4613      	mov	r3, r2
 802577a:	009b      	lsls	r3, r3, #2
 802577c:	4413      	add	r3, r2
 802577e:	00db      	lsls	r3, r3, #3
 8025780:	440b      	add	r3, r1
 8025782:	3358      	adds	r3, #88	; 0x58
 8025784:	681b      	ldr	r3, [r3, #0]
 8025786:	2b03      	cmp	r3, #3
 8025788:	d914      	bls.n	80257b4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 802578a:	6879      	ldr	r1, [r7, #4]
 802578c:	68fa      	ldr	r2, [r7, #12]
 802578e:	4613      	mov	r3, r2
 8025790:	009b      	lsls	r3, r3, #2
 8025792:	4413      	add	r3, r2
 8025794:	00db      	lsls	r3, r3, #3
 8025796:	440b      	add	r3, r1
 8025798:	3358      	adds	r3, #88	; 0x58
 802579a:	2200      	movs	r2, #0
 802579c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 802579e:	6879      	ldr	r1, [r7, #4]
 80257a0:	68fa      	ldr	r2, [r7, #12]
 80257a2:	4613      	mov	r3, r2
 80257a4:	009b      	lsls	r3, r3, #2
 80257a6:	4413      	add	r3, r2
 80257a8:	00db      	lsls	r3, r3, #3
 80257aa:	440b      	add	r3, r1
 80257ac:	335c      	adds	r3, #92	; 0x5c
 80257ae:	2204      	movs	r2, #4
 80257b0:	701a      	strb	r2, [r3, #0]
 80257b2:	e009      	b.n	80257c8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80257b4:	6879      	ldr	r1, [r7, #4]
 80257b6:	68fa      	ldr	r2, [r7, #12]
 80257b8:	4613      	mov	r3, r2
 80257ba:	009b      	lsls	r3, r3, #2
 80257bc:	4413      	add	r3, r2
 80257be:	00db      	lsls	r3, r3, #3
 80257c0:	440b      	add	r3, r1
 80257c2:	335c      	adds	r3, #92	; 0x5c
 80257c4:	2202      	movs	r2, #2
 80257c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80257c8:	68fb      	ldr	r3, [r7, #12]
 80257ca:	015a      	lsls	r2, r3, #5
 80257cc:	693b      	ldr	r3, [r7, #16]
 80257ce:	4413      	add	r3, r2
 80257d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257d4:	681b      	ldr	r3, [r3, #0]
 80257d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80257d8:	68bb      	ldr	r3, [r7, #8]
 80257da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80257de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80257e0:	68bb      	ldr	r3, [r7, #8]
 80257e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80257e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80257e8:	68fb      	ldr	r3, [r7, #12]
 80257ea:	015a      	lsls	r2, r3, #5
 80257ec:	693b      	ldr	r3, [r7, #16]
 80257ee:	4413      	add	r3, r2
 80257f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257f4:	461a      	mov	r2, r3
 80257f6:	68bb      	ldr	r3, [r7, #8]
 80257f8:	6013      	str	r3, [r2, #0]
 80257fa:	e056      	b.n	80258aa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80257fc:	6879      	ldr	r1, [r7, #4]
 80257fe:	68fa      	ldr	r2, [r7, #12]
 8025800:	4613      	mov	r3, r2
 8025802:	009b      	lsls	r3, r3, #2
 8025804:	4413      	add	r3, r2
 8025806:	00db      	lsls	r3, r3, #3
 8025808:	440b      	add	r3, r1
 802580a:	335d      	adds	r3, #93	; 0x5d
 802580c:	781b      	ldrb	r3, [r3, #0]
 802580e:	2b03      	cmp	r3, #3
 8025810:	d123      	bne.n	802585a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025812:	6879      	ldr	r1, [r7, #4]
 8025814:	68fa      	ldr	r2, [r7, #12]
 8025816:	4613      	mov	r3, r2
 8025818:	009b      	lsls	r3, r3, #2
 802581a:	4413      	add	r3, r2
 802581c:	00db      	lsls	r3, r3, #3
 802581e:	440b      	add	r3, r1
 8025820:	335c      	adds	r3, #92	; 0x5c
 8025822:	2202      	movs	r2, #2
 8025824:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025826:	68fb      	ldr	r3, [r7, #12]
 8025828:	015a      	lsls	r2, r3, #5
 802582a:	693b      	ldr	r3, [r7, #16]
 802582c:	4413      	add	r3, r2
 802582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025832:	681b      	ldr	r3, [r3, #0]
 8025834:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025836:	68bb      	ldr	r3, [r7, #8]
 8025838:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802583c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 802583e:	68bb      	ldr	r3, [r7, #8]
 8025840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025844:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025846:	68fb      	ldr	r3, [r7, #12]
 8025848:	015a      	lsls	r2, r3, #5
 802584a:	693b      	ldr	r3, [r7, #16]
 802584c:	4413      	add	r3, r2
 802584e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025852:	461a      	mov	r2, r3
 8025854:	68bb      	ldr	r3, [r7, #8]
 8025856:	6013      	str	r3, [r2, #0]
 8025858:	e027      	b.n	80258aa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 802585a:	6879      	ldr	r1, [r7, #4]
 802585c:	68fa      	ldr	r2, [r7, #12]
 802585e:	4613      	mov	r3, r2
 8025860:	009b      	lsls	r3, r3, #2
 8025862:	4413      	add	r3, r2
 8025864:	00db      	lsls	r3, r3, #3
 8025866:	440b      	add	r3, r1
 8025868:	335d      	adds	r3, #93	; 0x5d
 802586a:	781b      	ldrb	r3, [r3, #0]
 802586c:	2b07      	cmp	r3, #7
 802586e:	d11c      	bne.n	80258aa <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8025870:	6879      	ldr	r1, [r7, #4]
 8025872:	68fa      	ldr	r2, [r7, #12]
 8025874:	4613      	mov	r3, r2
 8025876:	009b      	lsls	r3, r3, #2
 8025878:	4413      	add	r3, r2
 802587a:	00db      	lsls	r3, r3, #3
 802587c:	440b      	add	r3, r1
 802587e:	3358      	adds	r3, #88	; 0x58
 8025880:	681b      	ldr	r3, [r3, #0]
 8025882:	1c59      	adds	r1, r3, #1
 8025884:	6878      	ldr	r0, [r7, #4]
 8025886:	68fa      	ldr	r2, [r7, #12]
 8025888:	4613      	mov	r3, r2
 802588a:	009b      	lsls	r3, r3, #2
 802588c:	4413      	add	r3, r2
 802588e:	00db      	lsls	r3, r3, #3
 8025890:	4403      	add	r3, r0
 8025892:	3358      	adds	r3, #88	; 0x58
 8025894:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025896:	6879      	ldr	r1, [r7, #4]
 8025898:	68fa      	ldr	r2, [r7, #12]
 802589a:	4613      	mov	r3, r2
 802589c:	009b      	lsls	r3, r3, #2
 802589e:	4413      	add	r3, r2
 80258a0:	00db      	lsls	r3, r3, #3
 80258a2:	440b      	add	r3, r1
 80258a4:	335c      	adds	r3, #92	; 0x5c
 80258a6:	2204      	movs	r2, #4
 80258a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80258aa:	68fb      	ldr	r3, [r7, #12]
 80258ac:	015a      	lsls	r2, r3, #5
 80258ae:	693b      	ldr	r3, [r7, #16]
 80258b0:	4413      	add	r3, r2
 80258b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258b6:	461a      	mov	r2, r3
 80258b8:	2302      	movs	r3, #2
 80258ba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80258bc:	68fb      	ldr	r3, [r7, #12]
 80258be:	b2d8      	uxtb	r0, r3
 80258c0:	6879      	ldr	r1, [r7, #4]
 80258c2:	68fa      	ldr	r2, [r7, #12]
 80258c4:	4613      	mov	r3, r2
 80258c6:	009b      	lsls	r3, r3, #2
 80258c8:	4413      	add	r3, r2
 80258ca:	00db      	lsls	r3, r3, #3
 80258cc:	440b      	add	r3, r1
 80258ce:	335c      	adds	r3, #92	; 0x5c
 80258d0:	781b      	ldrb	r3, [r3, #0]
 80258d2:	461a      	mov	r2, r3
 80258d4:	4601      	mov	r1, r0
 80258d6:	6878      	ldr	r0, [r7, #4]
 80258d8:	f00e ff24 	bl	8034724 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80258dc:	e0d1      	b.n	8025a82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80258de:	68fb      	ldr	r3, [r7, #12]
 80258e0:	015a      	lsls	r2, r3, #5
 80258e2:	693b      	ldr	r3, [r7, #16]
 80258e4:	4413      	add	r3, r2
 80258e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258ea:	689b      	ldr	r3, [r3, #8]
 80258ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80258f0:	2b80      	cmp	r3, #128	; 0x80
 80258f2:	d13e      	bne.n	8025972 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80258f4:	68fb      	ldr	r3, [r7, #12]
 80258f6:	015a      	lsls	r2, r3, #5
 80258f8:	693b      	ldr	r3, [r7, #16]
 80258fa:	4413      	add	r3, r2
 80258fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025900:	68db      	ldr	r3, [r3, #12]
 8025902:	68fa      	ldr	r2, [r7, #12]
 8025904:	0151      	lsls	r1, r2, #5
 8025906:	693a      	ldr	r2, [r7, #16]
 8025908:	440a      	add	r2, r1
 802590a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802590e:	f043 0302 	orr.w	r3, r3, #2
 8025912:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8025914:	6879      	ldr	r1, [r7, #4]
 8025916:	68fa      	ldr	r2, [r7, #12]
 8025918:	4613      	mov	r3, r2
 802591a:	009b      	lsls	r3, r3, #2
 802591c:	4413      	add	r3, r2
 802591e:	00db      	lsls	r3, r3, #3
 8025920:	440b      	add	r3, r1
 8025922:	3358      	adds	r3, #88	; 0x58
 8025924:	681b      	ldr	r3, [r3, #0]
 8025926:	1c59      	adds	r1, r3, #1
 8025928:	6878      	ldr	r0, [r7, #4]
 802592a:	68fa      	ldr	r2, [r7, #12]
 802592c:	4613      	mov	r3, r2
 802592e:	009b      	lsls	r3, r3, #2
 8025930:	4413      	add	r3, r2
 8025932:	00db      	lsls	r3, r3, #3
 8025934:	4403      	add	r3, r0
 8025936:	3358      	adds	r3, #88	; 0x58
 8025938:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802593a:	6879      	ldr	r1, [r7, #4]
 802593c:	68fa      	ldr	r2, [r7, #12]
 802593e:	4613      	mov	r3, r2
 8025940:	009b      	lsls	r3, r3, #2
 8025942:	4413      	add	r3, r2
 8025944:	00db      	lsls	r3, r3, #3
 8025946:	440b      	add	r3, r1
 8025948:	335d      	adds	r3, #93	; 0x5d
 802594a:	2206      	movs	r2, #6
 802594c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802594e:	687b      	ldr	r3, [r7, #4]
 8025950:	681b      	ldr	r3, [r3, #0]
 8025952:	68fa      	ldr	r2, [r7, #12]
 8025954:	b2d2      	uxtb	r2, r2
 8025956:	4611      	mov	r1, r2
 8025958:	4618      	mov	r0, r3
 802595a:	f008 fc3e 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 802595e:	68fb      	ldr	r3, [r7, #12]
 8025960:	015a      	lsls	r2, r3, #5
 8025962:	693b      	ldr	r3, [r7, #16]
 8025964:	4413      	add	r3, r2
 8025966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802596a:	461a      	mov	r2, r3
 802596c:	2380      	movs	r3, #128	; 0x80
 802596e:	6093      	str	r3, [r2, #8]
}
 8025970:	e087      	b.n	8025a82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025972:	68fb      	ldr	r3, [r7, #12]
 8025974:	015a      	lsls	r2, r3, #5
 8025976:	693b      	ldr	r3, [r7, #16]
 8025978:	4413      	add	r3, r2
 802597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802597e:	689b      	ldr	r3, [r3, #8]
 8025980:	f003 0310 	and.w	r3, r3, #16
 8025984:	2b10      	cmp	r3, #16
 8025986:	d17c      	bne.n	8025a82 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025988:	6879      	ldr	r1, [r7, #4]
 802598a:	68fa      	ldr	r2, [r7, #12]
 802598c:	4613      	mov	r3, r2
 802598e:	009b      	lsls	r3, r3, #2
 8025990:	4413      	add	r3, r2
 8025992:	00db      	lsls	r3, r3, #3
 8025994:	440b      	add	r3, r1
 8025996:	333f      	adds	r3, #63	; 0x3f
 8025998:	781b      	ldrb	r3, [r3, #0]
 802599a:	2b03      	cmp	r3, #3
 802599c:	d122      	bne.n	80259e4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 802599e:	6879      	ldr	r1, [r7, #4]
 80259a0:	68fa      	ldr	r2, [r7, #12]
 80259a2:	4613      	mov	r3, r2
 80259a4:	009b      	lsls	r3, r3, #2
 80259a6:	4413      	add	r3, r2
 80259a8:	00db      	lsls	r3, r3, #3
 80259aa:	440b      	add	r3, r1
 80259ac:	3358      	adds	r3, #88	; 0x58
 80259ae:	2200      	movs	r2, #0
 80259b0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80259b2:	68fb      	ldr	r3, [r7, #12]
 80259b4:	015a      	lsls	r2, r3, #5
 80259b6:	693b      	ldr	r3, [r7, #16]
 80259b8:	4413      	add	r3, r2
 80259ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259be:	68db      	ldr	r3, [r3, #12]
 80259c0:	68fa      	ldr	r2, [r7, #12]
 80259c2:	0151      	lsls	r1, r2, #5
 80259c4:	693a      	ldr	r2, [r7, #16]
 80259c6:	440a      	add	r2, r1
 80259c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80259cc:	f043 0302 	orr.w	r3, r3, #2
 80259d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80259d2:	687b      	ldr	r3, [r7, #4]
 80259d4:	681b      	ldr	r3, [r3, #0]
 80259d6:	68fa      	ldr	r2, [r7, #12]
 80259d8:	b2d2      	uxtb	r2, r2
 80259da:	4611      	mov	r1, r2
 80259dc:	4618      	mov	r0, r3
 80259de:	f008 fbfc 	bl	802e1da <USB_HC_Halt>
 80259e2:	e045      	b.n	8025a70 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80259e4:	6879      	ldr	r1, [r7, #4]
 80259e6:	68fa      	ldr	r2, [r7, #12]
 80259e8:	4613      	mov	r3, r2
 80259ea:	009b      	lsls	r3, r3, #2
 80259ec:	4413      	add	r3, r2
 80259ee:	00db      	lsls	r3, r3, #3
 80259f0:	440b      	add	r3, r1
 80259f2:	333f      	adds	r3, #63	; 0x3f
 80259f4:	781b      	ldrb	r3, [r3, #0]
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	d00a      	beq.n	8025a10 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80259fa:	6879      	ldr	r1, [r7, #4]
 80259fc:	68fa      	ldr	r2, [r7, #12]
 80259fe:	4613      	mov	r3, r2
 8025a00:	009b      	lsls	r3, r3, #2
 8025a02:	4413      	add	r3, r2
 8025a04:	00db      	lsls	r3, r3, #3
 8025a06:	440b      	add	r3, r1
 8025a08:	333f      	adds	r3, #63	; 0x3f
 8025a0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025a0c:	2b02      	cmp	r3, #2
 8025a0e:	d12f      	bne.n	8025a70 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025a10:	6879      	ldr	r1, [r7, #4]
 8025a12:	68fa      	ldr	r2, [r7, #12]
 8025a14:	4613      	mov	r3, r2
 8025a16:	009b      	lsls	r3, r3, #2
 8025a18:	4413      	add	r3, r2
 8025a1a:	00db      	lsls	r3, r3, #3
 8025a1c:	440b      	add	r3, r1
 8025a1e:	3358      	adds	r3, #88	; 0x58
 8025a20:	2200      	movs	r2, #0
 8025a22:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025a24:	687b      	ldr	r3, [r7, #4]
 8025a26:	691b      	ldr	r3, [r3, #16]
 8025a28:	2b00      	cmp	r3, #0
 8025a2a:	d121      	bne.n	8025a70 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8025a2c:	6879      	ldr	r1, [r7, #4]
 8025a2e:	68fa      	ldr	r2, [r7, #12]
 8025a30:	4613      	mov	r3, r2
 8025a32:	009b      	lsls	r3, r3, #2
 8025a34:	4413      	add	r3, r2
 8025a36:	00db      	lsls	r3, r3, #3
 8025a38:	440b      	add	r3, r1
 8025a3a:	335d      	adds	r3, #93	; 0x5d
 8025a3c:	2203      	movs	r2, #3
 8025a3e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025a40:	68fb      	ldr	r3, [r7, #12]
 8025a42:	015a      	lsls	r2, r3, #5
 8025a44:	693b      	ldr	r3, [r7, #16]
 8025a46:	4413      	add	r3, r2
 8025a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a4c:	68db      	ldr	r3, [r3, #12]
 8025a4e:	68fa      	ldr	r2, [r7, #12]
 8025a50:	0151      	lsls	r1, r2, #5
 8025a52:	693a      	ldr	r2, [r7, #16]
 8025a54:	440a      	add	r2, r1
 8025a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025a5a:	f043 0302 	orr.w	r3, r3, #2
 8025a5e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a60:	687b      	ldr	r3, [r7, #4]
 8025a62:	681b      	ldr	r3, [r3, #0]
 8025a64:	68fa      	ldr	r2, [r7, #12]
 8025a66:	b2d2      	uxtb	r2, r2
 8025a68:	4611      	mov	r1, r2
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	f008 fbb5 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025a70:	68fb      	ldr	r3, [r7, #12]
 8025a72:	015a      	lsls	r2, r3, #5
 8025a74:	693b      	ldr	r3, [r7, #16]
 8025a76:	4413      	add	r3, r2
 8025a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a7c:	461a      	mov	r2, r3
 8025a7e:	2310      	movs	r3, #16
 8025a80:	6093      	str	r3, [r2, #8]
}
 8025a82:	bf00      	nop
 8025a84:	3718      	adds	r7, #24
 8025a86:	46bd      	mov	sp, r7
 8025a88:	bd80      	pop	{r7, pc}

08025a8a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025a8a:	b580      	push	{r7, lr}
 8025a8c:	b086      	sub	sp, #24
 8025a8e:	af00      	add	r7, sp, #0
 8025a90:	6078      	str	r0, [r7, #4]
 8025a92:	460b      	mov	r3, r1
 8025a94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025a96:	687b      	ldr	r3, [r7, #4]
 8025a98:	681b      	ldr	r3, [r3, #0]
 8025a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025a9c:	697b      	ldr	r3, [r7, #20]
 8025a9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025aa0:	78fb      	ldrb	r3, [r7, #3]
 8025aa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025aa4:	68fb      	ldr	r3, [r7, #12]
 8025aa6:	015a      	lsls	r2, r3, #5
 8025aa8:	693b      	ldr	r3, [r7, #16]
 8025aaa:	4413      	add	r3, r2
 8025aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ab0:	689b      	ldr	r3, [r3, #8]
 8025ab2:	f003 0304 	and.w	r3, r3, #4
 8025ab6:	2b04      	cmp	r3, #4
 8025ab8:	d119      	bne.n	8025aee <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025aba:	68fb      	ldr	r3, [r7, #12]
 8025abc:	015a      	lsls	r2, r3, #5
 8025abe:	693b      	ldr	r3, [r7, #16]
 8025ac0:	4413      	add	r3, r2
 8025ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ac6:	461a      	mov	r2, r3
 8025ac8:	2304      	movs	r3, #4
 8025aca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025acc:	68fb      	ldr	r3, [r7, #12]
 8025ace:	015a      	lsls	r2, r3, #5
 8025ad0:	693b      	ldr	r3, [r7, #16]
 8025ad2:	4413      	add	r3, r2
 8025ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ad8:	68db      	ldr	r3, [r3, #12]
 8025ada:	68fa      	ldr	r2, [r7, #12]
 8025adc:	0151      	lsls	r1, r2, #5
 8025ade:	693a      	ldr	r2, [r7, #16]
 8025ae0:	440a      	add	r2, r1
 8025ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025ae6:	f043 0302 	orr.w	r3, r3, #2
 8025aea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8025aec:	e33e      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025aee:	68fb      	ldr	r3, [r7, #12]
 8025af0:	015a      	lsls	r2, r3, #5
 8025af2:	693b      	ldr	r3, [r7, #16]
 8025af4:	4413      	add	r3, r2
 8025af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025afa:	689b      	ldr	r3, [r3, #8]
 8025afc:	f003 0320 	and.w	r3, r3, #32
 8025b00:	2b20      	cmp	r3, #32
 8025b02:	d141      	bne.n	8025b88 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025b04:	68fb      	ldr	r3, [r7, #12]
 8025b06:	015a      	lsls	r2, r3, #5
 8025b08:	693b      	ldr	r3, [r7, #16]
 8025b0a:	4413      	add	r3, r2
 8025b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b10:	461a      	mov	r2, r3
 8025b12:	2320      	movs	r3, #32
 8025b14:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8025b16:	6879      	ldr	r1, [r7, #4]
 8025b18:	68fa      	ldr	r2, [r7, #12]
 8025b1a:	4613      	mov	r3, r2
 8025b1c:	009b      	lsls	r3, r3, #2
 8025b1e:	4413      	add	r3, r2
 8025b20:	00db      	lsls	r3, r3, #3
 8025b22:	440b      	add	r3, r1
 8025b24:	333d      	adds	r3, #61	; 0x3d
 8025b26:	781b      	ldrb	r3, [r3, #0]
 8025b28:	2b01      	cmp	r3, #1
 8025b2a:	f040 831f 	bne.w	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8025b2e:	6879      	ldr	r1, [r7, #4]
 8025b30:	68fa      	ldr	r2, [r7, #12]
 8025b32:	4613      	mov	r3, r2
 8025b34:	009b      	lsls	r3, r3, #2
 8025b36:	4413      	add	r3, r2
 8025b38:	00db      	lsls	r3, r3, #3
 8025b3a:	440b      	add	r3, r1
 8025b3c:	333d      	adds	r3, #61	; 0x3d
 8025b3e:	2200      	movs	r2, #0
 8025b40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025b42:	6879      	ldr	r1, [r7, #4]
 8025b44:	68fa      	ldr	r2, [r7, #12]
 8025b46:	4613      	mov	r3, r2
 8025b48:	009b      	lsls	r3, r3, #2
 8025b4a:	4413      	add	r3, r2
 8025b4c:	00db      	lsls	r3, r3, #3
 8025b4e:	440b      	add	r3, r1
 8025b50:	335c      	adds	r3, #92	; 0x5c
 8025b52:	2202      	movs	r2, #2
 8025b54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025b56:	68fb      	ldr	r3, [r7, #12]
 8025b58:	015a      	lsls	r2, r3, #5
 8025b5a:	693b      	ldr	r3, [r7, #16]
 8025b5c:	4413      	add	r3, r2
 8025b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b62:	68db      	ldr	r3, [r3, #12]
 8025b64:	68fa      	ldr	r2, [r7, #12]
 8025b66:	0151      	lsls	r1, r2, #5
 8025b68:	693a      	ldr	r2, [r7, #16]
 8025b6a:	440a      	add	r2, r1
 8025b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025b70:	f043 0302 	orr.w	r3, r3, #2
 8025b74:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b76:	687b      	ldr	r3, [r7, #4]
 8025b78:	681b      	ldr	r3, [r3, #0]
 8025b7a:	68fa      	ldr	r2, [r7, #12]
 8025b7c:	b2d2      	uxtb	r2, r2
 8025b7e:	4611      	mov	r1, r2
 8025b80:	4618      	mov	r0, r3
 8025b82:	f008 fb2a 	bl	802e1da <USB_HC_Halt>
}
 8025b86:	e2f1      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025b88:	68fb      	ldr	r3, [r7, #12]
 8025b8a:	015a      	lsls	r2, r3, #5
 8025b8c:	693b      	ldr	r3, [r7, #16]
 8025b8e:	4413      	add	r3, r2
 8025b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b94:	689b      	ldr	r3, [r3, #8]
 8025b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025b9a:	2b40      	cmp	r3, #64	; 0x40
 8025b9c:	d13f      	bne.n	8025c1e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8025b9e:	6879      	ldr	r1, [r7, #4]
 8025ba0:	68fa      	ldr	r2, [r7, #12]
 8025ba2:	4613      	mov	r3, r2
 8025ba4:	009b      	lsls	r3, r3, #2
 8025ba6:	4413      	add	r3, r2
 8025ba8:	00db      	lsls	r3, r3, #3
 8025baa:	440b      	add	r3, r1
 8025bac:	335d      	adds	r3, #93	; 0x5d
 8025bae:	2204      	movs	r2, #4
 8025bb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8025bb2:	6879      	ldr	r1, [r7, #4]
 8025bb4:	68fa      	ldr	r2, [r7, #12]
 8025bb6:	4613      	mov	r3, r2
 8025bb8:	009b      	lsls	r3, r3, #2
 8025bba:	4413      	add	r3, r2
 8025bbc:	00db      	lsls	r3, r3, #3
 8025bbe:	440b      	add	r3, r1
 8025bc0:	333d      	adds	r3, #61	; 0x3d
 8025bc2:	2201      	movs	r2, #1
 8025bc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025bc6:	6879      	ldr	r1, [r7, #4]
 8025bc8:	68fa      	ldr	r2, [r7, #12]
 8025bca:	4613      	mov	r3, r2
 8025bcc:	009b      	lsls	r3, r3, #2
 8025bce:	4413      	add	r3, r2
 8025bd0:	00db      	lsls	r3, r3, #3
 8025bd2:	440b      	add	r3, r1
 8025bd4:	3358      	adds	r3, #88	; 0x58
 8025bd6:	2200      	movs	r2, #0
 8025bd8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025bda:	68fb      	ldr	r3, [r7, #12]
 8025bdc:	015a      	lsls	r2, r3, #5
 8025bde:	693b      	ldr	r3, [r7, #16]
 8025be0:	4413      	add	r3, r2
 8025be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025be6:	68db      	ldr	r3, [r3, #12]
 8025be8:	68fa      	ldr	r2, [r7, #12]
 8025bea:	0151      	lsls	r1, r2, #5
 8025bec:	693a      	ldr	r2, [r7, #16]
 8025bee:	440a      	add	r2, r1
 8025bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025bf4:	f043 0302 	orr.w	r3, r3, #2
 8025bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025bfa:	687b      	ldr	r3, [r7, #4]
 8025bfc:	681b      	ldr	r3, [r3, #0]
 8025bfe:	68fa      	ldr	r2, [r7, #12]
 8025c00:	b2d2      	uxtb	r2, r2
 8025c02:	4611      	mov	r1, r2
 8025c04:	4618      	mov	r0, r3
 8025c06:	f008 fae8 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8025c0a:	68fb      	ldr	r3, [r7, #12]
 8025c0c:	015a      	lsls	r2, r3, #5
 8025c0e:	693b      	ldr	r3, [r7, #16]
 8025c10:	4413      	add	r3, r2
 8025c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c16:	461a      	mov	r2, r3
 8025c18:	2340      	movs	r3, #64	; 0x40
 8025c1a:	6093      	str	r3, [r2, #8]
}
 8025c1c:	e2a6      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025c1e:	68fb      	ldr	r3, [r7, #12]
 8025c20:	015a      	lsls	r2, r3, #5
 8025c22:	693b      	ldr	r3, [r7, #16]
 8025c24:	4413      	add	r3, r2
 8025c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c2a:	689b      	ldr	r3, [r3, #8]
 8025c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025c34:	d122      	bne.n	8025c7c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025c36:	68fb      	ldr	r3, [r7, #12]
 8025c38:	015a      	lsls	r2, r3, #5
 8025c3a:	693b      	ldr	r3, [r7, #16]
 8025c3c:	4413      	add	r3, r2
 8025c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c42:	68db      	ldr	r3, [r3, #12]
 8025c44:	68fa      	ldr	r2, [r7, #12]
 8025c46:	0151      	lsls	r1, r2, #5
 8025c48:	693a      	ldr	r2, [r7, #16]
 8025c4a:	440a      	add	r2, r1
 8025c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025c50:	f043 0302 	orr.w	r3, r3, #2
 8025c54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025c56:	687b      	ldr	r3, [r7, #4]
 8025c58:	681b      	ldr	r3, [r3, #0]
 8025c5a:	68fa      	ldr	r2, [r7, #12]
 8025c5c:	b2d2      	uxtb	r2, r2
 8025c5e:	4611      	mov	r1, r2
 8025c60:	4618      	mov	r0, r3
 8025c62:	f008 faba 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025c66:	68fb      	ldr	r3, [r7, #12]
 8025c68:	015a      	lsls	r2, r3, #5
 8025c6a:	693b      	ldr	r3, [r7, #16]
 8025c6c:	4413      	add	r3, r2
 8025c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c72:	461a      	mov	r2, r3
 8025c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025c78:	6093      	str	r3, [r2, #8]
}
 8025c7a:	e277      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025c7c:	68fb      	ldr	r3, [r7, #12]
 8025c7e:	015a      	lsls	r2, r3, #5
 8025c80:	693b      	ldr	r3, [r7, #16]
 8025c82:	4413      	add	r3, r2
 8025c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c88:	689b      	ldr	r3, [r3, #8]
 8025c8a:	f003 0301 	and.w	r3, r3, #1
 8025c8e:	2b01      	cmp	r3, #1
 8025c90:	d135      	bne.n	8025cfe <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025c92:	6879      	ldr	r1, [r7, #4]
 8025c94:	68fa      	ldr	r2, [r7, #12]
 8025c96:	4613      	mov	r3, r2
 8025c98:	009b      	lsls	r3, r3, #2
 8025c9a:	4413      	add	r3, r2
 8025c9c:	00db      	lsls	r3, r3, #3
 8025c9e:	440b      	add	r3, r1
 8025ca0:	3358      	adds	r3, #88	; 0x58
 8025ca2:	2200      	movs	r2, #0
 8025ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025ca6:	68fb      	ldr	r3, [r7, #12]
 8025ca8:	015a      	lsls	r2, r3, #5
 8025caa:	693b      	ldr	r3, [r7, #16]
 8025cac:	4413      	add	r3, r2
 8025cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cb2:	68db      	ldr	r3, [r3, #12]
 8025cb4:	68fa      	ldr	r2, [r7, #12]
 8025cb6:	0151      	lsls	r1, r2, #5
 8025cb8:	693a      	ldr	r2, [r7, #16]
 8025cba:	440a      	add	r2, r1
 8025cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025cc0:	f043 0302 	orr.w	r3, r3, #2
 8025cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025cc6:	687b      	ldr	r3, [r7, #4]
 8025cc8:	681b      	ldr	r3, [r3, #0]
 8025cca:	68fa      	ldr	r2, [r7, #12]
 8025ccc:	b2d2      	uxtb	r2, r2
 8025cce:	4611      	mov	r1, r2
 8025cd0:	4618      	mov	r0, r3
 8025cd2:	f008 fa82 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025cd6:	68fb      	ldr	r3, [r7, #12]
 8025cd8:	015a      	lsls	r2, r3, #5
 8025cda:	693b      	ldr	r3, [r7, #16]
 8025cdc:	4413      	add	r3, r2
 8025cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ce2:	461a      	mov	r2, r3
 8025ce4:	2301      	movs	r3, #1
 8025ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025ce8:	6879      	ldr	r1, [r7, #4]
 8025cea:	68fa      	ldr	r2, [r7, #12]
 8025cec:	4613      	mov	r3, r2
 8025cee:	009b      	lsls	r3, r3, #2
 8025cf0:	4413      	add	r3, r2
 8025cf2:	00db      	lsls	r3, r3, #3
 8025cf4:	440b      	add	r3, r1
 8025cf6:	335d      	adds	r3, #93	; 0x5d
 8025cf8:	2201      	movs	r2, #1
 8025cfa:	701a      	strb	r2, [r3, #0]
}
 8025cfc:	e236      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	015a      	lsls	r2, r3, #5
 8025d02:	693b      	ldr	r3, [r7, #16]
 8025d04:	4413      	add	r3, r2
 8025d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d0a:	689b      	ldr	r3, [r3, #8]
 8025d0c:	f003 0308 	and.w	r3, r3, #8
 8025d10:	2b08      	cmp	r3, #8
 8025d12:	d12b      	bne.n	8025d6c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8025d14:	68fb      	ldr	r3, [r7, #12]
 8025d16:	015a      	lsls	r2, r3, #5
 8025d18:	693b      	ldr	r3, [r7, #16]
 8025d1a:	4413      	add	r3, r2
 8025d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d20:	461a      	mov	r2, r3
 8025d22:	2308      	movs	r3, #8
 8025d24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025d26:	68fb      	ldr	r3, [r7, #12]
 8025d28:	015a      	lsls	r2, r3, #5
 8025d2a:	693b      	ldr	r3, [r7, #16]
 8025d2c:	4413      	add	r3, r2
 8025d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d32:	68db      	ldr	r3, [r3, #12]
 8025d34:	68fa      	ldr	r2, [r7, #12]
 8025d36:	0151      	lsls	r1, r2, #5
 8025d38:	693a      	ldr	r2, [r7, #16]
 8025d3a:	440a      	add	r2, r1
 8025d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025d40:	f043 0302 	orr.w	r3, r3, #2
 8025d44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025d46:	687b      	ldr	r3, [r7, #4]
 8025d48:	681b      	ldr	r3, [r3, #0]
 8025d4a:	68fa      	ldr	r2, [r7, #12]
 8025d4c:	b2d2      	uxtb	r2, r2
 8025d4e:	4611      	mov	r1, r2
 8025d50:	4618      	mov	r0, r3
 8025d52:	f008 fa42 	bl	802e1da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8025d56:	6879      	ldr	r1, [r7, #4]
 8025d58:	68fa      	ldr	r2, [r7, #12]
 8025d5a:	4613      	mov	r3, r2
 8025d5c:	009b      	lsls	r3, r3, #2
 8025d5e:	4413      	add	r3, r2
 8025d60:	00db      	lsls	r3, r3, #3
 8025d62:	440b      	add	r3, r1
 8025d64:	335d      	adds	r3, #93	; 0x5d
 8025d66:	2205      	movs	r2, #5
 8025d68:	701a      	strb	r2, [r3, #0]
}
 8025d6a:	e1ff      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025d6c:	68fb      	ldr	r3, [r7, #12]
 8025d6e:	015a      	lsls	r2, r3, #5
 8025d70:	693b      	ldr	r3, [r7, #16]
 8025d72:	4413      	add	r3, r2
 8025d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d78:	689b      	ldr	r3, [r3, #8]
 8025d7a:	f003 0310 	and.w	r3, r3, #16
 8025d7e:	2b10      	cmp	r3, #16
 8025d80:	d155      	bne.n	8025e2e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025d82:	6879      	ldr	r1, [r7, #4]
 8025d84:	68fa      	ldr	r2, [r7, #12]
 8025d86:	4613      	mov	r3, r2
 8025d88:	009b      	lsls	r3, r3, #2
 8025d8a:	4413      	add	r3, r2
 8025d8c:	00db      	lsls	r3, r3, #3
 8025d8e:	440b      	add	r3, r1
 8025d90:	3358      	adds	r3, #88	; 0x58
 8025d92:	2200      	movs	r2, #0
 8025d94:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8025d96:	6879      	ldr	r1, [r7, #4]
 8025d98:	68fa      	ldr	r2, [r7, #12]
 8025d9a:	4613      	mov	r3, r2
 8025d9c:	009b      	lsls	r3, r3, #2
 8025d9e:	4413      	add	r3, r2
 8025da0:	00db      	lsls	r3, r3, #3
 8025da2:	440b      	add	r3, r1
 8025da4:	335d      	adds	r3, #93	; 0x5d
 8025da6:	2203      	movs	r2, #3
 8025da8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8025daa:	6879      	ldr	r1, [r7, #4]
 8025dac:	68fa      	ldr	r2, [r7, #12]
 8025dae:	4613      	mov	r3, r2
 8025db0:	009b      	lsls	r3, r3, #2
 8025db2:	4413      	add	r3, r2
 8025db4:	00db      	lsls	r3, r3, #3
 8025db6:	440b      	add	r3, r1
 8025db8:	333d      	adds	r3, #61	; 0x3d
 8025dba:	781b      	ldrb	r3, [r3, #0]
 8025dbc:	2b00      	cmp	r3, #0
 8025dbe:	d114      	bne.n	8025dea <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8025dc0:	6879      	ldr	r1, [r7, #4]
 8025dc2:	68fa      	ldr	r2, [r7, #12]
 8025dc4:	4613      	mov	r3, r2
 8025dc6:	009b      	lsls	r3, r3, #2
 8025dc8:	4413      	add	r3, r2
 8025dca:	00db      	lsls	r3, r3, #3
 8025dcc:	440b      	add	r3, r1
 8025dce:	333c      	adds	r3, #60	; 0x3c
 8025dd0:	781b      	ldrb	r3, [r3, #0]
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	d109      	bne.n	8025dea <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8025dd6:	6879      	ldr	r1, [r7, #4]
 8025dd8:	68fa      	ldr	r2, [r7, #12]
 8025dda:	4613      	mov	r3, r2
 8025ddc:	009b      	lsls	r3, r3, #2
 8025dde:	4413      	add	r3, r2
 8025de0:	00db      	lsls	r3, r3, #3
 8025de2:	440b      	add	r3, r1
 8025de4:	333d      	adds	r3, #61	; 0x3d
 8025de6:	2201      	movs	r2, #1
 8025de8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025dea:	68fb      	ldr	r3, [r7, #12]
 8025dec:	015a      	lsls	r2, r3, #5
 8025dee:	693b      	ldr	r3, [r7, #16]
 8025df0:	4413      	add	r3, r2
 8025df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025df6:	68db      	ldr	r3, [r3, #12]
 8025df8:	68fa      	ldr	r2, [r7, #12]
 8025dfa:	0151      	lsls	r1, r2, #5
 8025dfc:	693a      	ldr	r2, [r7, #16]
 8025dfe:	440a      	add	r2, r1
 8025e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025e04:	f043 0302 	orr.w	r3, r3, #2
 8025e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025e0a:	687b      	ldr	r3, [r7, #4]
 8025e0c:	681b      	ldr	r3, [r3, #0]
 8025e0e:	68fa      	ldr	r2, [r7, #12]
 8025e10:	b2d2      	uxtb	r2, r2
 8025e12:	4611      	mov	r1, r2
 8025e14:	4618      	mov	r0, r3
 8025e16:	f008 f9e0 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025e1a:	68fb      	ldr	r3, [r7, #12]
 8025e1c:	015a      	lsls	r2, r3, #5
 8025e1e:	693b      	ldr	r3, [r7, #16]
 8025e20:	4413      	add	r3, r2
 8025e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e26:	461a      	mov	r2, r3
 8025e28:	2310      	movs	r3, #16
 8025e2a:	6093      	str	r3, [r2, #8]
}
 8025e2c:	e19e      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025e2e:	68fb      	ldr	r3, [r7, #12]
 8025e30:	015a      	lsls	r2, r3, #5
 8025e32:	693b      	ldr	r3, [r7, #16]
 8025e34:	4413      	add	r3, r2
 8025e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e3a:	689b      	ldr	r3, [r3, #8]
 8025e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025e40:	2b80      	cmp	r3, #128	; 0x80
 8025e42:	d12b      	bne.n	8025e9c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025e44:	68fb      	ldr	r3, [r7, #12]
 8025e46:	015a      	lsls	r2, r3, #5
 8025e48:	693b      	ldr	r3, [r7, #16]
 8025e4a:	4413      	add	r3, r2
 8025e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e50:	68db      	ldr	r3, [r3, #12]
 8025e52:	68fa      	ldr	r2, [r7, #12]
 8025e54:	0151      	lsls	r1, r2, #5
 8025e56:	693a      	ldr	r2, [r7, #16]
 8025e58:	440a      	add	r2, r1
 8025e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025e5e:	f043 0302 	orr.w	r3, r3, #2
 8025e62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	681b      	ldr	r3, [r3, #0]
 8025e68:	68fa      	ldr	r2, [r7, #12]
 8025e6a:	b2d2      	uxtb	r2, r2
 8025e6c:	4611      	mov	r1, r2
 8025e6e:	4618      	mov	r0, r3
 8025e70:	f008 f9b3 	bl	802e1da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025e74:	6879      	ldr	r1, [r7, #4]
 8025e76:	68fa      	ldr	r2, [r7, #12]
 8025e78:	4613      	mov	r3, r2
 8025e7a:	009b      	lsls	r3, r3, #2
 8025e7c:	4413      	add	r3, r2
 8025e7e:	00db      	lsls	r3, r3, #3
 8025e80:	440b      	add	r3, r1
 8025e82:	335d      	adds	r3, #93	; 0x5d
 8025e84:	2206      	movs	r2, #6
 8025e86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025e88:	68fb      	ldr	r3, [r7, #12]
 8025e8a:	015a      	lsls	r2, r3, #5
 8025e8c:	693b      	ldr	r3, [r7, #16]
 8025e8e:	4413      	add	r3, r2
 8025e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e94:	461a      	mov	r2, r3
 8025e96:	2380      	movs	r3, #128	; 0x80
 8025e98:	6093      	str	r3, [r2, #8]
}
 8025e9a:	e167      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025e9c:	68fb      	ldr	r3, [r7, #12]
 8025e9e:	015a      	lsls	r2, r3, #5
 8025ea0:	693b      	ldr	r3, [r7, #16]
 8025ea2:	4413      	add	r3, r2
 8025ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ea8:	689b      	ldr	r3, [r3, #8]
 8025eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025eb2:	d135      	bne.n	8025f20 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8025eb4:	68fb      	ldr	r3, [r7, #12]
 8025eb6:	015a      	lsls	r2, r3, #5
 8025eb8:	693b      	ldr	r3, [r7, #16]
 8025eba:	4413      	add	r3, r2
 8025ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ec0:	68db      	ldr	r3, [r3, #12]
 8025ec2:	68fa      	ldr	r2, [r7, #12]
 8025ec4:	0151      	lsls	r1, r2, #5
 8025ec6:	693a      	ldr	r2, [r7, #16]
 8025ec8:	440a      	add	r2, r1
 8025eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025ece:	f043 0302 	orr.w	r3, r3, #2
 8025ed2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ed4:	687b      	ldr	r3, [r7, #4]
 8025ed6:	681b      	ldr	r3, [r3, #0]
 8025ed8:	68fa      	ldr	r2, [r7, #12]
 8025eda:	b2d2      	uxtb	r2, r2
 8025edc:	4611      	mov	r1, r2
 8025ede:	4618      	mov	r0, r3
 8025ee0:	f008 f97b 	bl	802e1da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025ee4:	68fb      	ldr	r3, [r7, #12]
 8025ee6:	015a      	lsls	r2, r3, #5
 8025ee8:	693b      	ldr	r3, [r7, #16]
 8025eea:	4413      	add	r3, r2
 8025eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ef0:	461a      	mov	r2, r3
 8025ef2:	2310      	movs	r3, #16
 8025ef4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025ef6:	68fb      	ldr	r3, [r7, #12]
 8025ef8:	015a      	lsls	r2, r3, #5
 8025efa:	693b      	ldr	r3, [r7, #16]
 8025efc:	4413      	add	r3, r2
 8025efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f02:	461a      	mov	r2, r3
 8025f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025f0a:	6879      	ldr	r1, [r7, #4]
 8025f0c:	68fa      	ldr	r2, [r7, #12]
 8025f0e:	4613      	mov	r3, r2
 8025f10:	009b      	lsls	r3, r3, #2
 8025f12:	4413      	add	r3, r2
 8025f14:	00db      	lsls	r3, r3, #3
 8025f16:	440b      	add	r3, r1
 8025f18:	335d      	adds	r3, #93	; 0x5d
 8025f1a:	2208      	movs	r2, #8
 8025f1c:	701a      	strb	r2, [r3, #0]
}
 8025f1e:	e125      	b.n	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025f20:	68fb      	ldr	r3, [r7, #12]
 8025f22:	015a      	lsls	r2, r3, #5
 8025f24:	693b      	ldr	r3, [r7, #16]
 8025f26:	4413      	add	r3, r2
 8025f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f2c:	689b      	ldr	r3, [r3, #8]
 8025f2e:	f003 0302 	and.w	r3, r3, #2
 8025f32:	2b02      	cmp	r3, #2
 8025f34:	f040 811a 	bne.w	802616c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8025f38:	68fb      	ldr	r3, [r7, #12]
 8025f3a:	015a      	lsls	r2, r3, #5
 8025f3c:	693b      	ldr	r3, [r7, #16]
 8025f3e:	4413      	add	r3, r2
 8025f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f44:	68db      	ldr	r3, [r3, #12]
 8025f46:	68fa      	ldr	r2, [r7, #12]
 8025f48:	0151      	lsls	r1, r2, #5
 8025f4a:	693a      	ldr	r2, [r7, #16]
 8025f4c:	440a      	add	r2, r1
 8025f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025f52:	f023 0302 	bic.w	r3, r3, #2
 8025f56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025f58:	6879      	ldr	r1, [r7, #4]
 8025f5a:	68fa      	ldr	r2, [r7, #12]
 8025f5c:	4613      	mov	r3, r2
 8025f5e:	009b      	lsls	r3, r3, #2
 8025f60:	4413      	add	r3, r2
 8025f62:	00db      	lsls	r3, r3, #3
 8025f64:	440b      	add	r3, r1
 8025f66:	335d      	adds	r3, #93	; 0x5d
 8025f68:	781b      	ldrb	r3, [r3, #0]
 8025f6a:	2b01      	cmp	r3, #1
 8025f6c:	d137      	bne.n	8025fde <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8025f6e:	6879      	ldr	r1, [r7, #4]
 8025f70:	68fa      	ldr	r2, [r7, #12]
 8025f72:	4613      	mov	r3, r2
 8025f74:	009b      	lsls	r3, r3, #2
 8025f76:	4413      	add	r3, r2
 8025f78:	00db      	lsls	r3, r3, #3
 8025f7a:	440b      	add	r3, r1
 8025f7c:	335c      	adds	r3, #92	; 0x5c
 8025f7e:	2201      	movs	r2, #1
 8025f80:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8025f82:	6879      	ldr	r1, [r7, #4]
 8025f84:	68fa      	ldr	r2, [r7, #12]
 8025f86:	4613      	mov	r3, r2
 8025f88:	009b      	lsls	r3, r3, #2
 8025f8a:	4413      	add	r3, r2
 8025f8c:	00db      	lsls	r3, r3, #3
 8025f8e:	440b      	add	r3, r1
 8025f90:	333f      	adds	r3, #63	; 0x3f
 8025f92:	781b      	ldrb	r3, [r3, #0]
 8025f94:	2b02      	cmp	r3, #2
 8025f96:	d00b      	beq.n	8025fb0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8025f98:	6879      	ldr	r1, [r7, #4]
 8025f9a:	68fa      	ldr	r2, [r7, #12]
 8025f9c:	4613      	mov	r3, r2
 8025f9e:	009b      	lsls	r3, r3, #2
 8025fa0:	4413      	add	r3, r2
 8025fa2:	00db      	lsls	r3, r3, #3
 8025fa4:	440b      	add	r3, r1
 8025fa6:	333f      	adds	r3, #63	; 0x3f
 8025fa8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8025faa:	2b03      	cmp	r3, #3
 8025fac:	f040 80c5 	bne.w	802613a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8025fb0:	6879      	ldr	r1, [r7, #4]
 8025fb2:	68fa      	ldr	r2, [r7, #12]
 8025fb4:	4613      	mov	r3, r2
 8025fb6:	009b      	lsls	r3, r3, #2
 8025fb8:	4413      	add	r3, r2
 8025fba:	00db      	lsls	r3, r3, #3
 8025fbc:	440b      	add	r3, r1
 8025fbe:	3351      	adds	r3, #81	; 0x51
 8025fc0:	781b      	ldrb	r3, [r3, #0]
 8025fc2:	f083 0301 	eor.w	r3, r3, #1
 8025fc6:	b2d8      	uxtb	r0, r3
 8025fc8:	6879      	ldr	r1, [r7, #4]
 8025fca:	68fa      	ldr	r2, [r7, #12]
 8025fcc:	4613      	mov	r3, r2
 8025fce:	009b      	lsls	r3, r3, #2
 8025fd0:	4413      	add	r3, r2
 8025fd2:	00db      	lsls	r3, r3, #3
 8025fd4:	440b      	add	r3, r1
 8025fd6:	3351      	adds	r3, #81	; 0x51
 8025fd8:	4602      	mov	r2, r0
 8025fda:	701a      	strb	r2, [r3, #0]
 8025fdc:	e0ad      	b.n	802613a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025fde:	6879      	ldr	r1, [r7, #4]
 8025fe0:	68fa      	ldr	r2, [r7, #12]
 8025fe2:	4613      	mov	r3, r2
 8025fe4:	009b      	lsls	r3, r3, #2
 8025fe6:	4413      	add	r3, r2
 8025fe8:	00db      	lsls	r3, r3, #3
 8025fea:	440b      	add	r3, r1
 8025fec:	335d      	adds	r3, #93	; 0x5d
 8025fee:	781b      	ldrb	r3, [r3, #0]
 8025ff0:	2b03      	cmp	r3, #3
 8025ff2:	d10a      	bne.n	802600a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025ff4:	6879      	ldr	r1, [r7, #4]
 8025ff6:	68fa      	ldr	r2, [r7, #12]
 8025ff8:	4613      	mov	r3, r2
 8025ffa:	009b      	lsls	r3, r3, #2
 8025ffc:	4413      	add	r3, r2
 8025ffe:	00db      	lsls	r3, r3, #3
 8026000:	440b      	add	r3, r1
 8026002:	335c      	adds	r3, #92	; 0x5c
 8026004:	2202      	movs	r2, #2
 8026006:	701a      	strb	r2, [r3, #0]
 8026008:	e097      	b.n	802613a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 802600a:	6879      	ldr	r1, [r7, #4]
 802600c:	68fa      	ldr	r2, [r7, #12]
 802600e:	4613      	mov	r3, r2
 8026010:	009b      	lsls	r3, r3, #2
 8026012:	4413      	add	r3, r2
 8026014:	00db      	lsls	r3, r3, #3
 8026016:	440b      	add	r3, r1
 8026018:	335d      	adds	r3, #93	; 0x5d
 802601a:	781b      	ldrb	r3, [r3, #0]
 802601c:	2b04      	cmp	r3, #4
 802601e:	d10a      	bne.n	8026036 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8026020:	6879      	ldr	r1, [r7, #4]
 8026022:	68fa      	ldr	r2, [r7, #12]
 8026024:	4613      	mov	r3, r2
 8026026:	009b      	lsls	r3, r3, #2
 8026028:	4413      	add	r3, r2
 802602a:	00db      	lsls	r3, r3, #3
 802602c:	440b      	add	r3, r1
 802602e:	335c      	adds	r3, #92	; 0x5c
 8026030:	2202      	movs	r2, #2
 8026032:	701a      	strb	r2, [r3, #0]
 8026034:	e081      	b.n	802613a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8026036:	6879      	ldr	r1, [r7, #4]
 8026038:	68fa      	ldr	r2, [r7, #12]
 802603a:	4613      	mov	r3, r2
 802603c:	009b      	lsls	r3, r3, #2
 802603e:	4413      	add	r3, r2
 8026040:	00db      	lsls	r3, r3, #3
 8026042:	440b      	add	r3, r1
 8026044:	335d      	adds	r3, #93	; 0x5d
 8026046:	781b      	ldrb	r3, [r3, #0]
 8026048:	2b05      	cmp	r3, #5
 802604a:	d10a      	bne.n	8026062 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 802604c:	6879      	ldr	r1, [r7, #4]
 802604e:	68fa      	ldr	r2, [r7, #12]
 8026050:	4613      	mov	r3, r2
 8026052:	009b      	lsls	r3, r3, #2
 8026054:	4413      	add	r3, r2
 8026056:	00db      	lsls	r3, r3, #3
 8026058:	440b      	add	r3, r1
 802605a:	335c      	adds	r3, #92	; 0x5c
 802605c:	2205      	movs	r2, #5
 802605e:	701a      	strb	r2, [r3, #0]
 8026060:	e06b      	b.n	802613a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8026062:	6879      	ldr	r1, [r7, #4]
 8026064:	68fa      	ldr	r2, [r7, #12]
 8026066:	4613      	mov	r3, r2
 8026068:	009b      	lsls	r3, r3, #2
 802606a:	4413      	add	r3, r2
 802606c:	00db      	lsls	r3, r3, #3
 802606e:	440b      	add	r3, r1
 8026070:	335d      	adds	r3, #93	; 0x5d
 8026072:	781b      	ldrb	r3, [r3, #0]
 8026074:	2b06      	cmp	r3, #6
 8026076:	d00a      	beq.n	802608e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8026078:	6879      	ldr	r1, [r7, #4]
 802607a:	68fa      	ldr	r2, [r7, #12]
 802607c:	4613      	mov	r3, r2
 802607e:	009b      	lsls	r3, r3, #2
 8026080:	4413      	add	r3, r2
 8026082:	00db      	lsls	r3, r3, #3
 8026084:	440b      	add	r3, r1
 8026086:	335d      	adds	r3, #93	; 0x5d
 8026088:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802608a:	2b08      	cmp	r3, #8
 802608c:	d155      	bne.n	802613a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 802608e:	6879      	ldr	r1, [r7, #4]
 8026090:	68fa      	ldr	r2, [r7, #12]
 8026092:	4613      	mov	r3, r2
 8026094:	009b      	lsls	r3, r3, #2
 8026096:	4413      	add	r3, r2
 8026098:	00db      	lsls	r3, r3, #3
 802609a:	440b      	add	r3, r1
 802609c:	3358      	adds	r3, #88	; 0x58
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	1c59      	adds	r1, r3, #1
 80260a2:	6878      	ldr	r0, [r7, #4]
 80260a4:	68fa      	ldr	r2, [r7, #12]
 80260a6:	4613      	mov	r3, r2
 80260a8:	009b      	lsls	r3, r3, #2
 80260aa:	4413      	add	r3, r2
 80260ac:	00db      	lsls	r3, r3, #3
 80260ae:	4403      	add	r3, r0
 80260b0:	3358      	adds	r3, #88	; 0x58
 80260b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80260b4:	6879      	ldr	r1, [r7, #4]
 80260b6:	68fa      	ldr	r2, [r7, #12]
 80260b8:	4613      	mov	r3, r2
 80260ba:	009b      	lsls	r3, r3, #2
 80260bc:	4413      	add	r3, r2
 80260be:	00db      	lsls	r3, r3, #3
 80260c0:	440b      	add	r3, r1
 80260c2:	3358      	adds	r3, #88	; 0x58
 80260c4:	681b      	ldr	r3, [r3, #0]
 80260c6:	2b03      	cmp	r3, #3
 80260c8:	d914      	bls.n	80260f4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80260ca:	6879      	ldr	r1, [r7, #4]
 80260cc:	68fa      	ldr	r2, [r7, #12]
 80260ce:	4613      	mov	r3, r2
 80260d0:	009b      	lsls	r3, r3, #2
 80260d2:	4413      	add	r3, r2
 80260d4:	00db      	lsls	r3, r3, #3
 80260d6:	440b      	add	r3, r1
 80260d8:	3358      	adds	r3, #88	; 0x58
 80260da:	2200      	movs	r2, #0
 80260dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80260de:	6879      	ldr	r1, [r7, #4]
 80260e0:	68fa      	ldr	r2, [r7, #12]
 80260e2:	4613      	mov	r3, r2
 80260e4:	009b      	lsls	r3, r3, #2
 80260e6:	4413      	add	r3, r2
 80260e8:	00db      	lsls	r3, r3, #3
 80260ea:	440b      	add	r3, r1
 80260ec:	335c      	adds	r3, #92	; 0x5c
 80260ee:	2204      	movs	r2, #4
 80260f0:	701a      	strb	r2, [r3, #0]
 80260f2:	e009      	b.n	8026108 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80260f4:	6879      	ldr	r1, [r7, #4]
 80260f6:	68fa      	ldr	r2, [r7, #12]
 80260f8:	4613      	mov	r3, r2
 80260fa:	009b      	lsls	r3, r3, #2
 80260fc:	4413      	add	r3, r2
 80260fe:	00db      	lsls	r3, r3, #3
 8026100:	440b      	add	r3, r1
 8026102:	335c      	adds	r3, #92	; 0x5c
 8026104:	2202      	movs	r2, #2
 8026106:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8026108:	68fb      	ldr	r3, [r7, #12]
 802610a:	015a      	lsls	r2, r3, #5
 802610c:	693b      	ldr	r3, [r7, #16]
 802610e:	4413      	add	r3, r2
 8026110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026114:	681b      	ldr	r3, [r3, #0]
 8026116:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8026118:	68bb      	ldr	r3, [r7, #8]
 802611a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802611e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026120:	68bb      	ldr	r3, [r7, #8]
 8026122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026126:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8026128:	68fb      	ldr	r3, [r7, #12]
 802612a:	015a      	lsls	r2, r3, #5
 802612c:	693b      	ldr	r3, [r7, #16]
 802612e:	4413      	add	r3, r2
 8026130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026134:	461a      	mov	r2, r3
 8026136:	68bb      	ldr	r3, [r7, #8]
 8026138:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 802613a:	68fb      	ldr	r3, [r7, #12]
 802613c:	015a      	lsls	r2, r3, #5
 802613e:	693b      	ldr	r3, [r7, #16]
 8026140:	4413      	add	r3, r2
 8026142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026146:	461a      	mov	r2, r3
 8026148:	2302      	movs	r3, #2
 802614a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 802614c:	68fb      	ldr	r3, [r7, #12]
 802614e:	b2d8      	uxtb	r0, r3
 8026150:	6879      	ldr	r1, [r7, #4]
 8026152:	68fa      	ldr	r2, [r7, #12]
 8026154:	4613      	mov	r3, r2
 8026156:	009b      	lsls	r3, r3, #2
 8026158:	4413      	add	r3, r2
 802615a:	00db      	lsls	r3, r3, #3
 802615c:	440b      	add	r3, r1
 802615e:	335c      	adds	r3, #92	; 0x5c
 8026160:	781b      	ldrb	r3, [r3, #0]
 8026162:	461a      	mov	r2, r3
 8026164:	4601      	mov	r1, r0
 8026166:	6878      	ldr	r0, [r7, #4]
 8026168:	f00e fadc 	bl	8034724 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802616c:	bf00      	nop
 802616e:	3718      	adds	r7, #24
 8026170:	46bd      	mov	sp, r7
 8026172:	bd80      	pop	{r7, pc}

08026174 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026174:	b580      	push	{r7, lr}
 8026176:	b08a      	sub	sp, #40	; 0x28
 8026178:	af00      	add	r7, sp, #0
 802617a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	681b      	ldr	r3, [r3, #0]
 8026180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026184:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8026186:	687b      	ldr	r3, [r7, #4]
 8026188:	681b      	ldr	r3, [r3, #0]
 802618a:	6a1b      	ldr	r3, [r3, #32]
 802618c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 802618e:	69fb      	ldr	r3, [r7, #28]
 8026190:	f003 030f 	and.w	r3, r3, #15
 8026194:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8026196:	69fb      	ldr	r3, [r7, #28]
 8026198:	0c5b      	lsrs	r3, r3, #17
 802619a:	f003 030f 	and.w	r3, r3, #15
 802619e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80261a0:	69fb      	ldr	r3, [r7, #28]
 80261a2:	091b      	lsrs	r3, r3, #4
 80261a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80261a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80261aa:	697b      	ldr	r3, [r7, #20]
 80261ac:	2b02      	cmp	r3, #2
 80261ae:	d003      	beq.n	80261b8 <HCD_RXQLVL_IRQHandler+0x44>
 80261b0:	2b05      	cmp	r3, #5
 80261b2:	f000 8082 	beq.w	80262ba <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80261b6:	e083      	b.n	80262c0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80261b8:	693b      	ldr	r3, [r7, #16]
 80261ba:	2b00      	cmp	r3, #0
 80261bc:	d07f      	beq.n	80262be <HCD_RXQLVL_IRQHandler+0x14a>
 80261be:	6879      	ldr	r1, [r7, #4]
 80261c0:	69ba      	ldr	r2, [r7, #24]
 80261c2:	4613      	mov	r3, r2
 80261c4:	009b      	lsls	r3, r3, #2
 80261c6:	4413      	add	r3, r2
 80261c8:	00db      	lsls	r3, r3, #3
 80261ca:	440b      	add	r3, r1
 80261cc:	3344      	adds	r3, #68	; 0x44
 80261ce:	681b      	ldr	r3, [r3, #0]
 80261d0:	2b00      	cmp	r3, #0
 80261d2:	d074      	beq.n	80262be <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	6818      	ldr	r0, [r3, #0]
 80261d8:	6879      	ldr	r1, [r7, #4]
 80261da:	69ba      	ldr	r2, [r7, #24]
 80261dc:	4613      	mov	r3, r2
 80261de:	009b      	lsls	r3, r3, #2
 80261e0:	4413      	add	r3, r2
 80261e2:	00db      	lsls	r3, r3, #3
 80261e4:	440b      	add	r3, r1
 80261e6:	3344      	adds	r3, #68	; 0x44
 80261e8:	681b      	ldr	r3, [r3, #0]
 80261ea:	693a      	ldr	r2, [r7, #16]
 80261ec:	b292      	uxth	r2, r2
 80261ee:	4619      	mov	r1, r3
 80261f0:	f007 f954 	bl	802d49c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80261f4:	6879      	ldr	r1, [r7, #4]
 80261f6:	69ba      	ldr	r2, [r7, #24]
 80261f8:	4613      	mov	r3, r2
 80261fa:	009b      	lsls	r3, r3, #2
 80261fc:	4413      	add	r3, r2
 80261fe:	00db      	lsls	r3, r3, #3
 8026200:	440b      	add	r3, r1
 8026202:	3344      	adds	r3, #68	; 0x44
 8026204:	681a      	ldr	r2, [r3, #0]
 8026206:	693b      	ldr	r3, [r7, #16]
 8026208:	18d1      	adds	r1, r2, r3
 802620a:	6878      	ldr	r0, [r7, #4]
 802620c:	69ba      	ldr	r2, [r7, #24]
 802620e:	4613      	mov	r3, r2
 8026210:	009b      	lsls	r3, r3, #2
 8026212:	4413      	add	r3, r2
 8026214:	00db      	lsls	r3, r3, #3
 8026216:	4403      	add	r3, r0
 8026218:	3344      	adds	r3, #68	; 0x44
 802621a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 802621c:	6879      	ldr	r1, [r7, #4]
 802621e:	69ba      	ldr	r2, [r7, #24]
 8026220:	4613      	mov	r3, r2
 8026222:	009b      	lsls	r3, r3, #2
 8026224:	4413      	add	r3, r2
 8026226:	00db      	lsls	r3, r3, #3
 8026228:	440b      	add	r3, r1
 802622a:	334c      	adds	r3, #76	; 0x4c
 802622c:	681a      	ldr	r2, [r3, #0]
 802622e:	693b      	ldr	r3, [r7, #16]
 8026230:	18d1      	adds	r1, r2, r3
 8026232:	6878      	ldr	r0, [r7, #4]
 8026234:	69ba      	ldr	r2, [r7, #24]
 8026236:	4613      	mov	r3, r2
 8026238:	009b      	lsls	r3, r3, #2
 802623a:	4413      	add	r3, r2
 802623c:	00db      	lsls	r3, r3, #3
 802623e:	4403      	add	r3, r0
 8026240:	334c      	adds	r3, #76	; 0x4c
 8026242:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8026244:	69bb      	ldr	r3, [r7, #24]
 8026246:	015a      	lsls	r2, r3, #5
 8026248:	6a3b      	ldr	r3, [r7, #32]
 802624a:	4413      	add	r3, r2
 802624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026250:	691a      	ldr	r2, [r3, #16]
 8026252:	4b1d      	ldr	r3, [pc, #116]	; (80262c8 <HCD_RXQLVL_IRQHandler+0x154>)
 8026254:	4013      	ands	r3, r2
 8026256:	2b00      	cmp	r3, #0
 8026258:	d031      	beq.n	80262be <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 802625a:	69bb      	ldr	r3, [r7, #24]
 802625c:	015a      	lsls	r2, r3, #5
 802625e:	6a3b      	ldr	r3, [r7, #32]
 8026260:	4413      	add	r3, r2
 8026262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026266:	681b      	ldr	r3, [r3, #0]
 8026268:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802626a:	68fb      	ldr	r3, [r7, #12]
 802626c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026270:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026272:	68fb      	ldr	r3, [r7, #12]
 8026274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026278:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 802627a:	69bb      	ldr	r3, [r7, #24]
 802627c:	015a      	lsls	r2, r3, #5
 802627e:	6a3b      	ldr	r3, [r7, #32]
 8026280:	4413      	add	r3, r2
 8026282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026286:	461a      	mov	r2, r3
 8026288:	68fb      	ldr	r3, [r7, #12]
 802628a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 802628c:	6879      	ldr	r1, [r7, #4]
 802628e:	69ba      	ldr	r2, [r7, #24]
 8026290:	4613      	mov	r3, r2
 8026292:	009b      	lsls	r3, r3, #2
 8026294:	4413      	add	r3, r2
 8026296:	00db      	lsls	r3, r3, #3
 8026298:	440b      	add	r3, r1
 802629a:	3350      	adds	r3, #80	; 0x50
 802629c:	781b      	ldrb	r3, [r3, #0]
 802629e:	f083 0301 	eor.w	r3, r3, #1
 80262a2:	b2d8      	uxtb	r0, r3
 80262a4:	6879      	ldr	r1, [r7, #4]
 80262a6:	69ba      	ldr	r2, [r7, #24]
 80262a8:	4613      	mov	r3, r2
 80262aa:	009b      	lsls	r3, r3, #2
 80262ac:	4413      	add	r3, r2
 80262ae:	00db      	lsls	r3, r3, #3
 80262b0:	440b      	add	r3, r1
 80262b2:	3350      	adds	r3, #80	; 0x50
 80262b4:	4602      	mov	r2, r0
 80262b6:	701a      	strb	r2, [r3, #0]
      break;
 80262b8:	e001      	b.n	80262be <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80262ba:	bf00      	nop
 80262bc:	e000      	b.n	80262c0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80262be:	bf00      	nop
  }
}
 80262c0:	bf00      	nop
 80262c2:	3728      	adds	r7, #40	; 0x28
 80262c4:	46bd      	mov	sp, r7
 80262c6:	bd80      	pop	{r7, pc}
 80262c8:	1ff80000 	.word	0x1ff80000

080262cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80262cc:	b580      	push	{r7, lr}
 80262ce:	b086      	sub	sp, #24
 80262d0:	af00      	add	r7, sp, #0
 80262d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80262d4:	687b      	ldr	r3, [r7, #4]
 80262d6:	681b      	ldr	r3, [r3, #0]
 80262d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80262da:	697b      	ldr	r3, [r7, #20]
 80262dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80262de:	693b      	ldr	r3, [r7, #16]
 80262e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80262e4:	681b      	ldr	r3, [r3, #0]
 80262e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80262e8:	693b      	ldr	r3, [r7, #16]
 80262ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80262ee:	681b      	ldr	r3, [r3, #0]
 80262f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80262f2:	68bb      	ldr	r3, [r7, #8]
 80262f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80262f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80262fa:	68fb      	ldr	r3, [r7, #12]
 80262fc:	f003 0302 	and.w	r3, r3, #2
 8026300:	2b02      	cmp	r3, #2
 8026302:	d10b      	bne.n	802631c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8026304:	68fb      	ldr	r3, [r7, #12]
 8026306:	f003 0301 	and.w	r3, r3, #1
 802630a:	2b01      	cmp	r3, #1
 802630c:	d102      	bne.n	8026314 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 802630e:	6878      	ldr	r0, [r7, #4]
 8026310:	f00e f9ec 	bl	80346ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8026314:	68bb      	ldr	r3, [r7, #8]
 8026316:	f043 0302 	orr.w	r3, r3, #2
 802631a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 802631c:	68fb      	ldr	r3, [r7, #12]
 802631e:	f003 0308 	and.w	r3, r3, #8
 8026322:	2b08      	cmp	r3, #8
 8026324:	d132      	bne.n	802638c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026326:	68bb      	ldr	r3, [r7, #8]
 8026328:	f043 0308 	orr.w	r3, r3, #8
 802632c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 802632e:	68fb      	ldr	r3, [r7, #12]
 8026330:	f003 0304 	and.w	r3, r3, #4
 8026334:	2b04      	cmp	r3, #4
 8026336:	d126      	bne.n	8026386 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8026338:	687b      	ldr	r3, [r7, #4]
 802633a:	699b      	ldr	r3, [r3, #24]
 802633c:	2b02      	cmp	r3, #2
 802633e:	d113      	bne.n	8026368 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8026340:	68fb      	ldr	r3, [r7, #12]
 8026342:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802634a:	d106      	bne.n	802635a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 802634c:	687b      	ldr	r3, [r7, #4]
 802634e:	681b      	ldr	r3, [r3, #0]
 8026350:	2102      	movs	r1, #2
 8026352:	4618      	mov	r0, r3
 8026354:	f007 fc1a 	bl	802db8c <USB_InitFSLSPClkSel>
 8026358:	e011      	b.n	802637e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 802635a:	687b      	ldr	r3, [r7, #4]
 802635c:	681b      	ldr	r3, [r3, #0]
 802635e:	2101      	movs	r1, #1
 8026360:	4618      	mov	r0, r3
 8026362:	f007 fc13 	bl	802db8c <USB_InitFSLSPClkSel>
 8026366:	e00a      	b.n	802637e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8026368:	687b      	ldr	r3, [r7, #4]
 802636a:	68db      	ldr	r3, [r3, #12]
 802636c:	2b01      	cmp	r3, #1
 802636e:	d106      	bne.n	802637e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8026370:	693b      	ldr	r3, [r7, #16]
 8026372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026376:	461a      	mov	r2, r3
 8026378:	f64e 2360 	movw	r3, #60000	; 0xea60
 802637c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 802637e:	6878      	ldr	r0, [r7, #4]
 8026380:	f00e f9de 	bl	8034740 <HAL_HCD_PortEnabled_Callback>
 8026384:	e002      	b.n	802638c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8026386:	6878      	ldr	r0, [r7, #4]
 8026388:	f00e f9e8 	bl	803475c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 802638c:	68fb      	ldr	r3, [r7, #12]
 802638e:	f003 0320 	and.w	r3, r3, #32
 8026392:	2b20      	cmp	r3, #32
 8026394:	d103      	bne.n	802639e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8026396:	68bb      	ldr	r3, [r7, #8]
 8026398:	f043 0320 	orr.w	r3, r3, #32
 802639c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 802639e:	693b      	ldr	r3, [r7, #16]
 80263a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80263a4:	461a      	mov	r2, r3
 80263a6:	68bb      	ldr	r3, [r7, #8]
 80263a8:	6013      	str	r3, [r2, #0]
}
 80263aa:	bf00      	nop
 80263ac:	3718      	adds	r7, #24
 80263ae:	46bd      	mov	sp, r7
 80263b0:	bd80      	pop	{r7, pc}
	...

080263b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80263b4:	b580      	push	{r7, lr}
 80263b6:	b084      	sub	sp, #16
 80263b8:	af00      	add	r7, sp, #0
 80263ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80263bc:	687b      	ldr	r3, [r7, #4]
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d101      	bne.n	80263c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80263c2:	2301      	movs	r3, #1
 80263c4:	e11f      	b.n	8026606 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80263cc:	b2db      	uxtb	r3, r3
 80263ce:	2b00      	cmp	r3, #0
 80263d0:	d106      	bne.n	80263e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	2200      	movs	r2, #0
 80263d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80263da:	6878      	ldr	r0, [r7, #4]
 80263dc:	f7fb fd1a 	bl	8021e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80263e0:	687b      	ldr	r3, [r7, #4]
 80263e2:	2224      	movs	r2, #36	; 0x24
 80263e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80263e8:	687b      	ldr	r3, [r7, #4]
 80263ea:	681b      	ldr	r3, [r3, #0]
 80263ec:	681a      	ldr	r2, [r3, #0]
 80263ee:	687b      	ldr	r3, [r7, #4]
 80263f0:	681b      	ldr	r3, [r3, #0]
 80263f2:	f022 0201 	bic.w	r2, r2, #1
 80263f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80263f8:	687b      	ldr	r3, [r7, #4]
 80263fa:	681b      	ldr	r3, [r3, #0]
 80263fc:	681a      	ldr	r2, [r3, #0]
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	681b      	ldr	r3, [r3, #0]
 8026402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026408:	687b      	ldr	r3, [r7, #4]
 802640a:	681b      	ldr	r3, [r3, #0]
 802640c:	681a      	ldr	r2, [r3, #0]
 802640e:	687b      	ldr	r3, [r7, #4]
 8026410:	681b      	ldr	r3, [r3, #0]
 8026412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026418:	f001 fee4 	bl	80281e4 <HAL_RCC_GetPCLK1Freq>
 802641c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802641e:	687b      	ldr	r3, [r7, #4]
 8026420:	685b      	ldr	r3, [r3, #4]
 8026422:	4a7b      	ldr	r2, [pc, #492]	; (8026610 <HAL_I2C_Init+0x25c>)
 8026424:	4293      	cmp	r3, r2
 8026426:	d807      	bhi.n	8026438 <HAL_I2C_Init+0x84>
 8026428:	68fb      	ldr	r3, [r7, #12]
 802642a:	4a7a      	ldr	r2, [pc, #488]	; (8026614 <HAL_I2C_Init+0x260>)
 802642c:	4293      	cmp	r3, r2
 802642e:	bf94      	ite	ls
 8026430:	2301      	movls	r3, #1
 8026432:	2300      	movhi	r3, #0
 8026434:	b2db      	uxtb	r3, r3
 8026436:	e006      	b.n	8026446 <HAL_I2C_Init+0x92>
 8026438:	68fb      	ldr	r3, [r7, #12]
 802643a:	4a77      	ldr	r2, [pc, #476]	; (8026618 <HAL_I2C_Init+0x264>)
 802643c:	4293      	cmp	r3, r2
 802643e:	bf94      	ite	ls
 8026440:	2301      	movls	r3, #1
 8026442:	2300      	movhi	r3, #0
 8026444:	b2db      	uxtb	r3, r3
 8026446:	2b00      	cmp	r3, #0
 8026448:	d001      	beq.n	802644e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802644a:	2301      	movs	r3, #1
 802644c:	e0db      	b.n	8026606 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	4a72      	ldr	r2, [pc, #456]	; (802661c <HAL_I2C_Init+0x268>)
 8026452:	fba2 2303 	umull	r2, r3, r2, r3
 8026456:	0c9b      	lsrs	r3, r3, #18
 8026458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802645a:	687b      	ldr	r3, [r7, #4]
 802645c:	681b      	ldr	r3, [r3, #0]
 802645e:	685b      	ldr	r3, [r3, #4]
 8026460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	681b      	ldr	r3, [r3, #0]
 8026468:	68ba      	ldr	r2, [r7, #8]
 802646a:	430a      	orrs	r2, r1
 802646c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802646e:	687b      	ldr	r3, [r7, #4]
 8026470:	681b      	ldr	r3, [r3, #0]
 8026472:	6a1b      	ldr	r3, [r3, #32]
 8026474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	685b      	ldr	r3, [r3, #4]
 802647c:	4a64      	ldr	r2, [pc, #400]	; (8026610 <HAL_I2C_Init+0x25c>)
 802647e:	4293      	cmp	r3, r2
 8026480:	d802      	bhi.n	8026488 <HAL_I2C_Init+0xd4>
 8026482:	68bb      	ldr	r3, [r7, #8]
 8026484:	3301      	adds	r3, #1
 8026486:	e009      	b.n	802649c <HAL_I2C_Init+0xe8>
 8026488:	68bb      	ldr	r3, [r7, #8]
 802648a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802648e:	fb02 f303 	mul.w	r3, r2, r3
 8026492:	4a63      	ldr	r2, [pc, #396]	; (8026620 <HAL_I2C_Init+0x26c>)
 8026494:	fba2 2303 	umull	r2, r3, r2, r3
 8026498:	099b      	lsrs	r3, r3, #6
 802649a:	3301      	adds	r3, #1
 802649c:	687a      	ldr	r2, [r7, #4]
 802649e:	6812      	ldr	r2, [r2, #0]
 80264a0:	430b      	orrs	r3, r1
 80264a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80264a4:	687b      	ldr	r3, [r7, #4]
 80264a6:	681b      	ldr	r3, [r3, #0]
 80264a8:	69db      	ldr	r3, [r3, #28]
 80264aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80264ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80264b2:	687b      	ldr	r3, [r7, #4]
 80264b4:	685b      	ldr	r3, [r3, #4]
 80264b6:	4956      	ldr	r1, [pc, #344]	; (8026610 <HAL_I2C_Init+0x25c>)
 80264b8:	428b      	cmp	r3, r1
 80264ba:	d80d      	bhi.n	80264d8 <HAL_I2C_Init+0x124>
 80264bc:	68fb      	ldr	r3, [r7, #12]
 80264be:	1e59      	subs	r1, r3, #1
 80264c0:	687b      	ldr	r3, [r7, #4]
 80264c2:	685b      	ldr	r3, [r3, #4]
 80264c4:	005b      	lsls	r3, r3, #1
 80264c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80264ca:	3301      	adds	r3, #1
 80264cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80264d0:	2b04      	cmp	r3, #4
 80264d2:	bf38      	it	cc
 80264d4:	2304      	movcc	r3, #4
 80264d6:	e04f      	b.n	8026578 <HAL_I2C_Init+0x1c4>
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	689b      	ldr	r3, [r3, #8]
 80264dc:	2b00      	cmp	r3, #0
 80264de:	d111      	bne.n	8026504 <HAL_I2C_Init+0x150>
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	1e58      	subs	r0, r3, #1
 80264e4:	687b      	ldr	r3, [r7, #4]
 80264e6:	6859      	ldr	r1, [r3, #4]
 80264e8:	460b      	mov	r3, r1
 80264ea:	005b      	lsls	r3, r3, #1
 80264ec:	440b      	add	r3, r1
 80264ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80264f2:	3301      	adds	r3, #1
 80264f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80264f8:	2b00      	cmp	r3, #0
 80264fa:	bf0c      	ite	eq
 80264fc:	2301      	moveq	r3, #1
 80264fe:	2300      	movne	r3, #0
 8026500:	b2db      	uxtb	r3, r3
 8026502:	e012      	b.n	802652a <HAL_I2C_Init+0x176>
 8026504:	68fb      	ldr	r3, [r7, #12]
 8026506:	1e58      	subs	r0, r3, #1
 8026508:	687b      	ldr	r3, [r7, #4]
 802650a:	6859      	ldr	r1, [r3, #4]
 802650c:	460b      	mov	r3, r1
 802650e:	009b      	lsls	r3, r3, #2
 8026510:	440b      	add	r3, r1
 8026512:	0099      	lsls	r1, r3, #2
 8026514:	440b      	add	r3, r1
 8026516:	fbb0 f3f3 	udiv	r3, r0, r3
 802651a:	3301      	adds	r3, #1
 802651c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026520:	2b00      	cmp	r3, #0
 8026522:	bf0c      	ite	eq
 8026524:	2301      	moveq	r3, #1
 8026526:	2300      	movne	r3, #0
 8026528:	b2db      	uxtb	r3, r3
 802652a:	2b00      	cmp	r3, #0
 802652c:	d001      	beq.n	8026532 <HAL_I2C_Init+0x17e>
 802652e:	2301      	movs	r3, #1
 8026530:	e022      	b.n	8026578 <HAL_I2C_Init+0x1c4>
 8026532:	687b      	ldr	r3, [r7, #4]
 8026534:	689b      	ldr	r3, [r3, #8]
 8026536:	2b00      	cmp	r3, #0
 8026538:	d10e      	bne.n	8026558 <HAL_I2C_Init+0x1a4>
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	1e58      	subs	r0, r3, #1
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	6859      	ldr	r1, [r3, #4]
 8026542:	460b      	mov	r3, r1
 8026544:	005b      	lsls	r3, r3, #1
 8026546:	440b      	add	r3, r1
 8026548:	fbb0 f3f3 	udiv	r3, r0, r3
 802654c:	3301      	adds	r3, #1
 802654e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026556:	e00f      	b.n	8026578 <HAL_I2C_Init+0x1c4>
 8026558:	68fb      	ldr	r3, [r7, #12]
 802655a:	1e58      	subs	r0, r3, #1
 802655c:	687b      	ldr	r3, [r7, #4]
 802655e:	6859      	ldr	r1, [r3, #4]
 8026560:	460b      	mov	r3, r1
 8026562:	009b      	lsls	r3, r3, #2
 8026564:	440b      	add	r3, r1
 8026566:	0099      	lsls	r1, r3, #2
 8026568:	440b      	add	r3, r1
 802656a:	fbb0 f3f3 	udiv	r3, r0, r3
 802656e:	3301      	adds	r3, #1
 8026570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026578:	6879      	ldr	r1, [r7, #4]
 802657a:	6809      	ldr	r1, [r1, #0]
 802657c:	4313      	orrs	r3, r2
 802657e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	681b      	ldr	r3, [r3, #0]
 8026584:	681b      	ldr	r3, [r3, #0]
 8026586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802658a:	687b      	ldr	r3, [r7, #4]
 802658c:	69da      	ldr	r2, [r3, #28]
 802658e:	687b      	ldr	r3, [r7, #4]
 8026590:	6a1b      	ldr	r3, [r3, #32]
 8026592:	431a      	orrs	r2, r3
 8026594:	687b      	ldr	r3, [r7, #4]
 8026596:	681b      	ldr	r3, [r3, #0]
 8026598:	430a      	orrs	r2, r1
 802659a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802659c:	687b      	ldr	r3, [r7, #4]
 802659e:	681b      	ldr	r3, [r3, #0]
 80265a0:	689b      	ldr	r3, [r3, #8]
 80265a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80265a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80265aa:	687a      	ldr	r2, [r7, #4]
 80265ac:	6911      	ldr	r1, [r2, #16]
 80265ae:	687a      	ldr	r2, [r7, #4]
 80265b0:	68d2      	ldr	r2, [r2, #12]
 80265b2:	4311      	orrs	r1, r2
 80265b4:	687a      	ldr	r2, [r7, #4]
 80265b6:	6812      	ldr	r2, [r2, #0]
 80265b8:	430b      	orrs	r3, r1
 80265ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80265bc:	687b      	ldr	r3, [r7, #4]
 80265be:	681b      	ldr	r3, [r3, #0]
 80265c0:	68db      	ldr	r3, [r3, #12]
 80265c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80265c6:	687b      	ldr	r3, [r7, #4]
 80265c8:	695a      	ldr	r2, [r3, #20]
 80265ca:	687b      	ldr	r3, [r7, #4]
 80265cc:	699b      	ldr	r3, [r3, #24]
 80265ce:	431a      	orrs	r2, r3
 80265d0:	687b      	ldr	r3, [r7, #4]
 80265d2:	681b      	ldr	r3, [r3, #0]
 80265d4:	430a      	orrs	r2, r1
 80265d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	681b      	ldr	r3, [r3, #0]
 80265dc:	681a      	ldr	r2, [r3, #0]
 80265de:	687b      	ldr	r3, [r7, #4]
 80265e0:	681b      	ldr	r3, [r3, #0]
 80265e2:	f042 0201 	orr.w	r2, r2, #1
 80265e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80265e8:	687b      	ldr	r3, [r7, #4]
 80265ea:	2200      	movs	r2, #0
 80265ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	2220      	movs	r2, #32
 80265f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80265f6:	687b      	ldr	r3, [r7, #4]
 80265f8:	2200      	movs	r2, #0
 80265fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	2200      	movs	r2, #0
 8026600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8026604:	2300      	movs	r3, #0
}
 8026606:	4618      	mov	r0, r3
 8026608:	3710      	adds	r7, #16
 802660a:	46bd      	mov	sp, r7
 802660c:	bd80      	pop	{r7, pc}
 802660e:	bf00      	nop
 8026610:	000186a0 	.word	0x000186a0
 8026614:	001e847f 	.word	0x001e847f
 8026618:	003d08ff 	.word	0x003d08ff
 802661c:	431bde83 	.word	0x431bde83
 8026620:	10624dd3 	.word	0x10624dd3

08026624 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8026624:	b580      	push	{r7, lr}
 8026626:	b084      	sub	sp, #16
 8026628:	af00      	add	r7, sp, #0
 802662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 802662c:	687b      	ldr	r3, [r7, #4]
 802662e:	2b00      	cmp	r3, #0
 8026630:	d101      	bne.n	8026636 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8026632:	2301      	movs	r3, #1
 8026634:	e02b      	b.n	802668e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8026636:	687b      	ldr	r3, [r7, #4]
 8026638:	681b      	ldr	r3, [r3, #0]
 802663a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 802663e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8026640:	687b      	ldr	r3, [r7, #4]
 8026642:	681b      	ldr	r3, [r3, #0]
 8026644:	f245 5255 	movw	r2, #21845	; 0x5555
 8026648:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 802664a:	687b      	ldr	r3, [r7, #4]
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	687a      	ldr	r2, [r7, #4]
 8026650:	6852      	ldr	r2, [r2, #4]
 8026652:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8026654:	687b      	ldr	r3, [r7, #4]
 8026656:	681b      	ldr	r3, [r3, #0]
 8026658:	687a      	ldr	r2, [r7, #4]
 802665a:	6892      	ldr	r2, [r2, #8]
 802665c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 802665e:	f7fc fec7 	bl	80233f0 <HAL_GetTick>
 8026662:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8026664:	e008      	b.n	8026678 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8026666:	f7fc fec3 	bl	80233f0 <HAL_GetTick>
 802666a:	4602      	mov	r2, r0
 802666c:	68fb      	ldr	r3, [r7, #12]
 802666e:	1ad3      	subs	r3, r2, r3
 8026670:	2b30      	cmp	r3, #48	; 0x30
 8026672:	d901      	bls.n	8026678 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8026674:	2303      	movs	r3, #3
 8026676:	e00a      	b.n	802668e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8026678:	687b      	ldr	r3, [r7, #4]
 802667a:	681b      	ldr	r3, [r3, #0]
 802667c:	68db      	ldr	r3, [r3, #12]
 802667e:	2b00      	cmp	r3, #0
 8026680:	d1f1      	bne.n	8026666 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8026682:	687b      	ldr	r3, [r7, #4]
 8026684:	681b      	ldr	r3, [r3, #0]
 8026686:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 802668a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 802668c:	2300      	movs	r3, #0
}
 802668e:	4618      	mov	r0, r3
 8026690:	3710      	adds	r7, #16
 8026692:	46bd      	mov	sp, r7
 8026694:	bd80      	pop	{r7, pc}

08026696 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8026696:	b480      	push	{r7}
 8026698:	b083      	sub	sp, #12
 802669a:	af00      	add	r7, sp, #0
 802669c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 802669e:	687b      	ldr	r3, [r7, #4]
 80266a0:	681b      	ldr	r3, [r3, #0]
 80266a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80266a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80266a8:	2300      	movs	r3, #0
}
 80266aa:	4618      	mov	r0, r3
 80266ac:	370c      	adds	r7, #12
 80266ae:	46bd      	mov	sp, r7
 80266b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266b4:	4770      	bx	lr

080266b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80266b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80266b8:	b08f      	sub	sp, #60	; 0x3c
 80266ba:	af0a      	add	r7, sp, #40	; 0x28
 80266bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	2b00      	cmp	r3, #0
 80266c2:	d101      	bne.n	80266c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80266c4:	2301      	movs	r3, #1
 80266c6:	e10f      	b.n	80268e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	681b      	ldr	r3, [r3, #0]
 80266cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80266d4:	b2db      	uxtb	r3, r3
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	d106      	bne.n	80266e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	2200      	movs	r2, #0
 80266de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80266e2:	6878      	ldr	r0, [r7, #4]
 80266e4:	f00d fc30 	bl	8033f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80266e8:	687b      	ldr	r3, [r7, #4]
 80266ea:	2203      	movs	r2, #3
 80266ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80266f0:	68bb      	ldr	r3, [r7, #8]
 80266f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d102      	bne.n	8026702 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	2200      	movs	r2, #0
 8026700:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8026702:	687b      	ldr	r3, [r7, #4]
 8026704:	681b      	ldr	r3, [r3, #0]
 8026706:	4618      	mov	r0, r3
 8026708:	f005 ff73 	bl	802c5f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802670c:	687b      	ldr	r3, [r7, #4]
 802670e:	681b      	ldr	r3, [r3, #0]
 8026710:	603b      	str	r3, [r7, #0]
 8026712:	687e      	ldr	r6, [r7, #4]
 8026714:	466d      	mov	r5, sp
 8026716:	f106 0410 	add.w	r4, r6, #16
 802671a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802671c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802671e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026726:	e885 0003 	stmia.w	r5, {r0, r1}
 802672a:	1d33      	adds	r3, r6, #4
 802672c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802672e:	6838      	ldr	r0, [r7, #0]
 8026730:	f005 fe4a 	bl	802c3c8 <USB_CoreInit>
 8026734:	4603      	mov	r3, r0
 8026736:	2b00      	cmp	r3, #0
 8026738:	d005      	beq.n	8026746 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	2202      	movs	r2, #2
 802673e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8026742:	2301      	movs	r3, #1
 8026744:	e0d0      	b.n	80268e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8026746:	687b      	ldr	r3, [r7, #4]
 8026748:	681b      	ldr	r3, [r3, #0]
 802674a:	2100      	movs	r1, #0
 802674c:	4618      	mov	r0, r3
 802674e:	f005 ff61 	bl	802c614 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026752:	2300      	movs	r3, #0
 8026754:	73fb      	strb	r3, [r7, #15]
 8026756:	e04a      	b.n	80267ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8026758:	7bfa      	ldrb	r2, [r7, #15]
 802675a:	6879      	ldr	r1, [r7, #4]
 802675c:	4613      	mov	r3, r2
 802675e:	00db      	lsls	r3, r3, #3
 8026760:	1a9b      	subs	r3, r3, r2
 8026762:	009b      	lsls	r3, r3, #2
 8026764:	440b      	add	r3, r1
 8026766:	333d      	adds	r3, #61	; 0x3d
 8026768:	2201      	movs	r2, #1
 802676a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 802676c:	7bfa      	ldrb	r2, [r7, #15]
 802676e:	6879      	ldr	r1, [r7, #4]
 8026770:	4613      	mov	r3, r2
 8026772:	00db      	lsls	r3, r3, #3
 8026774:	1a9b      	subs	r3, r3, r2
 8026776:	009b      	lsls	r3, r3, #2
 8026778:	440b      	add	r3, r1
 802677a:	333c      	adds	r3, #60	; 0x3c
 802677c:	7bfa      	ldrb	r2, [r7, #15]
 802677e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8026780:	7bfa      	ldrb	r2, [r7, #15]
 8026782:	7bfb      	ldrb	r3, [r7, #15]
 8026784:	b298      	uxth	r0, r3
 8026786:	6879      	ldr	r1, [r7, #4]
 8026788:	4613      	mov	r3, r2
 802678a:	00db      	lsls	r3, r3, #3
 802678c:	1a9b      	subs	r3, r3, r2
 802678e:	009b      	lsls	r3, r3, #2
 8026790:	440b      	add	r3, r1
 8026792:	3342      	adds	r3, #66	; 0x42
 8026794:	4602      	mov	r2, r0
 8026796:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8026798:	7bfa      	ldrb	r2, [r7, #15]
 802679a:	6879      	ldr	r1, [r7, #4]
 802679c:	4613      	mov	r3, r2
 802679e:	00db      	lsls	r3, r3, #3
 80267a0:	1a9b      	subs	r3, r3, r2
 80267a2:	009b      	lsls	r3, r3, #2
 80267a4:	440b      	add	r3, r1
 80267a6:	333f      	adds	r3, #63	; 0x3f
 80267a8:	2200      	movs	r2, #0
 80267aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80267ac:	7bfa      	ldrb	r2, [r7, #15]
 80267ae:	6879      	ldr	r1, [r7, #4]
 80267b0:	4613      	mov	r3, r2
 80267b2:	00db      	lsls	r3, r3, #3
 80267b4:	1a9b      	subs	r3, r3, r2
 80267b6:	009b      	lsls	r3, r3, #2
 80267b8:	440b      	add	r3, r1
 80267ba:	3344      	adds	r3, #68	; 0x44
 80267bc:	2200      	movs	r2, #0
 80267be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80267c0:	7bfa      	ldrb	r2, [r7, #15]
 80267c2:	6879      	ldr	r1, [r7, #4]
 80267c4:	4613      	mov	r3, r2
 80267c6:	00db      	lsls	r3, r3, #3
 80267c8:	1a9b      	subs	r3, r3, r2
 80267ca:	009b      	lsls	r3, r3, #2
 80267cc:	440b      	add	r3, r1
 80267ce:	3348      	adds	r3, #72	; 0x48
 80267d0:	2200      	movs	r2, #0
 80267d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80267d4:	7bfa      	ldrb	r2, [r7, #15]
 80267d6:	6879      	ldr	r1, [r7, #4]
 80267d8:	4613      	mov	r3, r2
 80267da:	00db      	lsls	r3, r3, #3
 80267dc:	1a9b      	subs	r3, r3, r2
 80267de:	009b      	lsls	r3, r3, #2
 80267e0:	440b      	add	r3, r1
 80267e2:	3350      	adds	r3, #80	; 0x50
 80267e4:	2200      	movs	r2, #0
 80267e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80267e8:	7bfb      	ldrb	r3, [r7, #15]
 80267ea:	3301      	adds	r3, #1
 80267ec:	73fb      	strb	r3, [r7, #15]
 80267ee:	7bfa      	ldrb	r2, [r7, #15]
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	685b      	ldr	r3, [r3, #4]
 80267f4:	429a      	cmp	r2, r3
 80267f6:	d3af      	bcc.n	8026758 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80267f8:	2300      	movs	r3, #0
 80267fa:	73fb      	strb	r3, [r7, #15]
 80267fc:	e044      	b.n	8026888 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80267fe:	7bfa      	ldrb	r2, [r7, #15]
 8026800:	6879      	ldr	r1, [r7, #4]
 8026802:	4613      	mov	r3, r2
 8026804:	00db      	lsls	r3, r3, #3
 8026806:	1a9b      	subs	r3, r3, r2
 8026808:	009b      	lsls	r3, r3, #2
 802680a:	440b      	add	r3, r1
 802680c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8026810:	2200      	movs	r2, #0
 8026812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8026814:	7bfa      	ldrb	r2, [r7, #15]
 8026816:	6879      	ldr	r1, [r7, #4]
 8026818:	4613      	mov	r3, r2
 802681a:	00db      	lsls	r3, r3, #3
 802681c:	1a9b      	subs	r3, r3, r2
 802681e:	009b      	lsls	r3, r3, #2
 8026820:	440b      	add	r3, r1
 8026822:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8026826:	7bfa      	ldrb	r2, [r7, #15]
 8026828:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802682a:	7bfa      	ldrb	r2, [r7, #15]
 802682c:	6879      	ldr	r1, [r7, #4]
 802682e:	4613      	mov	r3, r2
 8026830:	00db      	lsls	r3, r3, #3
 8026832:	1a9b      	subs	r3, r3, r2
 8026834:	009b      	lsls	r3, r3, #2
 8026836:	440b      	add	r3, r1
 8026838:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 802683c:	2200      	movs	r2, #0
 802683e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8026840:	7bfa      	ldrb	r2, [r7, #15]
 8026842:	6879      	ldr	r1, [r7, #4]
 8026844:	4613      	mov	r3, r2
 8026846:	00db      	lsls	r3, r3, #3
 8026848:	1a9b      	subs	r3, r3, r2
 802684a:	009b      	lsls	r3, r3, #2
 802684c:	440b      	add	r3, r1
 802684e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8026852:	2200      	movs	r2, #0
 8026854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8026856:	7bfa      	ldrb	r2, [r7, #15]
 8026858:	6879      	ldr	r1, [r7, #4]
 802685a:	4613      	mov	r3, r2
 802685c:	00db      	lsls	r3, r3, #3
 802685e:	1a9b      	subs	r3, r3, r2
 8026860:	009b      	lsls	r3, r3, #2
 8026862:	440b      	add	r3, r1
 8026864:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8026868:	2200      	movs	r2, #0
 802686a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 802686c:	7bfa      	ldrb	r2, [r7, #15]
 802686e:	6879      	ldr	r1, [r7, #4]
 8026870:	4613      	mov	r3, r2
 8026872:	00db      	lsls	r3, r3, #3
 8026874:	1a9b      	subs	r3, r3, r2
 8026876:	009b      	lsls	r3, r3, #2
 8026878:	440b      	add	r3, r1
 802687a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 802687e:	2200      	movs	r2, #0
 8026880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026882:	7bfb      	ldrb	r3, [r7, #15]
 8026884:	3301      	adds	r3, #1
 8026886:	73fb      	strb	r3, [r7, #15]
 8026888:	7bfa      	ldrb	r2, [r7, #15]
 802688a:	687b      	ldr	r3, [r7, #4]
 802688c:	685b      	ldr	r3, [r3, #4]
 802688e:	429a      	cmp	r2, r3
 8026890:	d3b5      	bcc.n	80267fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8026892:	687b      	ldr	r3, [r7, #4]
 8026894:	681b      	ldr	r3, [r3, #0]
 8026896:	603b      	str	r3, [r7, #0]
 8026898:	687e      	ldr	r6, [r7, #4]
 802689a:	466d      	mov	r5, sp
 802689c:	f106 0410 	add.w	r4, r6, #16
 80268a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80268a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80268a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80268a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80268a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80268ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80268b0:	1d33      	adds	r3, r6, #4
 80268b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80268b4:	6838      	ldr	r0, [r7, #0]
 80268b6:	f005 fed7 	bl	802c668 <USB_DevInit>
 80268ba:	4603      	mov	r3, r0
 80268bc:	2b00      	cmp	r3, #0
 80268be:	d005      	beq.n	80268cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	2202      	movs	r2, #2
 80268c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80268c8:	2301      	movs	r3, #1
 80268ca:	e00d      	b.n	80268e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	2200      	movs	r2, #0
 80268d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80268d4:	687b      	ldr	r3, [r7, #4]
 80268d6:	2201      	movs	r2, #1
 80268d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	681b      	ldr	r3, [r3, #0]
 80268e0:	4618      	mov	r0, r3
 80268e2:	f006 ff1f 	bl	802d724 <USB_DevDisconnect>

  return HAL_OK;
 80268e6:	2300      	movs	r3, #0
}
 80268e8:	4618      	mov	r0, r3
 80268ea:	3714      	adds	r7, #20
 80268ec:	46bd      	mov	sp, r7
 80268ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080268f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80268f0:	b580      	push	{r7, lr}
 80268f2:	b084      	sub	sp, #16
 80268f4:	af00      	add	r7, sp, #0
 80268f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80268f8:	687b      	ldr	r3, [r7, #4]
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026904:	2b01      	cmp	r3, #1
 8026906:	d101      	bne.n	802690c <HAL_PCD_Start+0x1c>
 8026908:	2302      	movs	r3, #2
 802690a:	e020      	b.n	802694e <HAL_PCD_Start+0x5e>
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	2201      	movs	r2, #1
 8026910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026918:	2b01      	cmp	r3, #1
 802691a:	d109      	bne.n	8026930 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802691c:	687b      	ldr	r3, [r7, #4]
 802691e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8026920:	2b01      	cmp	r3, #1
 8026922:	d005      	beq.n	8026930 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8026924:	68fb      	ldr	r3, [r7, #12]
 8026926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026928:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	4618      	mov	r0, r3
 8026936:	f005 fe4b 	bl	802c5d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802693a:	687b      	ldr	r3, [r7, #4]
 802693c:	681b      	ldr	r3, [r3, #0]
 802693e:	4618      	mov	r0, r3
 8026940:	f006 fecf 	bl	802d6e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8026944:	687b      	ldr	r3, [r7, #4]
 8026946:	2200      	movs	r2, #0
 8026948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 802694c:	2300      	movs	r3, #0
}
 802694e:	4618      	mov	r0, r3
 8026950:	3710      	adds	r7, #16
 8026952:	46bd      	mov	sp, r7
 8026954:	bd80      	pop	{r7, pc}

08026956 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8026956:	b590      	push	{r4, r7, lr}
 8026958:	b08d      	sub	sp, #52	; 0x34
 802695a:	af00      	add	r7, sp, #0
 802695c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	681b      	ldr	r3, [r3, #0]
 8026962:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026964:	6a3b      	ldr	r3, [r7, #32]
 8026966:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8026968:	687b      	ldr	r3, [r7, #4]
 802696a:	681b      	ldr	r3, [r3, #0]
 802696c:	4618      	mov	r0, r3
 802696e:	f006 ff8d 	bl	802d88c <USB_GetMode>
 8026972:	4603      	mov	r3, r0
 8026974:	2b00      	cmp	r3, #0
 8026976:	f040 839d 	bne.w	80270b4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	681b      	ldr	r3, [r3, #0]
 802697e:	4618      	mov	r0, r3
 8026980:	f006 fef1 	bl	802d766 <USB_ReadInterrupts>
 8026984:	4603      	mov	r3, r0
 8026986:	2b00      	cmp	r3, #0
 8026988:	f000 8393 	beq.w	80270b2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 802698c:	687b      	ldr	r3, [r7, #4]
 802698e:	681b      	ldr	r3, [r3, #0]
 8026990:	4618      	mov	r0, r3
 8026992:	f006 fee8 	bl	802d766 <USB_ReadInterrupts>
 8026996:	4603      	mov	r3, r0
 8026998:	f003 0302 	and.w	r3, r3, #2
 802699c:	2b02      	cmp	r3, #2
 802699e:	d107      	bne.n	80269b0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80269a0:	687b      	ldr	r3, [r7, #4]
 80269a2:	681b      	ldr	r3, [r3, #0]
 80269a4:	695a      	ldr	r2, [r3, #20]
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	681b      	ldr	r3, [r3, #0]
 80269aa:	f002 0202 	and.w	r2, r2, #2
 80269ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	681b      	ldr	r3, [r3, #0]
 80269b4:	4618      	mov	r0, r3
 80269b6:	f006 fed6 	bl	802d766 <USB_ReadInterrupts>
 80269ba:	4603      	mov	r3, r0
 80269bc:	f003 0310 	and.w	r3, r3, #16
 80269c0:	2b10      	cmp	r3, #16
 80269c2:	d161      	bne.n	8026a88 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	699a      	ldr	r2, [r3, #24]
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	f022 0210 	bic.w	r2, r2, #16
 80269d2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80269d4:	6a3b      	ldr	r3, [r7, #32]
 80269d6:	6a1b      	ldr	r3, [r3, #32]
 80269d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80269da:	69bb      	ldr	r3, [r7, #24]
 80269dc:	f003 020f 	and.w	r2, r3, #15
 80269e0:	4613      	mov	r3, r2
 80269e2:	00db      	lsls	r3, r3, #3
 80269e4:	1a9b      	subs	r3, r3, r2
 80269e6:	009b      	lsls	r3, r3, #2
 80269e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80269ec:	687a      	ldr	r2, [r7, #4]
 80269ee:	4413      	add	r3, r2
 80269f0:	3304      	adds	r3, #4
 80269f2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80269f4:	69bb      	ldr	r3, [r7, #24]
 80269f6:	0c5b      	lsrs	r3, r3, #17
 80269f8:	f003 030f 	and.w	r3, r3, #15
 80269fc:	2b02      	cmp	r3, #2
 80269fe:	d124      	bne.n	8026a4a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8026a00:	69ba      	ldr	r2, [r7, #24]
 8026a02:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8026a06:	4013      	ands	r3, r2
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	d035      	beq.n	8026a78 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8026a0c:	697b      	ldr	r3, [r7, #20]
 8026a0e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8026a10:	69bb      	ldr	r3, [r7, #24]
 8026a12:	091b      	lsrs	r3, r3, #4
 8026a14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8026a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026a1a:	b29b      	uxth	r3, r3
 8026a1c:	461a      	mov	r2, r3
 8026a1e:	6a38      	ldr	r0, [r7, #32]
 8026a20:	f006 fd3c 	bl	802d49c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026a24:	697b      	ldr	r3, [r7, #20]
 8026a26:	68da      	ldr	r2, [r3, #12]
 8026a28:	69bb      	ldr	r3, [r7, #24]
 8026a2a:	091b      	lsrs	r3, r3, #4
 8026a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026a30:	441a      	add	r2, r3
 8026a32:	697b      	ldr	r3, [r7, #20]
 8026a34:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026a36:	697b      	ldr	r3, [r7, #20]
 8026a38:	699a      	ldr	r2, [r3, #24]
 8026a3a:	69bb      	ldr	r3, [r7, #24]
 8026a3c:	091b      	lsrs	r3, r3, #4
 8026a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026a42:	441a      	add	r2, r3
 8026a44:	697b      	ldr	r3, [r7, #20]
 8026a46:	619a      	str	r2, [r3, #24]
 8026a48:	e016      	b.n	8026a78 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8026a4a:	69bb      	ldr	r3, [r7, #24]
 8026a4c:	0c5b      	lsrs	r3, r3, #17
 8026a4e:	f003 030f 	and.w	r3, r3, #15
 8026a52:	2b06      	cmp	r3, #6
 8026a54:	d110      	bne.n	8026a78 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8026a56:	687b      	ldr	r3, [r7, #4]
 8026a58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026a5c:	2208      	movs	r2, #8
 8026a5e:	4619      	mov	r1, r3
 8026a60:	6a38      	ldr	r0, [r7, #32]
 8026a62:	f006 fd1b 	bl	802d49c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026a66:	697b      	ldr	r3, [r7, #20]
 8026a68:	699a      	ldr	r2, [r3, #24]
 8026a6a:	69bb      	ldr	r3, [r7, #24]
 8026a6c:	091b      	lsrs	r3, r3, #4
 8026a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026a72:	441a      	add	r2, r3
 8026a74:	697b      	ldr	r3, [r7, #20]
 8026a76:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8026a78:	687b      	ldr	r3, [r7, #4]
 8026a7a:	681b      	ldr	r3, [r3, #0]
 8026a7c:	699a      	ldr	r2, [r3, #24]
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	681b      	ldr	r3, [r3, #0]
 8026a82:	f042 0210 	orr.w	r2, r2, #16
 8026a86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	681b      	ldr	r3, [r3, #0]
 8026a8c:	4618      	mov	r0, r3
 8026a8e:	f006 fe6a 	bl	802d766 <USB_ReadInterrupts>
 8026a92:	4603      	mov	r3, r0
 8026a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026a98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8026a9c:	d16e      	bne.n	8026b7c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8026a9e:	2300      	movs	r3, #0
 8026aa0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	681b      	ldr	r3, [r3, #0]
 8026aa6:	4618      	mov	r0, r3
 8026aa8:	f006 fe70 	bl	802d78c <USB_ReadDevAllOutEpInterrupt>
 8026aac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8026aae:	e062      	b.n	8026b76 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8026ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026ab2:	f003 0301 	and.w	r3, r3, #1
 8026ab6:	2b00      	cmp	r3, #0
 8026ab8:	d057      	beq.n	8026b6a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026ac0:	b2d2      	uxtb	r2, r2
 8026ac2:	4611      	mov	r1, r2
 8026ac4:	4618      	mov	r0, r3
 8026ac6:	f006 fe95 	bl	802d7f4 <USB_ReadDevOutEPInterrupt>
 8026aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8026acc:	693b      	ldr	r3, [r7, #16]
 8026ace:	f003 0301 	and.w	r3, r3, #1
 8026ad2:	2b00      	cmp	r3, #0
 8026ad4:	d00c      	beq.n	8026af0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8026ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ad8:	015a      	lsls	r2, r3, #5
 8026ada:	69fb      	ldr	r3, [r7, #28]
 8026adc:	4413      	add	r3, r2
 8026ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026ae2:	461a      	mov	r2, r3
 8026ae4:	2301      	movs	r3, #1
 8026ae6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8026ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026aea:	6878      	ldr	r0, [r7, #4]
 8026aec:	f000 fdb0 	bl	8027650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8026af0:	693b      	ldr	r3, [r7, #16]
 8026af2:	f003 0308 	and.w	r3, r3, #8
 8026af6:	2b00      	cmp	r3, #0
 8026af8:	d00c      	beq.n	8026b14 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8026afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026afc:	015a      	lsls	r2, r3, #5
 8026afe:	69fb      	ldr	r3, [r7, #28]
 8026b00:	4413      	add	r3, r2
 8026b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026b06:	461a      	mov	r2, r3
 8026b08:	2308      	movs	r3, #8
 8026b0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8026b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026b0e:	6878      	ldr	r0, [r7, #4]
 8026b10:	f000 feaa 	bl	8027868 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8026b14:	693b      	ldr	r3, [r7, #16]
 8026b16:	f003 0310 	and.w	r3, r3, #16
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d008      	beq.n	8026b30 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8026b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b20:	015a      	lsls	r2, r3, #5
 8026b22:	69fb      	ldr	r3, [r7, #28]
 8026b24:	4413      	add	r3, r2
 8026b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026b2a:	461a      	mov	r2, r3
 8026b2c:	2310      	movs	r3, #16
 8026b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8026b30:	693b      	ldr	r3, [r7, #16]
 8026b32:	f003 0320 	and.w	r3, r3, #32
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d008      	beq.n	8026b4c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8026b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b3c:	015a      	lsls	r2, r3, #5
 8026b3e:	69fb      	ldr	r3, [r7, #28]
 8026b40:	4413      	add	r3, r2
 8026b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026b46:	461a      	mov	r2, r3
 8026b48:	2320      	movs	r3, #32
 8026b4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8026b4c:	693b      	ldr	r3, [r7, #16]
 8026b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026b52:	2b00      	cmp	r3, #0
 8026b54:	d009      	beq.n	8026b6a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8026b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b58:	015a      	lsls	r2, r3, #5
 8026b5a:	69fb      	ldr	r3, [r7, #28]
 8026b5c:	4413      	add	r3, r2
 8026b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026b62:	461a      	mov	r2, r3
 8026b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8026b68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8026b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b6c:	3301      	adds	r3, #1
 8026b6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8026b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026b72:	085b      	lsrs	r3, r3, #1
 8026b74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8026b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026b78:	2b00      	cmp	r3, #0
 8026b7a:	d199      	bne.n	8026ab0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8026b7c:	687b      	ldr	r3, [r7, #4]
 8026b7e:	681b      	ldr	r3, [r3, #0]
 8026b80:	4618      	mov	r0, r3
 8026b82:	f006 fdf0 	bl	802d766 <USB_ReadInterrupts>
 8026b86:	4603      	mov	r3, r0
 8026b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026b8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026b90:	f040 80c0 	bne.w	8026d14 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8026b94:	687b      	ldr	r3, [r7, #4]
 8026b96:	681b      	ldr	r3, [r3, #0]
 8026b98:	4618      	mov	r0, r3
 8026b9a:	f006 fe11 	bl	802d7c0 <USB_ReadDevAllInEpInterrupt>
 8026b9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8026ba0:	2300      	movs	r3, #0
 8026ba2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8026ba4:	e0b2      	b.n	8026d0c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8026ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026ba8:	f003 0301 	and.w	r3, r3, #1
 8026bac:	2b00      	cmp	r3, #0
 8026bae:	f000 80a7 	beq.w	8026d00 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	681b      	ldr	r3, [r3, #0]
 8026bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026bb8:	b2d2      	uxtb	r2, r2
 8026bba:	4611      	mov	r1, r2
 8026bbc:	4618      	mov	r0, r3
 8026bbe:	f006 fe37 	bl	802d830 <USB_ReadDevInEPInterrupt>
 8026bc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8026bc4:	693b      	ldr	r3, [r7, #16]
 8026bc6:	f003 0301 	and.w	r3, r3, #1
 8026bca:	2b00      	cmp	r3, #0
 8026bcc:	d057      	beq.n	8026c7e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8026bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bd0:	f003 030f 	and.w	r3, r3, #15
 8026bd4:	2201      	movs	r2, #1
 8026bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8026bda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8026bdc:	69fb      	ldr	r3, [r7, #28]
 8026bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026be4:	68fb      	ldr	r3, [r7, #12]
 8026be6:	43db      	mvns	r3, r3
 8026be8:	69f9      	ldr	r1, [r7, #28]
 8026bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8026bee:	4013      	ands	r3, r2
 8026bf0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8026bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bf4:	015a      	lsls	r2, r3, #5
 8026bf6:	69fb      	ldr	r3, [r7, #28]
 8026bf8:	4413      	add	r3, r2
 8026bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026bfe:	461a      	mov	r2, r3
 8026c00:	2301      	movs	r3, #1
 8026c02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	691b      	ldr	r3, [r3, #16]
 8026c08:	2b01      	cmp	r3, #1
 8026c0a:	d132      	bne.n	8026c72 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8026c0c:	6879      	ldr	r1, [r7, #4]
 8026c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c10:	4613      	mov	r3, r2
 8026c12:	00db      	lsls	r3, r3, #3
 8026c14:	1a9b      	subs	r3, r3, r2
 8026c16:	009b      	lsls	r3, r3, #2
 8026c18:	440b      	add	r3, r1
 8026c1a:	3348      	adds	r3, #72	; 0x48
 8026c1c:	6819      	ldr	r1, [r3, #0]
 8026c1e:	6878      	ldr	r0, [r7, #4]
 8026c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c22:	4613      	mov	r3, r2
 8026c24:	00db      	lsls	r3, r3, #3
 8026c26:	1a9b      	subs	r3, r3, r2
 8026c28:	009b      	lsls	r3, r3, #2
 8026c2a:	4403      	add	r3, r0
 8026c2c:	3344      	adds	r3, #68	; 0x44
 8026c2e:	681b      	ldr	r3, [r3, #0]
 8026c30:	4419      	add	r1, r3
 8026c32:	6878      	ldr	r0, [r7, #4]
 8026c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c36:	4613      	mov	r3, r2
 8026c38:	00db      	lsls	r3, r3, #3
 8026c3a:	1a9b      	subs	r3, r3, r2
 8026c3c:	009b      	lsls	r3, r3, #2
 8026c3e:	4403      	add	r3, r0
 8026c40:	3348      	adds	r3, #72	; 0x48
 8026c42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8026c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c46:	2b00      	cmp	r3, #0
 8026c48:	d113      	bne.n	8026c72 <HAL_PCD_IRQHandler+0x31c>
 8026c4a:	6879      	ldr	r1, [r7, #4]
 8026c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c4e:	4613      	mov	r3, r2
 8026c50:	00db      	lsls	r3, r3, #3
 8026c52:	1a9b      	subs	r3, r3, r2
 8026c54:	009b      	lsls	r3, r3, #2
 8026c56:	440b      	add	r3, r1
 8026c58:	3350      	adds	r3, #80	; 0x50
 8026c5a:	681b      	ldr	r3, [r3, #0]
 8026c5c:	2b00      	cmp	r3, #0
 8026c5e:	d108      	bne.n	8026c72 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	6818      	ldr	r0, [r3, #0]
 8026c64:	687b      	ldr	r3, [r7, #4]
 8026c66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026c6a:	461a      	mov	r2, r3
 8026c6c:	2101      	movs	r1, #1
 8026c6e:	f006 fe3f 	bl	802d8f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8026c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c74:	b2db      	uxtb	r3, r3
 8026c76:	4619      	mov	r1, r3
 8026c78:	6878      	ldr	r0, [r7, #4]
 8026c7a:	f00d f9f4 	bl	8034066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8026c7e:	693b      	ldr	r3, [r7, #16]
 8026c80:	f003 0308 	and.w	r3, r3, #8
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	d008      	beq.n	8026c9a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8026c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c8a:	015a      	lsls	r2, r3, #5
 8026c8c:	69fb      	ldr	r3, [r7, #28]
 8026c8e:	4413      	add	r3, r2
 8026c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026c94:	461a      	mov	r2, r3
 8026c96:	2308      	movs	r3, #8
 8026c98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8026c9a:	693b      	ldr	r3, [r7, #16]
 8026c9c:	f003 0310 	and.w	r3, r3, #16
 8026ca0:	2b00      	cmp	r3, #0
 8026ca2:	d008      	beq.n	8026cb6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8026ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ca6:	015a      	lsls	r2, r3, #5
 8026ca8:	69fb      	ldr	r3, [r7, #28]
 8026caa:	4413      	add	r3, r2
 8026cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026cb0:	461a      	mov	r2, r3
 8026cb2:	2310      	movs	r3, #16
 8026cb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8026cb6:	693b      	ldr	r3, [r7, #16]
 8026cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026cbc:	2b00      	cmp	r3, #0
 8026cbe:	d008      	beq.n	8026cd2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8026cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026cc2:	015a      	lsls	r2, r3, #5
 8026cc4:	69fb      	ldr	r3, [r7, #28]
 8026cc6:	4413      	add	r3, r2
 8026cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026ccc:	461a      	mov	r2, r3
 8026cce:	2340      	movs	r3, #64	; 0x40
 8026cd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8026cd2:	693b      	ldr	r3, [r7, #16]
 8026cd4:	f003 0302 	and.w	r3, r3, #2
 8026cd8:	2b00      	cmp	r3, #0
 8026cda:	d008      	beq.n	8026cee <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8026cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026cde:	015a      	lsls	r2, r3, #5
 8026ce0:	69fb      	ldr	r3, [r7, #28]
 8026ce2:	4413      	add	r3, r2
 8026ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026ce8:	461a      	mov	r2, r3
 8026cea:	2302      	movs	r3, #2
 8026cec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8026cee:	693b      	ldr	r3, [r7, #16]
 8026cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026cf4:	2b00      	cmp	r3, #0
 8026cf6:	d003      	beq.n	8026d00 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8026cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026cfa:	6878      	ldr	r0, [r7, #4]
 8026cfc:	f000 fc1b 	bl	8027536 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8026d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026d02:	3301      	adds	r3, #1
 8026d04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8026d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d08:	085b      	lsrs	r3, r3, #1
 8026d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8026d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d0e:	2b00      	cmp	r3, #0
 8026d10:	f47f af49 	bne.w	8026ba6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	681b      	ldr	r3, [r3, #0]
 8026d18:	4618      	mov	r0, r3
 8026d1a:	f006 fd24 	bl	802d766 <USB_ReadInterrupts>
 8026d1e:	4603      	mov	r3, r0
 8026d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8026d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8026d28:	d122      	bne.n	8026d70 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8026d2a:	69fb      	ldr	r3, [r7, #28]
 8026d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026d30:	685b      	ldr	r3, [r3, #4]
 8026d32:	69fa      	ldr	r2, [r7, #28]
 8026d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026d38:	f023 0301 	bic.w	r3, r3, #1
 8026d3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8026d44:	2b01      	cmp	r3, #1
 8026d46:	d108      	bne.n	8026d5a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	2200      	movs	r2, #0
 8026d4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8026d50:	2100      	movs	r1, #0
 8026d52:	6878      	ldr	r0, [r7, #4]
 8026d54:	f000 fe26 	bl	80279a4 <HAL_PCDEx_LPM_Callback>
 8026d58:	e002      	b.n	8026d60 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8026d5a:	6878      	ldr	r0, [r7, #4]
 8026d5c:	f00d f9fa 	bl	8034154 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	681b      	ldr	r3, [r3, #0]
 8026d64:	695a      	ldr	r2, [r3, #20]
 8026d66:	687b      	ldr	r3, [r7, #4]
 8026d68:	681b      	ldr	r3, [r3, #0]
 8026d6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8026d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8026d70:	687b      	ldr	r3, [r7, #4]
 8026d72:	681b      	ldr	r3, [r3, #0]
 8026d74:	4618      	mov	r0, r3
 8026d76:	f006 fcf6 	bl	802d766 <USB_ReadInterrupts>
 8026d7a:	4603      	mov	r3, r0
 8026d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8026d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8026d84:	d112      	bne.n	8026dac <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8026d86:	69fb      	ldr	r3, [r7, #28]
 8026d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026d8c:	689b      	ldr	r3, [r3, #8]
 8026d8e:	f003 0301 	and.w	r3, r3, #1
 8026d92:	2b01      	cmp	r3, #1
 8026d94:	d102      	bne.n	8026d9c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8026d96:	6878      	ldr	r0, [r7, #4]
 8026d98:	f00d f9b6 	bl	8034108 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8026d9c:	687b      	ldr	r3, [r7, #4]
 8026d9e:	681b      	ldr	r3, [r3, #0]
 8026da0:	695a      	ldr	r2, [r3, #20]
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	681b      	ldr	r3, [r3, #0]
 8026da6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8026daa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8026dac:	687b      	ldr	r3, [r7, #4]
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	4618      	mov	r0, r3
 8026db2:	f006 fcd8 	bl	802d766 <USB_ReadInterrupts>
 8026db6:	4603      	mov	r3, r0
 8026db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026dc0:	f040 80c7 	bne.w	8026f52 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8026dc4:	69fb      	ldr	r3, [r7, #28]
 8026dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026dca:	685b      	ldr	r3, [r3, #4]
 8026dcc:	69fa      	ldr	r2, [r7, #28]
 8026dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026dd2:	f023 0301 	bic.w	r3, r3, #1
 8026dd6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	681b      	ldr	r3, [r3, #0]
 8026ddc:	2110      	movs	r1, #16
 8026dde:	4618      	mov	r0, r3
 8026de0:	f005 fda6 	bl	802c930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026de4:	2300      	movs	r3, #0
 8026de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026de8:	e056      	b.n	8026e98 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8026dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026dec:	015a      	lsls	r2, r3, #5
 8026dee:	69fb      	ldr	r3, [r7, #28]
 8026df0:	4413      	add	r3, r2
 8026df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026df6:	461a      	mov	r2, r3
 8026df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8026dfc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8026dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e00:	015a      	lsls	r2, r3, #5
 8026e02:	69fb      	ldr	r3, [r7, #28]
 8026e04:	4413      	add	r3, r2
 8026e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026e0a:	681b      	ldr	r3, [r3, #0]
 8026e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e0e:	0151      	lsls	r1, r2, #5
 8026e10:	69fa      	ldr	r2, [r7, #28]
 8026e12:	440a      	add	r2, r1
 8026e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8026e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8026e1c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8026e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e20:	015a      	lsls	r2, r3, #5
 8026e22:	69fb      	ldr	r3, [r7, #28]
 8026e24:	4413      	add	r3, r2
 8026e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026e2a:	681b      	ldr	r3, [r3, #0]
 8026e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e2e:	0151      	lsls	r1, r2, #5
 8026e30:	69fa      	ldr	r2, [r7, #28]
 8026e32:	440a      	add	r2, r1
 8026e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8026e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8026e3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8026e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e40:	015a      	lsls	r2, r3, #5
 8026e42:	69fb      	ldr	r3, [r7, #28]
 8026e44:	4413      	add	r3, r2
 8026e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026e4a:	461a      	mov	r2, r3
 8026e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8026e50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8026e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e54:	015a      	lsls	r2, r3, #5
 8026e56:	69fb      	ldr	r3, [r7, #28]
 8026e58:	4413      	add	r3, r2
 8026e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026e5e:	681b      	ldr	r3, [r3, #0]
 8026e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e62:	0151      	lsls	r1, r2, #5
 8026e64:	69fa      	ldr	r2, [r7, #28]
 8026e66:	440a      	add	r2, r1
 8026e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8026e6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8026e70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8026e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e74:	015a      	lsls	r2, r3, #5
 8026e76:	69fb      	ldr	r3, [r7, #28]
 8026e78:	4413      	add	r3, r2
 8026e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026e7e:	681b      	ldr	r3, [r3, #0]
 8026e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e82:	0151      	lsls	r1, r2, #5
 8026e84:	69fa      	ldr	r2, [r7, #28]
 8026e86:	440a      	add	r2, r1
 8026e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8026e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8026e90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e94:	3301      	adds	r3, #1
 8026e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026e98:	687b      	ldr	r3, [r7, #4]
 8026e9a:	685b      	ldr	r3, [r3, #4]
 8026e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e9e:	429a      	cmp	r2, r3
 8026ea0:	d3a3      	bcc.n	8026dea <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8026ea2:	69fb      	ldr	r3, [r7, #28]
 8026ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026ea8:	69db      	ldr	r3, [r3, #28]
 8026eaa:	69fa      	ldr	r2, [r7, #28]
 8026eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026eb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8026eb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8026eb6:	687b      	ldr	r3, [r7, #4]
 8026eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026eba:	2b00      	cmp	r3, #0
 8026ebc:	d016      	beq.n	8026eec <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8026ebe:	69fb      	ldr	r3, [r7, #28]
 8026ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8026ec8:	69fa      	ldr	r2, [r7, #28]
 8026eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026ece:	f043 030b 	orr.w	r3, r3, #11
 8026ed2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8026ed6:	69fb      	ldr	r3, [r7, #28]
 8026ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026ede:	69fa      	ldr	r2, [r7, #28]
 8026ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026ee4:	f043 030b 	orr.w	r3, r3, #11
 8026ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8026eea:	e015      	b.n	8026f18 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8026eec:	69fb      	ldr	r3, [r7, #28]
 8026eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026ef2:	695b      	ldr	r3, [r3, #20]
 8026ef4:	69fa      	ldr	r2, [r7, #28]
 8026ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026efa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8026efe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8026f02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8026f04:	69fb      	ldr	r3, [r7, #28]
 8026f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026f0a:	691b      	ldr	r3, [r3, #16]
 8026f0c:	69fa      	ldr	r2, [r7, #28]
 8026f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026f12:	f043 030b 	orr.w	r3, r3, #11
 8026f16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8026f18:	69fb      	ldr	r3, [r7, #28]
 8026f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026f1e:	681b      	ldr	r3, [r3, #0]
 8026f20:	69fa      	ldr	r2, [r7, #28]
 8026f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026f26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8026f2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8026f2c:	687b      	ldr	r3, [r7, #4]
 8026f2e:	6818      	ldr	r0, [r3, #0]
 8026f30:	687b      	ldr	r3, [r7, #4]
 8026f32:	691b      	ldr	r3, [r3, #16]
 8026f34:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8026f3c:	461a      	mov	r2, r3
 8026f3e:	f006 fcd7 	bl	802d8f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8026f42:	687b      	ldr	r3, [r7, #4]
 8026f44:	681b      	ldr	r3, [r3, #0]
 8026f46:	695a      	ldr	r2, [r3, #20]
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	681b      	ldr	r3, [r3, #0]
 8026f4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8026f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8026f52:	687b      	ldr	r3, [r7, #4]
 8026f54:	681b      	ldr	r3, [r3, #0]
 8026f56:	4618      	mov	r0, r3
 8026f58:	f006 fc05 	bl	802d766 <USB_ReadInterrupts>
 8026f5c:	4603      	mov	r3, r0
 8026f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026f66:	d124      	bne.n	8026fb2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8026f68:	687b      	ldr	r3, [r7, #4]
 8026f6a:	681b      	ldr	r3, [r3, #0]
 8026f6c:	4618      	mov	r0, r3
 8026f6e:	f006 fc9b 	bl	802d8a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8026f72:	687b      	ldr	r3, [r7, #4]
 8026f74:	681b      	ldr	r3, [r3, #0]
 8026f76:	4618      	mov	r0, r3
 8026f78:	f005 fd3b 	bl	802c9f2 <USB_GetDevSpeed>
 8026f7c:	4603      	mov	r3, r0
 8026f7e:	461a      	mov	r2, r3
 8026f80:	687b      	ldr	r3, [r7, #4]
 8026f82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8026f84:	687b      	ldr	r3, [r7, #4]
 8026f86:	681c      	ldr	r4, [r3, #0]
 8026f88:	f001 f920 	bl	80281cc <HAL_RCC_GetHCLKFreq>
 8026f8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8026f8e:	687b      	ldr	r3, [r7, #4]
 8026f90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8026f92:	b2db      	uxtb	r3, r3
 8026f94:	461a      	mov	r2, r3
 8026f96:	4620      	mov	r0, r4
 8026f98:	f005 fa78 	bl	802c48c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8026f9c:	6878      	ldr	r0, [r7, #4]
 8026f9e:	f00d f88a 	bl	80340b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8026fa2:	687b      	ldr	r3, [r7, #4]
 8026fa4:	681b      	ldr	r3, [r3, #0]
 8026fa6:	695a      	ldr	r2, [r3, #20]
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	681b      	ldr	r3, [r3, #0]
 8026fac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8026fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8026fb2:	687b      	ldr	r3, [r7, #4]
 8026fb4:	681b      	ldr	r3, [r3, #0]
 8026fb6:	4618      	mov	r0, r3
 8026fb8:	f006 fbd5 	bl	802d766 <USB_ReadInterrupts>
 8026fbc:	4603      	mov	r3, r0
 8026fbe:	f003 0308 	and.w	r3, r3, #8
 8026fc2:	2b08      	cmp	r3, #8
 8026fc4:	d10a      	bne.n	8026fdc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8026fc6:	6878      	ldr	r0, [r7, #4]
 8026fc8:	f00d f867 	bl	803409a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8026fcc:	687b      	ldr	r3, [r7, #4]
 8026fce:	681b      	ldr	r3, [r3, #0]
 8026fd0:	695a      	ldr	r2, [r3, #20]
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	681b      	ldr	r3, [r3, #0]
 8026fd6:	f002 0208 	and.w	r2, r2, #8
 8026fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8026fdc:	687b      	ldr	r3, [r7, #4]
 8026fde:	681b      	ldr	r3, [r3, #0]
 8026fe0:	4618      	mov	r0, r3
 8026fe2:	f006 fbc0 	bl	802d766 <USB_ReadInterrupts>
 8026fe6:	4603      	mov	r3, r0
 8026fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8026ff0:	d10f      	bne.n	8027012 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8026ff2:	2300      	movs	r3, #0
 8026ff4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8026ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ff8:	b2db      	uxtb	r3, r3
 8026ffa:	4619      	mov	r1, r3
 8026ffc:	6878      	ldr	r0, [r7, #4]
 8026ffe:	f00d f8c9 	bl	8034194 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	681b      	ldr	r3, [r3, #0]
 8027006:	695a      	ldr	r2, [r3, #20]
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	681b      	ldr	r3, [r3, #0]
 802700c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8027010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8027012:	687b      	ldr	r3, [r7, #4]
 8027014:	681b      	ldr	r3, [r3, #0]
 8027016:	4618      	mov	r0, r3
 8027018:	f006 fba5 	bl	802d766 <USB_ReadInterrupts>
 802701c:	4603      	mov	r3, r0
 802701e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8027026:	d10f      	bne.n	8027048 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8027028:	2300      	movs	r3, #0
 802702a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 802702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802702e:	b2db      	uxtb	r3, r3
 8027030:	4619      	mov	r1, r3
 8027032:	6878      	ldr	r0, [r7, #4]
 8027034:	f00d f89c 	bl	8034170 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8027038:	687b      	ldr	r3, [r7, #4]
 802703a:	681b      	ldr	r3, [r3, #0]
 802703c:	695a      	ldr	r2, [r3, #20]
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	681b      	ldr	r3, [r3, #0]
 8027042:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8027046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8027048:	687b      	ldr	r3, [r7, #4]
 802704a:	681b      	ldr	r3, [r3, #0]
 802704c:	4618      	mov	r0, r3
 802704e:	f006 fb8a 	bl	802d766 <USB_ReadInterrupts>
 8027052:	4603      	mov	r3, r0
 8027054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8027058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802705c:	d10a      	bne.n	8027074 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 802705e:	6878      	ldr	r0, [r7, #4]
 8027060:	f00d f8aa 	bl	80341b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	695a      	ldr	r2, [r3, #20]
 802706a:	687b      	ldr	r3, [r7, #4]
 802706c:	681b      	ldr	r3, [r3, #0]
 802706e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8027072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8027074:	687b      	ldr	r3, [r7, #4]
 8027076:	681b      	ldr	r3, [r3, #0]
 8027078:	4618      	mov	r0, r3
 802707a:	f006 fb74 	bl	802d766 <USB_ReadInterrupts>
 802707e:	4603      	mov	r3, r0
 8027080:	f003 0304 	and.w	r3, r3, #4
 8027084:	2b04      	cmp	r3, #4
 8027086:	d115      	bne.n	80270b4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8027088:	687b      	ldr	r3, [r7, #4]
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	685b      	ldr	r3, [r3, #4]
 802708e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8027090:	69bb      	ldr	r3, [r7, #24]
 8027092:	f003 0304 	and.w	r3, r3, #4
 8027096:	2b00      	cmp	r3, #0
 8027098:	d002      	beq.n	80270a0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 802709a:	6878      	ldr	r0, [r7, #4]
 802709c:	f00d f89a 	bl	80341d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80270a0:	687b      	ldr	r3, [r7, #4]
 80270a2:	681b      	ldr	r3, [r3, #0]
 80270a4:	6859      	ldr	r1, [r3, #4]
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	681b      	ldr	r3, [r3, #0]
 80270aa:	69ba      	ldr	r2, [r7, #24]
 80270ac:	430a      	orrs	r2, r1
 80270ae:	605a      	str	r2, [r3, #4]
 80270b0:	e000      	b.n	80270b4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80270b2:	bf00      	nop
    }
  }
}
 80270b4:	3734      	adds	r7, #52	; 0x34
 80270b6:	46bd      	mov	sp, r7
 80270b8:	bd90      	pop	{r4, r7, pc}

080270ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80270ba:	b580      	push	{r7, lr}
 80270bc:	b082      	sub	sp, #8
 80270be:	af00      	add	r7, sp, #0
 80270c0:	6078      	str	r0, [r7, #4]
 80270c2:	460b      	mov	r3, r1
 80270c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80270c6:	687b      	ldr	r3, [r7, #4]
 80270c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80270cc:	2b01      	cmp	r3, #1
 80270ce:	d101      	bne.n	80270d4 <HAL_PCD_SetAddress+0x1a>
 80270d0:	2302      	movs	r3, #2
 80270d2:	e013      	b.n	80270fc <HAL_PCD_SetAddress+0x42>
 80270d4:	687b      	ldr	r3, [r7, #4]
 80270d6:	2201      	movs	r2, #1
 80270d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	78fa      	ldrb	r2, [r7, #3]
 80270e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80270e4:	687b      	ldr	r3, [r7, #4]
 80270e6:	681b      	ldr	r3, [r3, #0]
 80270e8:	78fa      	ldrb	r2, [r7, #3]
 80270ea:	4611      	mov	r1, r2
 80270ec:	4618      	mov	r0, r3
 80270ee:	f006 fad2 	bl	802d696 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80270f2:	687b      	ldr	r3, [r7, #4]
 80270f4:	2200      	movs	r2, #0
 80270f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80270fa:	2300      	movs	r3, #0
}
 80270fc:	4618      	mov	r0, r3
 80270fe:	3708      	adds	r7, #8
 8027100:	46bd      	mov	sp, r7
 8027102:	bd80      	pop	{r7, pc}

08027104 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8027104:	b580      	push	{r7, lr}
 8027106:	b084      	sub	sp, #16
 8027108:	af00      	add	r7, sp, #0
 802710a:	6078      	str	r0, [r7, #4]
 802710c:	4608      	mov	r0, r1
 802710e:	4611      	mov	r1, r2
 8027110:	461a      	mov	r2, r3
 8027112:	4603      	mov	r3, r0
 8027114:	70fb      	strb	r3, [r7, #3]
 8027116:	460b      	mov	r3, r1
 8027118:	803b      	strh	r3, [r7, #0]
 802711a:	4613      	mov	r3, r2
 802711c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 802711e:	2300      	movs	r3, #0
 8027120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8027122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027126:	2b00      	cmp	r3, #0
 8027128:	da0f      	bge.n	802714a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802712a:	78fb      	ldrb	r3, [r7, #3]
 802712c:	f003 020f 	and.w	r2, r3, #15
 8027130:	4613      	mov	r3, r2
 8027132:	00db      	lsls	r3, r3, #3
 8027134:	1a9b      	subs	r3, r3, r2
 8027136:	009b      	lsls	r3, r3, #2
 8027138:	3338      	adds	r3, #56	; 0x38
 802713a:	687a      	ldr	r2, [r7, #4]
 802713c:	4413      	add	r3, r2
 802713e:	3304      	adds	r3, #4
 8027140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8027142:	68fb      	ldr	r3, [r7, #12]
 8027144:	2201      	movs	r2, #1
 8027146:	705a      	strb	r2, [r3, #1]
 8027148:	e00f      	b.n	802716a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802714a:	78fb      	ldrb	r3, [r7, #3]
 802714c:	f003 020f 	and.w	r2, r3, #15
 8027150:	4613      	mov	r3, r2
 8027152:	00db      	lsls	r3, r3, #3
 8027154:	1a9b      	subs	r3, r3, r2
 8027156:	009b      	lsls	r3, r3, #2
 8027158:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 802715c:	687a      	ldr	r2, [r7, #4]
 802715e:	4413      	add	r3, r2
 8027160:	3304      	adds	r3, #4
 8027162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8027164:	68fb      	ldr	r3, [r7, #12]
 8027166:	2200      	movs	r2, #0
 8027168:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 802716a:	78fb      	ldrb	r3, [r7, #3]
 802716c:	f003 030f 	and.w	r3, r3, #15
 8027170:	b2da      	uxtb	r2, r3
 8027172:	68fb      	ldr	r3, [r7, #12]
 8027174:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8027176:	883a      	ldrh	r2, [r7, #0]
 8027178:	68fb      	ldr	r3, [r7, #12]
 802717a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 802717c:	68fb      	ldr	r3, [r7, #12]
 802717e:	78ba      	ldrb	r2, [r7, #2]
 8027180:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8027182:	68fb      	ldr	r3, [r7, #12]
 8027184:	785b      	ldrb	r3, [r3, #1]
 8027186:	2b00      	cmp	r3, #0
 8027188:	d004      	beq.n	8027194 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 802718a:	68fb      	ldr	r3, [r7, #12]
 802718c:	781b      	ldrb	r3, [r3, #0]
 802718e:	b29a      	uxth	r2, r3
 8027190:	68fb      	ldr	r3, [r7, #12]
 8027192:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8027194:	78bb      	ldrb	r3, [r7, #2]
 8027196:	2b02      	cmp	r3, #2
 8027198:	d102      	bne.n	80271a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 802719a:	68fb      	ldr	r3, [r7, #12]
 802719c:	2200      	movs	r2, #0
 802719e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80271a6:	2b01      	cmp	r3, #1
 80271a8:	d101      	bne.n	80271ae <HAL_PCD_EP_Open+0xaa>
 80271aa:	2302      	movs	r3, #2
 80271ac:	e00e      	b.n	80271cc <HAL_PCD_EP_Open+0xc8>
 80271ae:	687b      	ldr	r3, [r7, #4]
 80271b0:	2201      	movs	r2, #1
 80271b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80271b6:	687b      	ldr	r3, [r7, #4]
 80271b8:	681b      	ldr	r3, [r3, #0]
 80271ba:	68f9      	ldr	r1, [r7, #12]
 80271bc:	4618      	mov	r0, r3
 80271be:	f005 fc3d 	bl	802ca3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	2200      	movs	r2, #0
 80271c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80271ca:	7afb      	ldrb	r3, [r7, #11]
}
 80271cc:	4618      	mov	r0, r3
 80271ce:	3710      	adds	r7, #16
 80271d0:	46bd      	mov	sp, r7
 80271d2:	bd80      	pop	{r7, pc}

080271d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80271d4:	b580      	push	{r7, lr}
 80271d6:	b084      	sub	sp, #16
 80271d8:	af00      	add	r7, sp, #0
 80271da:	6078      	str	r0, [r7, #4]
 80271dc:	460b      	mov	r3, r1
 80271de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80271e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80271e4:	2b00      	cmp	r3, #0
 80271e6:	da0f      	bge.n	8027208 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80271e8:	78fb      	ldrb	r3, [r7, #3]
 80271ea:	f003 020f 	and.w	r2, r3, #15
 80271ee:	4613      	mov	r3, r2
 80271f0:	00db      	lsls	r3, r3, #3
 80271f2:	1a9b      	subs	r3, r3, r2
 80271f4:	009b      	lsls	r3, r3, #2
 80271f6:	3338      	adds	r3, #56	; 0x38
 80271f8:	687a      	ldr	r2, [r7, #4]
 80271fa:	4413      	add	r3, r2
 80271fc:	3304      	adds	r3, #4
 80271fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8027200:	68fb      	ldr	r3, [r7, #12]
 8027202:	2201      	movs	r2, #1
 8027204:	705a      	strb	r2, [r3, #1]
 8027206:	e00f      	b.n	8027228 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027208:	78fb      	ldrb	r3, [r7, #3]
 802720a:	f003 020f 	and.w	r2, r3, #15
 802720e:	4613      	mov	r3, r2
 8027210:	00db      	lsls	r3, r3, #3
 8027212:	1a9b      	subs	r3, r3, r2
 8027214:	009b      	lsls	r3, r3, #2
 8027216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 802721a:	687a      	ldr	r2, [r7, #4]
 802721c:	4413      	add	r3, r2
 802721e:	3304      	adds	r3, #4
 8027220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8027222:	68fb      	ldr	r3, [r7, #12]
 8027224:	2200      	movs	r2, #0
 8027226:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8027228:	78fb      	ldrb	r3, [r7, #3]
 802722a:	f003 030f 	and.w	r3, r3, #15
 802722e:	b2da      	uxtb	r2, r3
 8027230:	68fb      	ldr	r3, [r7, #12]
 8027232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 802723a:	2b01      	cmp	r3, #1
 802723c:	d101      	bne.n	8027242 <HAL_PCD_EP_Close+0x6e>
 802723e:	2302      	movs	r3, #2
 8027240:	e00e      	b.n	8027260 <HAL_PCD_EP_Close+0x8c>
 8027242:	687b      	ldr	r3, [r7, #4]
 8027244:	2201      	movs	r2, #1
 8027246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 802724a:	687b      	ldr	r3, [r7, #4]
 802724c:	681b      	ldr	r3, [r3, #0]
 802724e:	68f9      	ldr	r1, [r7, #12]
 8027250:	4618      	mov	r0, r3
 8027252:	f005 fc7b 	bl	802cb4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	2200      	movs	r2, #0
 802725a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 802725e:	2300      	movs	r3, #0
}
 8027260:	4618      	mov	r0, r3
 8027262:	3710      	adds	r7, #16
 8027264:	46bd      	mov	sp, r7
 8027266:	bd80      	pop	{r7, pc}

08027268 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8027268:	b580      	push	{r7, lr}
 802726a:	b086      	sub	sp, #24
 802726c:	af00      	add	r7, sp, #0
 802726e:	60f8      	str	r0, [r7, #12]
 8027270:	607a      	str	r2, [r7, #4]
 8027272:	603b      	str	r3, [r7, #0]
 8027274:	460b      	mov	r3, r1
 8027276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027278:	7afb      	ldrb	r3, [r7, #11]
 802727a:	f003 020f 	and.w	r2, r3, #15
 802727e:	4613      	mov	r3, r2
 8027280:	00db      	lsls	r3, r3, #3
 8027282:	1a9b      	subs	r3, r3, r2
 8027284:	009b      	lsls	r3, r3, #2
 8027286:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 802728a:	68fa      	ldr	r2, [r7, #12]
 802728c:	4413      	add	r3, r2
 802728e:	3304      	adds	r3, #4
 8027290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8027292:	697b      	ldr	r3, [r7, #20]
 8027294:	687a      	ldr	r2, [r7, #4]
 8027296:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8027298:	697b      	ldr	r3, [r7, #20]
 802729a:	683a      	ldr	r2, [r7, #0]
 802729c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 802729e:	697b      	ldr	r3, [r7, #20]
 80272a0:	2200      	movs	r2, #0
 80272a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80272a4:	697b      	ldr	r3, [r7, #20]
 80272a6:	2200      	movs	r2, #0
 80272a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80272aa:	7afb      	ldrb	r3, [r7, #11]
 80272ac:	f003 030f 	and.w	r3, r3, #15
 80272b0:	b2da      	uxtb	r2, r3
 80272b2:	697b      	ldr	r3, [r7, #20]
 80272b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80272b6:	68fb      	ldr	r3, [r7, #12]
 80272b8:	691b      	ldr	r3, [r3, #16]
 80272ba:	2b01      	cmp	r3, #1
 80272bc:	d102      	bne.n	80272c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80272be:	687a      	ldr	r2, [r7, #4]
 80272c0:	697b      	ldr	r3, [r7, #20]
 80272c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80272c4:	7afb      	ldrb	r3, [r7, #11]
 80272c6:	f003 030f 	and.w	r3, r3, #15
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	d109      	bne.n	80272e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80272ce:	68fb      	ldr	r3, [r7, #12]
 80272d0:	6818      	ldr	r0, [r3, #0]
 80272d2:	68fb      	ldr	r3, [r7, #12]
 80272d4:	691b      	ldr	r3, [r3, #16]
 80272d6:	b2db      	uxtb	r3, r3
 80272d8:	461a      	mov	r2, r3
 80272da:	6979      	ldr	r1, [r7, #20]
 80272dc:	f005 ff56 	bl	802d18c <USB_EP0StartXfer>
 80272e0:	e008      	b.n	80272f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80272e2:	68fb      	ldr	r3, [r7, #12]
 80272e4:	6818      	ldr	r0, [r3, #0]
 80272e6:	68fb      	ldr	r3, [r7, #12]
 80272e8:	691b      	ldr	r3, [r3, #16]
 80272ea:	b2db      	uxtb	r3, r3
 80272ec:	461a      	mov	r2, r3
 80272ee:	6979      	ldr	r1, [r7, #20]
 80272f0:	f005 fd08 	bl	802cd04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80272f4:	2300      	movs	r3, #0
}
 80272f6:	4618      	mov	r0, r3
 80272f8:	3718      	adds	r7, #24
 80272fa:	46bd      	mov	sp, r7
 80272fc:	bd80      	pop	{r7, pc}

080272fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80272fe:	b480      	push	{r7}
 8027300:	b083      	sub	sp, #12
 8027302:	af00      	add	r7, sp, #0
 8027304:	6078      	str	r0, [r7, #4]
 8027306:	460b      	mov	r3, r1
 8027308:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 802730a:	78fb      	ldrb	r3, [r7, #3]
 802730c:	f003 020f 	and.w	r2, r3, #15
 8027310:	6879      	ldr	r1, [r7, #4]
 8027312:	4613      	mov	r3, r2
 8027314:	00db      	lsls	r3, r3, #3
 8027316:	1a9b      	subs	r3, r3, r2
 8027318:	009b      	lsls	r3, r3, #2
 802731a:	440b      	add	r3, r1
 802731c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8027320:	681b      	ldr	r3, [r3, #0]
}
 8027322:	4618      	mov	r0, r3
 8027324:	370c      	adds	r7, #12
 8027326:	46bd      	mov	sp, r7
 8027328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802732c:	4770      	bx	lr

0802732e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802732e:	b580      	push	{r7, lr}
 8027330:	b086      	sub	sp, #24
 8027332:	af00      	add	r7, sp, #0
 8027334:	60f8      	str	r0, [r7, #12]
 8027336:	607a      	str	r2, [r7, #4]
 8027338:	603b      	str	r3, [r7, #0]
 802733a:	460b      	mov	r3, r1
 802733c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802733e:	7afb      	ldrb	r3, [r7, #11]
 8027340:	f003 020f 	and.w	r2, r3, #15
 8027344:	4613      	mov	r3, r2
 8027346:	00db      	lsls	r3, r3, #3
 8027348:	1a9b      	subs	r3, r3, r2
 802734a:	009b      	lsls	r3, r3, #2
 802734c:	3338      	adds	r3, #56	; 0x38
 802734e:	68fa      	ldr	r2, [r7, #12]
 8027350:	4413      	add	r3, r2
 8027352:	3304      	adds	r3, #4
 8027354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8027356:	697b      	ldr	r3, [r7, #20]
 8027358:	687a      	ldr	r2, [r7, #4]
 802735a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 802735c:	697b      	ldr	r3, [r7, #20]
 802735e:	683a      	ldr	r2, [r7, #0]
 8027360:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8027362:	697b      	ldr	r3, [r7, #20]
 8027364:	2200      	movs	r2, #0
 8027366:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8027368:	697b      	ldr	r3, [r7, #20]
 802736a:	2201      	movs	r2, #1
 802736c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 802736e:	7afb      	ldrb	r3, [r7, #11]
 8027370:	f003 030f 	and.w	r3, r3, #15
 8027374:	b2da      	uxtb	r2, r3
 8027376:	697b      	ldr	r3, [r7, #20]
 8027378:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 802737a:	68fb      	ldr	r3, [r7, #12]
 802737c:	691b      	ldr	r3, [r3, #16]
 802737e:	2b01      	cmp	r3, #1
 8027380:	d102      	bne.n	8027388 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8027382:	687a      	ldr	r2, [r7, #4]
 8027384:	697b      	ldr	r3, [r7, #20]
 8027386:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8027388:	7afb      	ldrb	r3, [r7, #11]
 802738a:	f003 030f 	and.w	r3, r3, #15
 802738e:	2b00      	cmp	r3, #0
 8027390:	d109      	bne.n	80273a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8027392:	68fb      	ldr	r3, [r7, #12]
 8027394:	6818      	ldr	r0, [r3, #0]
 8027396:	68fb      	ldr	r3, [r7, #12]
 8027398:	691b      	ldr	r3, [r3, #16]
 802739a:	b2db      	uxtb	r3, r3
 802739c:	461a      	mov	r2, r3
 802739e:	6979      	ldr	r1, [r7, #20]
 80273a0:	f005 fef4 	bl	802d18c <USB_EP0StartXfer>
 80273a4:	e008      	b.n	80273b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80273a6:	68fb      	ldr	r3, [r7, #12]
 80273a8:	6818      	ldr	r0, [r3, #0]
 80273aa:	68fb      	ldr	r3, [r7, #12]
 80273ac:	691b      	ldr	r3, [r3, #16]
 80273ae:	b2db      	uxtb	r3, r3
 80273b0:	461a      	mov	r2, r3
 80273b2:	6979      	ldr	r1, [r7, #20]
 80273b4:	f005 fca6 	bl	802cd04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80273b8:	2300      	movs	r3, #0
}
 80273ba:	4618      	mov	r0, r3
 80273bc:	3718      	adds	r7, #24
 80273be:	46bd      	mov	sp, r7
 80273c0:	bd80      	pop	{r7, pc}

080273c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80273c2:	b580      	push	{r7, lr}
 80273c4:	b084      	sub	sp, #16
 80273c6:	af00      	add	r7, sp, #0
 80273c8:	6078      	str	r0, [r7, #4]
 80273ca:	460b      	mov	r3, r1
 80273cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80273ce:	78fb      	ldrb	r3, [r7, #3]
 80273d0:	f003 020f 	and.w	r2, r3, #15
 80273d4:	687b      	ldr	r3, [r7, #4]
 80273d6:	685b      	ldr	r3, [r3, #4]
 80273d8:	429a      	cmp	r2, r3
 80273da:	d901      	bls.n	80273e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80273dc:	2301      	movs	r3, #1
 80273de:	e050      	b.n	8027482 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80273e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80273e4:	2b00      	cmp	r3, #0
 80273e6:	da0f      	bge.n	8027408 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80273e8:	78fb      	ldrb	r3, [r7, #3]
 80273ea:	f003 020f 	and.w	r2, r3, #15
 80273ee:	4613      	mov	r3, r2
 80273f0:	00db      	lsls	r3, r3, #3
 80273f2:	1a9b      	subs	r3, r3, r2
 80273f4:	009b      	lsls	r3, r3, #2
 80273f6:	3338      	adds	r3, #56	; 0x38
 80273f8:	687a      	ldr	r2, [r7, #4]
 80273fa:	4413      	add	r3, r2
 80273fc:	3304      	adds	r3, #4
 80273fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8027400:	68fb      	ldr	r3, [r7, #12]
 8027402:	2201      	movs	r2, #1
 8027404:	705a      	strb	r2, [r3, #1]
 8027406:	e00d      	b.n	8027424 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8027408:	78fa      	ldrb	r2, [r7, #3]
 802740a:	4613      	mov	r3, r2
 802740c:	00db      	lsls	r3, r3, #3
 802740e:	1a9b      	subs	r3, r3, r2
 8027410:	009b      	lsls	r3, r3, #2
 8027412:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8027416:	687a      	ldr	r2, [r7, #4]
 8027418:	4413      	add	r3, r2
 802741a:	3304      	adds	r3, #4
 802741c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802741e:	68fb      	ldr	r3, [r7, #12]
 8027420:	2200      	movs	r2, #0
 8027422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8027424:	68fb      	ldr	r3, [r7, #12]
 8027426:	2201      	movs	r2, #1
 8027428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 802742a:	78fb      	ldrb	r3, [r7, #3]
 802742c:	f003 030f 	and.w	r3, r3, #15
 8027430:	b2da      	uxtb	r2, r3
 8027432:	68fb      	ldr	r3, [r7, #12]
 8027434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8027436:	687b      	ldr	r3, [r7, #4]
 8027438:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 802743c:	2b01      	cmp	r3, #1
 802743e:	d101      	bne.n	8027444 <HAL_PCD_EP_SetStall+0x82>
 8027440:	2302      	movs	r3, #2
 8027442:	e01e      	b.n	8027482 <HAL_PCD_EP_SetStall+0xc0>
 8027444:	687b      	ldr	r3, [r7, #4]
 8027446:	2201      	movs	r2, #1
 8027448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 802744c:	687b      	ldr	r3, [r7, #4]
 802744e:	681b      	ldr	r3, [r3, #0]
 8027450:	68f9      	ldr	r1, [r7, #12]
 8027452:	4618      	mov	r0, r3
 8027454:	f006 f84b 	bl	802d4ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8027458:	78fb      	ldrb	r3, [r7, #3]
 802745a:	f003 030f 	and.w	r3, r3, #15
 802745e:	2b00      	cmp	r3, #0
 8027460:	d10a      	bne.n	8027478 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8027462:	687b      	ldr	r3, [r7, #4]
 8027464:	6818      	ldr	r0, [r3, #0]
 8027466:	687b      	ldr	r3, [r7, #4]
 8027468:	691b      	ldr	r3, [r3, #16]
 802746a:	b2d9      	uxtb	r1, r3
 802746c:	687b      	ldr	r3, [r7, #4]
 802746e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8027472:	461a      	mov	r2, r3
 8027474:	f006 fa3c 	bl	802d8f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8027478:	687b      	ldr	r3, [r7, #4]
 802747a:	2200      	movs	r2, #0
 802747c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8027480:	2300      	movs	r3, #0
}
 8027482:	4618      	mov	r0, r3
 8027484:	3710      	adds	r7, #16
 8027486:	46bd      	mov	sp, r7
 8027488:	bd80      	pop	{r7, pc}

0802748a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802748a:	b580      	push	{r7, lr}
 802748c:	b084      	sub	sp, #16
 802748e:	af00      	add	r7, sp, #0
 8027490:	6078      	str	r0, [r7, #4]
 8027492:	460b      	mov	r3, r1
 8027494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8027496:	78fb      	ldrb	r3, [r7, #3]
 8027498:	f003 020f 	and.w	r2, r3, #15
 802749c:	687b      	ldr	r3, [r7, #4]
 802749e:	685b      	ldr	r3, [r3, #4]
 80274a0:	429a      	cmp	r2, r3
 80274a2:	d901      	bls.n	80274a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80274a4:	2301      	movs	r3, #1
 80274a6:	e042      	b.n	802752e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80274a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80274ac:	2b00      	cmp	r3, #0
 80274ae:	da0f      	bge.n	80274d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80274b0:	78fb      	ldrb	r3, [r7, #3]
 80274b2:	f003 020f 	and.w	r2, r3, #15
 80274b6:	4613      	mov	r3, r2
 80274b8:	00db      	lsls	r3, r3, #3
 80274ba:	1a9b      	subs	r3, r3, r2
 80274bc:	009b      	lsls	r3, r3, #2
 80274be:	3338      	adds	r3, #56	; 0x38
 80274c0:	687a      	ldr	r2, [r7, #4]
 80274c2:	4413      	add	r3, r2
 80274c4:	3304      	adds	r3, #4
 80274c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80274c8:	68fb      	ldr	r3, [r7, #12]
 80274ca:	2201      	movs	r2, #1
 80274cc:	705a      	strb	r2, [r3, #1]
 80274ce:	e00f      	b.n	80274f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80274d0:	78fb      	ldrb	r3, [r7, #3]
 80274d2:	f003 020f 	and.w	r2, r3, #15
 80274d6:	4613      	mov	r3, r2
 80274d8:	00db      	lsls	r3, r3, #3
 80274da:	1a9b      	subs	r3, r3, r2
 80274dc:	009b      	lsls	r3, r3, #2
 80274de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80274e2:	687a      	ldr	r2, [r7, #4]
 80274e4:	4413      	add	r3, r2
 80274e6:	3304      	adds	r3, #4
 80274e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80274ea:	68fb      	ldr	r3, [r7, #12]
 80274ec:	2200      	movs	r2, #0
 80274ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80274f0:	68fb      	ldr	r3, [r7, #12]
 80274f2:	2200      	movs	r2, #0
 80274f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80274f6:	78fb      	ldrb	r3, [r7, #3]
 80274f8:	f003 030f 	and.w	r3, r3, #15
 80274fc:	b2da      	uxtb	r2, r3
 80274fe:	68fb      	ldr	r3, [r7, #12]
 8027500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8027508:	2b01      	cmp	r3, #1
 802750a:	d101      	bne.n	8027510 <HAL_PCD_EP_ClrStall+0x86>
 802750c:	2302      	movs	r3, #2
 802750e:	e00e      	b.n	802752e <HAL_PCD_EP_ClrStall+0xa4>
 8027510:	687b      	ldr	r3, [r7, #4]
 8027512:	2201      	movs	r2, #1
 8027514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8027518:	687b      	ldr	r3, [r7, #4]
 802751a:	681b      	ldr	r3, [r3, #0]
 802751c:	68f9      	ldr	r1, [r7, #12]
 802751e:	4618      	mov	r0, r3
 8027520:	f006 f853 	bl	802d5ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8027524:	687b      	ldr	r3, [r7, #4]
 8027526:	2200      	movs	r2, #0
 8027528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 802752c:	2300      	movs	r3, #0
}
 802752e:	4618      	mov	r0, r3
 8027530:	3710      	adds	r7, #16
 8027532:	46bd      	mov	sp, r7
 8027534:	bd80      	pop	{r7, pc}

08027536 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8027536:	b580      	push	{r7, lr}
 8027538:	b08a      	sub	sp, #40	; 0x28
 802753a:	af02      	add	r7, sp, #8
 802753c:	6078      	str	r0, [r7, #4]
 802753e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	681b      	ldr	r3, [r3, #0]
 8027544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027546:	697b      	ldr	r3, [r7, #20]
 8027548:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 802754a:	683a      	ldr	r2, [r7, #0]
 802754c:	4613      	mov	r3, r2
 802754e:	00db      	lsls	r3, r3, #3
 8027550:	1a9b      	subs	r3, r3, r2
 8027552:	009b      	lsls	r3, r3, #2
 8027554:	3338      	adds	r3, #56	; 0x38
 8027556:	687a      	ldr	r2, [r7, #4]
 8027558:	4413      	add	r3, r2
 802755a:	3304      	adds	r3, #4
 802755c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 802755e:	68fb      	ldr	r3, [r7, #12]
 8027560:	699a      	ldr	r2, [r3, #24]
 8027562:	68fb      	ldr	r3, [r7, #12]
 8027564:	695b      	ldr	r3, [r3, #20]
 8027566:	429a      	cmp	r2, r3
 8027568:	d901      	bls.n	802756e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 802756a:	2301      	movs	r3, #1
 802756c:	e06c      	b.n	8027648 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 802756e:	68fb      	ldr	r3, [r7, #12]
 8027570:	695a      	ldr	r2, [r3, #20]
 8027572:	68fb      	ldr	r3, [r7, #12]
 8027574:	699b      	ldr	r3, [r3, #24]
 8027576:	1ad3      	subs	r3, r2, r3
 8027578:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 802757a:	68fb      	ldr	r3, [r7, #12]
 802757c:	689b      	ldr	r3, [r3, #8]
 802757e:	69fa      	ldr	r2, [r7, #28]
 8027580:	429a      	cmp	r2, r3
 8027582:	d902      	bls.n	802758a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8027584:	68fb      	ldr	r3, [r7, #12]
 8027586:	689b      	ldr	r3, [r3, #8]
 8027588:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 802758a:	69fb      	ldr	r3, [r7, #28]
 802758c:	3303      	adds	r3, #3
 802758e:	089b      	lsrs	r3, r3, #2
 8027590:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8027592:	e02b      	b.n	80275ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8027594:	68fb      	ldr	r3, [r7, #12]
 8027596:	695a      	ldr	r2, [r3, #20]
 8027598:	68fb      	ldr	r3, [r7, #12]
 802759a:	699b      	ldr	r3, [r3, #24]
 802759c:	1ad3      	subs	r3, r2, r3
 802759e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80275a0:	68fb      	ldr	r3, [r7, #12]
 80275a2:	689b      	ldr	r3, [r3, #8]
 80275a4:	69fa      	ldr	r2, [r7, #28]
 80275a6:	429a      	cmp	r2, r3
 80275a8:	d902      	bls.n	80275b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80275aa:	68fb      	ldr	r3, [r7, #12]
 80275ac:	689b      	ldr	r3, [r3, #8]
 80275ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80275b0:	69fb      	ldr	r3, [r7, #28]
 80275b2:	3303      	adds	r3, #3
 80275b4:	089b      	lsrs	r3, r3, #2
 80275b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80275b8:	68fb      	ldr	r3, [r7, #12]
 80275ba:	68d9      	ldr	r1, [r3, #12]
 80275bc:	683b      	ldr	r3, [r7, #0]
 80275be:	b2da      	uxtb	r2, r3
 80275c0:	69fb      	ldr	r3, [r7, #28]
 80275c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80275c4:	687b      	ldr	r3, [r7, #4]
 80275c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80275c8:	b2db      	uxtb	r3, r3
 80275ca:	9300      	str	r3, [sp, #0]
 80275cc:	4603      	mov	r3, r0
 80275ce:	6978      	ldr	r0, [r7, #20]
 80275d0:	f005 ff2f 	bl	802d432 <USB_WritePacket>

    ep->xfer_buff  += len;
 80275d4:	68fb      	ldr	r3, [r7, #12]
 80275d6:	68da      	ldr	r2, [r3, #12]
 80275d8:	69fb      	ldr	r3, [r7, #28]
 80275da:	441a      	add	r2, r3
 80275dc:	68fb      	ldr	r3, [r7, #12]
 80275de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80275e0:	68fb      	ldr	r3, [r7, #12]
 80275e2:	699a      	ldr	r2, [r3, #24]
 80275e4:	69fb      	ldr	r3, [r7, #28]
 80275e6:	441a      	add	r2, r3
 80275e8:	68fb      	ldr	r3, [r7, #12]
 80275ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80275ec:	683b      	ldr	r3, [r7, #0]
 80275ee:	015a      	lsls	r2, r3, #5
 80275f0:	693b      	ldr	r3, [r7, #16]
 80275f2:	4413      	add	r3, r2
 80275f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80275f8:	699b      	ldr	r3, [r3, #24]
 80275fa:	b29b      	uxth	r3, r3
 80275fc:	69ba      	ldr	r2, [r7, #24]
 80275fe:	429a      	cmp	r2, r3
 8027600:	d809      	bhi.n	8027616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8027602:	68fb      	ldr	r3, [r7, #12]
 8027604:	699a      	ldr	r2, [r3, #24]
 8027606:	68fb      	ldr	r3, [r7, #12]
 8027608:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802760a:	429a      	cmp	r2, r3
 802760c:	d203      	bcs.n	8027616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802760e:	68fb      	ldr	r3, [r7, #12]
 8027610:	695b      	ldr	r3, [r3, #20]
 8027612:	2b00      	cmp	r3, #0
 8027614:	d1be      	bne.n	8027594 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8027616:	68fb      	ldr	r3, [r7, #12]
 8027618:	695a      	ldr	r2, [r3, #20]
 802761a:	68fb      	ldr	r3, [r7, #12]
 802761c:	699b      	ldr	r3, [r3, #24]
 802761e:	429a      	cmp	r2, r3
 8027620:	d811      	bhi.n	8027646 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8027622:	683b      	ldr	r3, [r7, #0]
 8027624:	f003 030f 	and.w	r3, r3, #15
 8027628:	2201      	movs	r2, #1
 802762a:	fa02 f303 	lsl.w	r3, r2, r3
 802762e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8027630:	693b      	ldr	r3, [r7, #16]
 8027632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8027638:	68bb      	ldr	r3, [r7, #8]
 802763a:	43db      	mvns	r3, r3
 802763c:	6939      	ldr	r1, [r7, #16]
 802763e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8027642:	4013      	ands	r3, r2
 8027644:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8027646:	2300      	movs	r3, #0
}
 8027648:	4618      	mov	r0, r3
 802764a:	3720      	adds	r7, #32
 802764c:	46bd      	mov	sp, r7
 802764e:	bd80      	pop	{r7, pc}

08027650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8027650:	b580      	push	{r7, lr}
 8027652:	b086      	sub	sp, #24
 8027654:	af00      	add	r7, sp, #0
 8027656:	6078      	str	r0, [r7, #4]
 8027658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802765a:	687b      	ldr	r3, [r7, #4]
 802765c:	681b      	ldr	r3, [r3, #0]
 802765e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027660:	697b      	ldr	r3, [r7, #20]
 8027662:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8027664:	697b      	ldr	r3, [r7, #20]
 8027666:	333c      	adds	r3, #60	; 0x3c
 8027668:	3304      	adds	r3, #4
 802766a:	681b      	ldr	r3, [r3, #0]
 802766c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 802766e:	683b      	ldr	r3, [r7, #0]
 8027670:	015a      	lsls	r2, r3, #5
 8027672:	693b      	ldr	r3, [r7, #16]
 8027674:	4413      	add	r3, r2
 8027676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802767a:	689b      	ldr	r3, [r3, #8]
 802767c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 802767e:	687b      	ldr	r3, [r7, #4]
 8027680:	691b      	ldr	r3, [r3, #16]
 8027682:	2b01      	cmp	r3, #1
 8027684:	f040 80a0 	bne.w	80277c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8027688:	68bb      	ldr	r3, [r7, #8]
 802768a:	f003 0308 	and.w	r3, r3, #8
 802768e:	2b00      	cmp	r3, #0
 8027690:	d015      	beq.n	80276be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027692:	68fb      	ldr	r3, [r7, #12]
 8027694:	4a72      	ldr	r2, [pc, #456]	; (8027860 <PCD_EP_OutXfrComplete_int+0x210>)
 8027696:	4293      	cmp	r3, r2
 8027698:	f240 80dd 	bls.w	8027856 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802769c:	68bb      	ldr	r3, [r7, #8]
 802769e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80276a2:	2b00      	cmp	r3, #0
 80276a4:	f000 80d7 	beq.w	8027856 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80276a8:	683b      	ldr	r3, [r7, #0]
 80276aa:	015a      	lsls	r2, r3, #5
 80276ac:	693b      	ldr	r3, [r7, #16]
 80276ae:	4413      	add	r3, r2
 80276b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80276b4:	461a      	mov	r2, r3
 80276b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80276ba:	6093      	str	r3, [r2, #8]
 80276bc:	e0cb      	b.n	8027856 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80276be:	68bb      	ldr	r3, [r7, #8]
 80276c0:	f003 0320 	and.w	r3, r3, #32
 80276c4:	2b00      	cmp	r3, #0
 80276c6:	d009      	beq.n	80276dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80276c8:	683b      	ldr	r3, [r7, #0]
 80276ca:	015a      	lsls	r2, r3, #5
 80276cc:	693b      	ldr	r3, [r7, #16]
 80276ce:	4413      	add	r3, r2
 80276d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80276d4:	461a      	mov	r2, r3
 80276d6:	2320      	movs	r3, #32
 80276d8:	6093      	str	r3, [r2, #8]
 80276da:	e0bc      	b.n	8027856 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80276dc:	68bb      	ldr	r3, [r7, #8]
 80276de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80276e2:	2b00      	cmp	r3, #0
 80276e4:	f040 80b7 	bne.w	8027856 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80276e8:	68fb      	ldr	r3, [r7, #12]
 80276ea:	4a5d      	ldr	r2, [pc, #372]	; (8027860 <PCD_EP_OutXfrComplete_int+0x210>)
 80276ec:	4293      	cmp	r3, r2
 80276ee:	d90f      	bls.n	8027710 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80276f0:	68bb      	ldr	r3, [r7, #8]
 80276f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d00a      	beq.n	8027710 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80276fa:	683b      	ldr	r3, [r7, #0]
 80276fc:	015a      	lsls	r2, r3, #5
 80276fe:	693b      	ldr	r3, [r7, #16]
 8027700:	4413      	add	r3, r2
 8027702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027706:	461a      	mov	r2, r3
 8027708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802770c:	6093      	str	r3, [r2, #8]
 802770e:	e0a2      	b.n	8027856 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8027710:	6879      	ldr	r1, [r7, #4]
 8027712:	683a      	ldr	r2, [r7, #0]
 8027714:	4613      	mov	r3, r2
 8027716:	00db      	lsls	r3, r3, #3
 8027718:	1a9b      	subs	r3, r3, r2
 802771a:	009b      	lsls	r3, r3, #2
 802771c:	440b      	add	r3, r1
 802771e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8027722:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8027724:	683b      	ldr	r3, [r7, #0]
 8027726:	0159      	lsls	r1, r3, #5
 8027728:	693b      	ldr	r3, [r7, #16]
 802772a:	440b      	add	r3, r1
 802772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027730:	691b      	ldr	r3, [r3, #16]
 8027732:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8027736:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8027738:	6878      	ldr	r0, [r7, #4]
 802773a:	683a      	ldr	r2, [r7, #0]
 802773c:	4613      	mov	r3, r2
 802773e:	00db      	lsls	r3, r3, #3
 8027740:	1a9b      	subs	r3, r3, r2
 8027742:	009b      	lsls	r3, r3, #2
 8027744:	4403      	add	r3, r0
 8027746:	f503 7305 	add.w	r3, r3, #532	; 0x214
 802774a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 802774c:	6879      	ldr	r1, [r7, #4]
 802774e:	683a      	ldr	r2, [r7, #0]
 8027750:	4613      	mov	r3, r2
 8027752:	00db      	lsls	r3, r3, #3
 8027754:	1a9b      	subs	r3, r3, r2
 8027756:	009b      	lsls	r3, r3, #2
 8027758:	440b      	add	r3, r1
 802775a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 802775e:	6819      	ldr	r1, [r3, #0]
 8027760:	6878      	ldr	r0, [r7, #4]
 8027762:	683a      	ldr	r2, [r7, #0]
 8027764:	4613      	mov	r3, r2
 8027766:	00db      	lsls	r3, r3, #3
 8027768:	1a9b      	subs	r3, r3, r2
 802776a:	009b      	lsls	r3, r3, #2
 802776c:	4403      	add	r3, r0
 802776e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8027772:	681b      	ldr	r3, [r3, #0]
 8027774:	4419      	add	r1, r3
 8027776:	6878      	ldr	r0, [r7, #4]
 8027778:	683a      	ldr	r2, [r7, #0]
 802777a:	4613      	mov	r3, r2
 802777c:	00db      	lsls	r3, r3, #3
 802777e:	1a9b      	subs	r3, r3, r2
 8027780:	009b      	lsls	r3, r3, #2
 8027782:	4403      	add	r3, r0
 8027784:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8027788:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 802778a:	683b      	ldr	r3, [r7, #0]
 802778c:	2b00      	cmp	r3, #0
 802778e:	d114      	bne.n	80277ba <PCD_EP_OutXfrComplete_int+0x16a>
 8027790:	6879      	ldr	r1, [r7, #4]
 8027792:	683a      	ldr	r2, [r7, #0]
 8027794:	4613      	mov	r3, r2
 8027796:	00db      	lsls	r3, r3, #3
 8027798:	1a9b      	subs	r3, r3, r2
 802779a:	009b      	lsls	r3, r3, #2
 802779c:	440b      	add	r3, r1
 802779e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80277a2:	681b      	ldr	r3, [r3, #0]
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	d108      	bne.n	80277ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80277a8:	687b      	ldr	r3, [r7, #4]
 80277aa:	6818      	ldr	r0, [r3, #0]
 80277ac:	687b      	ldr	r3, [r7, #4]
 80277ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80277b2:	461a      	mov	r2, r3
 80277b4:	2101      	movs	r1, #1
 80277b6:	f006 f89b 	bl	802d8f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80277ba:	683b      	ldr	r3, [r7, #0]
 80277bc:	b2db      	uxtb	r3, r3
 80277be:	4619      	mov	r1, r3
 80277c0:	6878      	ldr	r0, [r7, #4]
 80277c2:	f00c fc35 	bl	8034030 <HAL_PCD_DataOutStageCallback>
 80277c6:	e046      	b.n	8027856 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80277c8:	68fb      	ldr	r3, [r7, #12]
 80277ca:	4a26      	ldr	r2, [pc, #152]	; (8027864 <PCD_EP_OutXfrComplete_int+0x214>)
 80277cc:	4293      	cmp	r3, r2
 80277ce:	d124      	bne.n	802781a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80277d0:	68bb      	ldr	r3, [r7, #8]
 80277d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80277d6:	2b00      	cmp	r3, #0
 80277d8:	d00a      	beq.n	80277f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80277da:	683b      	ldr	r3, [r7, #0]
 80277dc:	015a      	lsls	r2, r3, #5
 80277de:	693b      	ldr	r3, [r7, #16]
 80277e0:	4413      	add	r3, r2
 80277e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80277e6:	461a      	mov	r2, r3
 80277e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80277ec:	6093      	str	r3, [r2, #8]
 80277ee:	e032      	b.n	8027856 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80277f0:	68bb      	ldr	r3, [r7, #8]
 80277f2:	f003 0320 	and.w	r3, r3, #32
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	d008      	beq.n	802780c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80277fa:	683b      	ldr	r3, [r7, #0]
 80277fc:	015a      	lsls	r2, r3, #5
 80277fe:	693b      	ldr	r3, [r7, #16]
 8027800:	4413      	add	r3, r2
 8027802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027806:	461a      	mov	r2, r3
 8027808:	2320      	movs	r3, #32
 802780a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802780c:	683b      	ldr	r3, [r7, #0]
 802780e:	b2db      	uxtb	r3, r3
 8027810:	4619      	mov	r1, r3
 8027812:	6878      	ldr	r0, [r7, #4]
 8027814:	f00c fc0c 	bl	8034030 <HAL_PCD_DataOutStageCallback>
 8027818:	e01d      	b.n	8027856 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 802781a:	683b      	ldr	r3, [r7, #0]
 802781c:	2b00      	cmp	r3, #0
 802781e:	d114      	bne.n	802784a <PCD_EP_OutXfrComplete_int+0x1fa>
 8027820:	6879      	ldr	r1, [r7, #4]
 8027822:	683a      	ldr	r2, [r7, #0]
 8027824:	4613      	mov	r3, r2
 8027826:	00db      	lsls	r3, r3, #3
 8027828:	1a9b      	subs	r3, r3, r2
 802782a:	009b      	lsls	r3, r3, #2
 802782c:	440b      	add	r3, r1
 802782e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8027832:	681b      	ldr	r3, [r3, #0]
 8027834:	2b00      	cmp	r3, #0
 8027836:	d108      	bne.n	802784a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8027838:	687b      	ldr	r3, [r7, #4]
 802783a:	6818      	ldr	r0, [r3, #0]
 802783c:	687b      	ldr	r3, [r7, #4]
 802783e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8027842:	461a      	mov	r2, r3
 8027844:	2100      	movs	r1, #0
 8027846:	f006 f853 	bl	802d8f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802784a:	683b      	ldr	r3, [r7, #0]
 802784c:	b2db      	uxtb	r3, r3
 802784e:	4619      	mov	r1, r3
 8027850:	6878      	ldr	r0, [r7, #4]
 8027852:	f00c fbed 	bl	8034030 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8027856:	2300      	movs	r3, #0
}
 8027858:	4618      	mov	r0, r3
 802785a:	3718      	adds	r7, #24
 802785c:	46bd      	mov	sp, r7
 802785e:	bd80      	pop	{r7, pc}
 8027860:	4f54300a 	.word	0x4f54300a
 8027864:	4f54310a 	.word	0x4f54310a

08027868 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8027868:	b580      	push	{r7, lr}
 802786a:	b086      	sub	sp, #24
 802786c:	af00      	add	r7, sp, #0
 802786e:	6078      	str	r0, [r7, #4]
 8027870:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8027872:	687b      	ldr	r3, [r7, #4]
 8027874:	681b      	ldr	r3, [r3, #0]
 8027876:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027878:	697b      	ldr	r3, [r7, #20]
 802787a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802787c:	697b      	ldr	r3, [r7, #20]
 802787e:	333c      	adds	r3, #60	; 0x3c
 8027880:	3304      	adds	r3, #4
 8027882:	681b      	ldr	r3, [r3, #0]
 8027884:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8027886:	683b      	ldr	r3, [r7, #0]
 8027888:	015a      	lsls	r2, r3, #5
 802788a:	693b      	ldr	r3, [r7, #16]
 802788c:	4413      	add	r3, r2
 802788e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027892:	689b      	ldr	r3, [r3, #8]
 8027894:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027896:	68fb      	ldr	r3, [r7, #12]
 8027898:	4a15      	ldr	r2, [pc, #84]	; (80278f0 <PCD_EP_OutSetupPacket_int+0x88>)
 802789a:	4293      	cmp	r3, r2
 802789c:	d90e      	bls.n	80278bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802789e:	68bb      	ldr	r3, [r7, #8]
 80278a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	d009      	beq.n	80278bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80278a8:	683b      	ldr	r3, [r7, #0]
 80278aa:	015a      	lsls	r2, r3, #5
 80278ac:	693b      	ldr	r3, [r7, #16]
 80278ae:	4413      	add	r3, r2
 80278b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80278b4:	461a      	mov	r2, r3
 80278b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80278ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80278bc:	6878      	ldr	r0, [r7, #4]
 80278be:	f00c fba5 	bl	803400c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80278c2:	68fb      	ldr	r3, [r7, #12]
 80278c4:	4a0a      	ldr	r2, [pc, #40]	; (80278f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80278c6:	4293      	cmp	r3, r2
 80278c8:	d90c      	bls.n	80278e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80278ca:	687b      	ldr	r3, [r7, #4]
 80278cc:	691b      	ldr	r3, [r3, #16]
 80278ce:	2b01      	cmp	r3, #1
 80278d0:	d108      	bne.n	80278e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80278d2:	687b      	ldr	r3, [r7, #4]
 80278d4:	6818      	ldr	r0, [r3, #0]
 80278d6:	687b      	ldr	r3, [r7, #4]
 80278d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80278dc:	461a      	mov	r2, r3
 80278de:	2101      	movs	r1, #1
 80278e0:	f006 f806 	bl	802d8f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80278e4:	2300      	movs	r3, #0
}
 80278e6:	4618      	mov	r0, r3
 80278e8:	3718      	adds	r7, #24
 80278ea:	46bd      	mov	sp, r7
 80278ec:	bd80      	pop	{r7, pc}
 80278ee:	bf00      	nop
 80278f0:	4f54300a 	.word	0x4f54300a

080278f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80278f4:	b480      	push	{r7}
 80278f6:	b085      	sub	sp, #20
 80278f8:	af00      	add	r7, sp, #0
 80278fa:	6078      	str	r0, [r7, #4]
 80278fc:	460b      	mov	r3, r1
 80278fe:	70fb      	strb	r3, [r7, #3]
 8027900:	4613      	mov	r3, r2
 8027902:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8027904:	687b      	ldr	r3, [r7, #4]
 8027906:	681b      	ldr	r3, [r3, #0]
 8027908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802790a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 802790c:	78fb      	ldrb	r3, [r7, #3]
 802790e:	2b00      	cmp	r3, #0
 8027910:	d107      	bne.n	8027922 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8027912:	883b      	ldrh	r3, [r7, #0]
 8027914:	0419      	lsls	r1, r3, #16
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	681b      	ldr	r3, [r3, #0]
 802791a:	68ba      	ldr	r2, [r7, #8]
 802791c:	430a      	orrs	r2, r1
 802791e:	629a      	str	r2, [r3, #40]	; 0x28
 8027920:	e028      	b.n	8027974 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8027922:	687b      	ldr	r3, [r7, #4]
 8027924:	681b      	ldr	r3, [r3, #0]
 8027926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027928:	0c1b      	lsrs	r3, r3, #16
 802792a:	68ba      	ldr	r2, [r7, #8]
 802792c:	4413      	add	r3, r2
 802792e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8027930:	2300      	movs	r3, #0
 8027932:	73fb      	strb	r3, [r7, #15]
 8027934:	e00d      	b.n	8027952 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8027936:	687b      	ldr	r3, [r7, #4]
 8027938:	681a      	ldr	r2, [r3, #0]
 802793a:	7bfb      	ldrb	r3, [r7, #15]
 802793c:	3340      	adds	r3, #64	; 0x40
 802793e:	009b      	lsls	r3, r3, #2
 8027940:	4413      	add	r3, r2
 8027942:	685b      	ldr	r3, [r3, #4]
 8027944:	0c1b      	lsrs	r3, r3, #16
 8027946:	68ba      	ldr	r2, [r7, #8]
 8027948:	4413      	add	r3, r2
 802794a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 802794c:	7bfb      	ldrb	r3, [r7, #15]
 802794e:	3301      	adds	r3, #1
 8027950:	73fb      	strb	r3, [r7, #15]
 8027952:	7bfa      	ldrb	r2, [r7, #15]
 8027954:	78fb      	ldrb	r3, [r7, #3]
 8027956:	3b01      	subs	r3, #1
 8027958:	429a      	cmp	r2, r3
 802795a:	d3ec      	bcc.n	8027936 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 802795c:	883b      	ldrh	r3, [r7, #0]
 802795e:	0418      	lsls	r0, r3, #16
 8027960:	687b      	ldr	r3, [r7, #4]
 8027962:	6819      	ldr	r1, [r3, #0]
 8027964:	78fb      	ldrb	r3, [r7, #3]
 8027966:	3b01      	subs	r3, #1
 8027968:	68ba      	ldr	r2, [r7, #8]
 802796a:	4302      	orrs	r2, r0
 802796c:	3340      	adds	r3, #64	; 0x40
 802796e:	009b      	lsls	r3, r3, #2
 8027970:	440b      	add	r3, r1
 8027972:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8027974:	2300      	movs	r3, #0
}
 8027976:	4618      	mov	r0, r3
 8027978:	3714      	adds	r7, #20
 802797a:	46bd      	mov	sp, r7
 802797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027980:	4770      	bx	lr

08027982 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8027982:	b480      	push	{r7}
 8027984:	b083      	sub	sp, #12
 8027986:	af00      	add	r7, sp, #0
 8027988:	6078      	str	r0, [r7, #4]
 802798a:	460b      	mov	r3, r1
 802798c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	681b      	ldr	r3, [r3, #0]
 8027992:	887a      	ldrh	r2, [r7, #2]
 8027994:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8027996:	2300      	movs	r3, #0
}
 8027998:	4618      	mov	r0, r3
 802799a:	370c      	adds	r7, #12
 802799c:	46bd      	mov	sp, r7
 802799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279a2:	4770      	bx	lr

080279a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80279a4:	b480      	push	{r7}
 80279a6:	b083      	sub	sp, #12
 80279a8:	af00      	add	r7, sp, #0
 80279aa:	6078      	str	r0, [r7, #4]
 80279ac:	460b      	mov	r3, r1
 80279ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80279b0:	bf00      	nop
 80279b2:	370c      	adds	r7, #12
 80279b4:	46bd      	mov	sp, r7
 80279b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ba:	4770      	bx	lr

080279bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80279bc:	b580      	push	{r7, lr}
 80279be:	b086      	sub	sp, #24
 80279c0:	af00      	add	r7, sp, #0
 80279c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80279c4:	687b      	ldr	r3, [r7, #4]
 80279c6:	2b00      	cmp	r3, #0
 80279c8:	d101      	bne.n	80279ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80279ca:	2301      	movs	r3, #1
 80279cc:	e25b      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80279ce:	687b      	ldr	r3, [r7, #4]
 80279d0:	681b      	ldr	r3, [r3, #0]
 80279d2:	f003 0301 	and.w	r3, r3, #1
 80279d6:	2b00      	cmp	r3, #0
 80279d8:	d075      	beq.n	8027ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80279da:	4ba3      	ldr	r3, [pc, #652]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 80279dc:	689b      	ldr	r3, [r3, #8]
 80279de:	f003 030c 	and.w	r3, r3, #12
 80279e2:	2b04      	cmp	r3, #4
 80279e4:	d00c      	beq.n	8027a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80279e6:	4ba0      	ldr	r3, [pc, #640]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 80279e8:	689b      	ldr	r3, [r3, #8]
 80279ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80279ee:	2b08      	cmp	r3, #8
 80279f0:	d112      	bne.n	8027a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80279f2:	4b9d      	ldr	r3, [pc, #628]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 80279f4:	685b      	ldr	r3, [r3, #4]
 80279f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80279fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80279fe:	d10b      	bne.n	8027a18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027a00:	4b99      	ldr	r3, [pc, #612]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a02:	681b      	ldr	r3, [r3, #0]
 8027a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027a08:	2b00      	cmp	r3, #0
 8027a0a:	d05b      	beq.n	8027ac4 <HAL_RCC_OscConfig+0x108>
 8027a0c:	687b      	ldr	r3, [r7, #4]
 8027a0e:	685b      	ldr	r3, [r3, #4]
 8027a10:	2b00      	cmp	r3, #0
 8027a12:	d157      	bne.n	8027ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8027a14:	2301      	movs	r3, #1
 8027a16:	e236      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027a18:	687b      	ldr	r3, [r7, #4]
 8027a1a:	685b      	ldr	r3, [r3, #4]
 8027a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027a20:	d106      	bne.n	8027a30 <HAL_RCC_OscConfig+0x74>
 8027a22:	4b91      	ldr	r3, [pc, #580]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a24:	681b      	ldr	r3, [r3, #0]
 8027a26:	4a90      	ldr	r2, [pc, #576]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027a2c:	6013      	str	r3, [r2, #0]
 8027a2e:	e01d      	b.n	8027a6c <HAL_RCC_OscConfig+0xb0>
 8027a30:	687b      	ldr	r3, [r7, #4]
 8027a32:	685b      	ldr	r3, [r3, #4]
 8027a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027a38:	d10c      	bne.n	8027a54 <HAL_RCC_OscConfig+0x98>
 8027a3a:	4b8b      	ldr	r3, [pc, #556]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a3c:	681b      	ldr	r3, [r3, #0]
 8027a3e:	4a8a      	ldr	r2, [pc, #552]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027a44:	6013      	str	r3, [r2, #0]
 8027a46:	4b88      	ldr	r3, [pc, #544]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a48:	681b      	ldr	r3, [r3, #0]
 8027a4a:	4a87      	ldr	r2, [pc, #540]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027a50:	6013      	str	r3, [r2, #0]
 8027a52:	e00b      	b.n	8027a6c <HAL_RCC_OscConfig+0xb0>
 8027a54:	4b84      	ldr	r3, [pc, #528]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a56:	681b      	ldr	r3, [r3, #0]
 8027a58:	4a83      	ldr	r2, [pc, #524]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027a5e:	6013      	str	r3, [r2, #0]
 8027a60:	4b81      	ldr	r3, [pc, #516]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a62:	681b      	ldr	r3, [r3, #0]
 8027a64:	4a80      	ldr	r2, [pc, #512]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027a6c:	687b      	ldr	r3, [r7, #4]
 8027a6e:	685b      	ldr	r3, [r3, #4]
 8027a70:	2b00      	cmp	r3, #0
 8027a72:	d013      	beq.n	8027a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027a74:	f7fb fcbc 	bl	80233f0 <HAL_GetTick>
 8027a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027a7a:	e008      	b.n	8027a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027a7c:	f7fb fcb8 	bl	80233f0 <HAL_GetTick>
 8027a80:	4602      	mov	r2, r0
 8027a82:	693b      	ldr	r3, [r7, #16]
 8027a84:	1ad3      	subs	r3, r2, r3
 8027a86:	2b64      	cmp	r3, #100	; 0x64
 8027a88:	d901      	bls.n	8027a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8027a8a:	2303      	movs	r3, #3
 8027a8c:	e1fb      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027a8e:	4b76      	ldr	r3, [pc, #472]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027a90:	681b      	ldr	r3, [r3, #0]
 8027a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027a96:	2b00      	cmp	r3, #0
 8027a98:	d0f0      	beq.n	8027a7c <HAL_RCC_OscConfig+0xc0>
 8027a9a:	e014      	b.n	8027ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027a9c:	f7fb fca8 	bl	80233f0 <HAL_GetTick>
 8027aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027aa2:	e008      	b.n	8027ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027aa4:	f7fb fca4 	bl	80233f0 <HAL_GetTick>
 8027aa8:	4602      	mov	r2, r0
 8027aaa:	693b      	ldr	r3, [r7, #16]
 8027aac:	1ad3      	subs	r3, r2, r3
 8027aae:	2b64      	cmp	r3, #100	; 0x64
 8027ab0:	d901      	bls.n	8027ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027ab2:	2303      	movs	r3, #3
 8027ab4:	e1e7      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027ab6:	4b6c      	ldr	r3, [pc, #432]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027ab8:	681b      	ldr	r3, [r3, #0]
 8027aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027abe:	2b00      	cmp	r3, #0
 8027ac0:	d1f0      	bne.n	8027aa4 <HAL_RCC_OscConfig+0xe8>
 8027ac2:	e000      	b.n	8027ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027ac6:	687b      	ldr	r3, [r7, #4]
 8027ac8:	681b      	ldr	r3, [r3, #0]
 8027aca:	f003 0302 	and.w	r3, r3, #2
 8027ace:	2b00      	cmp	r3, #0
 8027ad0:	d063      	beq.n	8027b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027ad2:	4b65      	ldr	r3, [pc, #404]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027ad4:	689b      	ldr	r3, [r3, #8]
 8027ad6:	f003 030c 	and.w	r3, r3, #12
 8027ada:	2b00      	cmp	r3, #0
 8027adc:	d00b      	beq.n	8027af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027ade:	4b62      	ldr	r3, [pc, #392]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027ae0:	689b      	ldr	r3, [r3, #8]
 8027ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027ae6:	2b08      	cmp	r3, #8
 8027ae8:	d11c      	bne.n	8027b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027aea:	4b5f      	ldr	r3, [pc, #380]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027aec:	685b      	ldr	r3, [r3, #4]
 8027aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	d116      	bne.n	8027b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027af6:	4b5c      	ldr	r3, [pc, #368]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027af8:	681b      	ldr	r3, [r3, #0]
 8027afa:	f003 0302 	and.w	r3, r3, #2
 8027afe:	2b00      	cmp	r3, #0
 8027b00:	d005      	beq.n	8027b0e <HAL_RCC_OscConfig+0x152>
 8027b02:	687b      	ldr	r3, [r7, #4]
 8027b04:	68db      	ldr	r3, [r3, #12]
 8027b06:	2b01      	cmp	r3, #1
 8027b08:	d001      	beq.n	8027b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8027b0a:	2301      	movs	r3, #1
 8027b0c:	e1bb      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027b0e:	4b56      	ldr	r3, [pc, #344]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027b10:	681b      	ldr	r3, [r3, #0]
 8027b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027b16:	687b      	ldr	r3, [r7, #4]
 8027b18:	691b      	ldr	r3, [r3, #16]
 8027b1a:	00db      	lsls	r3, r3, #3
 8027b1c:	4952      	ldr	r1, [pc, #328]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027b1e:	4313      	orrs	r3, r2
 8027b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027b22:	e03a      	b.n	8027b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8027b24:	687b      	ldr	r3, [r7, #4]
 8027b26:	68db      	ldr	r3, [r3, #12]
 8027b28:	2b00      	cmp	r3, #0
 8027b2a:	d020      	beq.n	8027b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027b2c:	4b4f      	ldr	r3, [pc, #316]	; (8027c6c <HAL_RCC_OscConfig+0x2b0>)
 8027b2e:	2201      	movs	r2, #1
 8027b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027b32:	f7fb fc5d 	bl	80233f0 <HAL_GetTick>
 8027b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027b38:	e008      	b.n	8027b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027b3a:	f7fb fc59 	bl	80233f0 <HAL_GetTick>
 8027b3e:	4602      	mov	r2, r0
 8027b40:	693b      	ldr	r3, [r7, #16]
 8027b42:	1ad3      	subs	r3, r2, r3
 8027b44:	2b02      	cmp	r3, #2
 8027b46:	d901      	bls.n	8027b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027b48:	2303      	movs	r3, #3
 8027b4a:	e19c      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027b4c:	4b46      	ldr	r3, [pc, #280]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027b4e:	681b      	ldr	r3, [r3, #0]
 8027b50:	f003 0302 	and.w	r3, r3, #2
 8027b54:	2b00      	cmp	r3, #0
 8027b56:	d0f0      	beq.n	8027b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027b58:	4b43      	ldr	r3, [pc, #268]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027b5a:	681b      	ldr	r3, [r3, #0]
 8027b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027b60:	687b      	ldr	r3, [r7, #4]
 8027b62:	691b      	ldr	r3, [r3, #16]
 8027b64:	00db      	lsls	r3, r3, #3
 8027b66:	4940      	ldr	r1, [pc, #256]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027b68:	4313      	orrs	r3, r2
 8027b6a:	600b      	str	r3, [r1, #0]
 8027b6c:	e015      	b.n	8027b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8027b6e:	4b3f      	ldr	r3, [pc, #252]	; (8027c6c <HAL_RCC_OscConfig+0x2b0>)
 8027b70:	2200      	movs	r2, #0
 8027b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027b74:	f7fb fc3c 	bl	80233f0 <HAL_GetTick>
 8027b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027b7a:	e008      	b.n	8027b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027b7c:	f7fb fc38 	bl	80233f0 <HAL_GetTick>
 8027b80:	4602      	mov	r2, r0
 8027b82:	693b      	ldr	r3, [r7, #16]
 8027b84:	1ad3      	subs	r3, r2, r3
 8027b86:	2b02      	cmp	r3, #2
 8027b88:	d901      	bls.n	8027b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8027b8a:	2303      	movs	r3, #3
 8027b8c:	e17b      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027b8e:	4b36      	ldr	r3, [pc, #216]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027b90:	681b      	ldr	r3, [r3, #0]
 8027b92:	f003 0302 	and.w	r3, r3, #2
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d1f0      	bne.n	8027b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8027b9a:	687b      	ldr	r3, [r7, #4]
 8027b9c:	681b      	ldr	r3, [r3, #0]
 8027b9e:	f003 0308 	and.w	r3, r3, #8
 8027ba2:	2b00      	cmp	r3, #0
 8027ba4:	d030      	beq.n	8027c08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8027ba6:	687b      	ldr	r3, [r7, #4]
 8027ba8:	695b      	ldr	r3, [r3, #20]
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d016      	beq.n	8027bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027bae:	4b30      	ldr	r3, [pc, #192]	; (8027c70 <HAL_RCC_OscConfig+0x2b4>)
 8027bb0:	2201      	movs	r2, #1
 8027bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027bb4:	f7fb fc1c 	bl	80233f0 <HAL_GetTick>
 8027bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027bba:	e008      	b.n	8027bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027bbc:	f7fb fc18 	bl	80233f0 <HAL_GetTick>
 8027bc0:	4602      	mov	r2, r0
 8027bc2:	693b      	ldr	r3, [r7, #16]
 8027bc4:	1ad3      	subs	r3, r2, r3
 8027bc6:	2b02      	cmp	r3, #2
 8027bc8:	d901      	bls.n	8027bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8027bca:	2303      	movs	r3, #3
 8027bcc:	e15b      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027bce:	4b26      	ldr	r3, [pc, #152]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027bd2:	f003 0302 	and.w	r3, r3, #2
 8027bd6:	2b00      	cmp	r3, #0
 8027bd8:	d0f0      	beq.n	8027bbc <HAL_RCC_OscConfig+0x200>
 8027bda:	e015      	b.n	8027c08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027bdc:	4b24      	ldr	r3, [pc, #144]	; (8027c70 <HAL_RCC_OscConfig+0x2b4>)
 8027bde:	2200      	movs	r2, #0
 8027be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027be2:	f7fb fc05 	bl	80233f0 <HAL_GetTick>
 8027be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027be8:	e008      	b.n	8027bfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027bea:	f7fb fc01 	bl	80233f0 <HAL_GetTick>
 8027bee:	4602      	mov	r2, r0
 8027bf0:	693b      	ldr	r3, [r7, #16]
 8027bf2:	1ad3      	subs	r3, r2, r3
 8027bf4:	2b02      	cmp	r3, #2
 8027bf6:	d901      	bls.n	8027bfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8027bf8:	2303      	movs	r3, #3
 8027bfa:	e144      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027bfc:	4b1a      	ldr	r3, [pc, #104]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027c00:	f003 0302 	and.w	r3, r3, #2
 8027c04:	2b00      	cmp	r3, #0
 8027c06:	d1f0      	bne.n	8027bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027c08:	687b      	ldr	r3, [r7, #4]
 8027c0a:	681b      	ldr	r3, [r3, #0]
 8027c0c:	f003 0304 	and.w	r3, r3, #4
 8027c10:	2b00      	cmp	r3, #0
 8027c12:	f000 80a0 	beq.w	8027d56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8027c16:	2300      	movs	r3, #0
 8027c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8027c1a:	4b13      	ldr	r3, [pc, #76]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027c22:	2b00      	cmp	r3, #0
 8027c24:	d10f      	bne.n	8027c46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8027c26:	2300      	movs	r3, #0
 8027c28:	60bb      	str	r3, [r7, #8]
 8027c2a:	4b0f      	ldr	r3, [pc, #60]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c2e:	4a0e      	ldr	r2, [pc, #56]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027c34:	6413      	str	r3, [r2, #64]	; 0x40
 8027c36:	4b0c      	ldr	r3, [pc, #48]	; (8027c68 <HAL_RCC_OscConfig+0x2ac>)
 8027c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027c3e:	60bb      	str	r3, [r7, #8]
 8027c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027c42:	2301      	movs	r3, #1
 8027c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027c46:	4b0b      	ldr	r3, [pc, #44]	; (8027c74 <HAL_RCC_OscConfig+0x2b8>)
 8027c48:	681b      	ldr	r3, [r3, #0]
 8027c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027c4e:	2b00      	cmp	r3, #0
 8027c50:	d121      	bne.n	8027c96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8027c52:	4b08      	ldr	r3, [pc, #32]	; (8027c74 <HAL_RCC_OscConfig+0x2b8>)
 8027c54:	681b      	ldr	r3, [r3, #0]
 8027c56:	4a07      	ldr	r2, [pc, #28]	; (8027c74 <HAL_RCC_OscConfig+0x2b8>)
 8027c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8027c5e:	f7fb fbc7 	bl	80233f0 <HAL_GetTick>
 8027c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027c64:	e011      	b.n	8027c8a <HAL_RCC_OscConfig+0x2ce>
 8027c66:	bf00      	nop
 8027c68:	40023800 	.word	0x40023800
 8027c6c:	42470000 	.word	0x42470000
 8027c70:	42470e80 	.word	0x42470e80
 8027c74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027c78:	f7fb fbba 	bl	80233f0 <HAL_GetTick>
 8027c7c:	4602      	mov	r2, r0
 8027c7e:	693b      	ldr	r3, [r7, #16]
 8027c80:	1ad3      	subs	r3, r2, r3
 8027c82:	2b02      	cmp	r3, #2
 8027c84:	d901      	bls.n	8027c8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8027c86:	2303      	movs	r3, #3
 8027c88:	e0fd      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027c8a:	4b81      	ldr	r3, [pc, #516]	; (8027e90 <HAL_RCC_OscConfig+0x4d4>)
 8027c8c:	681b      	ldr	r3, [r3, #0]
 8027c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027c92:	2b00      	cmp	r3, #0
 8027c94:	d0f0      	beq.n	8027c78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027c96:	687b      	ldr	r3, [r7, #4]
 8027c98:	689b      	ldr	r3, [r3, #8]
 8027c9a:	2b01      	cmp	r3, #1
 8027c9c:	d106      	bne.n	8027cac <HAL_RCC_OscConfig+0x2f0>
 8027c9e:	4b7d      	ldr	r3, [pc, #500]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027ca2:	4a7c      	ldr	r2, [pc, #496]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027ca4:	f043 0301 	orr.w	r3, r3, #1
 8027ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8027caa:	e01c      	b.n	8027ce6 <HAL_RCC_OscConfig+0x32a>
 8027cac:	687b      	ldr	r3, [r7, #4]
 8027cae:	689b      	ldr	r3, [r3, #8]
 8027cb0:	2b05      	cmp	r3, #5
 8027cb2:	d10c      	bne.n	8027cce <HAL_RCC_OscConfig+0x312>
 8027cb4:	4b77      	ldr	r3, [pc, #476]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027cb8:	4a76      	ldr	r2, [pc, #472]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cba:	f043 0304 	orr.w	r3, r3, #4
 8027cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8027cc0:	4b74      	ldr	r3, [pc, #464]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027cc4:	4a73      	ldr	r2, [pc, #460]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cc6:	f043 0301 	orr.w	r3, r3, #1
 8027cca:	6713      	str	r3, [r2, #112]	; 0x70
 8027ccc:	e00b      	b.n	8027ce6 <HAL_RCC_OscConfig+0x32a>
 8027cce:	4b71      	ldr	r3, [pc, #452]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027cd2:	4a70      	ldr	r2, [pc, #448]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cd4:	f023 0301 	bic.w	r3, r3, #1
 8027cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8027cda:	4b6e      	ldr	r3, [pc, #440]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027cde:	4a6d      	ldr	r2, [pc, #436]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027ce0:	f023 0304 	bic.w	r3, r3, #4
 8027ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8027ce6:	687b      	ldr	r3, [r7, #4]
 8027ce8:	689b      	ldr	r3, [r3, #8]
 8027cea:	2b00      	cmp	r3, #0
 8027cec:	d015      	beq.n	8027d1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027cee:	f7fb fb7f 	bl	80233f0 <HAL_GetTick>
 8027cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027cf4:	e00a      	b.n	8027d0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027cf6:	f7fb fb7b 	bl	80233f0 <HAL_GetTick>
 8027cfa:	4602      	mov	r2, r0
 8027cfc:	693b      	ldr	r3, [r7, #16]
 8027cfe:	1ad3      	subs	r3, r2, r3
 8027d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8027d04:	4293      	cmp	r3, r2
 8027d06:	d901      	bls.n	8027d0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8027d08:	2303      	movs	r3, #3
 8027d0a:	e0bc      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027d0c:	4b61      	ldr	r3, [pc, #388]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027d10:	f003 0302 	and.w	r3, r3, #2
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	d0ee      	beq.n	8027cf6 <HAL_RCC_OscConfig+0x33a>
 8027d18:	e014      	b.n	8027d44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027d1a:	f7fb fb69 	bl	80233f0 <HAL_GetTick>
 8027d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027d20:	e00a      	b.n	8027d38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027d22:	f7fb fb65 	bl	80233f0 <HAL_GetTick>
 8027d26:	4602      	mov	r2, r0
 8027d28:	693b      	ldr	r3, [r7, #16]
 8027d2a:	1ad3      	subs	r3, r2, r3
 8027d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8027d30:	4293      	cmp	r3, r2
 8027d32:	d901      	bls.n	8027d38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8027d34:	2303      	movs	r3, #3
 8027d36:	e0a6      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027d38:	4b56      	ldr	r3, [pc, #344]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027d3c:	f003 0302 	and.w	r3, r3, #2
 8027d40:	2b00      	cmp	r3, #0
 8027d42:	d1ee      	bne.n	8027d22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027d44:	7dfb      	ldrb	r3, [r7, #23]
 8027d46:	2b01      	cmp	r3, #1
 8027d48:	d105      	bne.n	8027d56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8027d4a:	4b52      	ldr	r3, [pc, #328]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027d4e:	4a51      	ldr	r2, [pc, #324]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027d54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027d56:	687b      	ldr	r3, [r7, #4]
 8027d58:	699b      	ldr	r3, [r3, #24]
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	f000 8092 	beq.w	8027e84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8027d60:	4b4c      	ldr	r3, [pc, #304]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027d62:	689b      	ldr	r3, [r3, #8]
 8027d64:	f003 030c 	and.w	r3, r3, #12
 8027d68:	2b08      	cmp	r3, #8
 8027d6a:	d05c      	beq.n	8027e26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8027d6c:	687b      	ldr	r3, [r7, #4]
 8027d6e:	699b      	ldr	r3, [r3, #24]
 8027d70:	2b02      	cmp	r3, #2
 8027d72:	d141      	bne.n	8027df8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027d74:	4b48      	ldr	r3, [pc, #288]	; (8027e98 <HAL_RCC_OscConfig+0x4dc>)
 8027d76:	2200      	movs	r2, #0
 8027d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027d7a:	f7fb fb39 	bl	80233f0 <HAL_GetTick>
 8027d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027d80:	e008      	b.n	8027d94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027d82:	f7fb fb35 	bl	80233f0 <HAL_GetTick>
 8027d86:	4602      	mov	r2, r0
 8027d88:	693b      	ldr	r3, [r7, #16]
 8027d8a:	1ad3      	subs	r3, r2, r3
 8027d8c:	2b02      	cmp	r3, #2
 8027d8e:	d901      	bls.n	8027d94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8027d90:	2303      	movs	r3, #3
 8027d92:	e078      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027d94:	4b3f      	ldr	r3, [pc, #252]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027d96:	681b      	ldr	r3, [r3, #0]
 8027d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027d9c:	2b00      	cmp	r3, #0
 8027d9e:	d1f0      	bne.n	8027d82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027da0:	687b      	ldr	r3, [r7, #4]
 8027da2:	69da      	ldr	r2, [r3, #28]
 8027da4:	687b      	ldr	r3, [r7, #4]
 8027da6:	6a1b      	ldr	r3, [r3, #32]
 8027da8:	431a      	orrs	r2, r3
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027dae:	019b      	lsls	r3, r3, #6
 8027db0:	431a      	orrs	r2, r3
 8027db2:	687b      	ldr	r3, [r7, #4]
 8027db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027db6:	085b      	lsrs	r3, r3, #1
 8027db8:	3b01      	subs	r3, #1
 8027dba:	041b      	lsls	r3, r3, #16
 8027dbc:	431a      	orrs	r2, r3
 8027dbe:	687b      	ldr	r3, [r7, #4]
 8027dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027dc2:	061b      	lsls	r3, r3, #24
 8027dc4:	4933      	ldr	r1, [pc, #204]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027dc6:	4313      	orrs	r3, r2
 8027dc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027dca:	4b33      	ldr	r3, [pc, #204]	; (8027e98 <HAL_RCC_OscConfig+0x4dc>)
 8027dcc:	2201      	movs	r2, #1
 8027dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027dd0:	f7fb fb0e 	bl	80233f0 <HAL_GetTick>
 8027dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027dd6:	e008      	b.n	8027dea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027dd8:	f7fb fb0a 	bl	80233f0 <HAL_GetTick>
 8027ddc:	4602      	mov	r2, r0
 8027dde:	693b      	ldr	r3, [r7, #16]
 8027de0:	1ad3      	subs	r3, r2, r3
 8027de2:	2b02      	cmp	r3, #2
 8027de4:	d901      	bls.n	8027dea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8027de6:	2303      	movs	r3, #3
 8027de8:	e04d      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027dea:	4b2a      	ldr	r3, [pc, #168]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027dec:	681b      	ldr	r3, [r3, #0]
 8027dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027df2:	2b00      	cmp	r3, #0
 8027df4:	d0f0      	beq.n	8027dd8 <HAL_RCC_OscConfig+0x41c>
 8027df6:	e045      	b.n	8027e84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027df8:	4b27      	ldr	r3, [pc, #156]	; (8027e98 <HAL_RCC_OscConfig+0x4dc>)
 8027dfa:	2200      	movs	r2, #0
 8027dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027dfe:	f7fb faf7 	bl	80233f0 <HAL_GetTick>
 8027e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027e04:	e008      	b.n	8027e18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027e06:	f7fb faf3 	bl	80233f0 <HAL_GetTick>
 8027e0a:	4602      	mov	r2, r0
 8027e0c:	693b      	ldr	r3, [r7, #16]
 8027e0e:	1ad3      	subs	r3, r2, r3
 8027e10:	2b02      	cmp	r3, #2
 8027e12:	d901      	bls.n	8027e18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8027e14:	2303      	movs	r3, #3
 8027e16:	e036      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027e18:	4b1e      	ldr	r3, [pc, #120]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027e1a:	681b      	ldr	r3, [r3, #0]
 8027e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027e20:	2b00      	cmp	r3, #0
 8027e22:	d1f0      	bne.n	8027e06 <HAL_RCC_OscConfig+0x44a>
 8027e24:	e02e      	b.n	8027e84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8027e26:	687b      	ldr	r3, [r7, #4]
 8027e28:	699b      	ldr	r3, [r3, #24]
 8027e2a:	2b01      	cmp	r3, #1
 8027e2c:	d101      	bne.n	8027e32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8027e2e:	2301      	movs	r3, #1
 8027e30:	e029      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8027e32:	4b18      	ldr	r3, [pc, #96]	; (8027e94 <HAL_RCC_OscConfig+0x4d8>)
 8027e34:	685b      	ldr	r3, [r3, #4]
 8027e36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027e38:	68fb      	ldr	r3, [r7, #12]
 8027e3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8027e3e:	687b      	ldr	r3, [r7, #4]
 8027e40:	69db      	ldr	r3, [r3, #28]
 8027e42:	429a      	cmp	r2, r3
 8027e44:	d11c      	bne.n	8027e80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8027e46:	68fb      	ldr	r3, [r7, #12]
 8027e48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027e4c:	687b      	ldr	r3, [r7, #4]
 8027e4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027e50:	429a      	cmp	r2, r3
 8027e52:	d115      	bne.n	8027e80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8027e54:	68fa      	ldr	r2, [r7, #12]
 8027e56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027e5a:	4013      	ands	r3, r2
 8027e5c:	687a      	ldr	r2, [r7, #4]
 8027e5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8027e60:	4293      	cmp	r3, r2
 8027e62:	d10d      	bne.n	8027e80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8027e64:	68fb      	ldr	r3, [r7, #12]
 8027e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8027e6a:	687b      	ldr	r3, [r7, #4]
 8027e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8027e6e:	429a      	cmp	r2, r3
 8027e70:	d106      	bne.n	8027e80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8027e72:	68fb      	ldr	r3, [r7, #12]
 8027e74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8027e78:	687b      	ldr	r3, [r7, #4]
 8027e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8027e7c:	429a      	cmp	r2, r3
 8027e7e:	d001      	beq.n	8027e84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8027e80:	2301      	movs	r3, #1
 8027e82:	e000      	b.n	8027e86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8027e84:	2300      	movs	r3, #0
}
 8027e86:	4618      	mov	r0, r3
 8027e88:	3718      	adds	r7, #24
 8027e8a:	46bd      	mov	sp, r7
 8027e8c:	bd80      	pop	{r7, pc}
 8027e8e:	bf00      	nop
 8027e90:	40007000 	.word	0x40007000
 8027e94:	40023800 	.word	0x40023800
 8027e98:	42470060 	.word	0x42470060

08027e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027e9c:	b580      	push	{r7, lr}
 8027e9e:	b084      	sub	sp, #16
 8027ea0:	af00      	add	r7, sp, #0
 8027ea2:	6078      	str	r0, [r7, #4]
 8027ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8027ea6:	687b      	ldr	r3, [r7, #4]
 8027ea8:	2b00      	cmp	r3, #0
 8027eaa:	d101      	bne.n	8027eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027eac:	2301      	movs	r3, #1
 8027eae:	e0cc      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027eb0:	4b68      	ldr	r3, [pc, #416]	; (8028054 <HAL_RCC_ClockConfig+0x1b8>)
 8027eb2:	681b      	ldr	r3, [r3, #0]
 8027eb4:	f003 030f 	and.w	r3, r3, #15
 8027eb8:	683a      	ldr	r2, [r7, #0]
 8027eba:	429a      	cmp	r2, r3
 8027ebc:	d90c      	bls.n	8027ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027ebe:	4b65      	ldr	r3, [pc, #404]	; (8028054 <HAL_RCC_ClockConfig+0x1b8>)
 8027ec0:	683a      	ldr	r2, [r7, #0]
 8027ec2:	b2d2      	uxtb	r2, r2
 8027ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027ec6:	4b63      	ldr	r3, [pc, #396]	; (8028054 <HAL_RCC_ClockConfig+0x1b8>)
 8027ec8:	681b      	ldr	r3, [r3, #0]
 8027eca:	f003 030f 	and.w	r3, r3, #15
 8027ece:	683a      	ldr	r2, [r7, #0]
 8027ed0:	429a      	cmp	r2, r3
 8027ed2:	d001      	beq.n	8027ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8027ed4:	2301      	movs	r3, #1
 8027ed6:	e0b8      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027ed8:	687b      	ldr	r3, [r7, #4]
 8027eda:	681b      	ldr	r3, [r3, #0]
 8027edc:	f003 0302 	and.w	r3, r3, #2
 8027ee0:	2b00      	cmp	r3, #0
 8027ee2:	d020      	beq.n	8027f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027ee4:	687b      	ldr	r3, [r7, #4]
 8027ee6:	681b      	ldr	r3, [r3, #0]
 8027ee8:	f003 0304 	and.w	r3, r3, #4
 8027eec:	2b00      	cmp	r3, #0
 8027eee:	d005      	beq.n	8027efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8027ef0:	4b59      	ldr	r3, [pc, #356]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027ef2:	689b      	ldr	r3, [r3, #8]
 8027ef4:	4a58      	ldr	r2, [pc, #352]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8027efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027efc:	687b      	ldr	r3, [r7, #4]
 8027efe:	681b      	ldr	r3, [r3, #0]
 8027f00:	f003 0308 	and.w	r3, r3, #8
 8027f04:	2b00      	cmp	r3, #0
 8027f06:	d005      	beq.n	8027f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027f08:	4b53      	ldr	r3, [pc, #332]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f0a:	689b      	ldr	r3, [r3, #8]
 8027f0c:	4a52      	ldr	r2, [pc, #328]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8027f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027f14:	4b50      	ldr	r3, [pc, #320]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f16:	689b      	ldr	r3, [r3, #8]
 8027f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027f1c:	687b      	ldr	r3, [r7, #4]
 8027f1e:	689b      	ldr	r3, [r3, #8]
 8027f20:	494d      	ldr	r1, [pc, #308]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f22:	4313      	orrs	r3, r2
 8027f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027f26:	687b      	ldr	r3, [r7, #4]
 8027f28:	681b      	ldr	r3, [r3, #0]
 8027f2a:	f003 0301 	and.w	r3, r3, #1
 8027f2e:	2b00      	cmp	r3, #0
 8027f30:	d044      	beq.n	8027fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	685b      	ldr	r3, [r3, #4]
 8027f36:	2b01      	cmp	r3, #1
 8027f38:	d107      	bne.n	8027f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027f3a:	4b47      	ldr	r3, [pc, #284]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f3c:	681b      	ldr	r3, [r3, #0]
 8027f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d119      	bne.n	8027f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027f46:	2301      	movs	r3, #1
 8027f48:	e07f      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	685b      	ldr	r3, [r3, #4]
 8027f4e:	2b02      	cmp	r3, #2
 8027f50:	d003      	beq.n	8027f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8027f52:	687b      	ldr	r3, [r7, #4]
 8027f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027f56:	2b03      	cmp	r3, #3
 8027f58:	d107      	bne.n	8027f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027f5a:	4b3f      	ldr	r3, [pc, #252]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f5c:	681b      	ldr	r3, [r3, #0]
 8027f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027f62:	2b00      	cmp	r3, #0
 8027f64:	d109      	bne.n	8027f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027f66:	2301      	movs	r3, #1
 8027f68:	e06f      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027f6a:	4b3b      	ldr	r3, [pc, #236]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f6c:	681b      	ldr	r3, [r3, #0]
 8027f6e:	f003 0302 	and.w	r3, r3, #2
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d101      	bne.n	8027f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027f76:	2301      	movs	r3, #1
 8027f78:	e067      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8027f7a:	4b37      	ldr	r3, [pc, #220]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f7c:	689b      	ldr	r3, [r3, #8]
 8027f7e:	f023 0203 	bic.w	r2, r3, #3
 8027f82:	687b      	ldr	r3, [r7, #4]
 8027f84:	685b      	ldr	r3, [r3, #4]
 8027f86:	4934      	ldr	r1, [pc, #208]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027f88:	4313      	orrs	r3, r2
 8027f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8027f8c:	f7fb fa30 	bl	80233f0 <HAL_GetTick>
 8027f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027f92:	e00a      	b.n	8027faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027f94:	f7fb fa2c 	bl	80233f0 <HAL_GetTick>
 8027f98:	4602      	mov	r2, r0
 8027f9a:	68fb      	ldr	r3, [r7, #12]
 8027f9c:	1ad3      	subs	r3, r2, r3
 8027f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8027fa2:	4293      	cmp	r3, r2
 8027fa4:	d901      	bls.n	8027faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8027fa6:	2303      	movs	r3, #3
 8027fa8:	e04f      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027faa:	4b2b      	ldr	r3, [pc, #172]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027fac:	689b      	ldr	r3, [r3, #8]
 8027fae:	f003 020c 	and.w	r2, r3, #12
 8027fb2:	687b      	ldr	r3, [r7, #4]
 8027fb4:	685b      	ldr	r3, [r3, #4]
 8027fb6:	009b      	lsls	r3, r3, #2
 8027fb8:	429a      	cmp	r2, r3
 8027fba:	d1eb      	bne.n	8027f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027fbc:	4b25      	ldr	r3, [pc, #148]	; (8028054 <HAL_RCC_ClockConfig+0x1b8>)
 8027fbe:	681b      	ldr	r3, [r3, #0]
 8027fc0:	f003 030f 	and.w	r3, r3, #15
 8027fc4:	683a      	ldr	r2, [r7, #0]
 8027fc6:	429a      	cmp	r2, r3
 8027fc8:	d20c      	bcs.n	8027fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027fca:	4b22      	ldr	r3, [pc, #136]	; (8028054 <HAL_RCC_ClockConfig+0x1b8>)
 8027fcc:	683a      	ldr	r2, [r7, #0]
 8027fce:	b2d2      	uxtb	r2, r2
 8027fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027fd2:	4b20      	ldr	r3, [pc, #128]	; (8028054 <HAL_RCC_ClockConfig+0x1b8>)
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	f003 030f 	and.w	r3, r3, #15
 8027fda:	683a      	ldr	r2, [r7, #0]
 8027fdc:	429a      	cmp	r2, r3
 8027fde:	d001      	beq.n	8027fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027fe0:	2301      	movs	r3, #1
 8027fe2:	e032      	b.n	802804a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027fe4:	687b      	ldr	r3, [r7, #4]
 8027fe6:	681b      	ldr	r3, [r3, #0]
 8027fe8:	f003 0304 	and.w	r3, r3, #4
 8027fec:	2b00      	cmp	r3, #0
 8027fee:	d008      	beq.n	8028002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027ff0:	4b19      	ldr	r3, [pc, #100]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027ff2:	689b      	ldr	r3, [r3, #8]
 8027ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027ff8:	687b      	ldr	r3, [r7, #4]
 8027ffa:	68db      	ldr	r3, [r3, #12]
 8027ffc:	4916      	ldr	r1, [pc, #88]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8027ffe:	4313      	orrs	r3, r2
 8028000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028002:	687b      	ldr	r3, [r7, #4]
 8028004:	681b      	ldr	r3, [r3, #0]
 8028006:	f003 0308 	and.w	r3, r3, #8
 802800a:	2b00      	cmp	r3, #0
 802800c:	d009      	beq.n	8028022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802800e:	4b12      	ldr	r3, [pc, #72]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 8028010:	689b      	ldr	r3, [r3, #8]
 8028012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8028016:	687b      	ldr	r3, [r7, #4]
 8028018:	691b      	ldr	r3, [r3, #16]
 802801a:	00db      	lsls	r3, r3, #3
 802801c:	490e      	ldr	r1, [pc, #56]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 802801e:	4313      	orrs	r3, r2
 8028020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028022:	f000 f821 	bl	8028068 <HAL_RCC_GetSysClockFreq>
 8028026:	4601      	mov	r1, r0
 8028028:	4b0b      	ldr	r3, [pc, #44]	; (8028058 <HAL_RCC_ClockConfig+0x1bc>)
 802802a:	689b      	ldr	r3, [r3, #8]
 802802c:	091b      	lsrs	r3, r3, #4
 802802e:	f003 030f 	and.w	r3, r3, #15
 8028032:	4a0a      	ldr	r2, [pc, #40]	; (802805c <HAL_RCC_ClockConfig+0x1c0>)
 8028034:	5cd3      	ldrb	r3, [r2, r3]
 8028036:	fa21 f303 	lsr.w	r3, r1, r3
 802803a:	4a09      	ldr	r2, [pc, #36]	; (8028060 <HAL_RCC_ClockConfig+0x1c4>)
 802803c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802803e:	4b09      	ldr	r3, [pc, #36]	; (8028064 <HAL_RCC_ClockConfig+0x1c8>)
 8028040:	681b      	ldr	r3, [r3, #0]
 8028042:	4618      	mov	r0, r3
 8028044:	f7fa fe72 	bl	8022d2c <HAL_InitTick>

  return HAL_OK;
 8028048:	2300      	movs	r3, #0
}
 802804a:	4618      	mov	r0, r3
 802804c:	3710      	adds	r7, #16
 802804e:	46bd      	mov	sp, r7
 8028050:	bd80      	pop	{r7, pc}
 8028052:	bf00      	nop
 8028054:	40023c00 	.word	0x40023c00
 8028058:	40023800 	.word	0x40023800
 802805c:	08037e8c 	.word	0x08037e8c
 8028060:	20000000 	.word	0x20000000
 8028064:	20000004 	.word	0x20000004

08028068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028068:	b5f0      	push	{r4, r5, r6, r7, lr}
 802806a:	b085      	sub	sp, #20
 802806c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802806e:	2300      	movs	r3, #0
 8028070:	607b      	str	r3, [r7, #4]
 8028072:	2300      	movs	r3, #0
 8028074:	60fb      	str	r3, [r7, #12]
 8028076:	2300      	movs	r3, #0
 8028078:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802807a:	2300      	movs	r3, #0
 802807c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802807e:	4b50      	ldr	r3, [pc, #320]	; (80281c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8028080:	689b      	ldr	r3, [r3, #8]
 8028082:	f003 030c 	and.w	r3, r3, #12
 8028086:	2b04      	cmp	r3, #4
 8028088:	d007      	beq.n	802809a <HAL_RCC_GetSysClockFreq+0x32>
 802808a:	2b08      	cmp	r3, #8
 802808c:	d008      	beq.n	80280a0 <HAL_RCC_GetSysClockFreq+0x38>
 802808e:	2b00      	cmp	r3, #0
 8028090:	f040 808d 	bne.w	80281ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028094:	4b4b      	ldr	r3, [pc, #300]	; (80281c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028096:	60bb      	str	r3, [r7, #8]
       break;
 8028098:	e08c      	b.n	80281b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802809a:	4b4b      	ldr	r3, [pc, #300]	; (80281c8 <HAL_RCC_GetSysClockFreq+0x160>)
 802809c:	60bb      	str	r3, [r7, #8]
      break;
 802809e:	e089      	b.n	80281b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80280a0:	4b47      	ldr	r3, [pc, #284]	; (80281c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80280a2:	685b      	ldr	r3, [r3, #4]
 80280a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80280a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80280aa:	4b45      	ldr	r3, [pc, #276]	; (80281c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80280ac:	685b      	ldr	r3, [r3, #4]
 80280ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80280b2:	2b00      	cmp	r3, #0
 80280b4:	d023      	beq.n	80280fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80280b6:	4b42      	ldr	r3, [pc, #264]	; (80281c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80280b8:	685b      	ldr	r3, [r3, #4]
 80280ba:	099b      	lsrs	r3, r3, #6
 80280bc:	f04f 0400 	mov.w	r4, #0
 80280c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80280c4:	f04f 0200 	mov.w	r2, #0
 80280c8:	ea03 0501 	and.w	r5, r3, r1
 80280cc:	ea04 0602 	and.w	r6, r4, r2
 80280d0:	4a3d      	ldr	r2, [pc, #244]	; (80281c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80280d2:	fb02 f106 	mul.w	r1, r2, r6
 80280d6:	2200      	movs	r2, #0
 80280d8:	fb02 f205 	mul.w	r2, r2, r5
 80280dc:	440a      	add	r2, r1
 80280de:	493a      	ldr	r1, [pc, #232]	; (80281c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80280e0:	fba5 0101 	umull	r0, r1, r5, r1
 80280e4:	1853      	adds	r3, r2, r1
 80280e6:	4619      	mov	r1, r3
 80280e8:	687b      	ldr	r3, [r7, #4]
 80280ea:	f04f 0400 	mov.w	r4, #0
 80280ee:	461a      	mov	r2, r3
 80280f0:	4623      	mov	r3, r4
 80280f2:	f7f8 fd59 	bl	8020ba8 <__aeabi_uldivmod>
 80280f6:	4603      	mov	r3, r0
 80280f8:	460c      	mov	r4, r1
 80280fa:	60fb      	str	r3, [r7, #12]
 80280fc:	e049      	b.n	8028192 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80280fe:	4b30      	ldr	r3, [pc, #192]	; (80281c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8028100:	685b      	ldr	r3, [r3, #4]
 8028102:	099b      	lsrs	r3, r3, #6
 8028104:	f04f 0400 	mov.w	r4, #0
 8028108:	f240 11ff 	movw	r1, #511	; 0x1ff
 802810c:	f04f 0200 	mov.w	r2, #0
 8028110:	ea03 0501 	and.w	r5, r3, r1
 8028114:	ea04 0602 	and.w	r6, r4, r2
 8028118:	4629      	mov	r1, r5
 802811a:	4632      	mov	r2, r6
 802811c:	f04f 0300 	mov.w	r3, #0
 8028120:	f04f 0400 	mov.w	r4, #0
 8028124:	0154      	lsls	r4, r2, #5
 8028126:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802812a:	014b      	lsls	r3, r1, #5
 802812c:	4619      	mov	r1, r3
 802812e:	4622      	mov	r2, r4
 8028130:	1b49      	subs	r1, r1, r5
 8028132:	eb62 0206 	sbc.w	r2, r2, r6
 8028136:	f04f 0300 	mov.w	r3, #0
 802813a:	f04f 0400 	mov.w	r4, #0
 802813e:	0194      	lsls	r4, r2, #6
 8028140:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8028144:	018b      	lsls	r3, r1, #6
 8028146:	1a5b      	subs	r3, r3, r1
 8028148:	eb64 0402 	sbc.w	r4, r4, r2
 802814c:	f04f 0100 	mov.w	r1, #0
 8028150:	f04f 0200 	mov.w	r2, #0
 8028154:	00e2      	lsls	r2, r4, #3
 8028156:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802815a:	00d9      	lsls	r1, r3, #3
 802815c:	460b      	mov	r3, r1
 802815e:	4614      	mov	r4, r2
 8028160:	195b      	adds	r3, r3, r5
 8028162:	eb44 0406 	adc.w	r4, r4, r6
 8028166:	f04f 0100 	mov.w	r1, #0
 802816a:	f04f 0200 	mov.w	r2, #0
 802816e:	02a2      	lsls	r2, r4, #10
 8028170:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028174:	0299      	lsls	r1, r3, #10
 8028176:	460b      	mov	r3, r1
 8028178:	4614      	mov	r4, r2
 802817a:	4618      	mov	r0, r3
 802817c:	4621      	mov	r1, r4
 802817e:	687b      	ldr	r3, [r7, #4]
 8028180:	f04f 0400 	mov.w	r4, #0
 8028184:	461a      	mov	r2, r3
 8028186:	4623      	mov	r3, r4
 8028188:	f7f8 fd0e 	bl	8020ba8 <__aeabi_uldivmod>
 802818c:	4603      	mov	r3, r0
 802818e:	460c      	mov	r4, r1
 8028190:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028192:	4b0b      	ldr	r3, [pc, #44]	; (80281c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8028194:	685b      	ldr	r3, [r3, #4]
 8028196:	0c1b      	lsrs	r3, r3, #16
 8028198:	f003 0303 	and.w	r3, r3, #3
 802819c:	3301      	adds	r3, #1
 802819e:	005b      	lsls	r3, r3, #1
 80281a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80281a2:	68fa      	ldr	r2, [r7, #12]
 80281a4:	683b      	ldr	r3, [r7, #0]
 80281a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80281aa:	60bb      	str	r3, [r7, #8]
      break;
 80281ac:	e002      	b.n	80281b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80281ae:	4b05      	ldr	r3, [pc, #20]	; (80281c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80281b0:	60bb      	str	r3, [r7, #8]
      break;
 80281b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80281b4:	68bb      	ldr	r3, [r7, #8]
}
 80281b6:	4618      	mov	r0, r3
 80281b8:	3714      	adds	r7, #20
 80281ba:	46bd      	mov	sp, r7
 80281bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80281be:	bf00      	nop
 80281c0:	40023800 	.word	0x40023800
 80281c4:	00f42400 	.word	0x00f42400
 80281c8:	017d7840 	.word	0x017d7840

080281cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80281cc:	b480      	push	{r7}
 80281ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80281d0:	4b03      	ldr	r3, [pc, #12]	; (80281e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80281d2:	681b      	ldr	r3, [r3, #0]
}
 80281d4:	4618      	mov	r0, r3
 80281d6:	46bd      	mov	sp, r7
 80281d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281dc:	4770      	bx	lr
 80281de:	bf00      	nop
 80281e0:	20000000 	.word	0x20000000

080281e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80281e4:	b580      	push	{r7, lr}
 80281e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80281e8:	f7ff fff0 	bl	80281cc <HAL_RCC_GetHCLKFreq>
 80281ec:	4601      	mov	r1, r0
 80281ee:	4b05      	ldr	r3, [pc, #20]	; (8028204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80281f0:	689b      	ldr	r3, [r3, #8]
 80281f2:	0a9b      	lsrs	r3, r3, #10
 80281f4:	f003 0307 	and.w	r3, r3, #7
 80281f8:	4a03      	ldr	r2, [pc, #12]	; (8028208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80281fa:	5cd3      	ldrb	r3, [r2, r3]
 80281fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028200:	4618      	mov	r0, r3
 8028202:	bd80      	pop	{r7, pc}
 8028204:	40023800 	.word	0x40023800
 8028208:	08037e9c 	.word	0x08037e9c

0802820c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802820c:	b580      	push	{r7, lr}
 802820e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8028210:	f7ff ffdc 	bl	80281cc <HAL_RCC_GetHCLKFreq>
 8028214:	4601      	mov	r1, r0
 8028216:	4b05      	ldr	r3, [pc, #20]	; (802822c <HAL_RCC_GetPCLK2Freq+0x20>)
 8028218:	689b      	ldr	r3, [r3, #8]
 802821a:	0b5b      	lsrs	r3, r3, #13
 802821c:	f003 0307 	and.w	r3, r3, #7
 8028220:	4a03      	ldr	r2, [pc, #12]	; (8028230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8028222:	5cd3      	ldrb	r3, [r2, r3]
 8028224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028228:	4618      	mov	r0, r3
 802822a:	bd80      	pop	{r7, pc}
 802822c:	40023800 	.word	0x40023800
 8028230:	08037e9c 	.word	0x08037e9c

08028234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8028234:	b480      	push	{r7}
 8028236:	b083      	sub	sp, #12
 8028238:	af00      	add	r7, sp, #0
 802823a:	6078      	str	r0, [r7, #4]
 802823c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802823e:	687b      	ldr	r3, [r7, #4]
 8028240:	220f      	movs	r2, #15
 8028242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8028244:	4b12      	ldr	r3, [pc, #72]	; (8028290 <HAL_RCC_GetClockConfig+0x5c>)
 8028246:	689b      	ldr	r3, [r3, #8]
 8028248:	f003 0203 	and.w	r2, r3, #3
 802824c:	687b      	ldr	r3, [r7, #4]
 802824e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8028250:	4b0f      	ldr	r3, [pc, #60]	; (8028290 <HAL_RCC_GetClockConfig+0x5c>)
 8028252:	689b      	ldr	r3, [r3, #8]
 8028254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8028258:	687b      	ldr	r3, [r7, #4]
 802825a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 802825c:	4b0c      	ldr	r3, [pc, #48]	; (8028290 <HAL_RCC_GetClockConfig+0x5c>)
 802825e:	689b      	ldr	r3, [r3, #8]
 8028260:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8028264:	687b      	ldr	r3, [r7, #4]
 8028266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8028268:	4b09      	ldr	r3, [pc, #36]	; (8028290 <HAL_RCC_GetClockConfig+0x5c>)
 802826a:	689b      	ldr	r3, [r3, #8]
 802826c:	08db      	lsrs	r3, r3, #3
 802826e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8028276:	4b07      	ldr	r3, [pc, #28]	; (8028294 <HAL_RCC_GetClockConfig+0x60>)
 8028278:	681b      	ldr	r3, [r3, #0]
 802827a:	f003 020f 	and.w	r2, r3, #15
 802827e:	683b      	ldr	r3, [r7, #0]
 8028280:	601a      	str	r2, [r3, #0]
}
 8028282:	bf00      	nop
 8028284:	370c      	adds	r7, #12
 8028286:	46bd      	mov	sp, r7
 8028288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802828c:	4770      	bx	lr
 802828e:	bf00      	nop
 8028290:	40023800 	.word	0x40023800
 8028294:	40023c00 	.word	0x40023c00

08028298 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8028298:	b580      	push	{r7, lr}
 802829a:	b086      	sub	sp, #24
 802829c:	af00      	add	r7, sp, #0
 802829e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80282a0:	2300      	movs	r3, #0
 80282a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80282a4:	2300      	movs	r3, #0
 80282a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80282a8:	687b      	ldr	r3, [r7, #4]
 80282aa:	681b      	ldr	r3, [r3, #0]
 80282ac:	f003 0301 	and.w	r3, r3, #1
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	d105      	bne.n	80282c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80282b4:	687b      	ldr	r3, [r7, #4]
 80282b6:	681b      	ldr	r3, [r3, #0]
 80282b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80282bc:	2b00      	cmp	r3, #0
 80282be:	d035      	beq.n	802832c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80282c0:	4b62      	ldr	r3, [pc, #392]	; (802844c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80282c2:	2200      	movs	r2, #0
 80282c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80282c6:	f7fb f893 	bl	80233f0 <HAL_GetTick>
 80282ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80282cc:	e008      	b.n	80282e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80282ce:	f7fb f88f 	bl	80233f0 <HAL_GetTick>
 80282d2:	4602      	mov	r2, r0
 80282d4:	697b      	ldr	r3, [r7, #20]
 80282d6:	1ad3      	subs	r3, r2, r3
 80282d8:	2b02      	cmp	r3, #2
 80282da:	d901      	bls.n	80282e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80282dc:	2303      	movs	r3, #3
 80282de:	e0b0      	b.n	8028442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80282e0:	4b5b      	ldr	r3, [pc, #364]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80282e2:	681b      	ldr	r3, [r3, #0]
 80282e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d1f0      	bne.n	80282ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80282ec:	687b      	ldr	r3, [r7, #4]
 80282ee:	685b      	ldr	r3, [r3, #4]
 80282f0:	019a      	lsls	r2, r3, #6
 80282f2:	687b      	ldr	r3, [r7, #4]
 80282f4:	689b      	ldr	r3, [r3, #8]
 80282f6:	071b      	lsls	r3, r3, #28
 80282f8:	4955      	ldr	r1, [pc, #340]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80282fa:	4313      	orrs	r3, r2
 80282fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8028300:	4b52      	ldr	r3, [pc, #328]	; (802844c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8028302:	2201      	movs	r2, #1
 8028304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8028306:	f7fb f873 	bl	80233f0 <HAL_GetTick>
 802830a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802830c:	e008      	b.n	8028320 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802830e:	f7fb f86f 	bl	80233f0 <HAL_GetTick>
 8028312:	4602      	mov	r2, r0
 8028314:	697b      	ldr	r3, [r7, #20]
 8028316:	1ad3      	subs	r3, r2, r3
 8028318:	2b02      	cmp	r3, #2
 802831a:	d901      	bls.n	8028320 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802831c:	2303      	movs	r3, #3
 802831e:	e090      	b.n	8028442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8028320:	4b4b      	ldr	r3, [pc, #300]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028328:	2b00      	cmp	r3, #0
 802832a:	d0f0      	beq.n	802830e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802832c:	687b      	ldr	r3, [r7, #4]
 802832e:	681b      	ldr	r3, [r3, #0]
 8028330:	f003 0302 	and.w	r3, r3, #2
 8028334:	2b00      	cmp	r3, #0
 8028336:	f000 8083 	beq.w	8028440 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802833a:	2300      	movs	r3, #0
 802833c:	60fb      	str	r3, [r7, #12]
 802833e:	4b44      	ldr	r3, [pc, #272]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028342:	4a43      	ldr	r2, [pc, #268]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028348:	6413      	str	r3, [r2, #64]	; 0x40
 802834a:	4b41      	ldr	r3, [pc, #260]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802834e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028352:	60fb      	str	r3, [r7, #12]
 8028354:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8028356:	4b3f      	ldr	r3, [pc, #252]	; (8028454 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	4a3e      	ldr	r2, [pc, #248]	; (8028454 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802835c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028360:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8028362:	f7fb f845 	bl	80233f0 <HAL_GetTick>
 8028366:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8028368:	e008      	b.n	802837c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802836a:	f7fb f841 	bl	80233f0 <HAL_GetTick>
 802836e:	4602      	mov	r2, r0
 8028370:	697b      	ldr	r3, [r7, #20]
 8028372:	1ad3      	subs	r3, r2, r3
 8028374:	2b02      	cmp	r3, #2
 8028376:	d901      	bls.n	802837c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8028378:	2303      	movs	r3, #3
 802837a:	e062      	b.n	8028442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802837c:	4b35      	ldr	r3, [pc, #212]	; (8028454 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028384:	2b00      	cmp	r3, #0
 8028386:	d0f0      	beq.n	802836a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8028388:	4b31      	ldr	r3, [pc, #196]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802838c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028390:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8028392:	693b      	ldr	r3, [r7, #16]
 8028394:	2b00      	cmp	r3, #0
 8028396:	d02f      	beq.n	80283f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8028398:	687b      	ldr	r3, [r7, #4]
 802839a:	68db      	ldr	r3, [r3, #12]
 802839c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80283a0:	693a      	ldr	r2, [r7, #16]
 80283a2:	429a      	cmp	r2, r3
 80283a4:	d028      	beq.n	80283f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80283a6:	4b2a      	ldr	r3, [pc, #168]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80283a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80283ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80283b0:	4b29      	ldr	r3, [pc, #164]	; (8028458 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80283b2:	2201      	movs	r2, #1
 80283b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80283b6:	4b28      	ldr	r3, [pc, #160]	; (8028458 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80283b8:	2200      	movs	r2, #0
 80283ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80283bc:	4a24      	ldr	r2, [pc, #144]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80283be:	693b      	ldr	r3, [r7, #16]
 80283c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80283c2:	4b23      	ldr	r3, [pc, #140]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80283c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283c6:	f003 0301 	and.w	r3, r3, #1
 80283ca:	2b01      	cmp	r3, #1
 80283cc:	d114      	bne.n	80283f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80283ce:	f7fb f80f 	bl	80233f0 <HAL_GetTick>
 80283d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80283d4:	e00a      	b.n	80283ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80283d6:	f7fb f80b 	bl	80233f0 <HAL_GetTick>
 80283da:	4602      	mov	r2, r0
 80283dc:	697b      	ldr	r3, [r7, #20]
 80283de:	1ad3      	subs	r3, r2, r3
 80283e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80283e4:	4293      	cmp	r3, r2
 80283e6:	d901      	bls.n	80283ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80283e8:	2303      	movs	r3, #3
 80283ea:	e02a      	b.n	8028442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80283ec:	4b18      	ldr	r3, [pc, #96]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80283ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283f0:	f003 0302 	and.w	r3, r3, #2
 80283f4:	2b00      	cmp	r3, #0
 80283f6:	d0ee      	beq.n	80283d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80283f8:	687b      	ldr	r3, [r7, #4]
 80283fa:	68db      	ldr	r3, [r3, #12]
 80283fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8028404:	d10d      	bne.n	8028422 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8028406:	4b12      	ldr	r3, [pc, #72]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028408:	689b      	ldr	r3, [r3, #8]
 802840a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802840e:	687b      	ldr	r3, [r7, #4]
 8028410:	68db      	ldr	r3, [r3, #12]
 8028412:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8028416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802841a:	490d      	ldr	r1, [pc, #52]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802841c:	4313      	orrs	r3, r2
 802841e:	608b      	str	r3, [r1, #8]
 8028420:	e005      	b.n	802842e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8028422:	4b0b      	ldr	r3, [pc, #44]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028424:	689b      	ldr	r3, [r3, #8]
 8028426:	4a0a      	ldr	r2, [pc, #40]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028428:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802842c:	6093      	str	r3, [r2, #8]
 802842e:	4b08      	ldr	r3, [pc, #32]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8028430:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8028432:	687b      	ldr	r3, [r7, #4]
 8028434:	68db      	ldr	r3, [r3, #12]
 8028436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802843a:	4905      	ldr	r1, [pc, #20]	; (8028450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802843c:	4313      	orrs	r3, r2
 802843e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8028440:	2300      	movs	r3, #0
}
 8028442:	4618      	mov	r0, r3
 8028444:	3718      	adds	r7, #24
 8028446:	46bd      	mov	sp, r7
 8028448:	bd80      	pop	{r7, pc}
 802844a:	bf00      	nop
 802844c:	42470068 	.word	0x42470068
 8028450:	40023800 	.word	0x40023800
 8028454:	40007000 	.word	0x40007000
 8028458:	42470e40 	.word	0x42470e40

0802845c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802845c:	b580      	push	{r7, lr}
 802845e:	b082      	sub	sp, #8
 8028460:	af00      	add	r7, sp, #0
 8028462:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8028464:	687b      	ldr	r3, [r7, #4]
 8028466:	2b00      	cmp	r3, #0
 8028468:	d101      	bne.n	802846e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 802846a:	2301      	movs	r3, #1
 802846c:	e083      	b.n	8028576 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	7f5b      	ldrb	r3, [r3, #29]
 8028472:	b2db      	uxtb	r3, r3
 8028474:	2b00      	cmp	r3, #0
 8028476:	d105      	bne.n	8028484 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8028478:	687b      	ldr	r3, [r7, #4]
 802847a:	2200      	movs	r2, #0
 802847c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802847e:	6878      	ldr	r0, [r7, #4]
 8028480:	f7f9 ffbc 	bl	80223fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8028484:	687b      	ldr	r3, [r7, #4]
 8028486:	2202      	movs	r2, #2
 8028488:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	681b      	ldr	r3, [r3, #0]
 802848e:	22ca      	movs	r2, #202	; 0xca
 8028490:	625a      	str	r2, [r3, #36]	; 0x24
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	681b      	ldr	r3, [r3, #0]
 8028496:	2253      	movs	r2, #83	; 0x53
 8028498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802849a:	6878      	ldr	r0, [r7, #4]
 802849c:	f000 f9fb 	bl	8028896 <RTC_EnterInitMode>
 80284a0:	4603      	mov	r3, r0
 80284a2:	2b00      	cmp	r3, #0
 80284a4:	d008      	beq.n	80284b8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80284a6:	687b      	ldr	r3, [r7, #4]
 80284a8:	681b      	ldr	r3, [r3, #0]
 80284aa:	22ff      	movs	r2, #255	; 0xff
 80284ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80284ae:	687b      	ldr	r3, [r7, #4]
 80284b0:	2204      	movs	r2, #4
 80284b2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80284b4:	2301      	movs	r3, #1
 80284b6:	e05e      	b.n	8028576 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80284b8:	687b      	ldr	r3, [r7, #4]
 80284ba:	681b      	ldr	r3, [r3, #0]
 80284bc:	689b      	ldr	r3, [r3, #8]
 80284be:	687a      	ldr	r2, [r7, #4]
 80284c0:	6812      	ldr	r2, [r2, #0]
 80284c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80284c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80284ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80284cc:	687b      	ldr	r3, [r7, #4]
 80284ce:	681b      	ldr	r3, [r3, #0]
 80284d0:	6899      	ldr	r1, [r3, #8]
 80284d2:	687b      	ldr	r3, [r7, #4]
 80284d4:	685a      	ldr	r2, [r3, #4]
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	691b      	ldr	r3, [r3, #16]
 80284da:	431a      	orrs	r2, r3
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	695b      	ldr	r3, [r3, #20]
 80284e0:	431a      	orrs	r2, r3
 80284e2:	687b      	ldr	r3, [r7, #4]
 80284e4:	681b      	ldr	r3, [r3, #0]
 80284e6:	430a      	orrs	r2, r1
 80284e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80284ea:	687b      	ldr	r3, [r7, #4]
 80284ec:	681b      	ldr	r3, [r3, #0]
 80284ee:	687a      	ldr	r2, [r7, #4]
 80284f0:	68d2      	ldr	r2, [r2, #12]
 80284f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80284f4:	687b      	ldr	r3, [r7, #4]
 80284f6:	681b      	ldr	r3, [r3, #0]
 80284f8:	6919      	ldr	r1, [r3, #16]
 80284fa:	687b      	ldr	r3, [r7, #4]
 80284fc:	689b      	ldr	r3, [r3, #8]
 80284fe:	041a      	lsls	r2, r3, #16
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	681b      	ldr	r3, [r3, #0]
 8028504:	430a      	orrs	r2, r1
 8028506:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	681b      	ldr	r3, [r3, #0]
 802850c:	68da      	ldr	r2, [r3, #12]
 802850e:	687b      	ldr	r3, [r7, #4]
 8028510:	681b      	ldr	r3, [r3, #0]
 8028512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8028516:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8028518:	687b      	ldr	r3, [r7, #4]
 802851a:	681b      	ldr	r3, [r3, #0]
 802851c:	689b      	ldr	r3, [r3, #8]
 802851e:	f003 0320 	and.w	r3, r3, #32
 8028522:	2b00      	cmp	r3, #0
 8028524:	d10e      	bne.n	8028544 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8028526:	6878      	ldr	r0, [r7, #4]
 8028528:	f000 f98d 	bl	8028846 <HAL_RTC_WaitForSynchro>
 802852c:	4603      	mov	r3, r0
 802852e:	2b00      	cmp	r3, #0
 8028530:	d008      	beq.n	8028544 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8028532:	687b      	ldr	r3, [r7, #4]
 8028534:	681b      	ldr	r3, [r3, #0]
 8028536:	22ff      	movs	r2, #255	; 0xff
 8028538:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 802853a:	687b      	ldr	r3, [r7, #4]
 802853c:	2204      	movs	r2, #4
 802853e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8028540:	2301      	movs	r3, #1
 8028542:	e018      	b.n	8028576 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8028544:	687b      	ldr	r3, [r7, #4]
 8028546:	681b      	ldr	r3, [r3, #0]
 8028548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802854a:	687b      	ldr	r3, [r7, #4]
 802854c:	681b      	ldr	r3, [r3, #0]
 802854e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8028552:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8028554:	687b      	ldr	r3, [r7, #4]
 8028556:	681b      	ldr	r3, [r3, #0]
 8028558:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802855a:	687b      	ldr	r3, [r7, #4]
 802855c:	699a      	ldr	r2, [r3, #24]
 802855e:	687b      	ldr	r3, [r7, #4]
 8028560:	681b      	ldr	r3, [r3, #0]
 8028562:	430a      	orrs	r2, r1
 8028564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	681b      	ldr	r3, [r3, #0]
 802856a:	22ff      	movs	r2, #255	; 0xff
 802856c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 802856e:	687b      	ldr	r3, [r7, #4]
 8028570:	2201      	movs	r2, #1
 8028572:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8028574:	2300      	movs	r3, #0
  }
}
 8028576:	4618      	mov	r0, r3
 8028578:	3708      	adds	r7, #8
 802857a:	46bd      	mov	sp, r7
 802857c:	bd80      	pop	{r7, pc}

0802857e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 802857e:	b590      	push	{r4, r7, lr}
 8028580:	b087      	sub	sp, #28
 8028582:	af00      	add	r7, sp, #0
 8028584:	60f8      	str	r0, [r7, #12]
 8028586:	60b9      	str	r1, [r7, #8]
 8028588:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 802858a:	2300      	movs	r3, #0
 802858c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802858e:	68fb      	ldr	r3, [r7, #12]
 8028590:	7f1b      	ldrb	r3, [r3, #28]
 8028592:	2b01      	cmp	r3, #1
 8028594:	d101      	bne.n	802859a <HAL_RTC_SetTime+0x1c>
 8028596:	2302      	movs	r3, #2
 8028598:	e0aa      	b.n	80286f0 <HAL_RTC_SetTime+0x172>
 802859a:	68fb      	ldr	r3, [r7, #12]
 802859c:	2201      	movs	r2, #1
 802859e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80285a0:	68fb      	ldr	r3, [r7, #12]
 80285a2:	2202      	movs	r2, #2
 80285a4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80285a6:	687b      	ldr	r3, [r7, #4]
 80285a8:	2b00      	cmp	r3, #0
 80285aa:	d126      	bne.n	80285fa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	681b      	ldr	r3, [r3, #0]
 80285b0:	689b      	ldr	r3, [r3, #8]
 80285b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	d102      	bne.n	80285c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80285ba:	68bb      	ldr	r3, [r7, #8]
 80285bc:	2200      	movs	r2, #0
 80285be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80285c0:	68bb      	ldr	r3, [r7, #8]
 80285c2:	781b      	ldrb	r3, [r3, #0]
 80285c4:	4618      	mov	r0, r3
 80285c6:	f000 f992 	bl	80288ee <RTC_ByteToBcd2>
 80285ca:	4603      	mov	r3, r0
 80285cc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80285ce:	68bb      	ldr	r3, [r7, #8]
 80285d0:	785b      	ldrb	r3, [r3, #1]
 80285d2:	4618      	mov	r0, r3
 80285d4:	f000 f98b 	bl	80288ee <RTC_ByteToBcd2>
 80285d8:	4603      	mov	r3, r0
 80285da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80285dc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80285de:	68bb      	ldr	r3, [r7, #8]
 80285e0:	789b      	ldrb	r3, [r3, #2]
 80285e2:	4618      	mov	r0, r3
 80285e4:	f000 f983 	bl	80288ee <RTC_ByteToBcd2>
 80285e8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80285ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80285ee:	68bb      	ldr	r3, [r7, #8]
 80285f0:	78db      	ldrb	r3, [r3, #3]
 80285f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80285f4:	4313      	orrs	r3, r2
 80285f6:	617b      	str	r3, [r7, #20]
 80285f8:	e018      	b.n	802862c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80285fa:	68fb      	ldr	r3, [r7, #12]
 80285fc:	681b      	ldr	r3, [r3, #0]
 80285fe:	689b      	ldr	r3, [r3, #8]
 8028600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028604:	2b00      	cmp	r3, #0
 8028606:	d102      	bne.n	802860e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8028608:	68bb      	ldr	r3, [r7, #8]
 802860a:	2200      	movs	r2, #0
 802860c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 802860e:	68bb      	ldr	r3, [r7, #8]
 8028610:	781b      	ldrb	r3, [r3, #0]
 8028612:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8028614:	68bb      	ldr	r3, [r7, #8]
 8028616:	785b      	ldrb	r3, [r3, #1]
 8028618:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 802861a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 802861c:	68ba      	ldr	r2, [r7, #8]
 802861e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8028620:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8028622:	68bb      	ldr	r3, [r7, #8]
 8028624:	78db      	ldrb	r3, [r3, #3]
 8028626:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8028628:	4313      	orrs	r3, r2
 802862a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802862c:	68fb      	ldr	r3, [r7, #12]
 802862e:	681b      	ldr	r3, [r3, #0]
 8028630:	22ca      	movs	r2, #202	; 0xca
 8028632:	625a      	str	r2, [r3, #36]	; 0x24
 8028634:	68fb      	ldr	r3, [r7, #12]
 8028636:	681b      	ldr	r3, [r3, #0]
 8028638:	2253      	movs	r2, #83	; 0x53
 802863a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802863c:	68f8      	ldr	r0, [r7, #12]
 802863e:	f000 f92a 	bl	8028896 <RTC_EnterInitMode>
 8028642:	4603      	mov	r3, r0
 8028644:	2b00      	cmp	r3, #0
 8028646:	d00b      	beq.n	8028660 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8028648:	68fb      	ldr	r3, [r7, #12]
 802864a:	681b      	ldr	r3, [r3, #0]
 802864c:	22ff      	movs	r2, #255	; 0xff
 802864e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8028650:	68fb      	ldr	r3, [r7, #12]
 8028652:	2204      	movs	r2, #4
 8028654:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8028656:	68fb      	ldr	r3, [r7, #12]
 8028658:	2200      	movs	r2, #0
 802865a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 802865c:	2301      	movs	r3, #1
 802865e:	e047      	b.n	80286f0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8028660:	68fb      	ldr	r3, [r7, #12]
 8028662:	681a      	ldr	r2, [r3, #0]
 8028664:	697b      	ldr	r3, [r7, #20]
 8028666:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 802866a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 802866e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8028670:	68fb      	ldr	r3, [r7, #12]
 8028672:	681b      	ldr	r3, [r3, #0]
 8028674:	689a      	ldr	r2, [r3, #8]
 8028676:	68fb      	ldr	r3, [r7, #12]
 8028678:	681b      	ldr	r3, [r3, #0]
 802867a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802867e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8028680:	68fb      	ldr	r3, [r7, #12]
 8028682:	681b      	ldr	r3, [r3, #0]
 8028684:	6899      	ldr	r1, [r3, #8]
 8028686:	68bb      	ldr	r3, [r7, #8]
 8028688:	68da      	ldr	r2, [r3, #12]
 802868a:	68bb      	ldr	r3, [r7, #8]
 802868c:	691b      	ldr	r3, [r3, #16]
 802868e:	431a      	orrs	r2, r3
 8028690:	68fb      	ldr	r3, [r7, #12]
 8028692:	681b      	ldr	r3, [r3, #0]
 8028694:	430a      	orrs	r2, r1
 8028696:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8028698:	68fb      	ldr	r3, [r7, #12]
 802869a:	681b      	ldr	r3, [r3, #0]
 802869c:	68da      	ldr	r2, [r3, #12]
 802869e:	68fb      	ldr	r3, [r7, #12]
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80286a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80286a8:	68fb      	ldr	r3, [r7, #12]
 80286aa:	681b      	ldr	r3, [r3, #0]
 80286ac:	689b      	ldr	r3, [r3, #8]
 80286ae:	f003 0320 	and.w	r3, r3, #32
 80286b2:	2b00      	cmp	r3, #0
 80286b4:	d111      	bne.n	80286da <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80286b6:	68f8      	ldr	r0, [r7, #12]
 80286b8:	f000 f8c5 	bl	8028846 <HAL_RTC_WaitForSynchro>
 80286bc:	4603      	mov	r3, r0
 80286be:	2b00      	cmp	r3, #0
 80286c0:	d00b      	beq.n	80286da <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80286c2:	68fb      	ldr	r3, [r7, #12]
 80286c4:	681b      	ldr	r3, [r3, #0]
 80286c6:	22ff      	movs	r2, #255	; 0xff
 80286c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80286ca:	68fb      	ldr	r3, [r7, #12]
 80286cc:	2204      	movs	r2, #4
 80286ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80286d0:	68fb      	ldr	r3, [r7, #12]
 80286d2:	2200      	movs	r2, #0
 80286d4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80286d6:	2301      	movs	r3, #1
 80286d8:	e00a      	b.n	80286f0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80286da:	68fb      	ldr	r3, [r7, #12]
 80286dc:	681b      	ldr	r3, [r3, #0]
 80286de:	22ff      	movs	r2, #255	; 0xff
 80286e0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80286e2:	68fb      	ldr	r3, [r7, #12]
 80286e4:	2201      	movs	r2, #1
 80286e6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80286e8:	68fb      	ldr	r3, [r7, #12]
 80286ea:	2200      	movs	r2, #0
 80286ec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80286ee:	2300      	movs	r3, #0
  }
}
 80286f0:	4618      	mov	r0, r3
 80286f2:	371c      	adds	r7, #28
 80286f4:	46bd      	mov	sp, r7
 80286f6:	bd90      	pop	{r4, r7, pc}

080286f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80286f8:	b590      	push	{r4, r7, lr}
 80286fa:	b087      	sub	sp, #28
 80286fc:	af00      	add	r7, sp, #0
 80286fe:	60f8      	str	r0, [r7, #12]
 8028700:	60b9      	str	r1, [r7, #8]
 8028702:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8028704:	2300      	movs	r3, #0
 8028706:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8028708:	68fb      	ldr	r3, [r7, #12]
 802870a:	7f1b      	ldrb	r3, [r3, #28]
 802870c:	2b01      	cmp	r3, #1
 802870e:	d101      	bne.n	8028714 <HAL_RTC_SetDate+0x1c>
 8028710:	2302      	movs	r3, #2
 8028712:	e094      	b.n	802883e <HAL_RTC_SetDate+0x146>
 8028714:	68fb      	ldr	r3, [r7, #12]
 8028716:	2201      	movs	r2, #1
 8028718:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802871a:	68fb      	ldr	r3, [r7, #12]
 802871c:	2202      	movs	r2, #2
 802871e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8028720:	687b      	ldr	r3, [r7, #4]
 8028722:	2b00      	cmp	r3, #0
 8028724:	d10e      	bne.n	8028744 <HAL_RTC_SetDate+0x4c>
 8028726:	68bb      	ldr	r3, [r7, #8]
 8028728:	785b      	ldrb	r3, [r3, #1]
 802872a:	f003 0310 	and.w	r3, r3, #16
 802872e:	2b00      	cmp	r3, #0
 8028730:	d008      	beq.n	8028744 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8028732:	68bb      	ldr	r3, [r7, #8]
 8028734:	785b      	ldrb	r3, [r3, #1]
 8028736:	f023 0310 	bic.w	r3, r3, #16
 802873a:	b2db      	uxtb	r3, r3
 802873c:	330a      	adds	r3, #10
 802873e:	b2da      	uxtb	r2, r3
 8028740:	68bb      	ldr	r3, [r7, #8]
 8028742:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8028744:	687b      	ldr	r3, [r7, #4]
 8028746:	2b00      	cmp	r3, #0
 8028748:	d11c      	bne.n	8028784 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802874a:	68bb      	ldr	r3, [r7, #8]
 802874c:	78db      	ldrb	r3, [r3, #3]
 802874e:	4618      	mov	r0, r3
 8028750:	f000 f8cd 	bl	80288ee <RTC_ByteToBcd2>
 8028754:	4603      	mov	r3, r0
 8028756:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8028758:	68bb      	ldr	r3, [r7, #8]
 802875a:	785b      	ldrb	r3, [r3, #1]
 802875c:	4618      	mov	r0, r3
 802875e:	f000 f8c6 	bl	80288ee <RTC_ByteToBcd2>
 8028762:	4603      	mov	r3, r0
 8028764:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8028766:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8028768:	68bb      	ldr	r3, [r7, #8]
 802876a:	789b      	ldrb	r3, [r3, #2]
 802876c:	4618      	mov	r0, r3
 802876e:	f000 f8be 	bl	80288ee <RTC_ByteToBcd2>
 8028772:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8028774:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8028778:	68bb      	ldr	r3, [r7, #8]
 802877a:	781b      	ldrb	r3, [r3, #0]
 802877c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802877e:	4313      	orrs	r3, r2
 8028780:	617b      	str	r3, [r7, #20]
 8028782:	e00e      	b.n	80287a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8028784:	68bb      	ldr	r3, [r7, #8]
 8028786:	78db      	ldrb	r3, [r3, #3]
 8028788:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 802878a:	68bb      	ldr	r3, [r7, #8]
 802878c:	785b      	ldrb	r3, [r3, #1]
 802878e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8028790:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8028792:	68ba      	ldr	r2, [r7, #8]
 8028794:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8028796:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8028798:	68bb      	ldr	r3, [r7, #8]
 802879a:	781b      	ldrb	r3, [r3, #0]
 802879c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 802879e:	4313      	orrs	r3, r2
 80287a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80287a2:	68fb      	ldr	r3, [r7, #12]
 80287a4:	681b      	ldr	r3, [r3, #0]
 80287a6:	22ca      	movs	r2, #202	; 0xca
 80287a8:	625a      	str	r2, [r3, #36]	; 0x24
 80287aa:	68fb      	ldr	r3, [r7, #12]
 80287ac:	681b      	ldr	r3, [r3, #0]
 80287ae:	2253      	movs	r2, #83	; 0x53
 80287b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80287b2:	68f8      	ldr	r0, [r7, #12]
 80287b4:	f000 f86f 	bl	8028896 <RTC_EnterInitMode>
 80287b8:	4603      	mov	r3, r0
 80287ba:	2b00      	cmp	r3, #0
 80287bc:	d00b      	beq.n	80287d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80287be:	68fb      	ldr	r3, [r7, #12]
 80287c0:	681b      	ldr	r3, [r3, #0]
 80287c2:	22ff      	movs	r2, #255	; 0xff
 80287c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80287c6:	68fb      	ldr	r3, [r7, #12]
 80287c8:	2204      	movs	r2, #4
 80287ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80287cc:	68fb      	ldr	r3, [r7, #12]
 80287ce:	2200      	movs	r2, #0
 80287d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80287d2:	2301      	movs	r3, #1
 80287d4:	e033      	b.n	802883e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80287d6:	68fb      	ldr	r3, [r7, #12]
 80287d8:	681a      	ldr	r2, [r3, #0]
 80287da:	697b      	ldr	r3, [r7, #20]
 80287dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80287e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80287e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80287e6:	68fb      	ldr	r3, [r7, #12]
 80287e8:	681b      	ldr	r3, [r3, #0]
 80287ea:	68da      	ldr	r2, [r3, #12]
 80287ec:	68fb      	ldr	r3, [r7, #12]
 80287ee:	681b      	ldr	r3, [r3, #0]
 80287f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80287f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80287f6:	68fb      	ldr	r3, [r7, #12]
 80287f8:	681b      	ldr	r3, [r3, #0]
 80287fa:	689b      	ldr	r3, [r3, #8]
 80287fc:	f003 0320 	and.w	r3, r3, #32
 8028800:	2b00      	cmp	r3, #0
 8028802:	d111      	bne.n	8028828 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8028804:	68f8      	ldr	r0, [r7, #12]
 8028806:	f000 f81e 	bl	8028846 <HAL_RTC_WaitForSynchro>
 802880a:	4603      	mov	r3, r0
 802880c:	2b00      	cmp	r3, #0
 802880e:	d00b      	beq.n	8028828 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8028810:	68fb      	ldr	r3, [r7, #12]
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	22ff      	movs	r2, #255	; 0xff
 8028816:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8028818:	68fb      	ldr	r3, [r7, #12]
 802881a:	2204      	movs	r2, #4
 802881c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 802881e:	68fb      	ldr	r3, [r7, #12]
 8028820:	2200      	movs	r2, #0
 8028822:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8028824:	2301      	movs	r3, #1
 8028826:	e00a      	b.n	802883e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8028828:	68fb      	ldr	r3, [r7, #12]
 802882a:	681b      	ldr	r3, [r3, #0]
 802882c:	22ff      	movs	r2, #255	; 0xff
 802882e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8028830:	68fb      	ldr	r3, [r7, #12]
 8028832:	2201      	movs	r2, #1
 8028834:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8028836:	68fb      	ldr	r3, [r7, #12]
 8028838:	2200      	movs	r2, #0
 802883a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 802883c:	2300      	movs	r3, #0
  }
}
 802883e:	4618      	mov	r0, r3
 8028840:	371c      	adds	r7, #28
 8028842:	46bd      	mov	sp, r7
 8028844:	bd90      	pop	{r4, r7, pc}

08028846 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8028846:	b580      	push	{r7, lr}
 8028848:	b084      	sub	sp, #16
 802884a:	af00      	add	r7, sp, #0
 802884c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802884e:	2300      	movs	r3, #0
 8028850:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8028852:	687b      	ldr	r3, [r7, #4]
 8028854:	681b      	ldr	r3, [r3, #0]
 8028856:	68da      	ldr	r2, [r3, #12]
 8028858:	687b      	ldr	r3, [r7, #4]
 802885a:	681b      	ldr	r3, [r3, #0]
 802885c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8028860:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8028862:	f7fa fdc5 	bl	80233f0 <HAL_GetTick>
 8028866:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8028868:	e009      	b.n	802887e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 802886a:	f7fa fdc1 	bl	80233f0 <HAL_GetTick>
 802886e:	4602      	mov	r2, r0
 8028870:	68fb      	ldr	r3, [r7, #12]
 8028872:	1ad3      	subs	r3, r2, r3
 8028874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028878:	d901      	bls.n	802887e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802887a:	2303      	movs	r3, #3
 802887c:	e007      	b.n	802888e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 802887e:	687b      	ldr	r3, [r7, #4]
 8028880:	681b      	ldr	r3, [r3, #0]
 8028882:	68db      	ldr	r3, [r3, #12]
 8028884:	f003 0320 	and.w	r3, r3, #32
 8028888:	2b00      	cmp	r3, #0
 802888a:	d0ee      	beq.n	802886a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802888c:	2300      	movs	r3, #0
}
 802888e:	4618      	mov	r0, r3
 8028890:	3710      	adds	r7, #16
 8028892:	46bd      	mov	sp, r7
 8028894:	bd80      	pop	{r7, pc}

08028896 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8028896:	b580      	push	{r7, lr}
 8028898:	b084      	sub	sp, #16
 802889a:	af00      	add	r7, sp, #0
 802889c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802889e:	2300      	movs	r3, #0
 80288a0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	681b      	ldr	r3, [r3, #0]
 80288a6:	68db      	ldr	r3, [r3, #12]
 80288a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80288ac:	2b00      	cmp	r3, #0
 80288ae:	d119      	bne.n	80288e4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80288b0:	687b      	ldr	r3, [r7, #4]
 80288b2:	681b      	ldr	r3, [r3, #0]
 80288b4:	f04f 32ff 	mov.w	r2, #4294967295
 80288b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80288ba:	f7fa fd99 	bl	80233f0 <HAL_GetTick>
 80288be:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80288c0:	e009      	b.n	80288d6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80288c2:	f7fa fd95 	bl	80233f0 <HAL_GetTick>
 80288c6:	4602      	mov	r2, r0
 80288c8:	68fb      	ldr	r3, [r7, #12]
 80288ca:	1ad3      	subs	r3, r2, r3
 80288cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80288d0:	d901      	bls.n	80288d6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80288d2:	2303      	movs	r3, #3
 80288d4:	e007      	b.n	80288e6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80288d6:	687b      	ldr	r3, [r7, #4]
 80288d8:	681b      	ldr	r3, [r3, #0]
 80288da:	68db      	ldr	r3, [r3, #12]
 80288dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80288e0:	2b00      	cmp	r3, #0
 80288e2:	d0ee      	beq.n	80288c2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80288e4:	2300      	movs	r3, #0
}
 80288e6:	4618      	mov	r0, r3
 80288e8:	3710      	adds	r7, #16
 80288ea:	46bd      	mov	sp, r7
 80288ec:	bd80      	pop	{r7, pc}

080288ee <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80288ee:	b480      	push	{r7}
 80288f0:	b085      	sub	sp, #20
 80288f2:	af00      	add	r7, sp, #0
 80288f4:	4603      	mov	r3, r0
 80288f6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80288f8:	2300      	movs	r3, #0
 80288fa:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80288fc:	e005      	b.n	802890a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80288fe:	68fb      	ldr	r3, [r7, #12]
 8028900:	3301      	adds	r3, #1
 8028902:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8028904:	79fb      	ldrb	r3, [r7, #7]
 8028906:	3b0a      	subs	r3, #10
 8028908:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 802890a:	79fb      	ldrb	r3, [r7, #7]
 802890c:	2b09      	cmp	r3, #9
 802890e:	d8f6      	bhi.n	80288fe <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8028910:	68fb      	ldr	r3, [r7, #12]
 8028912:	b2db      	uxtb	r3, r3
 8028914:	011b      	lsls	r3, r3, #4
 8028916:	b2da      	uxtb	r2, r3
 8028918:	79fb      	ldrb	r3, [r7, #7]
 802891a:	4313      	orrs	r3, r2
 802891c:	b2db      	uxtb	r3, r3
}
 802891e:	4618      	mov	r0, r3
 8028920:	3714      	adds	r7, #20
 8028922:	46bd      	mov	sp, r7
 8028924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028928:	4770      	bx	lr

0802892a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 802892a:	b580      	push	{r7, lr}
 802892c:	b082      	sub	sp, #8
 802892e:	af00      	add	r7, sp, #0
 8028930:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8028932:	687b      	ldr	r3, [r7, #4]
 8028934:	2b00      	cmp	r3, #0
 8028936:	d101      	bne.n	802893c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8028938:	2301      	movs	r3, #1
 802893a:	e022      	b.n	8028982 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 802893c:	687b      	ldr	r3, [r7, #4]
 802893e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028942:	b2db      	uxtb	r3, r3
 8028944:	2b00      	cmp	r3, #0
 8028946:	d105      	bne.n	8028954 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8028948:	687b      	ldr	r3, [r7, #4]
 802894a:	2200      	movs	r2, #0
 802894c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 802894e:	6878      	ldr	r0, [r7, #4]
 8028950:	f7f9 fd8a 	bl	8022468 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8028954:	687b      	ldr	r3, [r7, #4]
 8028956:	2203      	movs	r2, #3
 8028958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 802895c:	6878      	ldr	r0, [r7, #4]
 802895e:	f000 f815 	bl	802898c <HAL_SD_InitCard>
 8028962:	4603      	mov	r3, r0
 8028964:	2b00      	cmp	r3, #0
 8028966:	d001      	beq.n	802896c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8028968:	2301      	movs	r3, #1
 802896a:	e00a      	b.n	8028982 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 802896c:	687b      	ldr	r3, [r7, #4]
 802896e:	2200      	movs	r2, #0
 8028970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	2200      	movs	r2, #0
 8028976:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	2201      	movs	r2, #1
 802897c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8028980:	2300      	movs	r3, #0
}
 8028982:	4618      	mov	r0, r3
 8028984:	3708      	adds	r7, #8
 8028986:	46bd      	mov	sp, r7
 8028988:	bd80      	pop	{r7, pc}
	...

0802898c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 802898c:	b5b0      	push	{r4, r5, r7, lr}
 802898e:	b08e      	sub	sp, #56	; 0x38
 8028990:	af04      	add	r7, sp, #16
 8028992:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8028994:	2300      	movs	r3, #0
 8028996:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8028998:	2300      	movs	r3, #0
 802899a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 802899c:	2300      	movs	r3, #0
 802899e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80289a0:	2300      	movs	r3, #0
 80289a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80289a4:	2300      	movs	r3, #0
 80289a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80289a8:	2376      	movs	r3, #118	; 0x76
 80289aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80289ac:	687b      	ldr	r3, [r7, #4]
 80289ae:	681d      	ldr	r5, [r3, #0]
 80289b0:	466c      	mov	r4, sp
 80289b2:	f107 0314 	add.w	r3, r7, #20
 80289b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80289ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80289be:	f107 0308 	add.w	r3, r7, #8
 80289c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80289c4:	4628      	mov	r0, r5
 80289c6:	f002 ffcf 	bl	802b968 <SDIO_Init>
 80289ca:	4603      	mov	r3, r0
 80289cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80289d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	d001      	beq.n	80289dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80289d8:	2301      	movs	r3, #1
 80289da:	e031      	b.n	8028a40 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80289dc:	4b1a      	ldr	r3, [pc, #104]	; (8028a48 <HAL_SD_InitCard+0xbc>)
 80289de:	2200      	movs	r2, #0
 80289e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80289e2:	687b      	ldr	r3, [r7, #4]
 80289e4:	681b      	ldr	r3, [r3, #0]
 80289e6:	4618      	mov	r0, r3
 80289e8:	f003 f807 	bl	802b9fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80289ec:	4b16      	ldr	r3, [pc, #88]	; (8028a48 <HAL_SD_InitCard+0xbc>)
 80289ee:	2201      	movs	r2, #1
 80289f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80289f2:	6878      	ldr	r0, [r7, #4]
 80289f4:	f000 ff80 	bl	80298f8 <SD_PowerON>
 80289f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80289fa:	6a3b      	ldr	r3, [r7, #32]
 80289fc:	2b00      	cmp	r3, #0
 80289fe:	d00b      	beq.n	8028a18 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8028a00:	687b      	ldr	r3, [r7, #4]
 8028a02:	2201      	movs	r2, #1
 8028a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8028a08:	687b      	ldr	r3, [r7, #4]
 8028a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028a0c:	6a3b      	ldr	r3, [r7, #32]
 8028a0e:	431a      	orrs	r2, r3
 8028a10:	687b      	ldr	r3, [r7, #4]
 8028a12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028a14:	2301      	movs	r3, #1
 8028a16:	e013      	b.n	8028a40 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8028a18:	6878      	ldr	r0, [r7, #4]
 8028a1a:	f000 fe9f 	bl	802975c <SD_InitCard>
 8028a1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028a20:	6a3b      	ldr	r3, [r7, #32]
 8028a22:	2b00      	cmp	r3, #0
 8028a24:	d00b      	beq.n	8028a3e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	2201      	movs	r2, #1
 8028a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8028a2e:	687b      	ldr	r3, [r7, #4]
 8028a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028a32:	6a3b      	ldr	r3, [r7, #32]
 8028a34:	431a      	orrs	r2, r3
 8028a36:	687b      	ldr	r3, [r7, #4]
 8028a38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028a3a:	2301      	movs	r3, #1
 8028a3c:	e000      	b.n	8028a40 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8028a3e:	2300      	movs	r3, #0
}
 8028a40:	4618      	mov	r0, r3
 8028a42:	3728      	adds	r7, #40	; 0x28
 8028a44:	46bd      	mov	sp, r7
 8028a46:	bdb0      	pop	{r4, r5, r7, pc}
 8028a48:	422580a0 	.word	0x422580a0

08028a4c <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8028a4c:	b580      	push	{r7, lr}
 8028a4e:	b082      	sub	sp, #8
 8028a50:	af00      	add	r7, sp, #0
 8028a52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8028a54:	687b      	ldr	r3, [r7, #4]
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	d101      	bne.n	8028a5e <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8028a5a:	2301      	movs	r3, #1
 8028a5c:	e011      	b.n	8028a82 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8028a5e:	687b      	ldr	r3, [r7, #4]
 8028a60:	2203      	movs	r2, #3
 8028a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8028a66:	6878      	ldr	r0, [r7, #4]
 8028a68:	f000 ffd4 	bl	8029a14 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8028a6c:	6878      	ldr	r0, [r7, #4]
 8028a6e:	f7f9 fdeb 	bl	8022648 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	2200      	movs	r2, #0
 8028a76:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8028a78:	687b      	ldr	r3, [r7, #4]
 8028a7a:	2200      	movs	r2, #0
 8028a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8028a80:	2300      	movs	r3, #0
}
 8028a82:	4618      	mov	r0, r3
 8028a84:	3708      	adds	r7, #8
 8028a86:	46bd      	mov	sp, r7
 8028a88:	bd80      	pop	{r7, pc}
	...

08028a8c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8028a8c:	b580      	push	{r7, lr}
 8028a8e:	b08c      	sub	sp, #48	; 0x30
 8028a90:	af00      	add	r7, sp, #0
 8028a92:	60f8      	str	r0, [r7, #12]
 8028a94:	60b9      	str	r1, [r7, #8]
 8028a96:	607a      	str	r2, [r7, #4]
 8028a98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8028a9e:	68bb      	ldr	r3, [r7, #8]
 8028aa0:	2b00      	cmp	r3, #0
 8028aa2:	d107      	bne.n	8028ab4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028aa8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8028aac:	68fb      	ldr	r3, [r7, #12]
 8028aae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028ab0:	2301      	movs	r3, #1
 8028ab2:	e0c9      	b.n	8028c48 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8028ab4:	68fb      	ldr	r3, [r7, #12]
 8028ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028aba:	b2db      	uxtb	r3, r3
 8028abc:	2b01      	cmp	r3, #1
 8028abe:	f040 80c2 	bne.w	8028c46 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8028ac2:	68fb      	ldr	r3, [r7, #12]
 8028ac4:	2200      	movs	r2, #0
 8028ac6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8028ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028aca:	683b      	ldr	r3, [r7, #0]
 8028acc:	441a      	add	r2, r3
 8028ace:	68fb      	ldr	r3, [r7, #12]
 8028ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028ad2:	429a      	cmp	r2, r3
 8028ad4:	d907      	bls.n	8028ae6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8028ad6:	68fb      	ldr	r3, [r7, #12]
 8028ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ada:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8028ade:	68fb      	ldr	r3, [r7, #12]
 8028ae0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8028ae2:	2301      	movs	r3, #1
 8028ae4:	e0b0      	b.n	8028c48 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8028ae6:	68fb      	ldr	r3, [r7, #12]
 8028ae8:	2203      	movs	r2, #3
 8028aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8028aee:	68fb      	ldr	r3, [r7, #12]
 8028af0:	681b      	ldr	r3, [r3, #0]
 8028af2:	2200      	movs	r2, #0
 8028af4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8028af6:	68fb      	ldr	r3, [r7, #12]
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028afc:	68fa      	ldr	r2, [r7, #12]
 8028afe:	6812      	ldr	r2, [r2, #0]
 8028b00:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8028b04:	f043 0302 	orr.w	r3, r3, #2
 8028b08:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8028b0a:	68fb      	ldr	r3, [r7, #12]
 8028b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b0e:	4a50      	ldr	r2, [pc, #320]	; (8028c50 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8028b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8028b12:	68fb      	ldr	r3, [r7, #12]
 8028b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b16:	4a4f      	ldr	r2, [pc, #316]	; (8028c54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8028b18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8028b1a:	68fb      	ldr	r3, [r7, #12]
 8028b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b1e:	2200      	movs	r2, #0
 8028b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8028b22:	68fb      	ldr	r3, [r7, #12]
 8028b24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8028b26:	68fb      	ldr	r3, [r7, #12]
 8028b28:	681b      	ldr	r3, [r3, #0]
 8028b2a:	3380      	adds	r3, #128	; 0x80
 8028b2c:	4619      	mov	r1, r3
 8028b2e:	68ba      	ldr	r2, [r7, #8]
 8028b30:	683b      	ldr	r3, [r7, #0]
 8028b32:	025b      	lsls	r3, r3, #9
 8028b34:	089b      	lsrs	r3, r3, #2
 8028b36:	f7fa fec3 	bl	80238c0 <HAL_DMA_Start_IT>
 8028b3a:	4603      	mov	r3, r0
 8028b3c:	2b00      	cmp	r3, #0
 8028b3e:	d017      	beq.n	8028b70 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8028b40:	68fb      	ldr	r3, [r7, #12]
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028b46:	68fb      	ldr	r3, [r7, #12]
 8028b48:	681b      	ldr	r3, [r3, #0]
 8028b4a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8028b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8028b50:	68fb      	ldr	r3, [r7, #12]
 8028b52:	681b      	ldr	r3, [r3, #0]
 8028b54:	4a40      	ldr	r2, [pc, #256]	; (8028c58 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8028b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8028b58:	68fb      	ldr	r3, [r7, #12]
 8028b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8028b60:	68fb      	ldr	r3, [r7, #12]
 8028b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028b64:	68fb      	ldr	r3, [r7, #12]
 8028b66:	2201      	movs	r2, #1
 8028b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8028b6c:	2301      	movs	r3, #1
 8028b6e:	e06b      	b.n	8028c48 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8028b70:	4b3a      	ldr	r3, [pc, #232]	; (8028c5c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8028b72:	2201      	movs	r2, #1
 8028b74:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8028b76:	68fb      	ldr	r3, [r7, #12]
 8028b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028b7a:	2b01      	cmp	r3, #1
 8028b7c:	d002      	beq.n	8028b84 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8028b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b80:	025b      	lsls	r3, r3, #9
 8028b82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8028b84:	68fb      	ldr	r3, [r7, #12]
 8028b86:	681b      	ldr	r3, [r3, #0]
 8028b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8028b8c:	4618      	mov	r0, r3
 8028b8e:	f002 ffd5 	bl	802bb3c <SDMMC_CmdBlockLength>
 8028b92:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8028b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028b96:	2b00      	cmp	r3, #0
 8028b98:	d00f      	beq.n	8028bba <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8028b9a:	68fb      	ldr	r3, [r7, #12]
 8028b9c:	681b      	ldr	r3, [r3, #0]
 8028b9e:	4a2e      	ldr	r2, [pc, #184]	; (8028c58 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8028ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8028ba2:	68fb      	ldr	r3, [r7, #12]
 8028ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ba8:	431a      	orrs	r2, r3
 8028baa:	68fb      	ldr	r3, [r7, #12]
 8028bac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8028bae:	68fb      	ldr	r3, [r7, #12]
 8028bb0:	2201      	movs	r2, #1
 8028bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8028bb6:	2301      	movs	r3, #1
 8028bb8:	e046      	b.n	8028c48 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8028bba:	f04f 33ff 	mov.w	r3, #4294967295
 8028bbe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8028bc0:	683b      	ldr	r3, [r7, #0]
 8028bc2:	025b      	lsls	r3, r3, #9
 8028bc4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8028bc6:	2390      	movs	r3, #144	; 0x90
 8028bc8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8028bca:	2302      	movs	r3, #2
 8028bcc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8028bce:	2300      	movs	r3, #0
 8028bd0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8028bd2:	2301      	movs	r3, #1
 8028bd4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8028bd6:	68fb      	ldr	r3, [r7, #12]
 8028bd8:	681b      	ldr	r3, [r3, #0]
 8028bda:	f107 0210 	add.w	r2, r7, #16
 8028bde:	4611      	mov	r1, r2
 8028be0:	4618      	mov	r0, r3
 8028be2:	f002 ff7f 	bl	802bae4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8028be6:	683b      	ldr	r3, [r7, #0]
 8028be8:	2b01      	cmp	r3, #1
 8028bea:	d90a      	bls.n	8028c02 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8028bec:	68fb      	ldr	r3, [r7, #12]
 8028bee:	2282      	movs	r2, #130	; 0x82
 8028bf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8028bf2:	68fb      	ldr	r3, [r7, #12]
 8028bf4:	681b      	ldr	r3, [r3, #0]
 8028bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028bf8:	4618      	mov	r0, r3
 8028bfa:	f002 ffe3 	bl	802bbc4 <SDMMC_CmdReadMultiBlock>
 8028bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8028c00:	e009      	b.n	8028c16 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8028c02:	68fb      	ldr	r3, [r7, #12]
 8028c04:	2281      	movs	r2, #129	; 0x81
 8028c06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8028c08:	68fb      	ldr	r3, [r7, #12]
 8028c0a:	681b      	ldr	r3, [r3, #0]
 8028c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028c0e:	4618      	mov	r0, r3
 8028c10:	f002 ffb6 	bl	802bb80 <SDMMC_CmdReadSingleBlock>
 8028c14:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8028c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	d012      	beq.n	8028c42 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8028c1c:	68fb      	ldr	r3, [r7, #12]
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	4a0d      	ldr	r2, [pc, #52]	; (8028c58 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8028c22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8028c24:	68fb      	ldr	r3, [r7, #12]
 8028c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c2a:	431a      	orrs	r2, r3
 8028c2c:	68fb      	ldr	r3, [r7, #12]
 8028c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8028c30:	68fb      	ldr	r3, [r7, #12]
 8028c32:	2201      	movs	r2, #1
 8028c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028c38:	68fb      	ldr	r3, [r7, #12]
 8028c3a:	2200      	movs	r2, #0
 8028c3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8028c3e:	2301      	movs	r3, #1
 8028c40:	e002      	b.n	8028c48 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8028c42:	2300      	movs	r3, #0
 8028c44:	e000      	b.n	8028c48 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8028c46:	2302      	movs	r3, #2
  }
}
 8028c48:	4618      	mov	r0, r3
 8028c4a:	3730      	adds	r7, #48	; 0x30
 8028c4c:	46bd      	mov	sp, r7
 8028c4e:	bd80      	pop	{r7, pc}
 8028c50:	0802956b 	.word	0x0802956b
 8028c54:	080295dd 	.word	0x080295dd
 8028c58:	004005ff 	.word	0x004005ff
 8028c5c:	4225858c 	.word	0x4225858c

08028c60 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8028c60:	b580      	push	{r7, lr}
 8028c62:	b08c      	sub	sp, #48	; 0x30
 8028c64:	af00      	add	r7, sp, #0
 8028c66:	60f8      	str	r0, [r7, #12]
 8028c68:	60b9      	str	r1, [r7, #8]
 8028c6a:	607a      	str	r2, [r7, #4]
 8028c6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8028c6e:	687b      	ldr	r3, [r7, #4]
 8028c70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8028c72:	68bb      	ldr	r3, [r7, #8]
 8028c74:	2b00      	cmp	r3, #0
 8028c76:	d107      	bne.n	8028c88 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8028c80:	68fb      	ldr	r3, [r7, #12]
 8028c82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028c84:	2301      	movs	r3, #1
 8028c86:	e0ce      	b.n	8028e26 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8028c88:	68fb      	ldr	r3, [r7, #12]
 8028c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028c8e:	b2db      	uxtb	r3, r3
 8028c90:	2b01      	cmp	r3, #1
 8028c92:	f040 80c7 	bne.w	8028e24 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8028c96:	68fb      	ldr	r3, [r7, #12]
 8028c98:	2200      	movs	r2, #0
 8028c9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8028c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028c9e:	683b      	ldr	r3, [r7, #0]
 8028ca0:	441a      	add	r2, r3
 8028ca2:	68fb      	ldr	r3, [r7, #12]
 8028ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8028ca6:	429a      	cmp	r2, r3
 8028ca8:	d907      	bls.n	8028cba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8028caa:	68fb      	ldr	r3, [r7, #12]
 8028cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8028cb2:	68fb      	ldr	r3, [r7, #12]
 8028cb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8028cb6:	2301      	movs	r3, #1
 8028cb8:	e0b5      	b.n	8028e26 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8028cba:	68fb      	ldr	r3, [r7, #12]
 8028cbc:	2203      	movs	r2, #3
 8028cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8028cc2:	68fb      	ldr	r3, [r7, #12]
 8028cc4:	681b      	ldr	r3, [r3, #0]
 8028cc6:	2200      	movs	r2, #0
 8028cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	681b      	ldr	r3, [r3, #0]
 8028cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028cd0:	68fa      	ldr	r2, [r7, #12]
 8028cd2:	6812      	ldr	r2, [r2, #0]
 8028cd4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8028cd8:	f043 0302 	orr.w	r3, r3, #2
 8028cdc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8028cde:	68fb      	ldr	r3, [r7, #12]
 8028ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028ce2:	4a53      	ldr	r2, [pc, #332]	; (8028e30 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8028ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028cea:	4a52      	ldr	r2, [pc, #328]	; (8028e34 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8028cec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8028cee:	68fb      	ldr	r3, [r7, #12]
 8028cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028cf2:	2200      	movs	r2, #0
 8028cf4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8028cf6:	68fb      	ldr	r3, [r7, #12]
 8028cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028cfa:	2b01      	cmp	r3, #1
 8028cfc:	d002      	beq.n	8028d04 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8028cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028d00:	025b      	lsls	r3, r3, #9
 8028d02:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8028d04:	68fb      	ldr	r3, [r7, #12]
 8028d06:	681b      	ldr	r3, [r3, #0]
 8028d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8028d0c:	4618      	mov	r0, r3
 8028d0e:	f002 ff15 	bl	802bb3c <SDMMC_CmdBlockLength>
 8028d12:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d16:	2b00      	cmp	r3, #0
 8028d18:	d00f      	beq.n	8028d3a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8028d1a:	68fb      	ldr	r3, [r7, #12]
 8028d1c:	681b      	ldr	r3, [r3, #0]
 8028d1e:	4a46      	ldr	r2, [pc, #280]	; (8028e38 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8028d20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028d22:	68fb      	ldr	r3, [r7, #12]
 8028d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d28:	431a      	orrs	r2, r3
 8028d2a:	68fb      	ldr	r3, [r7, #12]
 8028d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028d2e:	68fb      	ldr	r3, [r7, #12]
 8028d30:	2201      	movs	r2, #1
 8028d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8028d36:	2301      	movs	r3, #1
 8028d38:	e075      	b.n	8028e26 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8028d3a:	683b      	ldr	r3, [r7, #0]
 8028d3c:	2b01      	cmp	r3, #1
 8028d3e:	d90a      	bls.n	8028d56 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8028d40:	68fb      	ldr	r3, [r7, #12]
 8028d42:	22a0      	movs	r2, #160	; 0xa0
 8028d44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8028d46:	68fb      	ldr	r3, [r7, #12]
 8028d48:	681b      	ldr	r3, [r3, #0]
 8028d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028d4c:	4618      	mov	r0, r3
 8028d4e:	f002 ff7d 	bl	802bc4c <SDMMC_CmdWriteMultiBlock>
 8028d52:	62f8      	str	r0, [r7, #44]	; 0x2c
 8028d54:	e009      	b.n	8028d6a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8028d56:	68fb      	ldr	r3, [r7, #12]
 8028d58:	2290      	movs	r2, #144	; 0x90
 8028d5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8028d5c:	68fb      	ldr	r3, [r7, #12]
 8028d5e:	681b      	ldr	r3, [r3, #0]
 8028d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028d62:	4618      	mov	r0, r3
 8028d64:	f002 ff50 	bl	802bc08 <SDMMC_CmdWriteSingleBlock>
 8028d68:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8028d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d012      	beq.n	8028d96 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	681b      	ldr	r3, [r3, #0]
 8028d74:	4a30      	ldr	r2, [pc, #192]	; (8028e38 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8028d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d7e:	431a      	orrs	r2, r3
 8028d80:	68fb      	ldr	r3, [r7, #12]
 8028d82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	2201      	movs	r2, #1
 8028d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028d8c:	68fb      	ldr	r3, [r7, #12]
 8028d8e:	2200      	movs	r2, #0
 8028d90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028d92:	2301      	movs	r3, #1
 8028d94:	e047      	b.n	8028e26 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8028d96:	4b29      	ldr	r3, [pc, #164]	; (8028e3c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8028d98:	2201      	movs	r2, #1
 8028d9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8028da0:	68b9      	ldr	r1, [r7, #8]
 8028da2:	68fb      	ldr	r3, [r7, #12]
 8028da4:	681b      	ldr	r3, [r3, #0]
 8028da6:	3380      	adds	r3, #128	; 0x80
 8028da8:	461a      	mov	r2, r3
 8028daa:	683b      	ldr	r3, [r7, #0]
 8028dac:	025b      	lsls	r3, r3, #9
 8028dae:	089b      	lsrs	r3, r3, #2
 8028db0:	f7fa fd86 	bl	80238c0 <HAL_DMA_Start_IT>
 8028db4:	4603      	mov	r3, r0
 8028db6:	2b00      	cmp	r3, #0
 8028db8:	d01c      	beq.n	8028df4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8028dba:	68fb      	ldr	r3, [r7, #12]
 8028dbc:	681b      	ldr	r3, [r3, #0]
 8028dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028dc0:	68fa      	ldr	r2, [r7, #12]
 8028dc2:	6812      	ldr	r2, [r2, #0]
 8028dc4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8028dc8:	f023 0302 	bic.w	r3, r3, #2
 8028dcc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8028dce:	68fb      	ldr	r3, [r7, #12]
 8028dd0:	681b      	ldr	r3, [r3, #0]
 8028dd2:	4a19      	ldr	r2, [pc, #100]	; (8028e38 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8028dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8028dd6:	68fb      	ldr	r3, [r7, #12]
 8028dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8028dde:	68fb      	ldr	r3, [r7, #12]
 8028de0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028de2:	68fb      	ldr	r3, [r7, #12]
 8028de4:	2201      	movs	r2, #1
 8028de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028dea:	68fb      	ldr	r3, [r7, #12]
 8028dec:	2200      	movs	r2, #0
 8028dee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028df0:	2301      	movs	r3, #1
 8028df2:	e018      	b.n	8028e26 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8028df4:	f04f 33ff 	mov.w	r3, #4294967295
 8028df8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8028dfa:	683b      	ldr	r3, [r7, #0]
 8028dfc:	025b      	lsls	r3, r3, #9
 8028dfe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8028e00:	2390      	movs	r3, #144	; 0x90
 8028e02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8028e04:	2300      	movs	r3, #0
 8028e06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8028e08:	2300      	movs	r3, #0
 8028e0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8028e0c:	2301      	movs	r3, #1
 8028e0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8028e10:	68fb      	ldr	r3, [r7, #12]
 8028e12:	681b      	ldr	r3, [r3, #0]
 8028e14:	f107 0210 	add.w	r2, r7, #16
 8028e18:	4611      	mov	r1, r2
 8028e1a:	4618      	mov	r0, r3
 8028e1c:	f002 fe62 	bl	802bae4 <SDIO_ConfigData>

      return HAL_OK;
 8028e20:	2300      	movs	r3, #0
 8028e22:	e000      	b.n	8028e26 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8028e24:	2302      	movs	r3, #2
  }
}
 8028e26:	4618      	mov	r0, r3
 8028e28:	3730      	adds	r7, #48	; 0x30
 8028e2a:	46bd      	mov	sp, r7
 8028e2c:	bd80      	pop	{r7, pc}
 8028e2e:	bf00      	nop
 8028e30:	08029541 	.word	0x08029541
 8028e34:	080295dd 	.word	0x080295dd
 8028e38:	004005ff 	.word	0x004005ff
 8028e3c:	4225858c 	.word	0x4225858c

08028e40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8028e40:	b580      	push	{r7, lr}
 8028e42:	b084      	sub	sp, #16
 8028e44:	af00      	add	r7, sp, #0
 8028e46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8028e48:	687b      	ldr	r3, [r7, #4]
 8028e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	681b      	ldr	r3, [r3, #0]
 8028e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8028e58:	2b00      	cmp	r3, #0
 8028e5a:	d008      	beq.n	8028e6e <HAL_SD_IRQHandler+0x2e>
 8028e5c:	68fb      	ldr	r3, [r7, #12]
 8028e5e:	f003 0308 	and.w	r3, r3, #8
 8028e62:	2b00      	cmp	r3, #0
 8028e64:	d003      	beq.n	8028e6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8028e66:	6878      	ldr	r0, [r7, #4]
 8028e68:	f000 fe09 	bl	8029a7e <SD_Read_IT>
 8028e6c:	e165      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8028e6e:	687b      	ldr	r3, [r7, #4]
 8028e70:	681b      	ldr	r3, [r3, #0]
 8028e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028e78:	2b00      	cmp	r3, #0
 8028e7a:	f000 808f 	beq.w	8028f9c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8028e7e:	687b      	ldr	r3, [r7, #4]
 8028e80:	681b      	ldr	r3, [r3, #0]
 8028e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8028e86:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	681b      	ldr	r3, [r3, #0]
 8028e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e8e:	687a      	ldr	r2, [r7, #4]
 8028e90:	6812      	ldr	r2, [r2, #0]
 8028e92:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8028e96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8028e9a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	681b      	ldr	r3, [r3, #0]
 8028ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028ea2:	687b      	ldr	r3, [r7, #4]
 8028ea4:	681b      	ldr	r3, [r3, #0]
 8028ea6:	f022 0201 	bic.w	r2, r2, #1
 8028eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8028eac:	68fb      	ldr	r3, [r7, #12]
 8028eae:	f003 0308 	and.w	r3, r3, #8
 8028eb2:	2b00      	cmp	r3, #0
 8028eb4:	d039      	beq.n	8028f2a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8028eb6:	68fb      	ldr	r3, [r7, #12]
 8028eb8:	f003 0302 	and.w	r3, r3, #2
 8028ebc:	2b00      	cmp	r3, #0
 8028ebe:	d104      	bne.n	8028eca <HAL_SD_IRQHandler+0x8a>
 8028ec0:	68fb      	ldr	r3, [r7, #12]
 8028ec2:	f003 0320 	and.w	r3, r3, #32
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d011      	beq.n	8028eee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8028eca:	687b      	ldr	r3, [r7, #4]
 8028ecc:	681b      	ldr	r3, [r3, #0]
 8028ece:	4618      	mov	r0, r3
 8028ed0:	f002 fede 	bl	802bc90 <SDMMC_CmdStopTransfer>
 8028ed4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8028ed6:	68bb      	ldr	r3, [r7, #8]
 8028ed8:	2b00      	cmp	r3, #0
 8028eda:	d008      	beq.n	8028eee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028ee0:	68bb      	ldr	r3, [r7, #8]
 8028ee2:	431a      	orrs	r2, r3
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8028ee8:	6878      	ldr	r0, [r7, #4]
 8028eea:	f000 f92f 	bl	802914c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8028eee:	687b      	ldr	r3, [r7, #4]
 8028ef0:	681b      	ldr	r3, [r3, #0]
 8028ef2:	f240 523a 	movw	r2, #1338	; 0x53a
 8028ef6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8028ef8:	687b      	ldr	r3, [r7, #4]
 8028efa:	2201      	movs	r2, #1
 8028efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028f00:	687b      	ldr	r3, [r7, #4]
 8028f02:	2200      	movs	r2, #0
 8028f04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8028f06:	68fb      	ldr	r3, [r7, #12]
 8028f08:	f003 0301 	and.w	r3, r3, #1
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	d104      	bne.n	8028f1a <HAL_SD_IRQHandler+0xda>
 8028f10:	68fb      	ldr	r3, [r7, #12]
 8028f12:	f003 0302 	and.w	r3, r3, #2
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d003      	beq.n	8028f22 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8028f1a:	6878      	ldr	r0, [r7, #4]
 8028f1c:	f005 fbcc 	bl	802e6b8 <HAL_SD_RxCpltCallback>
 8028f20:	e10b      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8028f22:	6878      	ldr	r0, [r7, #4]
 8028f24:	f005 fbbe 	bl	802e6a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8028f28:	e107      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8028f2a:	68fb      	ldr	r3, [r7, #12]
 8028f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028f30:	2b00      	cmp	r3, #0
 8028f32:	f000 8102 	beq.w	802913a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8028f36:	68fb      	ldr	r3, [r7, #12]
 8028f38:	f003 0320 	and.w	r3, r3, #32
 8028f3c:	2b00      	cmp	r3, #0
 8028f3e:	d011      	beq.n	8028f64 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8028f40:	687b      	ldr	r3, [r7, #4]
 8028f42:	681b      	ldr	r3, [r3, #0]
 8028f44:	4618      	mov	r0, r3
 8028f46:	f002 fea3 	bl	802bc90 <SDMMC_CmdStopTransfer>
 8028f4a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8028f4c:	68bb      	ldr	r3, [r7, #8]
 8028f4e:	2b00      	cmp	r3, #0
 8028f50:	d008      	beq.n	8028f64 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8028f52:	687b      	ldr	r3, [r7, #4]
 8028f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028f56:	68bb      	ldr	r3, [r7, #8]
 8028f58:	431a      	orrs	r2, r3
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8028f5e:	6878      	ldr	r0, [r7, #4]
 8028f60:	f000 f8f4 	bl	802914c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8028f64:	68fb      	ldr	r3, [r7, #12]
 8028f66:	f003 0301 	and.w	r3, r3, #1
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	f040 80e5 	bne.w	802913a <HAL_SD_IRQHandler+0x2fa>
 8028f70:	68fb      	ldr	r3, [r7, #12]
 8028f72:	f003 0302 	and.w	r3, r3, #2
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	f040 80df 	bne.w	802913a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8028f7c:	687b      	ldr	r3, [r7, #4]
 8028f7e:	681b      	ldr	r3, [r3, #0]
 8028f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	681b      	ldr	r3, [r3, #0]
 8028f86:	f022 0208 	bic.w	r2, r2, #8
 8028f8a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8028f8c:	687b      	ldr	r3, [r7, #4]
 8028f8e:	2201      	movs	r2, #1
 8028f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8028f94:	6878      	ldr	r0, [r7, #4]
 8028f96:	f005 fb85 	bl	802e6a4 <HAL_SD_TxCpltCallback>
}
 8028f9a:	e0ce      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	681b      	ldr	r3, [r3, #0]
 8028fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028fa6:	2b00      	cmp	r3, #0
 8028fa8:	d008      	beq.n	8028fbc <HAL_SD_IRQHandler+0x17c>
 8028faa:	68fb      	ldr	r3, [r7, #12]
 8028fac:	f003 0308 	and.w	r3, r3, #8
 8028fb0:	2b00      	cmp	r3, #0
 8028fb2:	d003      	beq.n	8028fbc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8028fb4:	6878      	ldr	r0, [r7, #4]
 8028fb6:	f000 fdb3 	bl	8029b20 <SD_Write_IT>
 8028fba:	e0be      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028fc2:	f240 233a 	movw	r3, #570	; 0x23a
 8028fc6:	4013      	ands	r3, r2
 8028fc8:	2b00      	cmp	r3, #0
 8028fca:	f000 80b6 	beq.w	802913a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8028fce:	687b      	ldr	r3, [r7, #4]
 8028fd0:	681b      	ldr	r3, [r3, #0]
 8028fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028fd4:	f003 0302 	and.w	r3, r3, #2
 8028fd8:	2b00      	cmp	r3, #0
 8028fda:	d005      	beq.n	8028fe8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8028fdc:	687b      	ldr	r3, [r7, #4]
 8028fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fe0:	f043 0202 	orr.w	r2, r3, #2
 8028fe4:	687b      	ldr	r3, [r7, #4]
 8028fe6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8028fe8:	687b      	ldr	r3, [r7, #4]
 8028fea:	681b      	ldr	r3, [r3, #0]
 8028fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028fee:	f003 0308 	and.w	r3, r3, #8
 8028ff2:	2b00      	cmp	r3, #0
 8028ff4:	d005      	beq.n	8029002 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8028ff6:	687b      	ldr	r3, [r7, #4]
 8028ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ffa:	f043 0208 	orr.w	r2, r3, #8
 8028ffe:	687b      	ldr	r3, [r7, #4]
 8029000:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8029002:	687b      	ldr	r3, [r7, #4]
 8029004:	681b      	ldr	r3, [r3, #0]
 8029006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029008:	f003 0320 	and.w	r3, r3, #32
 802900c:	2b00      	cmp	r3, #0
 802900e:	d005      	beq.n	802901c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8029010:	687b      	ldr	r3, [r7, #4]
 8029012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029014:	f043 0220 	orr.w	r2, r3, #32
 8029018:	687b      	ldr	r3, [r7, #4]
 802901a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 802901c:	687b      	ldr	r3, [r7, #4]
 802901e:	681b      	ldr	r3, [r3, #0]
 8029020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029022:	f003 0310 	and.w	r3, r3, #16
 8029026:	2b00      	cmp	r3, #0
 8029028:	d005      	beq.n	8029036 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 802902a:	687b      	ldr	r3, [r7, #4]
 802902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802902e:	f043 0210 	orr.w	r2, r3, #16
 8029032:	687b      	ldr	r3, [r7, #4]
 8029034:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8029036:	687b      	ldr	r3, [r7, #4]
 8029038:	681b      	ldr	r3, [r3, #0]
 802903a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802903c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8029040:	2b00      	cmp	r3, #0
 8029042:	d005      	beq.n	8029050 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8029044:	687b      	ldr	r3, [r7, #4]
 8029046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029048:	f043 0208 	orr.w	r2, r3, #8
 802904c:	687b      	ldr	r3, [r7, #4]
 802904e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	681b      	ldr	r3, [r3, #0]
 8029054:	f240 723a 	movw	r2, #1850	; 0x73a
 8029058:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 802905a:	687b      	ldr	r3, [r7, #4]
 802905c:	681b      	ldr	r3, [r3, #0]
 802905e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029060:	687a      	ldr	r2, [r7, #4]
 8029062:	6812      	ldr	r2, [r2, #0]
 8029064:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8029068:	f023 0302 	bic.w	r3, r3, #2
 802906c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	681b      	ldr	r3, [r3, #0]
 8029072:	4618      	mov	r0, r3
 8029074:	f002 fe0c 	bl	802bc90 <SDMMC_CmdStopTransfer>
 8029078:	4602      	mov	r2, r0
 802907a:	687b      	ldr	r3, [r7, #4]
 802907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802907e:	431a      	orrs	r2, r3
 8029080:	687b      	ldr	r3, [r7, #4]
 8029082:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8029084:	68fb      	ldr	r3, [r7, #12]
 8029086:	f003 0308 	and.w	r3, r3, #8
 802908a:	2b00      	cmp	r3, #0
 802908c:	d00a      	beq.n	80290a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 802908e:	687b      	ldr	r3, [r7, #4]
 8029090:	2201      	movs	r2, #1
 8029092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	2200      	movs	r2, #0
 802909a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 802909c:	6878      	ldr	r0, [r7, #4]
 802909e:	f000 f855 	bl	802914c <HAL_SD_ErrorCallback>
}
 80290a2:	e04a      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80290a4:	68fb      	ldr	r3, [r7, #12]
 80290a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80290aa:	2b00      	cmp	r3, #0
 80290ac:	d045      	beq.n	802913a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80290ae:	68fb      	ldr	r3, [r7, #12]
 80290b0:	f003 0310 	and.w	r3, r3, #16
 80290b4:	2b00      	cmp	r3, #0
 80290b6:	d104      	bne.n	80290c2 <HAL_SD_IRQHandler+0x282>
 80290b8:	68fb      	ldr	r3, [r7, #12]
 80290ba:	f003 0320 	and.w	r3, r3, #32
 80290be:	2b00      	cmp	r3, #0
 80290c0:	d011      	beq.n	80290e6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80290c2:	687b      	ldr	r3, [r7, #4]
 80290c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80290c6:	4a1f      	ldr	r2, [pc, #124]	; (8029144 <HAL_SD_IRQHandler+0x304>)
 80290c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80290ca:	687b      	ldr	r3, [r7, #4]
 80290cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80290ce:	4618      	mov	r0, r3
 80290d0:	f7fa fc4e 	bl	8023970 <HAL_DMA_Abort_IT>
 80290d4:	4603      	mov	r3, r0
 80290d6:	2b00      	cmp	r3, #0
 80290d8:	d02f      	beq.n	802913a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80290da:	687b      	ldr	r3, [r7, #4]
 80290dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80290de:	4618      	mov	r0, r3
 80290e0:	f000 face 	bl	8029680 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80290e4:	e029      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80290e6:	68fb      	ldr	r3, [r7, #12]
 80290e8:	f003 0301 	and.w	r3, r3, #1
 80290ec:	2b00      	cmp	r3, #0
 80290ee:	d104      	bne.n	80290fa <HAL_SD_IRQHandler+0x2ba>
 80290f0:	68fb      	ldr	r3, [r7, #12]
 80290f2:	f003 0302 	and.w	r3, r3, #2
 80290f6:	2b00      	cmp	r3, #0
 80290f8:	d011      	beq.n	802911e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80290fa:	687b      	ldr	r3, [r7, #4]
 80290fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80290fe:	4a12      	ldr	r2, [pc, #72]	; (8029148 <HAL_SD_IRQHandler+0x308>)
 8029100:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8029102:	687b      	ldr	r3, [r7, #4]
 8029104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029106:	4618      	mov	r0, r3
 8029108:	f7fa fc32 	bl	8023970 <HAL_DMA_Abort_IT>
 802910c:	4603      	mov	r3, r0
 802910e:	2b00      	cmp	r3, #0
 8029110:	d013      	beq.n	802913a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029116:	4618      	mov	r0, r3
 8029118:	f000 fae9 	bl	80296ee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 802911c:	e00d      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 802911e:	687b      	ldr	r3, [r7, #4]
 8029120:	2200      	movs	r2, #0
 8029122:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8029124:	687b      	ldr	r3, [r7, #4]
 8029126:	2201      	movs	r2, #1
 8029128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 802912c:	687b      	ldr	r3, [r7, #4]
 802912e:	2200      	movs	r2, #0
 8029130:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8029132:	6878      	ldr	r0, [r7, #4]
 8029134:	f005 faac 	bl	802e690 <HAL_SD_AbortCallback>
}
 8029138:	e7ff      	b.n	802913a <HAL_SD_IRQHandler+0x2fa>
 802913a:	bf00      	nop
 802913c:	3710      	adds	r7, #16
 802913e:	46bd      	mov	sp, r7
 8029140:	bd80      	pop	{r7, pc}
 8029142:	bf00      	nop
 8029144:	08029681 	.word	0x08029681
 8029148:	080296ef 	.word	0x080296ef

0802914c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 802914c:	b480      	push	{r7}
 802914e:	b083      	sub	sp, #12
 8029150:	af00      	add	r7, sp, #0
 8029152:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8029154:	bf00      	nop
 8029156:	370c      	adds	r7, #12
 8029158:	46bd      	mov	sp, r7
 802915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802915e:	4770      	bx	lr

08029160 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8029160:	b480      	push	{r7}
 8029162:	b083      	sub	sp, #12
 8029164:	af00      	add	r7, sp, #0
 8029166:	6078      	str	r0, [r7, #4]
 8029168:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 802916a:	687b      	ldr	r3, [r7, #4]
 802916c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802916e:	0f9b      	lsrs	r3, r3, #30
 8029170:	b2da      	uxtb	r2, r3
 8029172:	683b      	ldr	r3, [r7, #0]
 8029174:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8029176:	687b      	ldr	r3, [r7, #4]
 8029178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802917a:	0e9b      	lsrs	r3, r3, #26
 802917c:	b2db      	uxtb	r3, r3
 802917e:	f003 030f 	and.w	r3, r3, #15
 8029182:	b2da      	uxtb	r2, r3
 8029184:	683b      	ldr	r3, [r7, #0]
 8029186:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8029188:	687b      	ldr	r3, [r7, #4]
 802918a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802918c:	0e1b      	lsrs	r3, r3, #24
 802918e:	b2db      	uxtb	r3, r3
 8029190:	f003 0303 	and.w	r3, r3, #3
 8029194:	b2da      	uxtb	r2, r3
 8029196:	683b      	ldr	r3, [r7, #0]
 8029198:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 802919a:	687b      	ldr	r3, [r7, #4]
 802919c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802919e:	0c1b      	lsrs	r3, r3, #16
 80291a0:	b2da      	uxtb	r2, r3
 80291a2:	683b      	ldr	r3, [r7, #0]
 80291a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80291a6:	687b      	ldr	r3, [r7, #4]
 80291a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80291aa:	0a1b      	lsrs	r3, r3, #8
 80291ac:	b2da      	uxtb	r2, r3
 80291ae:	683b      	ldr	r3, [r7, #0]
 80291b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80291b2:	687b      	ldr	r3, [r7, #4]
 80291b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80291b6:	b2da      	uxtb	r2, r3
 80291b8:	683b      	ldr	r3, [r7, #0]
 80291ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291c0:	0d1b      	lsrs	r3, r3, #20
 80291c2:	b29a      	uxth	r2, r3
 80291c4:	683b      	ldr	r3, [r7, #0]
 80291c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291cc:	0c1b      	lsrs	r3, r3, #16
 80291ce:	b2db      	uxtb	r3, r3
 80291d0:	f003 030f 	and.w	r3, r3, #15
 80291d4:	b2da      	uxtb	r2, r3
 80291d6:	683b      	ldr	r3, [r7, #0]
 80291d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291de:	0bdb      	lsrs	r3, r3, #15
 80291e0:	b2db      	uxtb	r3, r3
 80291e2:	f003 0301 	and.w	r3, r3, #1
 80291e6:	b2da      	uxtb	r2, r3
 80291e8:	683b      	ldr	r3, [r7, #0]
 80291ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80291ec:	687b      	ldr	r3, [r7, #4]
 80291ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291f0:	0b9b      	lsrs	r3, r3, #14
 80291f2:	b2db      	uxtb	r3, r3
 80291f4:	f003 0301 	and.w	r3, r3, #1
 80291f8:	b2da      	uxtb	r2, r3
 80291fa:	683b      	ldr	r3, [r7, #0]
 80291fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80291fe:	687b      	ldr	r3, [r7, #4]
 8029200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029202:	0b5b      	lsrs	r3, r3, #13
 8029204:	b2db      	uxtb	r3, r3
 8029206:	f003 0301 	and.w	r3, r3, #1
 802920a:	b2da      	uxtb	r2, r3
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029214:	0b1b      	lsrs	r3, r3, #12
 8029216:	b2db      	uxtb	r3, r3
 8029218:	f003 0301 	and.w	r3, r3, #1
 802921c:	b2da      	uxtb	r2, r3
 802921e:	683b      	ldr	r3, [r7, #0]
 8029220:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8029222:	683b      	ldr	r3, [r7, #0]
 8029224:	2200      	movs	r2, #0
 8029226:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8029228:	687b      	ldr	r3, [r7, #4]
 802922a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802922c:	2b00      	cmp	r3, #0
 802922e:	d163      	bne.n	80292f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8029230:	687b      	ldr	r3, [r7, #4]
 8029232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029234:	009a      	lsls	r2, r3, #2
 8029236:	f640 73fc 	movw	r3, #4092	; 0xffc
 802923a:	4013      	ands	r3, r2
 802923c:	687a      	ldr	r2, [r7, #4]
 802923e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8029240:	0f92      	lsrs	r2, r2, #30
 8029242:	431a      	orrs	r2, r3
 8029244:	683b      	ldr	r3, [r7, #0]
 8029246:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8029248:	687b      	ldr	r3, [r7, #4]
 802924a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802924c:	0edb      	lsrs	r3, r3, #27
 802924e:	b2db      	uxtb	r3, r3
 8029250:	f003 0307 	and.w	r3, r3, #7
 8029254:	b2da      	uxtb	r2, r3
 8029256:	683b      	ldr	r3, [r7, #0]
 8029258:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 802925a:	687b      	ldr	r3, [r7, #4]
 802925c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802925e:	0e1b      	lsrs	r3, r3, #24
 8029260:	b2db      	uxtb	r3, r3
 8029262:	f003 0307 	and.w	r3, r3, #7
 8029266:	b2da      	uxtb	r2, r3
 8029268:	683b      	ldr	r3, [r7, #0]
 802926a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 802926c:	687b      	ldr	r3, [r7, #4]
 802926e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029270:	0d5b      	lsrs	r3, r3, #21
 8029272:	b2db      	uxtb	r3, r3
 8029274:	f003 0307 	and.w	r3, r3, #7
 8029278:	b2da      	uxtb	r2, r3
 802927a:	683b      	ldr	r3, [r7, #0]
 802927c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 802927e:	687b      	ldr	r3, [r7, #4]
 8029280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029282:	0c9b      	lsrs	r3, r3, #18
 8029284:	b2db      	uxtb	r3, r3
 8029286:	f003 0307 	and.w	r3, r3, #7
 802928a:	b2da      	uxtb	r2, r3
 802928c:	683b      	ldr	r3, [r7, #0]
 802928e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8029290:	687b      	ldr	r3, [r7, #4]
 8029292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029294:	0bdb      	lsrs	r3, r3, #15
 8029296:	b2db      	uxtb	r3, r3
 8029298:	f003 0307 	and.w	r3, r3, #7
 802929c:	b2da      	uxtb	r2, r3
 802929e:	683b      	ldr	r3, [r7, #0]
 80292a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80292a2:	683b      	ldr	r3, [r7, #0]
 80292a4:	691b      	ldr	r3, [r3, #16]
 80292a6:	1c5a      	adds	r2, r3, #1
 80292a8:	687b      	ldr	r3, [r7, #4]
 80292aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80292ac:	683b      	ldr	r3, [r7, #0]
 80292ae:	7e1b      	ldrb	r3, [r3, #24]
 80292b0:	b2db      	uxtb	r3, r3
 80292b2:	f003 0307 	and.w	r3, r3, #7
 80292b6:	3302      	adds	r3, #2
 80292b8:	2201      	movs	r2, #1
 80292ba:	fa02 f303 	lsl.w	r3, r2, r3
 80292be:	687a      	ldr	r2, [r7, #4]
 80292c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80292c2:	fb02 f203 	mul.w	r2, r2, r3
 80292c6:	687b      	ldr	r3, [r7, #4]
 80292c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80292ca:	683b      	ldr	r3, [r7, #0]
 80292cc:	7a1b      	ldrb	r3, [r3, #8]
 80292ce:	b2db      	uxtb	r3, r3
 80292d0:	f003 030f 	and.w	r3, r3, #15
 80292d4:	2201      	movs	r2, #1
 80292d6:	409a      	lsls	r2, r3
 80292d8:	687b      	ldr	r3, [r7, #4]
 80292da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80292e0:	687a      	ldr	r2, [r7, #4]
 80292e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80292e4:	0a52      	lsrs	r2, r2, #9
 80292e6:	fb02 f203 	mul.w	r2, r2, r3
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80292f4:	661a      	str	r2, [r3, #96]	; 0x60
 80292f6:	e031      	b.n	802935c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80292fc:	2b01      	cmp	r3, #1
 80292fe:	d11d      	bne.n	802933c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029304:	041b      	lsls	r3, r3, #16
 8029306:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 802930a:	687b      	ldr	r3, [r7, #4]
 802930c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802930e:	0c1b      	lsrs	r3, r3, #16
 8029310:	431a      	orrs	r2, r3
 8029312:	683b      	ldr	r3, [r7, #0]
 8029314:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8029316:	683b      	ldr	r3, [r7, #0]
 8029318:	691b      	ldr	r3, [r3, #16]
 802931a:	3301      	adds	r3, #1
 802931c:	029a      	lsls	r2, r3, #10
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8029322:	687b      	ldr	r3, [r7, #4]
 8029324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8029326:	687b      	ldr	r3, [r7, #4]
 8029328:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 802932a:	687b      	ldr	r3, [r7, #4]
 802932c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029330:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8029332:	687b      	ldr	r3, [r7, #4]
 8029334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8029336:	687b      	ldr	r3, [r7, #4]
 8029338:	661a      	str	r2, [r3, #96]	; 0x60
 802933a:	e00f      	b.n	802935c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 802933c:	687b      	ldr	r3, [r7, #4]
 802933e:	681b      	ldr	r3, [r3, #0]
 8029340:	4a58      	ldr	r2, [pc, #352]	; (80294a4 <HAL_SD_GetCardCSD+0x344>)
 8029342:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8029344:	687b      	ldr	r3, [r7, #4]
 8029346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029348:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 802934c:	687b      	ldr	r3, [r7, #4]
 802934e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	2201      	movs	r2, #1
 8029354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8029358:	2301      	movs	r3, #1
 802935a:	e09d      	b.n	8029498 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029360:	0b9b      	lsrs	r3, r3, #14
 8029362:	b2db      	uxtb	r3, r3
 8029364:	f003 0301 	and.w	r3, r3, #1
 8029368:	b2da      	uxtb	r2, r3
 802936a:	683b      	ldr	r3, [r7, #0]
 802936c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 802936e:	687b      	ldr	r3, [r7, #4]
 8029370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029372:	09db      	lsrs	r3, r3, #7
 8029374:	b2db      	uxtb	r3, r3
 8029376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802937a:	b2da      	uxtb	r2, r3
 802937c:	683b      	ldr	r3, [r7, #0]
 802937e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8029380:	687b      	ldr	r3, [r7, #4]
 8029382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029384:	b2db      	uxtb	r3, r3
 8029386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802938a:	b2da      	uxtb	r2, r3
 802938c:	683b      	ldr	r3, [r7, #0]
 802938e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029394:	0fdb      	lsrs	r3, r3, #31
 8029396:	b2da      	uxtb	r2, r3
 8029398:	683b      	ldr	r3, [r7, #0]
 802939a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80293a0:	0f5b      	lsrs	r3, r3, #29
 80293a2:	b2db      	uxtb	r3, r3
 80293a4:	f003 0303 	and.w	r3, r3, #3
 80293a8:	b2da      	uxtb	r2, r3
 80293aa:	683b      	ldr	r3, [r7, #0]
 80293ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80293ae:	687b      	ldr	r3, [r7, #4]
 80293b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80293b2:	0e9b      	lsrs	r3, r3, #26
 80293b4:	b2db      	uxtb	r3, r3
 80293b6:	f003 0307 	and.w	r3, r3, #7
 80293ba:	b2da      	uxtb	r2, r3
 80293bc:	683b      	ldr	r3, [r7, #0]
 80293be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80293c0:	687b      	ldr	r3, [r7, #4]
 80293c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80293c4:	0d9b      	lsrs	r3, r3, #22
 80293c6:	b2db      	uxtb	r3, r3
 80293c8:	f003 030f 	and.w	r3, r3, #15
 80293cc:	b2da      	uxtb	r2, r3
 80293ce:	683b      	ldr	r3, [r7, #0]
 80293d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80293d6:	0d5b      	lsrs	r3, r3, #21
 80293d8:	b2db      	uxtb	r3, r3
 80293da:	f003 0301 	and.w	r3, r3, #1
 80293de:	b2da      	uxtb	r2, r3
 80293e0:	683b      	ldr	r3, [r7, #0]
 80293e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80293e6:	683b      	ldr	r3, [r7, #0]
 80293e8:	2200      	movs	r2, #0
 80293ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80293ee:	687b      	ldr	r3, [r7, #4]
 80293f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80293f2:	0c1b      	lsrs	r3, r3, #16
 80293f4:	b2db      	uxtb	r3, r3
 80293f6:	f003 0301 	and.w	r3, r3, #1
 80293fa:	b2da      	uxtb	r2, r3
 80293fc:	683b      	ldr	r3, [r7, #0]
 80293fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029406:	0bdb      	lsrs	r3, r3, #15
 8029408:	b2db      	uxtb	r3, r3
 802940a:	f003 0301 	and.w	r3, r3, #1
 802940e:	b2da      	uxtb	r2, r3
 8029410:	683b      	ldr	r3, [r7, #0]
 8029412:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8029416:	687b      	ldr	r3, [r7, #4]
 8029418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802941a:	0b9b      	lsrs	r3, r3, #14
 802941c:	b2db      	uxtb	r3, r3
 802941e:	f003 0301 	and.w	r3, r3, #1
 8029422:	b2da      	uxtb	r2, r3
 8029424:	683b      	ldr	r3, [r7, #0]
 8029426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 802942a:	687b      	ldr	r3, [r7, #4]
 802942c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802942e:	0b5b      	lsrs	r3, r3, #13
 8029430:	b2db      	uxtb	r3, r3
 8029432:	f003 0301 	and.w	r3, r3, #1
 8029436:	b2da      	uxtb	r2, r3
 8029438:	683b      	ldr	r3, [r7, #0]
 802943a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029442:	0b1b      	lsrs	r3, r3, #12
 8029444:	b2db      	uxtb	r3, r3
 8029446:	f003 0301 	and.w	r3, r3, #1
 802944a:	b2da      	uxtb	r2, r3
 802944c:	683b      	ldr	r3, [r7, #0]
 802944e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029456:	0a9b      	lsrs	r3, r3, #10
 8029458:	b2db      	uxtb	r3, r3
 802945a:	f003 0303 	and.w	r3, r3, #3
 802945e:	b2da      	uxtb	r2, r3
 8029460:	683b      	ldr	r3, [r7, #0]
 8029462:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802946a:	0a1b      	lsrs	r3, r3, #8
 802946c:	b2db      	uxtb	r3, r3
 802946e:	f003 0303 	and.w	r3, r3, #3
 8029472:	b2da      	uxtb	r2, r3
 8029474:	683b      	ldr	r3, [r7, #0]
 8029476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802947e:	085b      	lsrs	r3, r3, #1
 8029480:	b2db      	uxtb	r3, r3
 8029482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8029486:	b2da      	uxtb	r2, r3
 8029488:	683b      	ldr	r3, [r7, #0]
 802948a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 802948e:	683b      	ldr	r3, [r7, #0]
 8029490:	2201      	movs	r2, #1
 8029492:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8029496:	2300      	movs	r3, #0
}
 8029498:	4618      	mov	r0, r3
 802949a:	370c      	adds	r7, #12
 802949c:	46bd      	mov	sp, r7
 802949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294a2:	4770      	bx	lr
 80294a4:	004005ff 	.word	0x004005ff

080294a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80294a8:	b480      	push	{r7}
 80294aa:	b083      	sub	sp, #12
 80294ac:	af00      	add	r7, sp, #0
 80294ae:	6078      	str	r0, [r7, #4]
 80294b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80294b2:	687b      	ldr	r3, [r7, #4]
 80294b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80294b6:	683b      	ldr	r3, [r7, #0]
 80294b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80294ba:	687b      	ldr	r3, [r7, #4]
 80294bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80294be:	683b      	ldr	r3, [r7, #0]
 80294c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80294c2:	687b      	ldr	r3, [r7, #4]
 80294c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80294c6:	683b      	ldr	r3, [r7, #0]
 80294c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80294ce:	683b      	ldr	r3, [r7, #0]
 80294d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80294d2:	687b      	ldr	r3, [r7, #4]
 80294d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80294d6:	683b      	ldr	r3, [r7, #0]
 80294d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80294de:	683b      	ldr	r3, [r7, #0]
 80294e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80294e2:	687b      	ldr	r3, [r7, #4]
 80294e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80294e6:	683b      	ldr	r3, [r7, #0]
 80294e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80294ee:	683b      	ldr	r3, [r7, #0]
 80294f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80294f2:	2300      	movs	r3, #0
}
 80294f4:	4618      	mov	r0, r3
 80294f6:	370c      	adds	r7, #12
 80294f8:	46bd      	mov	sp, r7
 80294fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294fe:	4770      	bx	lr

08029500 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8029500:	b580      	push	{r7, lr}
 8029502:	b086      	sub	sp, #24
 8029504:	af00      	add	r7, sp, #0
 8029506:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8029508:	2300      	movs	r3, #0
 802950a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 802950c:	f107 030c 	add.w	r3, r7, #12
 8029510:	4619      	mov	r1, r3
 8029512:	6878      	ldr	r0, [r7, #4]
 8029514:	f000 fa8b 	bl	8029a2e <SD_SendStatus>
 8029518:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 802951a:	697b      	ldr	r3, [r7, #20]
 802951c:	2b00      	cmp	r3, #0
 802951e:	d005      	beq.n	802952c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8029524:	697b      	ldr	r3, [r7, #20]
 8029526:	431a      	orrs	r2, r3
 8029528:	687b      	ldr	r3, [r7, #4]
 802952a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 802952c:	68fb      	ldr	r3, [r7, #12]
 802952e:	0a5b      	lsrs	r3, r3, #9
 8029530:	f003 030f 	and.w	r3, r3, #15
 8029534:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8029536:	693b      	ldr	r3, [r7, #16]
}
 8029538:	4618      	mov	r0, r3
 802953a:	3718      	adds	r7, #24
 802953c:	46bd      	mov	sp, r7
 802953e:	bd80      	pop	{r7, pc}

08029540 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8029540:	b480      	push	{r7}
 8029542:	b085      	sub	sp, #20
 8029544:	af00      	add	r7, sp, #0
 8029546:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802954c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 802954e:	68fb      	ldr	r3, [r7, #12]
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029554:	68fb      	ldr	r3, [r7, #12]
 8029556:	681b      	ldr	r3, [r3, #0]
 8029558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802955c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 802955e:	bf00      	nop
 8029560:	3714      	adds	r7, #20
 8029562:	46bd      	mov	sp, r7
 8029564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029568:	4770      	bx	lr

0802956a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802956a:	b580      	push	{r7, lr}
 802956c:	b084      	sub	sp, #16
 802956e:	af00      	add	r7, sp, #0
 8029570:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8029572:	687b      	ldr	r3, [r7, #4]
 8029574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029576:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8029578:	68fb      	ldr	r3, [r7, #12]
 802957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802957c:	2b82      	cmp	r3, #130	; 0x82
 802957e:	d111      	bne.n	80295a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8029580:	68fb      	ldr	r3, [r7, #12]
 8029582:	681b      	ldr	r3, [r3, #0]
 8029584:	4618      	mov	r0, r3
 8029586:	f002 fb83 	bl	802bc90 <SDMMC_CmdStopTransfer>
 802958a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 802958c:	68bb      	ldr	r3, [r7, #8]
 802958e:	2b00      	cmp	r3, #0
 8029590:	d008      	beq.n	80295a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8029592:	68fb      	ldr	r3, [r7, #12]
 8029594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8029596:	68bb      	ldr	r3, [r7, #8]
 8029598:	431a      	orrs	r2, r3
 802959a:	68fb      	ldr	r3, [r7, #12]
 802959c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 802959e:	68f8      	ldr	r0, [r7, #12]
 80295a0:	f7ff fdd4 	bl	802914c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80295a4:	68fb      	ldr	r3, [r7, #12]
 80295a6:	681b      	ldr	r3, [r3, #0]
 80295a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80295aa:	68fb      	ldr	r3, [r7, #12]
 80295ac:	681b      	ldr	r3, [r3, #0]
 80295ae:	f022 0208 	bic.w	r2, r2, #8
 80295b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80295b4:	68fb      	ldr	r3, [r7, #12]
 80295b6:	681b      	ldr	r3, [r3, #0]
 80295b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80295bc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80295be:	68fb      	ldr	r3, [r7, #12]
 80295c0:	2201      	movs	r2, #1
 80295c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80295c6:	68fb      	ldr	r3, [r7, #12]
 80295c8:	2200      	movs	r2, #0
 80295ca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80295cc:	68f8      	ldr	r0, [r7, #12]
 80295ce:	f005 f873 	bl	802e6b8 <HAL_SD_RxCpltCallback>
#endif
}
 80295d2:	bf00      	nop
 80295d4:	3710      	adds	r7, #16
 80295d6:	46bd      	mov	sp, r7
 80295d8:	bd80      	pop	{r7, pc}
	...

080295dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80295dc:	b580      	push	{r7, lr}
 80295de:	b086      	sub	sp, #24
 80295e0:	af00      	add	r7, sp, #0
 80295e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80295e4:	687b      	ldr	r3, [r7, #4]
 80295e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80295e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80295ea:	6878      	ldr	r0, [r7, #4]
 80295ec:	f7fa fb6c 	bl	8023cc8 <HAL_DMA_GetError>
 80295f0:	4603      	mov	r3, r0
 80295f2:	2b02      	cmp	r3, #2
 80295f4:	d03e      	beq.n	8029674 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80295f6:	697b      	ldr	r3, [r7, #20]
 80295f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80295fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80295fc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80295fe:	697b      	ldr	r3, [r7, #20]
 8029600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029604:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8029606:	693b      	ldr	r3, [r7, #16]
 8029608:	2b01      	cmp	r3, #1
 802960a:	d002      	beq.n	8029612 <SD_DMAError+0x36>
 802960c:	68fb      	ldr	r3, [r7, #12]
 802960e:	2b01      	cmp	r3, #1
 8029610:	d12d      	bne.n	802966e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8029612:	697b      	ldr	r3, [r7, #20]
 8029614:	681b      	ldr	r3, [r3, #0]
 8029616:	4a19      	ldr	r2, [pc, #100]	; (802967c <SD_DMAError+0xa0>)
 8029618:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 802961a:	697b      	ldr	r3, [r7, #20]
 802961c:	681b      	ldr	r3, [r3, #0]
 802961e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029620:	697b      	ldr	r3, [r7, #20]
 8029622:	681b      	ldr	r3, [r3, #0]
 8029624:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8029628:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 802962a:	697b      	ldr	r3, [r7, #20]
 802962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802962e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8029632:	697b      	ldr	r3, [r7, #20]
 8029634:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8029636:	6978      	ldr	r0, [r7, #20]
 8029638:	f7ff ff62 	bl	8029500 <HAL_SD_GetCardState>
 802963c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 802963e:	68bb      	ldr	r3, [r7, #8]
 8029640:	2b06      	cmp	r3, #6
 8029642:	d002      	beq.n	802964a <SD_DMAError+0x6e>
 8029644:	68bb      	ldr	r3, [r7, #8]
 8029646:	2b05      	cmp	r3, #5
 8029648:	d10a      	bne.n	8029660 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 802964a:	697b      	ldr	r3, [r7, #20]
 802964c:	681b      	ldr	r3, [r3, #0]
 802964e:	4618      	mov	r0, r3
 8029650:	f002 fb1e 	bl	802bc90 <SDMMC_CmdStopTransfer>
 8029654:	4602      	mov	r2, r0
 8029656:	697b      	ldr	r3, [r7, #20]
 8029658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802965a:	431a      	orrs	r2, r3
 802965c:	697b      	ldr	r3, [r7, #20]
 802965e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8029660:	697b      	ldr	r3, [r7, #20]
 8029662:	2201      	movs	r2, #1
 8029664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8029668:	697b      	ldr	r3, [r7, #20]
 802966a:	2200      	movs	r2, #0
 802966c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 802966e:	6978      	ldr	r0, [r7, #20]
 8029670:	f7ff fd6c 	bl	802914c <HAL_SD_ErrorCallback>
#endif
  }
}
 8029674:	bf00      	nop
 8029676:	3718      	adds	r7, #24
 8029678:	46bd      	mov	sp, r7
 802967a:	bd80      	pop	{r7, pc}
 802967c:	004005ff 	.word	0x004005ff

08029680 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8029680:	b580      	push	{r7, lr}
 8029682:	b084      	sub	sp, #16
 8029684:	af00      	add	r7, sp, #0
 8029686:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802968c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 802968e:	68fb      	ldr	r3, [r7, #12]
 8029690:	681b      	ldr	r3, [r3, #0]
 8029692:	f240 523a 	movw	r2, #1338	; 0x53a
 8029696:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8029698:	68f8      	ldr	r0, [r7, #12]
 802969a:	f7ff ff31 	bl	8029500 <HAL_SD_GetCardState>
 802969e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80296a0:	68fb      	ldr	r3, [r7, #12]
 80296a2:	2201      	movs	r2, #1
 80296a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80296a8:	68fb      	ldr	r3, [r7, #12]
 80296aa:	2200      	movs	r2, #0
 80296ac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80296ae:	68bb      	ldr	r3, [r7, #8]
 80296b0:	2b06      	cmp	r3, #6
 80296b2:	d002      	beq.n	80296ba <SD_DMATxAbort+0x3a>
 80296b4:	68bb      	ldr	r3, [r7, #8]
 80296b6:	2b05      	cmp	r3, #5
 80296b8:	d10a      	bne.n	80296d0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80296ba:	68fb      	ldr	r3, [r7, #12]
 80296bc:	681b      	ldr	r3, [r3, #0]
 80296be:	4618      	mov	r0, r3
 80296c0:	f002 fae6 	bl	802bc90 <SDMMC_CmdStopTransfer>
 80296c4:	4602      	mov	r2, r0
 80296c6:	68fb      	ldr	r3, [r7, #12]
 80296c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296ca:	431a      	orrs	r2, r3
 80296cc:	68fb      	ldr	r3, [r7, #12]
 80296ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80296d0:	68fb      	ldr	r3, [r7, #12]
 80296d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296d4:	2b00      	cmp	r3, #0
 80296d6:	d103      	bne.n	80296e0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80296d8:	68f8      	ldr	r0, [r7, #12]
 80296da:	f004 ffd9 	bl	802e690 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80296de:	e002      	b.n	80296e6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80296e0:	68f8      	ldr	r0, [r7, #12]
 80296e2:	f7ff fd33 	bl	802914c <HAL_SD_ErrorCallback>
}
 80296e6:	bf00      	nop
 80296e8:	3710      	adds	r7, #16
 80296ea:	46bd      	mov	sp, r7
 80296ec:	bd80      	pop	{r7, pc}

080296ee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80296ee:	b580      	push	{r7, lr}
 80296f0:	b084      	sub	sp, #16
 80296f2:	af00      	add	r7, sp, #0
 80296f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296fa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80296fc:	68fb      	ldr	r3, [r7, #12]
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	f240 523a 	movw	r2, #1338	; 0x53a
 8029704:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8029706:	68f8      	ldr	r0, [r7, #12]
 8029708:	f7ff fefa 	bl	8029500 <HAL_SD_GetCardState>
 802970c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 802970e:	68fb      	ldr	r3, [r7, #12]
 8029710:	2201      	movs	r2, #1
 8029712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	2200      	movs	r2, #0
 802971a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 802971c:	68bb      	ldr	r3, [r7, #8]
 802971e:	2b06      	cmp	r3, #6
 8029720:	d002      	beq.n	8029728 <SD_DMARxAbort+0x3a>
 8029722:	68bb      	ldr	r3, [r7, #8]
 8029724:	2b05      	cmp	r3, #5
 8029726:	d10a      	bne.n	802973e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8029728:	68fb      	ldr	r3, [r7, #12]
 802972a:	681b      	ldr	r3, [r3, #0]
 802972c:	4618      	mov	r0, r3
 802972e:	f002 faaf 	bl	802bc90 <SDMMC_CmdStopTransfer>
 8029732:	4602      	mov	r2, r0
 8029734:	68fb      	ldr	r3, [r7, #12]
 8029736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029738:	431a      	orrs	r2, r3
 802973a:	68fb      	ldr	r3, [r7, #12]
 802973c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 802973e:	68fb      	ldr	r3, [r7, #12]
 8029740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029742:	2b00      	cmp	r3, #0
 8029744:	d103      	bne.n	802974e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8029746:	68f8      	ldr	r0, [r7, #12]
 8029748:	f004 ffa2 	bl	802e690 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 802974c:	e002      	b.n	8029754 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 802974e:	68f8      	ldr	r0, [r7, #12]
 8029750:	f7ff fcfc 	bl	802914c <HAL_SD_ErrorCallback>
}
 8029754:	bf00      	nop
 8029756:	3710      	adds	r7, #16
 8029758:	46bd      	mov	sp, r7
 802975a:	bd80      	pop	{r7, pc}

0802975c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 802975c:	b5b0      	push	{r4, r5, r7, lr}
 802975e:	b094      	sub	sp, #80	; 0x50
 8029760:	af04      	add	r7, sp, #16
 8029762:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8029764:	2301      	movs	r3, #1
 8029766:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	4618      	mov	r0, r3
 802976e:	f002 f961 	bl	802ba34 <SDIO_GetPowerState>
 8029772:	4603      	mov	r3, r0
 8029774:	2b00      	cmp	r3, #0
 8029776:	d102      	bne.n	802977e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8029778:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 802977c:	e0b7      	b.n	80298ee <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 802977e:	687b      	ldr	r3, [r7, #4]
 8029780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029782:	2b03      	cmp	r3, #3
 8029784:	d02f      	beq.n	80297e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8029786:	687b      	ldr	r3, [r7, #4]
 8029788:	681b      	ldr	r3, [r3, #0]
 802978a:	4618      	mov	r0, r3
 802978c:	f002 fb47 	bl	802be1e <SDMMC_CmdSendCID>
 8029790:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8029792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029794:	2b00      	cmp	r3, #0
 8029796:	d001      	beq.n	802979c <SD_InitCard+0x40>
    {
      return errorstate;
 8029798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802979a:	e0a8      	b.n	80298ee <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 802979c:	687b      	ldr	r3, [r7, #4]
 802979e:	681b      	ldr	r3, [r3, #0]
 80297a0:	2100      	movs	r1, #0
 80297a2:	4618      	mov	r0, r3
 80297a4:	f002 f98b 	bl	802babe <SDIO_GetResponse>
 80297a8:	4602      	mov	r2, r0
 80297aa:	687b      	ldr	r3, [r7, #4]
 80297ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80297ae:	687b      	ldr	r3, [r7, #4]
 80297b0:	681b      	ldr	r3, [r3, #0]
 80297b2:	2104      	movs	r1, #4
 80297b4:	4618      	mov	r0, r3
 80297b6:	f002 f982 	bl	802babe <SDIO_GetResponse>
 80297ba:	4602      	mov	r2, r0
 80297bc:	687b      	ldr	r3, [r7, #4]
 80297be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80297c0:	687b      	ldr	r3, [r7, #4]
 80297c2:	681b      	ldr	r3, [r3, #0]
 80297c4:	2108      	movs	r1, #8
 80297c6:	4618      	mov	r0, r3
 80297c8:	f002 f979 	bl	802babe <SDIO_GetResponse>
 80297cc:	4602      	mov	r2, r0
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80297d2:	687b      	ldr	r3, [r7, #4]
 80297d4:	681b      	ldr	r3, [r3, #0]
 80297d6:	210c      	movs	r1, #12
 80297d8:	4618      	mov	r0, r3
 80297da:	f002 f970 	bl	802babe <SDIO_GetResponse>
 80297de:	4602      	mov	r2, r0
 80297e0:	687b      	ldr	r3, [r7, #4]
 80297e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80297ea:	2b03      	cmp	r3, #3
 80297ec:	d00d      	beq.n	802980a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80297ee:	687b      	ldr	r3, [r7, #4]
 80297f0:	681b      	ldr	r3, [r3, #0]
 80297f2:	f107 020e 	add.w	r2, r7, #14
 80297f6:	4611      	mov	r1, r2
 80297f8:	4618      	mov	r0, r3
 80297fa:	f002 fb4d 	bl	802be98 <SDMMC_CmdSetRelAdd>
 80297fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8029800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029802:	2b00      	cmp	r3, #0
 8029804:	d001      	beq.n	802980a <SD_InitCard+0xae>
    {
      return errorstate;
 8029806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029808:	e071      	b.n	80298ee <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 802980a:	687b      	ldr	r3, [r7, #4]
 802980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802980e:	2b03      	cmp	r3, #3
 8029810:	d036      	beq.n	8029880 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8029812:	89fb      	ldrh	r3, [r7, #14]
 8029814:	461a      	mov	r2, r3
 8029816:	687b      	ldr	r3, [r7, #4]
 8029818:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802981a:	687b      	ldr	r3, [r7, #4]
 802981c:	681a      	ldr	r2, [r3, #0]
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029822:	041b      	lsls	r3, r3, #16
 8029824:	4619      	mov	r1, r3
 8029826:	4610      	mov	r0, r2
 8029828:	f002 fb17 	bl	802be5a <SDMMC_CmdSendCSD>
 802982c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 802982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029830:	2b00      	cmp	r3, #0
 8029832:	d001      	beq.n	8029838 <SD_InitCard+0xdc>
    {
      return errorstate;
 8029834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029836:	e05a      	b.n	80298ee <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8029838:	687b      	ldr	r3, [r7, #4]
 802983a:	681b      	ldr	r3, [r3, #0]
 802983c:	2100      	movs	r1, #0
 802983e:	4618      	mov	r0, r3
 8029840:	f002 f93d 	bl	802babe <SDIO_GetResponse>
 8029844:	4602      	mov	r2, r0
 8029846:	687b      	ldr	r3, [r7, #4]
 8029848:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 802984a:	687b      	ldr	r3, [r7, #4]
 802984c:	681b      	ldr	r3, [r3, #0]
 802984e:	2104      	movs	r1, #4
 8029850:	4618      	mov	r0, r3
 8029852:	f002 f934 	bl	802babe <SDIO_GetResponse>
 8029856:	4602      	mov	r2, r0
 8029858:	687b      	ldr	r3, [r7, #4]
 802985a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 802985c:	687b      	ldr	r3, [r7, #4]
 802985e:	681b      	ldr	r3, [r3, #0]
 8029860:	2108      	movs	r1, #8
 8029862:	4618      	mov	r0, r3
 8029864:	f002 f92b 	bl	802babe <SDIO_GetResponse>
 8029868:	4602      	mov	r2, r0
 802986a:	687b      	ldr	r3, [r7, #4]
 802986c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 802986e:	687b      	ldr	r3, [r7, #4]
 8029870:	681b      	ldr	r3, [r3, #0]
 8029872:	210c      	movs	r1, #12
 8029874:	4618      	mov	r0, r3
 8029876:	f002 f922 	bl	802babe <SDIO_GetResponse>
 802987a:	4602      	mov	r2, r0
 802987c:	687b      	ldr	r3, [r7, #4]
 802987e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8029880:	687b      	ldr	r3, [r7, #4]
 8029882:	681b      	ldr	r3, [r3, #0]
 8029884:	2104      	movs	r1, #4
 8029886:	4618      	mov	r0, r3
 8029888:	f002 f919 	bl	802babe <SDIO_GetResponse>
 802988c:	4603      	mov	r3, r0
 802988e:	0d1a      	lsrs	r2, r3, #20
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8029894:	f107 0310 	add.w	r3, r7, #16
 8029898:	4619      	mov	r1, r3
 802989a:	6878      	ldr	r0, [r7, #4]
 802989c:	f7ff fc60 	bl	8029160 <HAL_SD_GetCardCSD>
 80298a0:	4603      	mov	r3, r0
 80298a2:	2b00      	cmp	r3, #0
 80298a4:	d002      	beq.n	80298ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80298a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80298aa:	e020      	b.n	80298ee <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80298ac:	687b      	ldr	r3, [r7, #4]
 80298ae:	6819      	ldr	r1, [r3, #0]
 80298b0:	687b      	ldr	r3, [r7, #4]
 80298b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80298b4:	041b      	lsls	r3, r3, #16
 80298b6:	f04f 0400 	mov.w	r4, #0
 80298ba:	461a      	mov	r2, r3
 80298bc:	4623      	mov	r3, r4
 80298be:	4608      	mov	r0, r1
 80298c0:	f002 fa08 	bl	802bcd4 <SDMMC_CmdSelDesel>
 80298c4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80298c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80298c8:	2b00      	cmp	r3, #0
 80298ca:	d001      	beq.n	80298d0 <SD_InitCard+0x174>
  {
    return errorstate;
 80298cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80298ce:	e00e      	b.n	80298ee <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	681d      	ldr	r5, [r3, #0]
 80298d4:	687b      	ldr	r3, [r7, #4]
 80298d6:	466c      	mov	r4, sp
 80298d8:	f103 0210 	add.w	r2, r3, #16
 80298dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80298de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80298e2:	3304      	adds	r3, #4
 80298e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80298e6:	4628      	mov	r0, r5
 80298e8:	f002 f83e 	bl	802b968 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80298ec:	2300      	movs	r3, #0
}
 80298ee:	4618      	mov	r0, r3
 80298f0:	3740      	adds	r7, #64	; 0x40
 80298f2:	46bd      	mov	sp, r7
 80298f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080298f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80298f8:	b580      	push	{r7, lr}
 80298fa:	b086      	sub	sp, #24
 80298fc:	af00      	add	r7, sp, #0
 80298fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8029900:	2300      	movs	r3, #0
 8029902:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8029904:	2300      	movs	r3, #0
 8029906:	617b      	str	r3, [r7, #20]
 8029908:	2300      	movs	r3, #0
 802990a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	681b      	ldr	r3, [r3, #0]
 8029910:	4618      	mov	r0, r3
 8029912:	f002 fa02 	bl	802bd1a <SDMMC_CmdGoIdleState>
 8029916:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8029918:	68fb      	ldr	r3, [r7, #12]
 802991a:	2b00      	cmp	r3, #0
 802991c:	d001      	beq.n	8029922 <SD_PowerON+0x2a>
  {
    return errorstate;
 802991e:	68fb      	ldr	r3, [r7, #12]
 8029920:	e072      	b.n	8029a08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8029922:	687b      	ldr	r3, [r7, #4]
 8029924:	681b      	ldr	r3, [r3, #0]
 8029926:	4618      	mov	r0, r3
 8029928:	f002 fa15 	bl	802bd56 <SDMMC_CmdOperCond>
 802992c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 802992e:	68fb      	ldr	r3, [r7, #12]
 8029930:	2b00      	cmp	r3, #0
 8029932:	d00d      	beq.n	8029950 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8029934:	687b      	ldr	r3, [r7, #4]
 8029936:	2200      	movs	r2, #0
 8029938:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802993a:	687b      	ldr	r3, [r7, #4]
 802993c:	681b      	ldr	r3, [r3, #0]
 802993e:	4618      	mov	r0, r3
 8029940:	f002 f9eb 	bl	802bd1a <SDMMC_CmdGoIdleState>
 8029944:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8029946:	68fb      	ldr	r3, [r7, #12]
 8029948:	2b00      	cmp	r3, #0
 802994a:	d004      	beq.n	8029956 <SD_PowerON+0x5e>
    {
      return errorstate;
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	e05b      	b.n	8029a08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8029950:	687b      	ldr	r3, [r7, #4]
 8029952:	2201      	movs	r2, #1
 8029954:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8029956:	687b      	ldr	r3, [r7, #4]
 8029958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802995a:	2b01      	cmp	r3, #1
 802995c:	d137      	bne.n	80299ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 802995e:	687b      	ldr	r3, [r7, #4]
 8029960:	681b      	ldr	r3, [r3, #0]
 8029962:	2100      	movs	r1, #0
 8029964:	4618      	mov	r0, r3
 8029966:	f002 fa15 	bl	802bd94 <SDMMC_CmdAppCommand>
 802996a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 802996c:	68fb      	ldr	r3, [r7, #12]
 802996e:	2b00      	cmp	r3, #0
 8029970:	d02d      	beq.n	80299ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8029972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8029976:	e047      	b.n	8029a08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8029978:	687b      	ldr	r3, [r7, #4]
 802997a:	681b      	ldr	r3, [r3, #0]
 802997c:	2100      	movs	r1, #0
 802997e:	4618      	mov	r0, r3
 8029980:	f002 fa08 	bl	802bd94 <SDMMC_CmdAppCommand>
 8029984:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8029986:	68fb      	ldr	r3, [r7, #12]
 8029988:	2b00      	cmp	r3, #0
 802998a:	d001      	beq.n	8029990 <SD_PowerON+0x98>
    {
      return errorstate;
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	e03b      	b.n	8029a08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8029990:	687b      	ldr	r3, [r7, #4]
 8029992:	681b      	ldr	r3, [r3, #0]
 8029994:	491e      	ldr	r1, [pc, #120]	; (8029a10 <SD_PowerON+0x118>)
 8029996:	4618      	mov	r0, r3
 8029998:	f002 fa1e 	bl	802bdd8 <SDMMC_CmdAppOperCommand>
 802999c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 802999e:	68fb      	ldr	r3, [r7, #12]
 80299a0:	2b00      	cmp	r3, #0
 80299a2:	d002      	beq.n	80299aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80299a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80299a8:	e02e      	b.n	8029a08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80299aa:	687b      	ldr	r3, [r7, #4]
 80299ac:	681b      	ldr	r3, [r3, #0]
 80299ae:	2100      	movs	r1, #0
 80299b0:	4618      	mov	r0, r3
 80299b2:	f002 f884 	bl	802babe <SDIO_GetResponse>
 80299b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80299b8:	697b      	ldr	r3, [r7, #20]
 80299ba:	0fdb      	lsrs	r3, r3, #31
 80299bc:	2b01      	cmp	r3, #1
 80299be:	d101      	bne.n	80299c4 <SD_PowerON+0xcc>
 80299c0:	2301      	movs	r3, #1
 80299c2:	e000      	b.n	80299c6 <SD_PowerON+0xce>
 80299c4:	2300      	movs	r3, #0
 80299c6:	613b      	str	r3, [r7, #16]

    count++;
 80299c8:	68bb      	ldr	r3, [r7, #8]
 80299ca:	3301      	adds	r3, #1
 80299cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80299ce:	68bb      	ldr	r3, [r7, #8]
 80299d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80299d4:	4293      	cmp	r3, r2
 80299d6:	d802      	bhi.n	80299de <SD_PowerON+0xe6>
 80299d8:	693b      	ldr	r3, [r7, #16]
 80299da:	2b00      	cmp	r3, #0
 80299dc:	d0cc      	beq.n	8029978 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80299de:	68bb      	ldr	r3, [r7, #8]
 80299e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80299e4:	4293      	cmp	r3, r2
 80299e6:	d902      	bls.n	80299ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80299e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80299ec:	e00c      	b.n	8029a08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80299ee:	697b      	ldr	r3, [r7, #20]
 80299f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80299f4:	2b00      	cmp	r3, #0
 80299f6:	d003      	beq.n	8029a00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	2201      	movs	r2, #1
 80299fc:	645a      	str	r2, [r3, #68]	; 0x44
 80299fe:	e002      	b.n	8029a06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8029a00:	687b      	ldr	r3, [r7, #4]
 8029a02:	2200      	movs	r2, #0
 8029a04:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8029a06:	2300      	movs	r3, #0
}
 8029a08:	4618      	mov	r0, r3
 8029a0a:	3718      	adds	r7, #24
 8029a0c:	46bd      	mov	sp, r7
 8029a0e:	bd80      	pop	{r7, pc}
 8029a10:	c1100000 	.word	0xc1100000

08029a14 <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8029a14:	b580      	push	{r7, lr}
 8029a16:	b082      	sub	sp, #8
 8029a18:	af00      	add	r7, sp, #0
 8029a1a:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 8029a1c:	687b      	ldr	r3, [r7, #4]
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	4618      	mov	r0, r3
 8029a22:	f001 fff9 	bl	802ba18 <SDIO_PowerState_OFF>
}
 8029a26:	bf00      	nop
 8029a28:	3708      	adds	r7, #8
 8029a2a:	46bd      	mov	sp, r7
 8029a2c:	bd80      	pop	{r7, pc}

08029a2e <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8029a2e:	b580      	push	{r7, lr}
 8029a30:	b084      	sub	sp, #16
 8029a32:	af00      	add	r7, sp, #0
 8029a34:	6078      	str	r0, [r7, #4]
 8029a36:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8029a38:	683b      	ldr	r3, [r7, #0]
 8029a3a:	2b00      	cmp	r3, #0
 8029a3c:	d102      	bne.n	8029a44 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8029a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8029a42:	e018      	b.n	8029a76 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8029a44:	687b      	ldr	r3, [r7, #4]
 8029a46:	681a      	ldr	r2, [r3, #0]
 8029a48:	687b      	ldr	r3, [r7, #4]
 8029a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029a4c:	041b      	lsls	r3, r3, #16
 8029a4e:	4619      	mov	r1, r3
 8029a50:	4610      	mov	r0, r2
 8029a52:	f002 fa42 	bl	802beda <SDMMC_CmdSendStatus>
 8029a56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8029a58:	68fb      	ldr	r3, [r7, #12]
 8029a5a:	2b00      	cmp	r3, #0
 8029a5c:	d001      	beq.n	8029a62 <SD_SendStatus+0x34>
  {
    return errorstate;
 8029a5e:	68fb      	ldr	r3, [r7, #12]
 8029a60:	e009      	b.n	8029a76 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8029a62:	687b      	ldr	r3, [r7, #4]
 8029a64:	681b      	ldr	r3, [r3, #0]
 8029a66:	2100      	movs	r1, #0
 8029a68:	4618      	mov	r0, r3
 8029a6a:	f002 f828 	bl	802babe <SDIO_GetResponse>
 8029a6e:	4602      	mov	r2, r0
 8029a70:	683b      	ldr	r3, [r7, #0]
 8029a72:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8029a74:	2300      	movs	r3, #0
}
 8029a76:	4618      	mov	r0, r3
 8029a78:	3710      	adds	r7, #16
 8029a7a:	46bd      	mov	sp, r7
 8029a7c:	bd80      	pop	{r7, pc}

08029a7e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8029a7e:	b580      	push	{r7, lr}
 8029a80:	b086      	sub	sp, #24
 8029a82:	af00      	add	r7, sp, #0
 8029a84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8029a86:	687b      	ldr	r3, [r7, #4]
 8029a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029a8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029a90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8029a92:	693b      	ldr	r3, [r7, #16]
 8029a94:	2b00      	cmp	r3, #0
 8029a96:	d03f      	beq.n	8029b18 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8029a98:	2300      	movs	r3, #0
 8029a9a:	617b      	str	r3, [r7, #20]
 8029a9c:	e033      	b.n	8029b06 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8029a9e:	687b      	ldr	r3, [r7, #4]
 8029aa0:	681b      	ldr	r3, [r3, #0]
 8029aa2:	4618      	mov	r0, r3
 8029aa4:	f001 ff8b 	bl	802b9be <SDIO_ReadFIFO>
 8029aa8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8029aaa:	68bb      	ldr	r3, [r7, #8]
 8029aac:	b2da      	uxtb	r2, r3
 8029aae:	68fb      	ldr	r3, [r7, #12]
 8029ab0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8029ab2:	68fb      	ldr	r3, [r7, #12]
 8029ab4:	3301      	adds	r3, #1
 8029ab6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029ab8:	693b      	ldr	r3, [r7, #16]
 8029aba:	3b01      	subs	r3, #1
 8029abc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8029abe:	68bb      	ldr	r3, [r7, #8]
 8029ac0:	0a1b      	lsrs	r3, r3, #8
 8029ac2:	b2da      	uxtb	r2, r3
 8029ac4:	68fb      	ldr	r3, [r7, #12]
 8029ac6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8029ac8:	68fb      	ldr	r3, [r7, #12]
 8029aca:	3301      	adds	r3, #1
 8029acc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029ace:	693b      	ldr	r3, [r7, #16]
 8029ad0:	3b01      	subs	r3, #1
 8029ad2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8029ad4:	68bb      	ldr	r3, [r7, #8]
 8029ad6:	0c1b      	lsrs	r3, r3, #16
 8029ad8:	b2da      	uxtb	r2, r3
 8029ada:	68fb      	ldr	r3, [r7, #12]
 8029adc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8029ade:	68fb      	ldr	r3, [r7, #12]
 8029ae0:	3301      	adds	r3, #1
 8029ae2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029ae4:	693b      	ldr	r3, [r7, #16]
 8029ae6:	3b01      	subs	r3, #1
 8029ae8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8029aea:	68bb      	ldr	r3, [r7, #8]
 8029aec:	0e1b      	lsrs	r3, r3, #24
 8029aee:	b2da      	uxtb	r2, r3
 8029af0:	68fb      	ldr	r3, [r7, #12]
 8029af2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8029af4:	68fb      	ldr	r3, [r7, #12]
 8029af6:	3301      	adds	r3, #1
 8029af8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029afa:	693b      	ldr	r3, [r7, #16]
 8029afc:	3b01      	subs	r3, #1
 8029afe:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8029b00:	697b      	ldr	r3, [r7, #20]
 8029b02:	3301      	adds	r3, #1
 8029b04:	617b      	str	r3, [r7, #20]
 8029b06:	697b      	ldr	r3, [r7, #20]
 8029b08:	2b07      	cmp	r3, #7
 8029b0a:	d9c8      	bls.n	8029a9e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8029b0c:	687b      	ldr	r3, [r7, #4]
 8029b0e:	68fa      	ldr	r2, [r7, #12]
 8029b10:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8029b12:	687b      	ldr	r3, [r7, #4]
 8029b14:	693a      	ldr	r2, [r7, #16]
 8029b16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8029b18:	bf00      	nop
 8029b1a:	3718      	adds	r7, #24
 8029b1c:	46bd      	mov	sp, r7
 8029b1e:	bd80      	pop	{r7, pc}

08029b20 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8029b20:	b580      	push	{r7, lr}
 8029b22:	b086      	sub	sp, #24
 8029b24:	af00      	add	r7, sp, #0
 8029b26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8029b28:	687b      	ldr	r3, [r7, #4]
 8029b2a:	6a1b      	ldr	r3, [r3, #32]
 8029b2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8029b34:	693b      	ldr	r3, [r7, #16]
 8029b36:	2b00      	cmp	r3, #0
 8029b38:	d043      	beq.n	8029bc2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8029b3a:	2300      	movs	r3, #0
 8029b3c:	617b      	str	r3, [r7, #20]
 8029b3e:	e037      	b.n	8029bb0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8029b40:	68fb      	ldr	r3, [r7, #12]
 8029b42:	781b      	ldrb	r3, [r3, #0]
 8029b44:	60bb      	str	r3, [r7, #8]
      tmp++;
 8029b46:	68fb      	ldr	r3, [r7, #12]
 8029b48:	3301      	adds	r3, #1
 8029b4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029b4c:	693b      	ldr	r3, [r7, #16]
 8029b4e:	3b01      	subs	r3, #1
 8029b50:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8029b52:	68fb      	ldr	r3, [r7, #12]
 8029b54:	781b      	ldrb	r3, [r3, #0]
 8029b56:	021a      	lsls	r2, r3, #8
 8029b58:	68bb      	ldr	r3, [r7, #8]
 8029b5a:	4313      	orrs	r3, r2
 8029b5c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8029b5e:	68fb      	ldr	r3, [r7, #12]
 8029b60:	3301      	adds	r3, #1
 8029b62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029b64:	693b      	ldr	r3, [r7, #16]
 8029b66:	3b01      	subs	r3, #1
 8029b68:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8029b6a:	68fb      	ldr	r3, [r7, #12]
 8029b6c:	781b      	ldrb	r3, [r3, #0]
 8029b6e:	041a      	lsls	r2, r3, #16
 8029b70:	68bb      	ldr	r3, [r7, #8]
 8029b72:	4313      	orrs	r3, r2
 8029b74:	60bb      	str	r3, [r7, #8]
      tmp++;
 8029b76:	68fb      	ldr	r3, [r7, #12]
 8029b78:	3301      	adds	r3, #1
 8029b7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029b7c:	693b      	ldr	r3, [r7, #16]
 8029b7e:	3b01      	subs	r3, #1
 8029b80:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8029b82:	68fb      	ldr	r3, [r7, #12]
 8029b84:	781b      	ldrb	r3, [r3, #0]
 8029b86:	061a      	lsls	r2, r3, #24
 8029b88:	68bb      	ldr	r3, [r7, #8]
 8029b8a:	4313      	orrs	r3, r2
 8029b8c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8029b8e:	68fb      	ldr	r3, [r7, #12]
 8029b90:	3301      	adds	r3, #1
 8029b92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8029b94:	693b      	ldr	r3, [r7, #16]
 8029b96:	3b01      	subs	r3, #1
 8029b98:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8029b9a:	687b      	ldr	r3, [r7, #4]
 8029b9c:	681b      	ldr	r3, [r3, #0]
 8029b9e:	f107 0208 	add.w	r2, r7, #8
 8029ba2:	4611      	mov	r1, r2
 8029ba4:	4618      	mov	r0, r3
 8029ba6:	f001 ff17 	bl	802b9d8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8029baa:	697b      	ldr	r3, [r7, #20]
 8029bac:	3301      	adds	r3, #1
 8029bae:	617b      	str	r3, [r7, #20]
 8029bb0:	697b      	ldr	r3, [r7, #20]
 8029bb2:	2b07      	cmp	r3, #7
 8029bb4:	d9c4      	bls.n	8029b40 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8029bb6:	687b      	ldr	r3, [r7, #4]
 8029bb8:	68fa      	ldr	r2, [r7, #12]
 8029bba:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8029bbc:	687b      	ldr	r3, [r7, #4]
 8029bbe:	693a      	ldr	r2, [r7, #16]
 8029bc0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8029bc2:	bf00      	nop
 8029bc4:	3718      	adds	r7, #24
 8029bc6:	46bd      	mov	sp, r7
 8029bc8:	bd80      	pop	{r7, pc}

08029bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029bca:	b580      	push	{r7, lr}
 8029bcc:	b082      	sub	sp, #8
 8029bce:	af00      	add	r7, sp, #0
 8029bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029bd2:	687b      	ldr	r3, [r7, #4]
 8029bd4:	2b00      	cmp	r3, #0
 8029bd6:	d101      	bne.n	8029bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8029bd8:	2301      	movs	r3, #1
 8029bda:	e01d      	b.n	8029c18 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029bdc:	687b      	ldr	r3, [r7, #4]
 8029bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029be2:	b2db      	uxtb	r3, r3
 8029be4:	2b00      	cmp	r3, #0
 8029be6:	d106      	bne.n	8029bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029be8:	687b      	ldr	r3, [r7, #4]
 8029bea:	2200      	movs	r2, #0
 8029bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029bf0:	6878      	ldr	r0, [r7, #4]
 8029bf2:	f7f9 fa27 	bl	8023044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029bf6:	687b      	ldr	r3, [r7, #4]
 8029bf8:	2202      	movs	r2, #2
 8029bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029bfe:	687b      	ldr	r3, [r7, #4]
 8029c00:	681a      	ldr	r2, [r3, #0]
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	3304      	adds	r3, #4
 8029c06:	4619      	mov	r1, r3
 8029c08:	4610      	mov	r0, r2
 8029c0a:	f000 fb4f 	bl	802a2ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029c0e:	687b      	ldr	r3, [r7, #4]
 8029c10:	2201      	movs	r2, #1
 8029c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029c16:	2300      	movs	r3, #0
}
 8029c18:	4618      	mov	r0, r3
 8029c1a:	3708      	adds	r7, #8
 8029c1c:	46bd      	mov	sp, r7
 8029c1e:	bd80      	pop	{r7, pc}

08029c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029c20:	b480      	push	{r7}
 8029c22:	b085      	sub	sp, #20
 8029c24:	af00      	add	r7, sp, #0
 8029c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8029c28:	687b      	ldr	r3, [r7, #4]
 8029c2a:	681b      	ldr	r3, [r3, #0]
 8029c2c:	68da      	ldr	r2, [r3, #12]
 8029c2e:	687b      	ldr	r3, [r7, #4]
 8029c30:	681b      	ldr	r3, [r3, #0]
 8029c32:	f042 0201 	orr.w	r2, r2, #1
 8029c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029c38:	687b      	ldr	r3, [r7, #4]
 8029c3a:	681b      	ldr	r3, [r3, #0]
 8029c3c:	689b      	ldr	r3, [r3, #8]
 8029c3e:	f003 0307 	and.w	r3, r3, #7
 8029c42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029c44:	68fb      	ldr	r3, [r7, #12]
 8029c46:	2b06      	cmp	r3, #6
 8029c48:	d007      	beq.n	8029c5a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029c4a:	687b      	ldr	r3, [r7, #4]
 8029c4c:	681b      	ldr	r3, [r3, #0]
 8029c4e:	681a      	ldr	r2, [r3, #0]
 8029c50:	687b      	ldr	r3, [r7, #4]
 8029c52:	681b      	ldr	r3, [r3, #0]
 8029c54:	f042 0201 	orr.w	r2, r2, #1
 8029c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029c5a:	2300      	movs	r3, #0
}
 8029c5c:	4618      	mov	r0, r3
 8029c5e:	3714      	adds	r7, #20
 8029c60:	46bd      	mov	sp, r7
 8029c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c66:	4770      	bx	lr

08029c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8029c68:	b580      	push	{r7, lr}
 8029c6a:	b082      	sub	sp, #8
 8029c6c:	af00      	add	r7, sp, #0
 8029c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029c70:	687b      	ldr	r3, [r7, #4]
 8029c72:	2b00      	cmp	r3, #0
 8029c74:	d101      	bne.n	8029c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8029c76:	2301      	movs	r3, #1
 8029c78:	e01d      	b.n	8029cb6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029c80:	b2db      	uxtb	r3, r3
 8029c82:	2b00      	cmp	r3, #0
 8029c84:	d106      	bne.n	8029c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	2200      	movs	r2, #0
 8029c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029c8e:	6878      	ldr	r0, [r7, #4]
 8029c90:	f000 f815 	bl	8029cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029c94:	687b      	ldr	r3, [r7, #4]
 8029c96:	2202      	movs	r2, #2
 8029c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029c9c:	687b      	ldr	r3, [r7, #4]
 8029c9e:	681a      	ldr	r2, [r3, #0]
 8029ca0:	687b      	ldr	r3, [r7, #4]
 8029ca2:	3304      	adds	r3, #4
 8029ca4:	4619      	mov	r1, r3
 8029ca6:	4610      	mov	r0, r2
 8029ca8:	f000 fb00 	bl	802a2ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029cac:	687b      	ldr	r3, [r7, #4]
 8029cae:	2201      	movs	r2, #1
 8029cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029cb4:	2300      	movs	r3, #0
}
 8029cb6:	4618      	mov	r0, r3
 8029cb8:	3708      	adds	r7, #8
 8029cba:	46bd      	mov	sp, r7
 8029cbc:	bd80      	pop	{r7, pc}

08029cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8029cbe:	b480      	push	{r7}
 8029cc0:	b083      	sub	sp, #12
 8029cc2:	af00      	add	r7, sp, #0
 8029cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8029cc6:	bf00      	nop
 8029cc8:	370c      	adds	r7, #12
 8029cca:	46bd      	mov	sp, r7
 8029ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cd0:	4770      	bx	lr
	...

08029cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029cd4:	b580      	push	{r7, lr}
 8029cd6:	b084      	sub	sp, #16
 8029cd8:	af00      	add	r7, sp, #0
 8029cda:	6078      	str	r0, [r7, #4]
 8029cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	681b      	ldr	r3, [r3, #0]
 8029ce2:	2201      	movs	r2, #1
 8029ce4:	6839      	ldr	r1, [r7, #0]
 8029ce6:	4618      	mov	r0, r3
 8029ce8:	f000 fdca 	bl	802a880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8029cec:	687b      	ldr	r3, [r7, #4]
 8029cee:	681b      	ldr	r3, [r3, #0]
 8029cf0:	4a15      	ldr	r2, [pc, #84]	; (8029d48 <HAL_TIM_PWM_Start+0x74>)
 8029cf2:	4293      	cmp	r3, r2
 8029cf4:	d004      	beq.n	8029d00 <HAL_TIM_PWM_Start+0x2c>
 8029cf6:	687b      	ldr	r3, [r7, #4]
 8029cf8:	681b      	ldr	r3, [r3, #0]
 8029cfa:	4a14      	ldr	r2, [pc, #80]	; (8029d4c <HAL_TIM_PWM_Start+0x78>)
 8029cfc:	4293      	cmp	r3, r2
 8029cfe:	d101      	bne.n	8029d04 <HAL_TIM_PWM_Start+0x30>
 8029d00:	2301      	movs	r3, #1
 8029d02:	e000      	b.n	8029d06 <HAL_TIM_PWM_Start+0x32>
 8029d04:	2300      	movs	r3, #0
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	d007      	beq.n	8029d1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	681b      	ldr	r3, [r3, #0]
 8029d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029d10:	687b      	ldr	r3, [r7, #4]
 8029d12:	681b      	ldr	r3, [r3, #0]
 8029d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029d1a:	687b      	ldr	r3, [r7, #4]
 8029d1c:	681b      	ldr	r3, [r3, #0]
 8029d1e:	689b      	ldr	r3, [r3, #8]
 8029d20:	f003 0307 	and.w	r3, r3, #7
 8029d24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029d26:	68fb      	ldr	r3, [r7, #12]
 8029d28:	2b06      	cmp	r3, #6
 8029d2a:	d007      	beq.n	8029d3c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8029d2c:	687b      	ldr	r3, [r7, #4]
 8029d2e:	681b      	ldr	r3, [r3, #0]
 8029d30:	681a      	ldr	r2, [r3, #0]
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	681b      	ldr	r3, [r3, #0]
 8029d36:	f042 0201 	orr.w	r2, r2, #1
 8029d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029d3c:	2300      	movs	r3, #0
}
 8029d3e:	4618      	mov	r0, r3
 8029d40:	3710      	adds	r7, #16
 8029d42:	46bd      	mov	sp, r7
 8029d44:	bd80      	pop	{r7, pc}
 8029d46:	bf00      	nop
 8029d48:	40010000 	.word	0x40010000
 8029d4c:	40010400 	.word	0x40010400

08029d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029d50:	b580      	push	{r7, lr}
 8029d52:	b082      	sub	sp, #8
 8029d54:	af00      	add	r7, sp, #0
 8029d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8029d58:	687b      	ldr	r3, [r7, #4]
 8029d5a:	681b      	ldr	r3, [r3, #0]
 8029d5c:	691b      	ldr	r3, [r3, #16]
 8029d5e:	f003 0302 	and.w	r3, r3, #2
 8029d62:	2b02      	cmp	r3, #2
 8029d64:	d122      	bne.n	8029dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029d66:	687b      	ldr	r3, [r7, #4]
 8029d68:	681b      	ldr	r3, [r3, #0]
 8029d6a:	68db      	ldr	r3, [r3, #12]
 8029d6c:	f003 0302 	and.w	r3, r3, #2
 8029d70:	2b02      	cmp	r3, #2
 8029d72:	d11b      	bne.n	8029dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029d74:	687b      	ldr	r3, [r7, #4]
 8029d76:	681b      	ldr	r3, [r3, #0]
 8029d78:	f06f 0202 	mvn.w	r2, #2
 8029d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029d7e:	687b      	ldr	r3, [r7, #4]
 8029d80:	2201      	movs	r2, #1
 8029d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029d84:	687b      	ldr	r3, [r7, #4]
 8029d86:	681b      	ldr	r3, [r3, #0]
 8029d88:	699b      	ldr	r3, [r3, #24]
 8029d8a:	f003 0303 	and.w	r3, r3, #3
 8029d8e:	2b00      	cmp	r3, #0
 8029d90:	d003      	beq.n	8029d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029d92:	6878      	ldr	r0, [r7, #4]
 8029d94:	f000 fa6b 	bl	802a26e <HAL_TIM_IC_CaptureCallback>
 8029d98:	e005      	b.n	8029da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029d9a:	6878      	ldr	r0, [r7, #4]
 8029d9c:	f000 fa5d 	bl	802a25a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029da0:	6878      	ldr	r0, [r7, #4]
 8029da2:	f000 fa6e 	bl	802a282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029da6:	687b      	ldr	r3, [r7, #4]
 8029da8:	2200      	movs	r2, #0
 8029daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	681b      	ldr	r3, [r3, #0]
 8029db0:	691b      	ldr	r3, [r3, #16]
 8029db2:	f003 0304 	and.w	r3, r3, #4
 8029db6:	2b04      	cmp	r3, #4
 8029db8:	d122      	bne.n	8029e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029dba:	687b      	ldr	r3, [r7, #4]
 8029dbc:	681b      	ldr	r3, [r3, #0]
 8029dbe:	68db      	ldr	r3, [r3, #12]
 8029dc0:	f003 0304 	and.w	r3, r3, #4
 8029dc4:	2b04      	cmp	r3, #4
 8029dc6:	d11b      	bne.n	8029e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029dc8:	687b      	ldr	r3, [r7, #4]
 8029dca:	681b      	ldr	r3, [r3, #0]
 8029dcc:	f06f 0204 	mvn.w	r2, #4
 8029dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029dd2:	687b      	ldr	r3, [r7, #4]
 8029dd4:	2202      	movs	r2, #2
 8029dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029dd8:	687b      	ldr	r3, [r7, #4]
 8029dda:	681b      	ldr	r3, [r3, #0]
 8029ddc:	699b      	ldr	r3, [r3, #24]
 8029dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029de2:	2b00      	cmp	r3, #0
 8029de4:	d003      	beq.n	8029dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029de6:	6878      	ldr	r0, [r7, #4]
 8029de8:	f000 fa41 	bl	802a26e <HAL_TIM_IC_CaptureCallback>
 8029dec:	e005      	b.n	8029dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029dee:	6878      	ldr	r0, [r7, #4]
 8029df0:	f000 fa33 	bl	802a25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029df4:	6878      	ldr	r0, [r7, #4]
 8029df6:	f000 fa44 	bl	802a282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029dfa:	687b      	ldr	r3, [r7, #4]
 8029dfc:	2200      	movs	r2, #0
 8029dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029e00:	687b      	ldr	r3, [r7, #4]
 8029e02:	681b      	ldr	r3, [r3, #0]
 8029e04:	691b      	ldr	r3, [r3, #16]
 8029e06:	f003 0308 	and.w	r3, r3, #8
 8029e0a:	2b08      	cmp	r3, #8
 8029e0c:	d122      	bne.n	8029e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	681b      	ldr	r3, [r3, #0]
 8029e12:	68db      	ldr	r3, [r3, #12]
 8029e14:	f003 0308 	and.w	r3, r3, #8
 8029e18:	2b08      	cmp	r3, #8
 8029e1a:	d11b      	bne.n	8029e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029e1c:	687b      	ldr	r3, [r7, #4]
 8029e1e:	681b      	ldr	r3, [r3, #0]
 8029e20:	f06f 0208 	mvn.w	r2, #8
 8029e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	2204      	movs	r2, #4
 8029e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029e2c:	687b      	ldr	r3, [r7, #4]
 8029e2e:	681b      	ldr	r3, [r3, #0]
 8029e30:	69db      	ldr	r3, [r3, #28]
 8029e32:	f003 0303 	and.w	r3, r3, #3
 8029e36:	2b00      	cmp	r3, #0
 8029e38:	d003      	beq.n	8029e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029e3a:	6878      	ldr	r0, [r7, #4]
 8029e3c:	f000 fa17 	bl	802a26e <HAL_TIM_IC_CaptureCallback>
 8029e40:	e005      	b.n	8029e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029e42:	6878      	ldr	r0, [r7, #4]
 8029e44:	f000 fa09 	bl	802a25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029e48:	6878      	ldr	r0, [r7, #4]
 8029e4a:	f000 fa1a 	bl	802a282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029e4e:	687b      	ldr	r3, [r7, #4]
 8029e50:	2200      	movs	r2, #0
 8029e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029e54:	687b      	ldr	r3, [r7, #4]
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	691b      	ldr	r3, [r3, #16]
 8029e5a:	f003 0310 	and.w	r3, r3, #16
 8029e5e:	2b10      	cmp	r3, #16
 8029e60:	d122      	bne.n	8029ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029e62:	687b      	ldr	r3, [r7, #4]
 8029e64:	681b      	ldr	r3, [r3, #0]
 8029e66:	68db      	ldr	r3, [r3, #12]
 8029e68:	f003 0310 	and.w	r3, r3, #16
 8029e6c:	2b10      	cmp	r3, #16
 8029e6e:	d11b      	bne.n	8029ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029e70:	687b      	ldr	r3, [r7, #4]
 8029e72:	681b      	ldr	r3, [r3, #0]
 8029e74:	f06f 0210 	mvn.w	r2, #16
 8029e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029e7a:	687b      	ldr	r3, [r7, #4]
 8029e7c:	2208      	movs	r2, #8
 8029e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029e80:	687b      	ldr	r3, [r7, #4]
 8029e82:	681b      	ldr	r3, [r3, #0]
 8029e84:	69db      	ldr	r3, [r3, #28]
 8029e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029e8a:	2b00      	cmp	r3, #0
 8029e8c:	d003      	beq.n	8029e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029e8e:	6878      	ldr	r0, [r7, #4]
 8029e90:	f000 f9ed 	bl	802a26e <HAL_TIM_IC_CaptureCallback>
 8029e94:	e005      	b.n	8029ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029e96:	6878      	ldr	r0, [r7, #4]
 8029e98:	f000 f9df 	bl	802a25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029e9c:	6878      	ldr	r0, [r7, #4]
 8029e9e:	f000 f9f0 	bl	802a282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029ea2:	687b      	ldr	r3, [r7, #4]
 8029ea4:	2200      	movs	r2, #0
 8029ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029ea8:	687b      	ldr	r3, [r7, #4]
 8029eaa:	681b      	ldr	r3, [r3, #0]
 8029eac:	691b      	ldr	r3, [r3, #16]
 8029eae:	f003 0301 	and.w	r3, r3, #1
 8029eb2:	2b01      	cmp	r3, #1
 8029eb4:	d10e      	bne.n	8029ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029eb6:	687b      	ldr	r3, [r7, #4]
 8029eb8:	681b      	ldr	r3, [r3, #0]
 8029eba:	68db      	ldr	r3, [r3, #12]
 8029ebc:	f003 0301 	and.w	r3, r3, #1
 8029ec0:	2b01      	cmp	r3, #1
 8029ec2:	d107      	bne.n	8029ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	681b      	ldr	r3, [r3, #0]
 8029ec8:	f06f 0201 	mvn.w	r2, #1
 8029ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029ece:	6878      	ldr	r0, [r7, #4]
 8029ed0:	f7f8 f95e 	bl	8022190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029ed4:	687b      	ldr	r3, [r7, #4]
 8029ed6:	681b      	ldr	r3, [r3, #0]
 8029ed8:	691b      	ldr	r3, [r3, #16]
 8029eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029ede:	2b80      	cmp	r3, #128	; 0x80
 8029ee0:	d10e      	bne.n	8029f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029ee2:	687b      	ldr	r3, [r7, #4]
 8029ee4:	681b      	ldr	r3, [r3, #0]
 8029ee6:	68db      	ldr	r3, [r3, #12]
 8029ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029eec:	2b80      	cmp	r3, #128	; 0x80
 8029eee:	d107      	bne.n	8029f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029ef0:	687b      	ldr	r3, [r7, #4]
 8029ef2:	681b      	ldr	r3, [r3, #0]
 8029ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029efa:	6878      	ldr	r0, [r7, #4]
 8029efc:	f000 fd6c 	bl	802a9d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029f00:	687b      	ldr	r3, [r7, #4]
 8029f02:	681b      	ldr	r3, [r3, #0]
 8029f04:	691b      	ldr	r3, [r3, #16]
 8029f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f0a:	2b40      	cmp	r3, #64	; 0x40
 8029f0c:	d10e      	bne.n	8029f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029f0e:	687b      	ldr	r3, [r7, #4]
 8029f10:	681b      	ldr	r3, [r3, #0]
 8029f12:	68db      	ldr	r3, [r3, #12]
 8029f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f18:	2b40      	cmp	r3, #64	; 0x40
 8029f1a:	d107      	bne.n	8029f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029f1c:	687b      	ldr	r3, [r7, #4]
 8029f1e:	681b      	ldr	r3, [r3, #0]
 8029f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029f26:	6878      	ldr	r0, [r7, #4]
 8029f28:	f000 f9b5 	bl	802a296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029f2c:	687b      	ldr	r3, [r7, #4]
 8029f2e:	681b      	ldr	r3, [r3, #0]
 8029f30:	691b      	ldr	r3, [r3, #16]
 8029f32:	f003 0320 	and.w	r3, r3, #32
 8029f36:	2b20      	cmp	r3, #32
 8029f38:	d10e      	bne.n	8029f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029f3a:	687b      	ldr	r3, [r7, #4]
 8029f3c:	681b      	ldr	r3, [r3, #0]
 8029f3e:	68db      	ldr	r3, [r3, #12]
 8029f40:	f003 0320 	and.w	r3, r3, #32
 8029f44:	2b20      	cmp	r3, #32
 8029f46:	d107      	bne.n	8029f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	681b      	ldr	r3, [r3, #0]
 8029f4c:	f06f 0220 	mvn.w	r2, #32
 8029f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029f52:	6878      	ldr	r0, [r7, #4]
 8029f54:	f000 fd36 	bl	802a9c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029f58:	bf00      	nop
 8029f5a:	3708      	adds	r7, #8
 8029f5c:	46bd      	mov	sp, r7
 8029f5e:	bd80      	pop	{r7, pc}

08029f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029f60:	b580      	push	{r7, lr}
 8029f62:	b084      	sub	sp, #16
 8029f64:	af00      	add	r7, sp, #0
 8029f66:	60f8      	str	r0, [r7, #12]
 8029f68:	60b9      	str	r1, [r7, #8]
 8029f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029f6c:	68fb      	ldr	r3, [r7, #12]
 8029f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029f72:	2b01      	cmp	r3, #1
 8029f74:	d101      	bne.n	8029f7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8029f76:	2302      	movs	r3, #2
 8029f78:	e0b4      	b.n	802a0e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8029f7a:	68fb      	ldr	r3, [r7, #12]
 8029f7c:	2201      	movs	r2, #1
 8029f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029f82:	68fb      	ldr	r3, [r7, #12]
 8029f84:	2202      	movs	r2, #2
 8029f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	2b0c      	cmp	r3, #12
 8029f8e:	f200 809f 	bhi.w	802a0d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029f92:	a201      	add	r2, pc, #4	; (adr r2, 8029f98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029f98:	08029fcd 	.word	0x08029fcd
 8029f9c:	0802a0d1 	.word	0x0802a0d1
 8029fa0:	0802a0d1 	.word	0x0802a0d1
 8029fa4:	0802a0d1 	.word	0x0802a0d1
 8029fa8:	0802a00d 	.word	0x0802a00d
 8029fac:	0802a0d1 	.word	0x0802a0d1
 8029fb0:	0802a0d1 	.word	0x0802a0d1
 8029fb4:	0802a0d1 	.word	0x0802a0d1
 8029fb8:	0802a04f 	.word	0x0802a04f
 8029fbc:	0802a0d1 	.word	0x0802a0d1
 8029fc0:	0802a0d1 	.word	0x0802a0d1
 8029fc4:	0802a0d1 	.word	0x0802a0d1
 8029fc8:	0802a08f 	.word	0x0802a08f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029fcc:	68fb      	ldr	r3, [r7, #12]
 8029fce:	681b      	ldr	r3, [r3, #0]
 8029fd0:	68b9      	ldr	r1, [r7, #8]
 8029fd2:	4618      	mov	r0, r3
 8029fd4:	f000 fa0a 	bl	802a3ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8029fd8:	68fb      	ldr	r3, [r7, #12]
 8029fda:	681b      	ldr	r3, [r3, #0]
 8029fdc:	699a      	ldr	r2, [r3, #24]
 8029fde:	68fb      	ldr	r3, [r7, #12]
 8029fe0:	681b      	ldr	r3, [r3, #0]
 8029fe2:	f042 0208 	orr.w	r2, r2, #8
 8029fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8029fe8:	68fb      	ldr	r3, [r7, #12]
 8029fea:	681b      	ldr	r3, [r3, #0]
 8029fec:	699a      	ldr	r2, [r3, #24]
 8029fee:	68fb      	ldr	r3, [r7, #12]
 8029ff0:	681b      	ldr	r3, [r3, #0]
 8029ff2:	f022 0204 	bic.w	r2, r2, #4
 8029ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8029ff8:	68fb      	ldr	r3, [r7, #12]
 8029ffa:	681b      	ldr	r3, [r3, #0]
 8029ffc:	6999      	ldr	r1, [r3, #24]
 8029ffe:	68bb      	ldr	r3, [r7, #8]
 802a000:	691a      	ldr	r2, [r3, #16]
 802a002:	68fb      	ldr	r3, [r7, #12]
 802a004:	681b      	ldr	r3, [r3, #0]
 802a006:	430a      	orrs	r2, r1
 802a008:	619a      	str	r2, [r3, #24]
      break;
 802a00a:	e062      	b.n	802a0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802a00c:	68fb      	ldr	r3, [r7, #12]
 802a00e:	681b      	ldr	r3, [r3, #0]
 802a010:	68b9      	ldr	r1, [r7, #8]
 802a012:	4618      	mov	r0, r3
 802a014:	f000 fa5a 	bl	802a4cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 802a018:	68fb      	ldr	r3, [r7, #12]
 802a01a:	681b      	ldr	r3, [r3, #0]
 802a01c:	699a      	ldr	r2, [r3, #24]
 802a01e:	68fb      	ldr	r3, [r7, #12]
 802a020:	681b      	ldr	r3, [r3, #0]
 802a022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 802a028:	68fb      	ldr	r3, [r7, #12]
 802a02a:	681b      	ldr	r3, [r3, #0]
 802a02c:	699a      	ldr	r2, [r3, #24]
 802a02e:	68fb      	ldr	r3, [r7, #12]
 802a030:	681b      	ldr	r3, [r3, #0]
 802a032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802a036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802a038:	68fb      	ldr	r3, [r7, #12]
 802a03a:	681b      	ldr	r3, [r3, #0]
 802a03c:	6999      	ldr	r1, [r3, #24]
 802a03e:	68bb      	ldr	r3, [r7, #8]
 802a040:	691b      	ldr	r3, [r3, #16]
 802a042:	021a      	lsls	r2, r3, #8
 802a044:	68fb      	ldr	r3, [r7, #12]
 802a046:	681b      	ldr	r3, [r3, #0]
 802a048:	430a      	orrs	r2, r1
 802a04a:	619a      	str	r2, [r3, #24]
      break;
 802a04c:	e041      	b.n	802a0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802a04e:	68fb      	ldr	r3, [r7, #12]
 802a050:	681b      	ldr	r3, [r3, #0]
 802a052:	68b9      	ldr	r1, [r7, #8]
 802a054:	4618      	mov	r0, r3
 802a056:	f000 faaf 	bl	802a5b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802a05a:	68fb      	ldr	r3, [r7, #12]
 802a05c:	681b      	ldr	r3, [r3, #0]
 802a05e:	69da      	ldr	r2, [r3, #28]
 802a060:	68fb      	ldr	r3, [r7, #12]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	f042 0208 	orr.w	r2, r2, #8
 802a068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802a06a:	68fb      	ldr	r3, [r7, #12]
 802a06c:	681b      	ldr	r3, [r3, #0]
 802a06e:	69da      	ldr	r2, [r3, #28]
 802a070:	68fb      	ldr	r3, [r7, #12]
 802a072:	681b      	ldr	r3, [r3, #0]
 802a074:	f022 0204 	bic.w	r2, r2, #4
 802a078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802a07a:	68fb      	ldr	r3, [r7, #12]
 802a07c:	681b      	ldr	r3, [r3, #0]
 802a07e:	69d9      	ldr	r1, [r3, #28]
 802a080:	68bb      	ldr	r3, [r7, #8]
 802a082:	691a      	ldr	r2, [r3, #16]
 802a084:	68fb      	ldr	r3, [r7, #12]
 802a086:	681b      	ldr	r3, [r3, #0]
 802a088:	430a      	orrs	r2, r1
 802a08a:	61da      	str	r2, [r3, #28]
      break;
 802a08c:	e021      	b.n	802a0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802a08e:	68fb      	ldr	r3, [r7, #12]
 802a090:	681b      	ldr	r3, [r3, #0]
 802a092:	68b9      	ldr	r1, [r7, #8]
 802a094:	4618      	mov	r0, r3
 802a096:	f000 fb03 	bl	802a6a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802a09a:	68fb      	ldr	r3, [r7, #12]
 802a09c:	681b      	ldr	r3, [r3, #0]
 802a09e:	69da      	ldr	r2, [r3, #28]
 802a0a0:	68fb      	ldr	r3, [r7, #12]
 802a0a2:	681b      	ldr	r3, [r3, #0]
 802a0a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a0a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802a0aa:	68fb      	ldr	r3, [r7, #12]
 802a0ac:	681b      	ldr	r3, [r3, #0]
 802a0ae:	69da      	ldr	r2, [r3, #28]
 802a0b0:	68fb      	ldr	r3, [r7, #12]
 802a0b2:	681b      	ldr	r3, [r3, #0]
 802a0b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802a0b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802a0ba:	68fb      	ldr	r3, [r7, #12]
 802a0bc:	681b      	ldr	r3, [r3, #0]
 802a0be:	69d9      	ldr	r1, [r3, #28]
 802a0c0:	68bb      	ldr	r3, [r7, #8]
 802a0c2:	691b      	ldr	r3, [r3, #16]
 802a0c4:	021a      	lsls	r2, r3, #8
 802a0c6:	68fb      	ldr	r3, [r7, #12]
 802a0c8:	681b      	ldr	r3, [r3, #0]
 802a0ca:	430a      	orrs	r2, r1
 802a0cc:	61da      	str	r2, [r3, #28]
      break;
 802a0ce:	e000      	b.n	802a0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802a0d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802a0d2:	68fb      	ldr	r3, [r7, #12]
 802a0d4:	2201      	movs	r2, #1
 802a0d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	2200      	movs	r2, #0
 802a0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a0e2:	2300      	movs	r3, #0
}
 802a0e4:	4618      	mov	r0, r3
 802a0e6:	3710      	adds	r7, #16
 802a0e8:	46bd      	mov	sp, r7
 802a0ea:	bd80      	pop	{r7, pc}

0802a0ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802a0ec:	b580      	push	{r7, lr}
 802a0ee:	b084      	sub	sp, #16
 802a0f0:	af00      	add	r7, sp, #0
 802a0f2:	6078      	str	r0, [r7, #4]
 802a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802a0f6:	687b      	ldr	r3, [r7, #4]
 802a0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a0fc:	2b01      	cmp	r3, #1
 802a0fe:	d101      	bne.n	802a104 <HAL_TIM_ConfigClockSource+0x18>
 802a100:	2302      	movs	r3, #2
 802a102:	e0a6      	b.n	802a252 <HAL_TIM_ConfigClockSource+0x166>
 802a104:	687b      	ldr	r3, [r7, #4]
 802a106:	2201      	movs	r2, #1
 802a108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802a10c:	687b      	ldr	r3, [r7, #4]
 802a10e:	2202      	movs	r2, #2
 802a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802a114:	687b      	ldr	r3, [r7, #4]
 802a116:	681b      	ldr	r3, [r3, #0]
 802a118:	689b      	ldr	r3, [r3, #8]
 802a11a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802a11c:	68fb      	ldr	r3, [r7, #12]
 802a11e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802a122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a124:	68fb      	ldr	r3, [r7, #12]
 802a126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a12a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802a12c:	687b      	ldr	r3, [r7, #4]
 802a12e:	681b      	ldr	r3, [r3, #0]
 802a130:	68fa      	ldr	r2, [r7, #12]
 802a132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802a134:	683b      	ldr	r3, [r7, #0]
 802a136:	681b      	ldr	r3, [r3, #0]
 802a138:	2b40      	cmp	r3, #64	; 0x40
 802a13a:	d067      	beq.n	802a20c <HAL_TIM_ConfigClockSource+0x120>
 802a13c:	2b40      	cmp	r3, #64	; 0x40
 802a13e:	d80b      	bhi.n	802a158 <HAL_TIM_ConfigClockSource+0x6c>
 802a140:	2b10      	cmp	r3, #16
 802a142:	d073      	beq.n	802a22c <HAL_TIM_ConfigClockSource+0x140>
 802a144:	2b10      	cmp	r3, #16
 802a146:	d802      	bhi.n	802a14e <HAL_TIM_ConfigClockSource+0x62>
 802a148:	2b00      	cmp	r3, #0
 802a14a:	d06f      	beq.n	802a22c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802a14c:	e078      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a14e:	2b20      	cmp	r3, #32
 802a150:	d06c      	beq.n	802a22c <HAL_TIM_ConfigClockSource+0x140>
 802a152:	2b30      	cmp	r3, #48	; 0x30
 802a154:	d06a      	beq.n	802a22c <HAL_TIM_ConfigClockSource+0x140>
      break;
 802a156:	e073      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a158:	2b70      	cmp	r3, #112	; 0x70
 802a15a:	d00d      	beq.n	802a178 <HAL_TIM_ConfigClockSource+0x8c>
 802a15c:	2b70      	cmp	r3, #112	; 0x70
 802a15e:	d804      	bhi.n	802a16a <HAL_TIM_ConfigClockSource+0x7e>
 802a160:	2b50      	cmp	r3, #80	; 0x50
 802a162:	d033      	beq.n	802a1cc <HAL_TIM_ConfigClockSource+0xe0>
 802a164:	2b60      	cmp	r3, #96	; 0x60
 802a166:	d041      	beq.n	802a1ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 802a168:	e06a      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a16a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a16e:	d066      	beq.n	802a23e <HAL_TIM_ConfigClockSource+0x152>
 802a170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a174:	d017      	beq.n	802a1a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 802a176:	e063      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	6818      	ldr	r0, [r3, #0]
 802a17c:	683b      	ldr	r3, [r7, #0]
 802a17e:	6899      	ldr	r1, [r3, #8]
 802a180:	683b      	ldr	r3, [r7, #0]
 802a182:	685a      	ldr	r2, [r3, #4]
 802a184:	683b      	ldr	r3, [r7, #0]
 802a186:	68db      	ldr	r3, [r3, #12]
 802a188:	f000 fb5a 	bl	802a840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802a18c:	687b      	ldr	r3, [r7, #4]
 802a18e:	681b      	ldr	r3, [r3, #0]
 802a190:	689b      	ldr	r3, [r3, #8]
 802a192:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802a194:	68fb      	ldr	r3, [r7, #12]
 802a196:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802a19a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802a19c:	687b      	ldr	r3, [r7, #4]
 802a19e:	681b      	ldr	r3, [r3, #0]
 802a1a0:	68fa      	ldr	r2, [r7, #12]
 802a1a2:	609a      	str	r2, [r3, #8]
      break;
 802a1a4:	e04c      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802a1a6:	687b      	ldr	r3, [r7, #4]
 802a1a8:	6818      	ldr	r0, [r3, #0]
 802a1aa:	683b      	ldr	r3, [r7, #0]
 802a1ac:	6899      	ldr	r1, [r3, #8]
 802a1ae:	683b      	ldr	r3, [r7, #0]
 802a1b0:	685a      	ldr	r2, [r3, #4]
 802a1b2:	683b      	ldr	r3, [r7, #0]
 802a1b4:	68db      	ldr	r3, [r3, #12]
 802a1b6:	f000 fb43 	bl	802a840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802a1ba:	687b      	ldr	r3, [r7, #4]
 802a1bc:	681b      	ldr	r3, [r3, #0]
 802a1be:	689a      	ldr	r2, [r3, #8]
 802a1c0:	687b      	ldr	r3, [r7, #4]
 802a1c2:	681b      	ldr	r3, [r3, #0]
 802a1c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802a1c8:	609a      	str	r2, [r3, #8]
      break;
 802a1ca:	e039      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802a1cc:	687b      	ldr	r3, [r7, #4]
 802a1ce:	6818      	ldr	r0, [r3, #0]
 802a1d0:	683b      	ldr	r3, [r7, #0]
 802a1d2:	6859      	ldr	r1, [r3, #4]
 802a1d4:	683b      	ldr	r3, [r7, #0]
 802a1d6:	68db      	ldr	r3, [r3, #12]
 802a1d8:	461a      	mov	r2, r3
 802a1da:	f000 fab7 	bl	802a74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802a1de:	687b      	ldr	r3, [r7, #4]
 802a1e0:	681b      	ldr	r3, [r3, #0]
 802a1e2:	2150      	movs	r1, #80	; 0x50
 802a1e4:	4618      	mov	r0, r3
 802a1e6:	f000 fb10 	bl	802a80a <TIM_ITRx_SetConfig>
      break;
 802a1ea:	e029      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802a1ec:	687b      	ldr	r3, [r7, #4]
 802a1ee:	6818      	ldr	r0, [r3, #0]
 802a1f0:	683b      	ldr	r3, [r7, #0]
 802a1f2:	6859      	ldr	r1, [r3, #4]
 802a1f4:	683b      	ldr	r3, [r7, #0]
 802a1f6:	68db      	ldr	r3, [r3, #12]
 802a1f8:	461a      	mov	r2, r3
 802a1fa:	f000 fad6 	bl	802a7aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802a1fe:	687b      	ldr	r3, [r7, #4]
 802a200:	681b      	ldr	r3, [r3, #0]
 802a202:	2160      	movs	r1, #96	; 0x60
 802a204:	4618      	mov	r0, r3
 802a206:	f000 fb00 	bl	802a80a <TIM_ITRx_SetConfig>
      break;
 802a20a:	e019      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802a20c:	687b      	ldr	r3, [r7, #4]
 802a20e:	6818      	ldr	r0, [r3, #0]
 802a210:	683b      	ldr	r3, [r7, #0]
 802a212:	6859      	ldr	r1, [r3, #4]
 802a214:	683b      	ldr	r3, [r7, #0]
 802a216:	68db      	ldr	r3, [r3, #12]
 802a218:	461a      	mov	r2, r3
 802a21a:	f000 fa97 	bl	802a74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802a21e:	687b      	ldr	r3, [r7, #4]
 802a220:	681b      	ldr	r3, [r3, #0]
 802a222:	2140      	movs	r1, #64	; 0x40
 802a224:	4618      	mov	r0, r3
 802a226:	f000 faf0 	bl	802a80a <TIM_ITRx_SetConfig>
      break;
 802a22a:	e009      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	681a      	ldr	r2, [r3, #0]
 802a230:	683b      	ldr	r3, [r7, #0]
 802a232:	681b      	ldr	r3, [r3, #0]
 802a234:	4619      	mov	r1, r3
 802a236:	4610      	mov	r0, r2
 802a238:	f000 fae7 	bl	802a80a <TIM_ITRx_SetConfig>
      break;
 802a23c:	e000      	b.n	802a240 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802a23e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802a240:	687b      	ldr	r3, [r7, #4]
 802a242:	2201      	movs	r2, #1
 802a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	2200      	movs	r2, #0
 802a24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a250:	2300      	movs	r3, #0
}
 802a252:	4618      	mov	r0, r3
 802a254:	3710      	adds	r7, #16
 802a256:	46bd      	mov	sp, r7
 802a258:	bd80      	pop	{r7, pc}

0802a25a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802a25a:	b480      	push	{r7}
 802a25c:	b083      	sub	sp, #12
 802a25e:	af00      	add	r7, sp, #0
 802a260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802a262:	bf00      	nop
 802a264:	370c      	adds	r7, #12
 802a266:	46bd      	mov	sp, r7
 802a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a26c:	4770      	bx	lr

0802a26e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802a26e:	b480      	push	{r7}
 802a270:	b083      	sub	sp, #12
 802a272:	af00      	add	r7, sp, #0
 802a274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802a276:	bf00      	nop
 802a278:	370c      	adds	r7, #12
 802a27a:	46bd      	mov	sp, r7
 802a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a280:	4770      	bx	lr

0802a282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802a282:	b480      	push	{r7}
 802a284:	b083      	sub	sp, #12
 802a286:	af00      	add	r7, sp, #0
 802a288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802a28a:	bf00      	nop
 802a28c:	370c      	adds	r7, #12
 802a28e:	46bd      	mov	sp, r7
 802a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a294:	4770      	bx	lr

0802a296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802a296:	b480      	push	{r7}
 802a298:	b083      	sub	sp, #12
 802a29a:	af00      	add	r7, sp, #0
 802a29c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802a29e:	bf00      	nop
 802a2a0:	370c      	adds	r7, #12
 802a2a2:	46bd      	mov	sp, r7
 802a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2a8:	4770      	bx	lr
	...

0802a2ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802a2ac:	b480      	push	{r7}
 802a2ae:	b085      	sub	sp, #20
 802a2b0:	af00      	add	r7, sp, #0
 802a2b2:	6078      	str	r0, [r7, #4]
 802a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802a2b6:	687b      	ldr	r3, [r7, #4]
 802a2b8:	681b      	ldr	r3, [r3, #0]
 802a2ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802a2bc:	687b      	ldr	r3, [r7, #4]
 802a2be:	4a40      	ldr	r2, [pc, #256]	; (802a3c0 <TIM_Base_SetConfig+0x114>)
 802a2c0:	4293      	cmp	r3, r2
 802a2c2:	d013      	beq.n	802a2ec <TIM_Base_SetConfig+0x40>
 802a2c4:	687b      	ldr	r3, [r7, #4]
 802a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a2ca:	d00f      	beq.n	802a2ec <TIM_Base_SetConfig+0x40>
 802a2cc:	687b      	ldr	r3, [r7, #4]
 802a2ce:	4a3d      	ldr	r2, [pc, #244]	; (802a3c4 <TIM_Base_SetConfig+0x118>)
 802a2d0:	4293      	cmp	r3, r2
 802a2d2:	d00b      	beq.n	802a2ec <TIM_Base_SetConfig+0x40>
 802a2d4:	687b      	ldr	r3, [r7, #4]
 802a2d6:	4a3c      	ldr	r2, [pc, #240]	; (802a3c8 <TIM_Base_SetConfig+0x11c>)
 802a2d8:	4293      	cmp	r3, r2
 802a2da:	d007      	beq.n	802a2ec <TIM_Base_SetConfig+0x40>
 802a2dc:	687b      	ldr	r3, [r7, #4]
 802a2de:	4a3b      	ldr	r2, [pc, #236]	; (802a3cc <TIM_Base_SetConfig+0x120>)
 802a2e0:	4293      	cmp	r3, r2
 802a2e2:	d003      	beq.n	802a2ec <TIM_Base_SetConfig+0x40>
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	4a3a      	ldr	r2, [pc, #232]	; (802a3d0 <TIM_Base_SetConfig+0x124>)
 802a2e8:	4293      	cmp	r3, r2
 802a2ea:	d108      	bne.n	802a2fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802a2ec:	68fb      	ldr	r3, [r7, #12]
 802a2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a2f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802a2f4:	683b      	ldr	r3, [r7, #0]
 802a2f6:	685b      	ldr	r3, [r3, #4]
 802a2f8:	68fa      	ldr	r2, [r7, #12]
 802a2fa:	4313      	orrs	r3, r2
 802a2fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802a2fe:	687b      	ldr	r3, [r7, #4]
 802a300:	4a2f      	ldr	r2, [pc, #188]	; (802a3c0 <TIM_Base_SetConfig+0x114>)
 802a302:	4293      	cmp	r3, r2
 802a304:	d02b      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a306:	687b      	ldr	r3, [r7, #4]
 802a308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a30c:	d027      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	4a2c      	ldr	r2, [pc, #176]	; (802a3c4 <TIM_Base_SetConfig+0x118>)
 802a312:	4293      	cmp	r3, r2
 802a314:	d023      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a316:	687b      	ldr	r3, [r7, #4]
 802a318:	4a2b      	ldr	r2, [pc, #172]	; (802a3c8 <TIM_Base_SetConfig+0x11c>)
 802a31a:	4293      	cmp	r3, r2
 802a31c:	d01f      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a31e:	687b      	ldr	r3, [r7, #4]
 802a320:	4a2a      	ldr	r2, [pc, #168]	; (802a3cc <TIM_Base_SetConfig+0x120>)
 802a322:	4293      	cmp	r3, r2
 802a324:	d01b      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a326:	687b      	ldr	r3, [r7, #4]
 802a328:	4a29      	ldr	r2, [pc, #164]	; (802a3d0 <TIM_Base_SetConfig+0x124>)
 802a32a:	4293      	cmp	r3, r2
 802a32c:	d017      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a32e:	687b      	ldr	r3, [r7, #4]
 802a330:	4a28      	ldr	r2, [pc, #160]	; (802a3d4 <TIM_Base_SetConfig+0x128>)
 802a332:	4293      	cmp	r3, r2
 802a334:	d013      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a336:	687b      	ldr	r3, [r7, #4]
 802a338:	4a27      	ldr	r2, [pc, #156]	; (802a3d8 <TIM_Base_SetConfig+0x12c>)
 802a33a:	4293      	cmp	r3, r2
 802a33c:	d00f      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a33e:	687b      	ldr	r3, [r7, #4]
 802a340:	4a26      	ldr	r2, [pc, #152]	; (802a3dc <TIM_Base_SetConfig+0x130>)
 802a342:	4293      	cmp	r3, r2
 802a344:	d00b      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	4a25      	ldr	r2, [pc, #148]	; (802a3e0 <TIM_Base_SetConfig+0x134>)
 802a34a:	4293      	cmp	r3, r2
 802a34c:	d007      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	4a24      	ldr	r2, [pc, #144]	; (802a3e4 <TIM_Base_SetConfig+0x138>)
 802a352:	4293      	cmp	r3, r2
 802a354:	d003      	beq.n	802a35e <TIM_Base_SetConfig+0xb2>
 802a356:	687b      	ldr	r3, [r7, #4]
 802a358:	4a23      	ldr	r2, [pc, #140]	; (802a3e8 <TIM_Base_SetConfig+0x13c>)
 802a35a:	4293      	cmp	r3, r2
 802a35c:	d108      	bne.n	802a370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802a35e:	68fb      	ldr	r3, [r7, #12]
 802a360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802a366:	683b      	ldr	r3, [r7, #0]
 802a368:	68db      	ldr	r3, [r3, #12]
 802a36a:	68fa      	ldr	r2, [r7, #12]
 802a36c:	4313      	orrs	r3, r2
 802a36e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802a370:	68fb      	ldr	r3, [r7, #12]
 802a372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802a376:	683b      	ldr	r3, [r7, #0]
 802a378:	695b      	ldr	r3, [r3, #20]
 802a37a:	4313      	orrs	r3, r2
 802a37c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802a37e:	687b      	ldr	r3, [r7, #4]
 802a380:	68fa      	ldr	r2, [r7, #12]
 802a382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802a384:	683b      	ldr	r3, [r7, #0]
 802a386:	689a      	ldr	r2, [r3, #8]
 802a388:	687b      	ldr	r3, [r7, #4]
 802a38a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802a38c:	683b      	ldr	r3, [r7, #0]
 802a38e:	681a      	ldr	r2, [r3, #0]
 802a390:	687b      	ldr	r3, [r7, #4]
 802a392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	4a0a      	ldr	r2, [pc, #40]	; (802a3c0 <TIM_Base_SetConfig+0x114>)
 802a398:	4293      	cmp	r3, r2
 802a39a:	d003      	beq.n	802a3a4 <TIM_Base_SetConfig+0xf8>
 802a39c:	687b      	ldr	r3, [r7, #4]
 802a39e:	4a0c      	ldr	r2, [pc, #48]	; (802a3d0 <TIM_Base_SetConfig+0x124>)
 802a3a0:	4293      	cmp	r3, r2
 802a3a2:	d103      	bne.n	802a3ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802a3a4:	683b      	ldr	r3, [r7, #0]
 802a3a6:	691a      	ldr	r2, [r3, #16]
 802a3a8:	687b      	ldr	r3, [r7, #4]
 802a3aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802a3ac:	687b      	ldr	r3, [r7, #4]
 802a3ae:	2201      	movs	r2, #1
 802a3b0:	615a      	str	r2, [r3, #20]
}
 802a3b2:	bf00      	nop
 802a3b4:	3714      	adds	r7, #20
 802a3b6:	46bd      	mov	sp, r7
 802a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3bc:	4770      	bx	lr
 802a3be:	bf00      	nop
 802a3c0:	40010000 	.word	0x40010000
 802a3c4:	40000400 	.word	0x40000400
 802a3c8:	40000800 	.word	0x40000800
 802a3cc:	40000c00 	.word	0x40000c00
 802a3d0:	40010400 	.word	0x40010400
 802a3d4:	40014000 	.word	0x40014000
 802a3d8:	40014400 	.word	0x40014400
 802a3dc:	40014800 	.word	0x40014800
 802a3e0:	40001800 	.word	0x40001800
 802a3e4:	40001c00 	.word	0x40001c00
 802a3e8:	40002000 	.word	0x40002000

0802a3ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a3ec:	b480      	push	{r7}
 802a3ee:	b087      	sub	sp, #28
 802a3f0:	af00      	add	r7, sp, #0
 802a3f2:	6078      	str	r0, [r7, #4]
 802a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a3f6:	687b      	ldr	r3, [r7, #4]
 802a3f8:	6a1b      	ldr	r3, [r3, #32]
 802a3fa:	f023 0201 	bic.w	r2, r3, #1
 802a3fe:	687b      	ldr	r3, [r7, #4]
 802a400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a402:	687b      	ldr	r3, [r7, #4]
 802a404:	6a1b      	ldr	r3, [r3, #32]
 802a406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a408:	687b      	ldr	r3, [r7, #4]
 802a40a:	685b      	ldr	r3, [r3, #4]
 802a40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a40e:	687b      	ldr	r3, [r7, #4]
 802a410:	699b      	ldr	r3, [r3, #24]
 802a412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802a414:	68fb      	ldr	r3, [r7, #12]
 802a416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802a41c:	68fb      	ldr	r3, [r7, #12]
 802a41e:	f023 0303 	bic.w	r3, r3, #3
 802a422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a424:	683b      	ldr	r3, [r7, #0]
 802a426:	681b      	ldr	r3, [r3, #0]
 802a428:	68fa      	ldr	r2, [r7, #12]
 802a42a:	4313      	orrs	r3, r2
 802a42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802a42e:	697b      	ldr	r3, [r7, #20]
 802a430:	f023 0302 	bic.w	r3, r3, #2
 802a434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802a436:	683b      	ldr	r3, [r7, #0]
 802a438:	689b      	ldr	r3, [r3, #8]
 802a43a:	697a      	ldr	r2, [r7, #20]
 802a43c:	4313      	orrs	r3, r2
 802a43e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802a440:	687b      	ldr	r3, [r7, #4]
 802a442:	4a20      	ldr	r2, [pc, #128]	; (802a4c4 <TIM_OC1_SetConfig+0xd8>)
 802a444:	4293      	cmp	r3, r2
 802a446:	d003      	beq.n	802a450 <TIM_OC1_SetConfig+0x64>
 802a448:	687b      	ldr	r3, [r7, #4]
 802a44a:	4a1f      	ldr	r2, [pc, #124]	; (802a4c8 <TIM_OC1_SetConfig+0xdc>)
 802a44c:	4293      	cmp	r3, r2
 802a44e:	d10c      	bne.n	802a46a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802a450:	697b      	ldr	r3, [r7, #20]
 802a452:	f023 0308 	bic.w	r3, r3, #8
 802a456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802a458:	683b      	ldr	r3, [r7, #0]
 802a45a:	68db      	ldr	r3, [r3, #12]
 802a45c:	697a      	ldr	r2, [r7, #20]
 802a45e:	4313      	orrs	r3, r2
 802a460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802a462:	697b      	ldr	r3, [r7, #20]
 802a464:	f023 0304 	bic.w	r3, r3, #4
 802a468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a46a:	687b      	ldr	r3, [r7, #4]
 802a46c:	4a15      	ldr	r2, [pc, #84]	; (802a4c4 <TIM_OC1_SetConfig+0xd8>)
 802a46e:	4293      	cmp	r3, r2
 802a470:	d003      	beq.n	802a47a <TIM_OC1_SetConfig+0x8e>
 802a472:	687b      	ldr	r3, [r7, #4]
 802a474:	4a14      	ldr	r2, [pc, #80]	; (802a4c8 <TIM_OC1_SetConfig+0xdc>)
 802a476:	4293      	cmp	r3, r2
 802a478:	d111      	bne.n	802a49e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802a47a:	693b      	ldr	r3, [r7, #16]
 802a47c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802a482:	693b      	ldr	r3, [r7, #16]
 802a484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802a48a:	683b      	ldr	r3, [r7, #0]
 802a48c:	695b      	ldr	r3, [r3, #20]
 802a48e:	693a      	ldr	r2, [r7, #16]
 802a490:	4313      	orrs	r3, r2
 802a492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802a494:	683b      	ldr	r3, [r7, #0]
 802a496:	699b      	ldr	r3, [r3, #24]
 802a498:	693a      	ldr	r2, [r7, #16]
 802a49a:	4313      	orrs	r3, r2
 802a49c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a49e:	687b      	ldr	r3, [r7, #4]
 802a4a0:	693a      	ldr	r2, [r7, #16]
 802a4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a4a4:	687b      	ldr	r3, [r7, #4]
 802a4a6:	68fa      	ldr	r2, [r7, #12]
 802a4a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802a4aa:	683b      	ldr	r3, [r7, #0]
 802a4ac:	685a      	ldr	r2, [r3, #4]
 802a4ae:	687b      	ldr	r3, [r7, #4]
 802a4b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a4b2:	687b      	ldr	r3, [r7, #4]
 802a4b4:	697a      	ldr	r2, [r7, #20]
 802a4b6:	621a      	str	r2, [r3, #32]
}
 802a4b8:	bf00      	nop
 802a4ba:	371c      	adds	r7, #28
 802a4bc:	46bd      	mov	sp, r7
 802a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4c2:	4770      	bx	lr
 802a4c4:	40010000 	.word	0x40010000
 802a4c8:	40010400 	.word	0x40010400

0802a4cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a4cc:	b480      	push	{r7}
 802a4ce:	b087      	sub	sp, #28
 802a4d0:	af00      	add	r7, sp, #0
 802a4d2:	6078      	str	r0, [r7, #4]
 802a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a4d6:	687b      	ldr	r3, [r7, #4]
 802a4d8:	6a1b      	ldr	r3, [r3, #32]
 802a4da:	f023 0210 	bic.w	r2, r3, #16
 802a4de:	687b      	ldr	r3, [r7, #4]
 802a4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a4e2:	687b      	ldr	r3, [r7, #4]
 802a4e4:	6a1b      	ldr	r3, [r3, #32]
 802a4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a4e8:	687b      	ldr	r3, [r7, #4]
 802a4ea:	685b      	ldr	r3, [r3, #4]
 802a4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a4ee:	687b      	ldr	r3, [r7, #4]
 802a4f0:	699b      	ldr	r3, [r3, #24]
 802a4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802a4f4:	68fb      	ldr	r3, [r7, #12]
 802a4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802a4fc:	68fb      	ldr	r3, [r7, #12]
 802a4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a504:	683b      	ldr	r3, [r7, #0]
 802a506:	681b      	ldr	r3, [r3, #0]
 802a508:	021b      	lsls	r3, r3, #8
 802a50a:	68fa      	ldr	r2, [r7, #12]
 802a50c:	4313      	orrs	r3, r2
 802a50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802a510:	697b      	ldr	r3, [r7, #20]
 802a512:	f023 0320 	bic.w	r3, r3, #32
 802a516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802a518:	683b      	ldr	r3, [r7, #0]
 802a51a:	689b      	ldr	r3, [r3, #8]
 802a51c:	011b      	lsls	r3, r3, #4
 802a51e:	697a      	ldr	r2, [r7, #20]
 802a520:	4313      	orrs	r3, r2
 802a522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802a524:	687b      	ldr	r3, [r7, #4]
 802a526:	4a22      	ldr	r2, [pc, #136]	; (802a5b0 <TIM_OC2_SetConfig+0xe4>)
 802a528:	4293      	cmp	r3, r2
 802a52a:	d003      	beq.n	802a534 <TIM_OC2_SetConfig+0x68>
 802a52c:	687b      	ldr	r3, [r7, #4]
 802a52e:	4a21      	ldr	r2, [pc, #132]	; (802a5b4 <TIM_OC2_SetConfig+0xe8>)
 802a530:	4293      	cmp	r3, r2
 802a532:	d10d      	bne.n	802a550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802a534:	697b      	ldr	r3, [r7, #20]
 802a536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a53a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802a53c:	683b      	ldr	r3, [r7, #0]
 802a53e:	68db      	ldr	r3, [r3, #12]
 802a540:	011b      	lsls	r3, r3, #4
 802a542:	697a      	ldr	r2, [r7, #20]
 802a544:	4313      	orrs	r3, r2
 802a546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802a548:	697b      	ldr	r3, [r7, #20]
 802a54a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a54e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a550:	687b      	ldr	r3, [r7, #4]
 802a552:	4a17      	ldr	r2, [pc, #92]	; (802a5b0 <TIM_OC2_SetConfig+0xe4>)
 802a554:	4293      	cmp	r3, r2
 802a556:	d003      	beq.n	802a560 <TIM_OC2_SetConfig+0x94>
 802a558:	687b      	ldr	r3, [r7, #4]
 802a55a:	4a16      	ldr	r2, [pc, #88]	; (802a5b4 <TIM_OC2_SetConfig+0xe8>)
 802a55c:	4293      	cmp	r3, r2
 802a55e:	d113      	bne.n	802a588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 802a560:	693b      	ldr	r3, [r7, #16]
 802a562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802a568:	693b      	ldr	r3, [r7, #16]
 802a56a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a56e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 802a570:	683b      	ldr	r3, [r7, #0]
 802a572:	695b      	ldr	r3, [r3, #20]
 802a574:	009b      	lsls	r3, r3, #2
 802a576:	693a      	ldr	r2, [r7, #16]
 802a578:	4313      	orrs	r3, r2
 802a57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802a57c:	683b      	ldr	r3, [r7, #0]
 802a57e:	699b      	ldr	r3, [r3, #24]
 802a580:	009b      	lsls	r3, r3, #2
 802a582:	693a      	ldr	r2, [r7, #16]
 802a584:	4313      	orrs	r3, r2
 802a586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a588:	687b      	ldr	r3, [r7, #4]
 802a58a:	693a      	ldr	r2, [r7, #16]
 802a58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a58e:	687b      	ldr	r3, [r7, #4]
 802a590:	68fa      	ldr	r2, [r7, #12]
 802a592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802a594:	683b      	ldr	r3, [r7, #0]
 802a596:	685a      	ldr	r2, [r3, #4]
 802a598:	687b      	ldr	r3, [r7, #4]
 802a59a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a59c:	687b      	ldr	r3, [r7, #4]
 802a59e:	697a      	ldr	r2, [r7, #20]
 802a5a0:	621a      	str	r2, [r3, #32]
}
 802a5a2:	bf00      	nop
 802a5a4:	371c      	adds	r7, #28
 802a5a6:	46bd      	mov	sp, r7
 802a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5ac:	4770      	bx	lr
 802a5ae:	bf00      	nop
 802a5b0:	40010000 	.word	0x40010000
 802a5b4:	40010400 	.word	0x40010400

0802a5b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a5b8:	b480      	push	{r7}
 802a5ba:	b087      	sub	sp, #28
 802a5bc:	af00      	add	r7, sp, #0
 802a5be:	6078      	str	r0, [r7, #4]
 802a5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802a5c2:	687b      	ldr	r3, [r7, #4]
 802a5c4:	6a1b      	ldr	r3, [r3, #32]
 802a5c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802a5ca:	687b      	ldr	r3, [r7, #4]
 802a5cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a5ce:	687b      	ldr	r3, [r7, #4]
 802a5d0:	6a1b      	ldr	r3, [r3, #32]
 802a5d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a5d4:	687b      	ldr	r3, [r7, #4]
 802a5d6:	685b      	ldr	r3, [r3, #4]
 802a5d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a5da:	687b      	ldr	r3, [r7, #4]
 802a5dc:	69db      	ldr	r3, [r3, #28]
 802a5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802a5e0:	68fb      	ldr	r3, [r7, #12]
 802a5e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802a5e8:	68fb      	ldr	r3, [r7, #12]
 802a5ea:	f023 0303 	bic.w	r3, r3, #3
 802a5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a5f0:	683b      	ldr	r3, [r7, #0]
 802a5f2:	681b      	ldr	r3, [r3, #0]
 802a5f4:	68fa      	ldr	r2, [r7, #12]
 802a5f6:	4313      	orrs	r3, r2
 802a5f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802a5fa:	697b      	ldr	r3, [r7, #20]
 802a5fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802a602:	683b      	ldr	r3, [r7, #0]
 802a604:	689b      	ldr	r3, [r3, #8]
 802a606:	021b      	lsls	r3, r3, #8
 802a608:	697a      	ldr	r2, [r7, #20]
 802a60a:	4313      	orrs	r3, r2
 802a60c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802a60e:	687b      	ldr	r3, [r7, #4]
 802a610:	4a21      	ldr	r2, [pc, #132]	; (802a698 <TIM_OC3_SetConfig+0xe0>)
 802a612:	4293      	cmp	r3, r2
 802a614:	d003      	beq.n	802a61e <TIM_OC3_SetConfig+0x66>
 802a616:	687b      	ldr	r3, [r7, #4]
 802a618:	4a20      	ldr	r2, [pc, #128]	; (802a69c <TIM_OC3_SetConfig+0xe4>)
 802a61a:	4293      	cmp	r3, r2
 802a61c:	d10d      	bne.n	802a63a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802a61e:	697b      	ldr	r3, [r7, #20]
 802a620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802a626:	683b      	ldr	r3, [r7, #0]
 802a628:	68db      	ldr	r3, [r3, #12]
 802a62a:	021b      	lsls	r3, r3, #8
 802a62c:	697a      	ldr	r2, [r7, #20]
 802a62e:	4313      	orrs	r3, r2
 802a630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802a632:	697b      	ldr	r3, [r7, #20]
 802a634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a63a:	687b      	ldr	r3, [r7, #4]
 802a63c:	4a16      	ldr	r2, [pc, #88]	; (802a698 <TIM_OC3_SetConfig+0xe0>)
 802a63e:	4293      	cmp	r3, r2
 802a640:	d003      	beq.n	802a64a <TIM_OC3_SetConfig+0x92>
 802a642:	687b      	ldr	r3, [r7, #4]
 802a644:	4a15      	ldr	r2, [pc, #84]	; (802a69c <TIM_OC3_SetConfig+0xe4>)
 802a646:	4293      	cmp	r3, r2
 802a648:	d113      	bne.n	802a672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802a64a:	693b      	ldr	r3, [r7, #16]
 802a64c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802a652:	693b      	ldr	r3, [r7, #16]
 802a654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802a65a:	683b      	ldr	r3, [r7, #0]
 802a65c:	695b      	ldr	r3, [r3, #20]
 802a65e:	011b      	lsls	r3, r3, #4
 802a660:	693a      	ldr	r2, [r7, #16]
 802a662:	4313      	orrs	r3, r2
 802a664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802a666:	683b      	ldr	r3, [r7, #0]
 802a668:	699b      	ldr	r3, [r3, #24]
 802a66a:	011b      	lsls	r3, r3, #4
 802a66c:	693a      	ldr	r2, [r7, #16]
 802a66e:	4313      	orrs	r3, r2
 802a670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a672:	687b      	ldr	r3, [r7, #4]
 802a674:	693a      	ldr	r2, [r7, #16]
 802a676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a678:	687b      	ldr	r3, [r7, #4]
 802a67a:	68fa      	ldr	r2, [r7, #12]
 802a67c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802a67e:	683b      	ldr	r3, [r7, #0]
 802a680:	685a      	ldr	r2, [r3, #4]
 802a682:	687b      	ldr	r3, [r7, #4]
 802a684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a686:	687b      	ldr	r3, [r7, #4]
 802a688:	697a      	ldr	r2, [r7, #20]
 802a68a:	621a      	str	r2, [r3, #32]
}
 802a68c:	bf00      	nop
 802a68e:	371c      	adds	r7, #28
 802a690:	46bd      	mov	sp, r7
 802a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a696:	4770      	bx	lr
 802a698:	40010000 	.word	0x40010000
 802a69c:	40010400 	.word	0x40010400

0802a6a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a6a0:	b480      	push	{r7}
 802a6a2:	b087      	sub	sp, #28
 802a6a4:	af00      	add	r7, sp, #0
 802a6a6:	6078      	str	r0, [r7, #4]
 802a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a6aa:	687b      	ldr	r3, [r7, #4]
 802a6ac:	6a1b      	ldr	r3, [r3, #32]
 802a6ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a6b2:	687b      	ldr	r3, [r7, #4]
 802a6b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a6b6:	687b      	ldr	r3, [r7, #4]
 802a6b8:	6a1b      	ldr	r3, [r3, #32]
 802a6ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a6bc:	687b      	ldr	r3, [r7, #4]
 802a6be:	685b      	ldr	r3, [r3, #4]
 802a6c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a6c2:	687b      	ldr	r3, [r7, #4]
 802a6c4:	69db      	ldr	r3, [r3, #28]
 802a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a6c8:	68fb      	ldr	r3, [r7, #12]
 802a6ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a6d0:	68fb      	ldr	r3, [r7, #12]
 802a6d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a6d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a6d8:	683b      	ldr	r3, [r7, #0]
 802a6da:	681b      	ldr	r3, [r3, #0]
 802a6dc:	021b      	lsls	r3, r3, #8
 802a6de:	68fa      	ldr	r2, [r7, #12]
 802a6e0:	4313      	orrs	r3, r2
 802a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a6e4:	693b      	ldr	r3, [r7, #16]
 802a6e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a6ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a6ec:	683b      	ldr	r3, [r7, #0]
 802a6ee:	689b      	ldr	r3, [r3, #8]
 802a6f0:	031b      	lsls	r3, r3, #12
 802a6f2:	693a      	ldr	r2, [r7, #16]
 802a6f4:	4313      	orrs	r3, r2
 802a6f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a6f8:	687b      	ldr	r3, [r7, #4]
 802a6fa:	4a12      	ldr	r2, [pc, #72]	; (802a744 <TIM_OC4_SetConfig+0xa4>)
 802a6fc:	4293      	cmp	r3, r2
 802a6fe:	d003      	beq.n	802a708 <TIM_OC4_SetConfig+0x68>
 802a700:	687b      	ldr	r3, [r7, #4]
 802a702:	4a11      	ldr	r2, [pc, #68]	; (802a748 <TIM_OC4_SetConfig+0xa8>)
 802a704:	4293      	cmp	r3, r2
 802a706:	d109      	bne.n	802a71c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a708:	697b      	ldr	r3, [r7, #20]
 802a70a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a70e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a710:	683b      	ldr	r3, [r7, #0]
 802a712:	695b      	ldr	r3, [r3, #20]
 802a714:	019b      	lsls	r3, r3, #6
 802a716:	697a      	ldr	r2, [r7, #20]
 802a718:	4313      	orrs	r3, r2
 802a71a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a71c:	687b      	ldr	r3, [r7, #4]
 802a71e:	697a      	ldr	r2, [r7, #20]
 802a720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a722:	687b      	ldr	r3, [r7, #4]
 802a724:	68fa      	ldr	r2, [r7, #12]
 802a726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a728:	683b      	ldr	r3, [r7, #0]
 802a72a:	685a      	ldr	r2, [r3, #4]
 802a72c:	687b      	ldr	r3, [r7, #4]
 802a72e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a730:	687b      	ldr	r3, [r7, #4]
 802a732:	693a      	ldr	r2, [r7, #16]
 802a734:	621a      	str	r2, [r3, #32]
}
 802a736:	bf00      	nop
 802a738:	371c      	adds	r7, #28
 802a73a:	46bd      	mov	sp, r7
 802a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a740:	4770      	bx	lr
 802a742:	bf00      	nop
 802a744:	40010000 	.word	0x40010000
 802a748:	40010400 	.word	0x40010400

0802a74c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a74c:	b480      	push	{r7}
 802a74e:	b087      	sub	sp, #28
 802a750:	af00      	add	r7, sp, #0
 802a752:	60f8      	str	r0, [r7, #12]
 802a754:	60b9      	str	r1, [r7, #8]
 802a756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a758:	68fb      	ldr	r3, [r7, #12]
 802a75a:	6a1b      	ldr	r3, [r3, #32]
 802a75c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a75e:	68fb      	ldr	r3, [r7, #12]
 802a760:	6a1b      	ldr	r3, [r3, #32]
 802a762:	f023 0201 	bic.w	r2, r3, #1
 802a766:	68fb      	ldr	r3, [r7, #12]
 802a768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a76a:	68fb      	ldr	r3, [r7, #12]
 802a76c:	699b      	ldr	r3, [r3, #24]
 802a76e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a770:	693b      	ldr	r3, [r7, #16]
 802a772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a778:	687b      	ldr	r3, [r7, #4]
 802a77a:	011b      	lsls	r3, r3, #4
 802a77c:	693a      	ldr	r2, [r7, #16]
 802a77e:	4313      	orrs	r3, r2
 802a780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a782:	697b      	ldr	r3, [r7, #20]
 802a784:	f023 030a 	bic.w	r3, r3, #10
 802a788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a78a:	697a      	ldr	r2, [r7, #20]
 802a78c:	68bb      	ldr	r3, [r7, #8]
 802a78e:	4313      	orrs	r3, r2
 802a790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a792:	68fb      	ldr	r3, [r7, #12]
 802a794:	693a      	ldr	r2, [r7, #16]
 802a796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a798:	68fb      	ldr	r3, [r7, #12]
 802a79a:	697a      	ldr	r2, [r7, #20]
 802a79c:	621a      	str	r2, [r3, #32]
}
 802a79e:	bf00      	nop
 802a7a0:	371c      	adds	r7, #28
 802a7a2:	46bd      	mov	sp, r7
 802a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7a8:	4770      	bx	lr

0802a7aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a7aa:	b480      	push	{r7}
 802a7ac:	b087      	sub	sp, #28
 802a7ae:	af00      	add	r7, sp, #0
 802a7b0:	60f8      	str	r0, [r7, #12]
 802a7b2:	60b9      	str	r1, [r7, #8]
 802a7b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a7b6:	68fb      	ldr	r3, [r7, #12]
 802a7b8:	6a1b      	ldr	r3, [r3, #32]
 802a7ba:	f023 0210 	bic.w	r2, r3, #16
 802a7be:	68fb      	ldr	r3, [r7, #12]
 802a7c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a7c2:	68fb      	ldr	r3, [r7, #12]
 802a7c4:	699b      	ldr	r3, [r3, #24]
 802a7c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a7c8:	68fb      	ldr	r3, [r7, #12]
 802a7ca:	6a1b      	ldr	r3, [r3, #32]
 802a7cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a7ce:	697b      	ldr	r3, [r7, #20]
 802a7d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a7d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a7d6:	687b      	ldr	r3, [r7, #4]
 802a7d8:	031b      	lsls	r3, r3, #12
 802a7da:	697a      	ldr	r2, [r7, #20]
 802a7dc:	4313      	orrs	r3, r2
 802a7de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a7e0:	693b      	ldr	r3, [r7, #16]
 802a7e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a7e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a7e8:	68bb      	ldr	r3, [r7, #8]
 802a7ea:	011b      	lsls	r3, r3, #4
 802a7ec:	693a      	ldr	r2, [r7, #16]
 802a7ee:	4313      	orrs	r3, r2
 802a7f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a7f2:	68fb      	ldr	r3, [r7, #12]
 802a7f4:	697a      	ldr	r2, [r7, #20]
 802a7f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a7f8:	68fb      	ldr	r3, [r7, #12]
 802a7fa:	693a      	ldr	r2, [r7, #16]
 802a7fc:	621a      	str	r2, [r3, #32]
}
 802a7fe:	bf00      	nop
 802a800:	371c      	adds	r7, #28
 802a802:	46bd      	mov	sp, r7
 802a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a808:	4770      	bx	lr

0802a80a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a80a:	b480      	push	{r7}
 802a80c:	b085      	sub	sp, #20
 802a80e:	af00      	add	r7, sp, #0
 802a810:	6078      	str	r0, [r7, #4]
 802a812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a814:	687b      	ldr	r3, [r7, #4]
 802a816:	689b      	ldr	r3, [r3, #8]
 802a818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a81a:	68fb      	ldr	r3, [r7, #12]
 802a81c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a822:	683a      	ldr	r2, [r7, #0]
 802a824:	68fb      	ldr	r3, [r7, #12]
 802a826:	4313      	orrs	r3, r2
 802a828:	f043 0307 	orr.w	r3, r3, #7
 802a82c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a82e:	687b      	ldr	r3, [r7, #4]
 802a830:	68fa      	ldr	r2, [r7, #12]
 802a832:	609a      	str	r2, [r3, #8]
}
 802a834:	bf00      	nop
 802a836:	3714      	adds	r7, #20
 802a838:	46bd      	mov	sp, r7
 802a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a83e:	4770      	bx	lr

0802a840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a840:	b480      	push	{r7}
 802a842:	b087      	sub	sp, #28
 802a844:	af00      	add	r7, sp, #0
 802a846:	60f8      	str	r0, [r7, #12]
 802a848:	60b9      	str	r1, [r7, #8]
 802a84a:	607a      	str	r2, [r7, #4]
 802a84c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a84e:	68fb      	ldr	r3, [r7, #12]
 802a850:	689b      	ldr	r3, [r3, #8]
 802a852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a854:	697b      	ldr	r3, [r7, #20]
 802a856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a85a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a85c:	683b      	ldr	r3, [r7, #0]
 802a85e:	021a      	lsls	r2, r3, #8
 802a860:	687b      	ldr	r3, [r7, #4]
 802a862:	431a      	orrs	r2, r3
 802a864:	68bb      	ldr	r3, [r7, #8]
 802a866:	4313      	orrs	r3, r2
 802a868:	697a      	ldr	r2, [r7, #20]
 802a86a:	4313      	orrs	r3, r2
 802a86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a86e:	68fb      	ldr	r3, [r7, #12]
 802a870:	697a      	ldr	r2, [r7, #20]
 802a872:	609a      	str	r2, [r3, #8]
}
 802a874:	bf00      	nop
 802a876:	371c      	adds	r7, #28
 802a878:	46bd      	mov	sp, r7
 802a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a87e:	4770      	bx	lr

0802a880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a880:	b480      	push	{r7}
 802a882:	b087      	sub	sp, #28
 802a884:	af00      	add	r7, sp, #0
 802a886:	60f8      	str	r0, [r7, #12]
 802a888:	60b9      	str	r1, [r7, #8]
 802a88a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a88c:	68bb      	ldr	r3, [r7, #8]
 802a88e:	f003 031f 	and.w	r3, r3, #31
 802a892:	2201      	movs	r2, #1
 802a894:	fa02 f303 	lsl.w	r3, r2, r3
 802a898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a89a:	68fb      	ldr	r3, [r7, #12]
 802a89c:	6a1a      	ldr	r2, [r3, #32]
 802a89e:	697b      	ldr	r3, [r7, #20]
 802a8a0:	43db      	mvns	r3, r3
 802a8a2:	401a      	ands	r2, r3
 802a8a4:	68fb      	ldr	r3, [r7, #12]
 802a8a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a8a8:	68fb      	ldr	r3, [r7, #12]
 802a8aa:	6a1a      	ldr	r2, [r3, #32]
 802a8ac:	68bb      	ldr	r3, [r7, #8]
 802a8ae:	f003 031f 	and.w	r3, r3, #31
 802a8b2:	6879      	ldr	r1, [r7, #4]
 802a8b4:	fa01 f303 	lsl.w	r3, r1, r3
 802a8b8:	431a      	orrs	r2, r3
 802a8ba:	68fb      	ldr	r3, [r7, #12]
 802a8bc:	621a      	str	r2, [r3, #32]
}
 802a8be:	bf00      	nop
 802a8c0:	371c      	adds	r7, #28
 802a8c2:	46bd      	mov	sp, r7
 802a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8c8:	4770      	bx	lr
	...

0802a8cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a8cc:	b480      	push	{r7}
 802a8ce:	b085      	sub	sp, #20
 802a8d0:	af00      	add	r7, sp, #0
 802a8d2:	6078      	str	r0, [r7, #4]
 802a8d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a8d6:	687b      	ldr	r3, [r7, #4]
 802a8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a8dc:	2b01      	cmp	r3, #1
 802a8de:	d101      	bne.n	802a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a8e0:	2302      	movs	r3, #2
 802a8e2:	e05a      	b.n	802a99a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a8e4:	687b      	ldr	r3, [r7, #4]
 802a8e6:	2201      	movs	r2, #1
 802a8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a8ec:	687b      	ldr	r3, [r7, #4]
 802a8ee:	2202      	movs	r2, #2
 802a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a8f4:	687b      	ldr	r3, [r7, #4]
 802a8f6:	681b      	ldr	r3, [r3, #0]
 802a8f8:	685b      	ldr	r3, [r3, #4]
 802a8fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a8fc:	687b      	ldr	r3, [r7, #4]
 802a8fe:	681b      	ldr	r3, [r3, #0]
 802a900:	689b      	ldr	r3, [r3, #8]
 802a902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a904:	68fb      	ldr	r3, [r7, #12]
 802a906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a90a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a90c:	683b      	ldr	r3, [r7, #0]
 802a90e:	681b      	ldr	r3, [r3, #0]
 802a910:	68fa      	ldr	r2, [r7, #12]
 802a912:	4313      	orrs	r3, r2
 802a914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a916:	687b      	ldr	r3, [r7, #4]
 802a918:	681b      	ldr	r3, [r3, #0]
 802a91a:	68fa      	ldr	r2, [r7, #12]
 802a91c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a91e:	687b      	ldr	r3, [r7, #4]
 802a920:	681b      	ldr	r3, [r3, #0]
 802a922:	4a21      	ldr	r2, [pc, #132]	; (802a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a924:	4293      	cmp	r3, r2
 802a926:	d022      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a928:	687b      	ldr	r3, [r7, #4]
 802a92a:	681b      	ldr	r3, [r3, #0]
 802a92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a930:	d01d      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a932:	687b      	ldr	r3, [r7, #4]
 802a934:	681b      	ldr	r3, [r3, #0]
 802a936:	4a1d      	ldr	r2, [pc, #116]	; (802a9ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a938:	4293      	cmp	r3, r2
 802a93a:	d018      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a93c:	687b      	ldr	r3, [r7, #4]
 802a93e:	681b      	ldr	r3, [r3, #0]
 802a940:	4a1b      	ldr	r2, [pc, #108]	; (802a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a942:	4293      	cmp	r3, r2
 802a944:	d013      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a946:	687b      	ldr	r3, [r7, #4]
 802a948:	681b      	ldr	r3, [r3, #0]
 802a94a:	4a1a      	ldr	r2, [pc, #104]	; (802a9b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a94c:	4293      	cmp	r3, r2
 802a94e:	d00e      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a950:	687b      	ldr	r3, [r7, #4]
 802a952:	681b      	ldr	r3, [r3, #0]
 802a954:	4a18      	ldr	r2, [pc, #96]	; (802a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a956:	4293      	cmp	r3, r2
 802a958:	d009      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a95a:	687b      	ldr	r3, [r7, #4]
 802a95c:	681b      	ldr	r3, [r3, #0]
 802a95e:	4a17      	ldr	r2, [pc, #92]	; (802a9bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a960:	4293      	cmp	r3, r2
 802a962:	d004      	beq.n	802a96e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a964:	687b      	ldr	r3, [r7, #4]
 802a966:	681b      	ldr	r3, [r3, #0]
 802a968:	4a15      	ldr	r2, [pc, #84]	; (802a9c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a96a:	4293      	cmp	r3, r2
 802a96c:	d10c      	bne.n	802a988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a96e:	68bb      	ldr	r3, [r7, #8]
 802a970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a976:	683b      	ldr	r3, [r7, #0]
 802a978:	685b      	ldr	r3, [r3, #4]
 802a97a:	68ba      	ldr	r2, [r7, #8]
 802a97c:	4313      	orrs	r3, r2
 802a97e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a980:	687b      	ldr	r3, [r7, #4]
 802a982:	681b      	ldr	r3, [r3, #0]
 802a984:	68ba      	ldr	r2, [r7, #8]
 802a986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a988:	687b      	ldr	r3, [r7, #4]
 802a98a:	2201      	movs	r2, #1
 802a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a990:	687b      	ldr	r3, [r7, #4]
 802a992:	2200      	movs	r2, #0
 802a994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a998:	2300      	movs	r3, #0
}
 802a99a:	4618      	mov	r0, r3
 802a99c:	3714      	adds	r7, #20
 802a99e:	46bd      	mov	sp, r7
 802a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9a4:	4770      	bx	lr
 802a9a6:	bf00      	nop
 802a9a8:	40010000 	.word	0x40010000
 802a9ac:	40000400 	.word	0x40000400
 802a9b0:	40000800 	.word	0x40000800
 802a9b4:	40000c00 	.word	0x40000c00
 802a9b8:	40010400 	.word	0x40010400
 802a9bc:	40014000 	.word	0x40014000
 802a9c0:	40001800 	.word	0x40001800

0802a9c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a9c4:	b480      	push	{r7}
 802a9c6:	b083      	sub	sp, #12
 802a9c8:	af00      	add	r7, sp, #0
 802a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a9cc:	bf00      	nop
 802a9ce:	370c      	adds	r7, #12
 802a9d0:	46bd      	mov	sp, r7
 802a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9d6:	4770      	bx	lr

0802a9d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a9d8:	b480      	push	{r7}
 802a9da:	b083      	sub	sp, #12
 802a9dc:	af00      	add	r7, sp, #0
 802a9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a9e0:	bf00      	nop
 802a9e2:	370c      	adds	r7, #12
 802a9e4:	46bd      	mov	sp, r7
 802a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9ea:	4770      	bx	lr

0802a9ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802a9ec:	b580      	push	{r7, lr}
 802a9ee:	b082      	sub	sp, #8
 802a9f0:	af00      	add	r7, sp, #0
 802a9f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802a9f4:	687b      	ldr	r3, [r7, #4]
 802a9f6:	2b00      	cmp	r3, #0
 802a9f8:	d101      	bne.n	802a9fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802a9fa:	2301      	movs	r3, #1
 802a9fc:	e03f      	b.n	802aa7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802a9fe:	687b      	ldr	r3, [r7, #4]
 802aa00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802aa04:	b2db      	uxtb	r3, r3
 802aa06:	2b00      	cmp	r3, #0
 802aa08:	d106      	bne.n	802aa18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802aa0a:	687b      	ldr	r3, [r7, #4]
 802aa0c:	2200      	movs	r2, #0
 802aa0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802aa12:	6878      	ldr	r0, [r7, #4]
 802aa14:	f7f8 fbc6 	bl	80231a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802aa18:	687b      	ldr	r3, [r7, #4]
 802aa1a:	2224      	movs	r2, #36	; 0x24
 802aa1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802aa20:	687b      	ldr	r3, [r7, #4]
 802aa22:	681b      	ldr	r3, [r3, #0]
 802aa24:	68da      	ldr	r2, [r3, #12]
 802aa26:	687b      	ldr	r3, [r7, #4]
 802aa28:	681b      	ldr	r3, [r3, #0]
 802aa2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802aa2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802aa30:	6878      	ldr	r0, [r7, #4]
 802aa32:	f000 fc1d 	bl	802b270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802aa36:	687b      	ldr	r3, [r7, #4]
 802aa38:	681b      	ldr	r3, [r3, #0]
 802aa3a:	691a      	ldr	r2, [r3, #16]
 802aa3c:	687b      	ldr	r3, [r7, #4]
 802aa3e:	681b      	ldr	r3, [r3, #0]
 802aa40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802aa44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802aa46:	687b      	ldr	r3, [r7, #4]
 802aa48:	681b      	ldr	r3, [r3, #0]
 802aa4a:	695a      	ldr	r2, [r3, #20]
 802aa4c:	687b      	ldr	r3, [r7, #4]
 802aa4e:	681b      	ldr	r3, [r3, #0]
 802aa50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802aa54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802aa56:	687b      	ldr	r3, [r7, #4]
 802aa58:	681b      	ldr	r3, [r3, #0]
 802aa5a:	68da      	ldr	r2, [r3, #12]
 802aa5c:	687b      	ldr	r3, [r7, #4]
 802aa5e:	681b      	ldr	r3, [r3, #0]
 802aa60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802aa64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802aa66:	687b      	ldr	r3, [r7, #4]
 802aa68:	2200      	movs	r2, #0
 802aa6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 802aa6c:	687b      	ldr	r3, [r7, #4]
 802aa6e:	2220      	movs	r2, #32
 802aa70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 802aa74:	687b      	ldr	r3, [r7, #4]
 802aa76:	2220      	movs	r2, #32
 802aa78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 802aa7c:	2300      	movs	r3, #0
}
 802aa7e:	4618      	mov	r0, r3
 802aa80:	3708      	adds	r7, #8
 802aa82:	46bd      	mov	sp, r7
 802aa84:	bd80      	pop	{r7, pc}

0802aa86 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 802aa86:	b580      	push	{r7, lr}
 802aa88:	b082      	sub	sp, #8
 802aa8a:	af00      	add	r7, sp, #0
 802aa8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802aa8e:	687b      	ldr	r3, [r7, #4]
 802aa90:	2b00      	cmp	r3, #0
 802aa92:	d101      	bne.n	802aa98 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 802aa94:	2301      	movs	r3, #1
 802aa96:	e01e      	b.n	802aad6 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 802aa98:	687b      	ldr	r3, [r7, #4]
 802aa9a:	2224      	movs	r2, #36	; 0x24
 802aa9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 802aaa0:	687b      	ldr	r3, [r7, #4]
 802aaa2:	681b      	ldr	r3, [r3, #0]
 802aaa4:	68da      	ldr	r2, [r3, #12]
 802aaa6:	687b      	ldr	r3, [r7, #4]
 802aaa8:	681b      	ldr	r3, [r3, #0]
 802aaaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802aaae:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 802aab0:	6878      	ldr	r0, [r7, #4]
 802aab2:	f7f8 fc05 	bl	80232c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802aab6:	687b      	ldr	r3, [r7, #4]
 802aab8:	2200      	movs	r2, #0
 802aaba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 802aabc:	687b      	ldr	r3, [r7, #4]
 802aabe:	2200      	movs	r2, #0
 802aac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 802aac4:	687b      	ldr	r3, [r7, #4]
 802aac6:	2200      	movs	r2, #0
 802aac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 802aacc:	687b      	ldr	r3, [r7, #4]
 802aace:	2200      	movs	r2, #0
 802aad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 802aad4:	2300      	movs	r3, #0
}
 802aad6:	4618      	mov	r0, r3
 802aad8:	3708      	adds	r7, #8
 802aada:	46bd      	mov	sp, r7
 802aadc:	bd80      	pop	{r7, pc}

0802aade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802aade:	b580      	push	{r7, lr}
 802aae0:	b088      	sub	sp, #32
 802aae2:	af02      	add	r7, sp, #8
 802aae4:	60f8      	str	r0, [r7, #12]
 802aae6:	60b9      	str	r1, [r7, #8]
 802aae8:	603b      	str	r3, [r7, #0]
 802aaea:	4613      	mov	r3, r2
 802aaec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 802aaee:	2300      	movs	r3, #0
 802aaf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802aaf2:	68fb      	ldr	r3, [r7, #12]
 802aaf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802aaf8:	b2db      	uxtb	r3, r3
 802aafa:	2b20      	cmp	r3, #32
 802aafc:	f040 8083 	bne.w	802ac06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 802ab00:	68bb      	ldr	r3, [r7, #8]
 802ab02:	2b00      	cmp	r3, #0
 802ab04:	d002      	beq.n	802ab0c <HAL_UART_Transmit+0x2e>
 802ab06:	88fb      	ldrh	r3, [r7, #6]
 802ab08:	2b00      	cmp	r3, #0
 802ab0a:	d101      	bne.n	802ab10 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 802ab0c:	2301      	movs	r3, #1
 802ab0e:	e07b      	b.n	802ac08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802ab10:	68fb      	ldr	r3, [r7, #12]
 802ab12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802ab16:	2b01      	cmp	r3, #1
 802ab18:	d101      	bne.n	802ab1e <HAL_UART_Transmit+0x40>
 802ab1a:	2302      	movs	r3, #2
 802ab1c:	e074      	b.n	802ac08 <HAL_UART_Transmit+0x12a>
 802ab1e:	68fb      	ldr	r3, [r7, #12]
 802ab20:	2201      	movs	r2, #1
 802ab22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ab26:	68fb      	ldr	r3, [r7, #12]
 802ab28:	2200      	movs	r2, #0
 802ab2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802ab2c:	68fb      	ldr	r3, [r7, #12]
 802ab2e:	2221      	movs	r2, #33	; 0x21
 802ab30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 802ab34:	f7f8 fc5c 	bl	80233f0 <HAL_GetTick>
 802ab38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802ab3a:	68fb      	ldr	r3, [r7, #12]
 802ab3c:	88fa      	ldrh	r2, [r7, #6]
 802ab3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802ab40:	68fb      	ldr	r3, [r7, #12]
 802ab42:	88fa      	ldrh	r2, [r7, #6]
 802ab44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802ab46:	68fb      	ldr	r3, [r7, #12]
 802ab48:	2200      	movs	r2, #0
 802ab4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 802ab4e:	e042      	b.n	802abd6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 802ab50:	68fb      	ldr	r3, [r7, #12]
 802ab52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802ab54:	b29b      	uxth	r3, r3
 802ab56:	3b01      	subs	r3, #1
 802ab58:	b29a      	uxth	r2, r3
 802ab5a:	68fb      	ldr	r3, [r7, #12]
 802ab5c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802ab5e:	68fb      	ldr	r3, [r7, #12]
 802ab60:	689b      	ldr	r3, [r3, #8]
 802ab62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802ab66:	d122      	bne.n	802abae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802ab68:	683b      	ldr	r3, [r7, #0]
 802ab6a:	9300      	str	r3, [sp, #0]
 802ab6c:	697b      	ldr	r3, [r7, #20]
 802ab6e:	2200      	movs	r2, #0
 802ab70:	2180      	movs	r1, #128	; 0x80
 802ab72:	68f8      	ldr	r0, [r7, #12]
 802ab74:	f000 fa10 	bl	802af98 <UART_WaitOnFlagUntilTimeout>
 802ab78:	4603      	mov	r3, r0
 802ab7a:	2b00      	cmp	r3, #0
 802ab7c:	d001      	beq.n	802ab82 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 802ab7e:	2303      	movs	r3, #3
 802ab80:	e042      	b.n	802ac08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 802ab82:	68bb      	ldr	r3, [r7, #8]
 802ab84:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 802ab86:	693b      	ldr	r3, [r7, #16]
 802ab88:	881b      	ldrh	r3, [r3, #0]
 802ab8a:	461a      	mov	r2, r3
 802ab8c:	68fb      	ldr	r3, [r7, #12]
 802ab8e:	681b      	ldr	r3, [r3, #0]
 802ab90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802ab94:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 802ab96:	68fb      	ldr	r3, [r7, #12]
 802ab98:	691b      	ldr	r3, [r3, #16]
 802ab9a:	2b00      	cmp	r3, #0
 802ab9c:	d103      	bne.n	802aba6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 802ab9e:	68bb      	ldr	r3, [r7, #8]
 802aba0:	3302      	adds	r3, #2
 802aba2:	60bb      	str	r3, [r7, #8]
 802aba4:	e017      	b.n	802abd6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 802aba6:	68bb      	ldr	r3, [r7, #8]
 802aba8:	3301      	adds	r3, #1
 802abaa:	60bb      	str	r3, [r7, #8]
 802abac:	e013      	b.n	802abd6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802abae:	683b      	ldr	r3, [r7, #0]
 802abb0:	9300      	str	r3, [sp, #0]
 802abb2:	697b      	ldr	r3, [r7, #20]
 802abb4:	2200      	movs	r2, #0
 802abb6:	2180      	movs	r1, #128	; 0x80
 802abb8:	68f8      	ldr	r0, [r7, #12]
 802abba:	f000 f9ed 	bl	802af98 <UART_WaitOnFlagUntilTimeout>
 802abbe:	4603      	mov	r3, r0
 802abc0:	2b00      	cmp	r3, #0
 802abc2:	d001      	beq.n	802abc8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 802abc4:	2303      	movs	r3, #3
 802abc6:	e01f      	b.n	802ac08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 802abc8:	68bb      	ldr	r3, [r7, #8]
 802abca:	1c5a      	adds	r2, r3, #1
 802abcc:	60ba      	str	r2, [r7, #8]
 802abce:	781a      	ldrb	r2, [r3, #0]
 802abd0:	68fb      	ldr	r3, [r7, #12]
 802abd2:	681b      	ldr	r3, [r3, #0]
 802abd4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 802abd6:	68fb      	ldr	r3, [r7, #12]
 802abd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802abda:	b29b      	uxth	r3, r3
 802abdc:	2b00      	cmp	r3, #0
 802abde:	d1b7      	bne.n	802ab50 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802abe0:	683b      	ldr	r3, [r7, #0]
 802abe2:	9300      	str	r3, [sp, #0]
 802abe4:	697b      	ldr	r3, [r7, #20]
 802abe6:	2200      	movs	r2, #0
 802abe8:	2140      	movs	r1, #64	; 0x40
 802abea:	68f8      	ldr	r0, [r7, #12]
 802abec:	f000 f9d4 	bl	802af98 <UART_WaitOnFlagUntilTimeout>
 802abf0:	4603      	mov	r3, r0
 802abf2:	2b00      	cmp	r3, #0
 802abf4:	d001      	beq.n	802abfa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 802abf6:	2303      	movs	r3, #3
 802abf8:	e006      	b.n	802ac08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802abfa:	68fb      	ldr	r3, [r7, #12]
 802abfc:	2220      	movs	r2, #32
 802abfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 802ac02:	2300      	movs	r3, #0
 802ac04:	e000      	b.n	802ac08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 802ac06:	2302      	movs	r3, #2
  }
}
 802ac08:	4618      	mov	r0, r3
 802ac0a:	3718      	adds	r7, #24
 802ac0c:	46bd      	mov	sp, r7
 802ac0e:	bd80      	pop	{r7, pc}

0802ac10 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802ac10:	b580      	push	{r7, lr}
 802ac12:	b088      	sub	sp, #32
 802ac14:	af02      	add	r7, sp, #8
 802ac16:	60f8      	str	r0, [r7, #12]
 802ac18:	60b9      	str	r1, [r7, #8]
 802ac1a:	603b      	str	r3, [r7, #0]
 802ac1c:	4613      	mov	r3, r2
 802ac1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 802ac20:	2300      	movs	r3, #0
 802ac22:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802ac24:	68fb      	ldr	r3, [r7, #12]
 802ac26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802ac2a:	b2db      	uxtb	r3, r3
 802ac2c:	2b20      	cmp	r3, #32
 802ac2e:	f040 8090 	bne.w	802ad52 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 802ac32:	68bb      	ldr	r3, [r7, #8]
 802ac34:	2b00      	cmp	r3, #0
 802ac36:	d002      	beq.n	802ac3e <HAL_UART_Receive+0x2e>
 802ac38:	88fb      	ldrh	r3, [r7, #6]
 802ac3a:	2b00      	cmp	r3, #0
 802ac3c:	d101      	bne.n	802ac42 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 802ac3e:	2301      	movs	r3, #1
 802ac40:	e088      	b.n	802ad54 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802ac42:	68fb      	ldr	r3, [r7, #12]
 802ac44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802ac48:	2b01      	cmp	r3, #1
 802ac4a:	d101      	bne.n	802ac50 <HAL_UART_Receive+0x40>
 802ac4c:	2302      	movs	r3, #2
 802ac4e:	e081      	b.n	802ad54 <HAL_UART_Receive+0x144>
 802ac50:	68fb      	ldr	r3, [r7, #12]
 802ac52:	2201      	movs	r2, #1
 802ac54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802ac58:	68fb      	ldr	r3, [r7, #12]
 802ac5a:	2200      	movs	r2, #0
 802ac5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802ac5e:	68fb      	ldr	r3, [r7, #12]
 802ac60:	2222      	movs	r2, #34	; 0x22
 802ac62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 802ac66:	f7f8 fbc3 	bl	80233f0 <HAL_GetTick>
 802ac6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 802ac6c:	68fb      	ldr	r3, [r7, #12]
 802ac6e:	88fa      	ldrh	r2, [r7, #6]
 802ac70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 802ac72:	68fb      	ldr	r3, [r7, #12]
 802ac74:	88fa      	ldrh	r2, [r7, #6]
 802ac76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802ac78:	68fb      	ldr	r3, [r7, #12]
 802ac7a:	2200      	movs	r2, #0
 802ac7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 802ac80:	e05c      	b.n	802ad3c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 802ac82:	68fb      	ldr	r3, [r7, #12]
 802ac84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802ac86:	b29b      	uxth	r3, r3
 802ac88:	3b01      	subs	r3, #1
 802ac8a:	b29a      	uxth	r2, r3
 802ac8c:	68fb      	ldr	r3, [r7, #12]
 802ac8e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802ac90:	68fb      	ldr	r3, [r7, #12]
 802ac92:	689b      	ldr	r3, [r3, #8]
 802ac94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802ac98:	d12b      	bne.n	802acf2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 802ac9a:	683b      	ldr	r3, [r7, #0]
 802ac9c:	9300      	str	r3, [sp, #0]
 802ac9e:	697b      	ldr	r3, [r7, #20]
 802aca0:	2200      	movs	r2, #0
 802aca2:	2120      	movs	r1, #32
 802aca4:	68f8      	ldr	r0, [r7, #12]
 802aca6:	f000 f977 	bl	802af98 <UART_WaitOnFlagUntilTimeout>
 802acaa:	4603      	mov	r3, r0
 802acac:	2b00      	cmp	r3, #0
 802acae:	d001      	beq.n	802acb4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 802acb0:	2303      	movs	r3, #3
 802acb2:	e04f      	b.n	802ad54 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 802acb4:	68bb      	ldr	r3, [r7, #8]
 802acb6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 802acb8:	68fb      	ldr	r3, [r7, #12]
 802acba:	691b      	ldr	r3, [r3, #16]
 802acbc:	2b00      	cmp	r3, #0
 802acbe:	d10c      	bne.n	802acda <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802acc0:	68fb      	ldr	r3, [r7, #12]
 802acc2:	681b      	ldr	r3, [r3, #0]
 802acc4:	685b      	ldr	r3, [r3, #4]
 802acc6:	b29b      	uxth	r3, r3
 802acc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802accc:	b29a      	uxth	r2, r3
 802acce:	693b      	ldr	r3, [r7, #16]
 802acd0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 802acd2:	68bb      	ldr	r3, [r7, #8]
 802acd4:	3302      	adds	r3, #2
 802acd6:	60bb      	str	r3, [r7, #8]
 802acd8:	e030      	b.n	802ad3c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802acda:	68fb      	ldr	r3, [r7, #12]
 802acdc:	681b      	ldr	r3, [r3, #0]
 802acde:	685b      	ldr	r3, [r3, #4]
 802ace0:	b29b      	uxth	r3, r3
 802ace2:	b2db      	uxtb	r3, r3
 802ace4:	b29a      	uxth	r2, r3
 802ace6:	693b      	ldr	r3, [r7, #16]
 802ace8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 802acea:	68bb      	ldr	r3, [r7, #8]
 802acec:	3301      	adds	r3, #1
 802acee:	60bb      	str	r3, [r7, #8]
 802acf0:	e024      	b.n	802ad3c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 802acf2:	683b      	ldr	r3, [r7, #0]
 802acf4:	9300      	str	r3, [sp, #0]
 802acf6:	697b      	ldr	r3, [r7, #20]
 802acf8:	2200      	movs	r2, #0
 802acfa:	2120      	movs	r1, #32
 802acfc:	68f8      	ldr	r0, [r7, #12]
 802acfe:	f000 f94b 	bl	802af98 <UART_WaitOnFlagUntilTimeout>
 802ad02:	4603      	mov	r3, r0
 802ad04:	2b00      	cmp	r3, #0
 802ad06:	d001      	beq.n	802ad0c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 802ad08:	2303      	movs	r3, #3
 802ad0a:	e023      	b.n	802ad54 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 802ad0c:	68fb      	ldr	r3, [r7, #12]
 802ad0e:	691b      	ldr	r3, [r3, #16]
 802ad10:	2b00      	cmp	r3, #0
 802ad12:	d108      	bne.n	802ad26 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802ad14:	68fb      	ldr	r3, [r7, #12]
 802ad16:	681b      	ldr	r3, [r3, #0]
 802ad18:	6859      	ldr	r1, [r3, #4]
 802ad1a:	68bb      	ldr	r3, [r7, #8]
 802ad1c:	1c5a      	adds	r2, r3, #1
 802ad1e:	60ba      	str	r2, [r7, #8]
 802ad20:	b2ca      	uxtb	r2, r1
 802ad22:	701a      	strb	r2, [r3, #0]
 802ad24:	e00a      	b.n	802ad3c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802ad26:	68fb      	ldr	r3, [r7, #12]
 802ad28:	681b      	ldr	r3, [r3, #0]
 802ad2a:	685b      	ldr	r3, [r3, #4]
 802ad2c:	b2da      	uxtb	r2, r3
 802ad2e:	68bb      	ldr	r3, [r7, #8]
 802ad30:	1c59      	adds	r1, r3, #1
 802ad32:	60b9      	str	r1, [r7, #8]
 802ad34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802ad38:	b2d2      	uxtb	r2, r2
 802ad3a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 802ad3c:	68fb      	ldr	r3, [r7, #12]
 802ad3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802ad40:	b29b      	uxth	r3, r3
 802ad42:	2b00      	cmp	r3, #0
 802ad44:	d19d      	bne.n	802ac82 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802ad46:	68fb      	ldr	r3, [r7, #12]
 802ad48:	2220      	movs	r2, #32
 802ad4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 802ad4e:	2300      	movs	r3, #0
 802ad50:	e000      	b.n	802ad54 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 802ad52:	2302      	movs	r3, #2
  }
}
 802ad54:	4618      	mov	r0, r3
 802ad56:	3718      	adds	r7, #24
 802ad58:	46bd      	mov	sp, r7
 802ad5a:	bd80      	pop	{r7, pc}

0802ad5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802ad5c:	b580      	push	{r7, lr}
 802ad5e:	b088      	sub	sp, #32
 802ad60:	af00      	add	r7, sp, #0
 802ad62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	681b      	ldr	r3, [r3, #0]
 802ad68:	681b      	ldr	r3, [r3, #0]
 802ad6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802ad6c:	687b      	ldr	r3, [r7, #4]
 802ad6e:	681b      	ldr	r3, [r3, #0]
 802ad70:	68db      	ldr	r3, [r3, #12]
 802ad72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802ad74:	687b      	ldr	r3, [r7, #4]
 802ad76:	681b      	ldr	r3, [r3, #0]
 802ad78:	695b      	ldr	r3, [r3, #20]
 802ad7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 802ad7c:	2300      	movs	r3, #0
 802ad7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 802ad80:	2300      	movs	r3, #0
 802ad82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802ad84:	69fb      	ldr	r3, [r7, #28]
 802ad86:	f003 030f 	and.w	r3, r3, #15
 802ad8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 802ad8c:	693b      	ldr	r3, [r7, #16]
 802ad8e:	2b00      	cmp	r3, #0
 802ad90:	d10d      	bne.n	802adae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802ad92:	69fb      	ldr	r3, [r7, #28]
 802ad94:	f003 0320 	and.w	r3, r3, #32
 802ad98:	2b00      	cmp	r3, #0
 802ad9a:	d008      	beq.n	802adae <HAL_UART_IRQHandler+0x52>
 802ad9c:	69bb      	ldr	r3, [r7, #24]
 802ad9e:	f003 0320 	and.w	r3, r3, #32
 802ada2:	2b00      	cmp	r3, #0
 802ada4:	d003      	beq.n	802adae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 802ada6:	6878      	ldr	r0, [r7, #4]
 802ada8:	f000 f9e0 	bl	802b16c <UART_Receive_IT>
      return;
 802adac:	e0d1      	b.n	802af52 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802adae:	693b      	ldr	r3, [r7, #16]
 802adb0:	2b00      	cmp	r3, #0
 802adb2:	f000 80b0 	beq.w	802af16 <HAL_UART_IRQHandler+0x1ba>
 802adb6:	697b      	ldr	r3, [r7, #20]
 802adb8:	f003 0301 	and.w	r3, r3, #1
 802adbc:	2b00      	cmp	r3, #0
 802adbe:	d105      	bne.n	802adcc <HAL_UART_IRQHandler+0x70>
 802adc0:	69bb      	ldr	r3, [r7, #24]
 802adc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802adc6:	2b00      	cmp	r3, #0
 802adc8:	f000 80a5 	beq.w	802af16 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802adcc:	69fb      	ldr	r3, [r7, #28]
 802adce:	f003 0301 	and.w	r3, r3, #1
 802add2:	2b00      	cmp	r3, #0
 802add4:	d00a      	beq.n	802adec <HAL_UART_IRQHandler+0x90>
 802add6:	69bb      	ldr	r3, [r7, #24]
 802add8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802addc:	2b00      	cmp	r3, #0
 802adde:	d005      	beq.n	802adec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802ade0:	687b      	ldr	r3, [r7, #4]
 802ade2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ade4:	f043 0201 	orr.w	r2, r3, #1
 802ade8:	687b      	ldr	r3, [r7, #4]
 802adea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802adec:	69fb      	ldr	r3, [r7, #28]
 802adee:	f003 0304 	and.w	r3, r3, #4
 802adf2:	2b00      	cmp	r3, #0
 802adf4:	d00a      	beq.n	802ae0c <HAL_UART_IRQHandler+0xb0>
 802adf6:	697b      	ldr	r3, [r7, #20]
 802adf8:	f003 0301 	and.w	r3, r3, #1
 802adfc:	2b00      	cmp	r3, #0
 802adfe:	d005      	beq.n	802ae0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802ae00:	687b      	ldr	r3, [r7, #4]
 802ae02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae04:	f043 0202 	orr.w	r2, r3, #2
 802ae08:	687b      	ldr	r3, [r7, #4]
 802ae0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802ae0c:	69fb      	ldr	r3, [r7, #28]
 802ae0e:	f003 0302 	and.w	r3, r3, #2
 802ae12:	2b00      	cmp	r3, #0
 802ae14:	d00a      	beq.n	802ae2c <HAL_UART_IRQHandler+0xd0>
 802ae16:	697b      	ldr	r3, [r7, #20]
 802ae18:	f003 0301 	and.w	r3, r3, #1
 802ae1c:	2b00      	cmp	r3, #0
 802ae1e:	d005      	beq.n	802ae2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae24:	f043 0204 	orr.w	r2, r3, #4
 802ae28:	687b      	ldr	r3, [r7, #4]
 802ae2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 802ae2c:	69fb      	ldr	r3, [r7, #28]
 802ae2e:	f003 0308 	and.w	r3, r3, #8
 802ae32:	2b00      	cmp	r3, #0
 802ae34:	d00f      	beq.n	802ae56 <HAL_UART_IRQHandler+0xfa>
 802ae36:	69bb      	ldr	r3, [r7, #24]
 802ae38:	f003 0320 	and.w	r3, r3, #32
 802ae3c:	2b00      	cmp	r3, #0
 802ae3e:	d104      	bne.n	802ae4a <HAL_UART_IRQHandler+0xee>
 802ae40:	697b      	ldr	r3, [r7, #20]
 802ae42:	f003 0301 	and.w	r3, r3, #1
 802ae46:	2b00      	cmp	r3, #0
 802ae48:	d005      	beq.n	802ae56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802ae4a:	687b      	ldr	r3, [r7, #4]
 802ae4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae4e:	f043 0208 	orr.w	r2, r3, #8
 802ae52:	687b      	ldr	r3, [r7, #4]
 802ae54:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802ae56:	687b      	ldr	r3, [r7, #4]
 802ae58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae5a:	2b00      	cmp	r3, #0
 802ae5c:	d078      	beq.n	802af50 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802ae5e:	69fb      	ldr	r3, [r7, #28]
 802ae60:	f003 0320 	and.w	r3, r3, #32
 802ae64:	2b00      	cmp	r3, #0
 802ae66:	d007      	beq.n	802ae78 <HAL_UART_IRQHandler+0x11c>
 802ae68:	69bb      	ldr	r3, [r7, #24]
 802ae6a:	f003 0320 	and.w	r3, r3, #32
 802ae6e:	2b00      	cmp	r3, #0
 802ae70:	d002      	beq.n	802ae78 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 802ae72:	6878      	ldr	r0, [r7, #4]
 802ae74:	f000 f97a 	bl	802b16c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802ae78:	687b      	ldr	r3, [r7, #4]
 802ae7a:	681b      	ldr	r3, [r3, #0]
 802ae7c:	695b      	ldr	r3, [r3, #20]
 802ae7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ae82:	2b40      	cmp	r3, #64	; 0x40
 802ae84:	bf0c      	ite	eq
 802ae86:	2301      	moveq	r3, #1
 802ae88:	2300      	movne	r3, #0
 802ae8a:	b2db      	uxtb	r3, r3
 802ae8c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802ae8e:	687b      	ldr	r3, [r7, #4]
 802ae90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae92:	f003 0308 	and.w	r3, r3, #8
 802ae96:	2b00      	cmp	r3, #0
 802ae98:	d102      	bne.n	802aea0 <HAL_UART_IRQHandler+0x144>
 802ae9a:	68fb      	ldr	r3, [r7, #12]
 802ae9c:	2b00      	cmp	r3, #0
 802ae9e:	d031      	beq.n	802af04 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802aea0:	6878      	ldr	r0, [r7, #4]
 802aea2:	f000 f8c3 	bl	802b02c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802aea6:	687b      	ldr	r3, [r7, #4]
 802aea8:	681b      	ldr	r3, [r3, #0]
 802aeaa:	695b      	ldr	r3, [r3, #20]
 802aeac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802aeb0:	2b40      	cmp	r3, #64	; 0x40
 802aeb2:	d123      	bne.n	802aefc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802aeb4:	687b      	ldr	r3, [r7, #4]
 802aeb6:	681b      	ldr	r3, [r3, #0]
 802aeb8:	695a      	ldr	r2, [r3, #20]
 802aeba:	687b      	ldr	r3, [r7, #4]
 802aebc:	681b      	ldr	r3, [r3, #0]
 802aebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802aec2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802aec4:	687b      	ldr	r3, [r7, #4]
 802aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802aec8:	2b00      	cmp	r3, #0
 802aeca:	d013      	beq.n	802aef4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802aecc:	687b      	ldr	r3, [r7, #4]
 802aece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802aed0:	4a21      	ldr	r2, [pc, #132]	; (802af58 <HAL_UART_IRQHandler+0x1fc>)
 802aed2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802aed4:	687b      	ldr	r3, [r7, #4]
 802aed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802aed8:	4618      	mov	r0, r3
 802aeda:	f7f8 fd49 	bl	8023970 <HAL_DMA_Abort_IT>
 802aede:	4603      	mov	r3, r0
 802aee0:	2b00      	cmp	r3, #0
 802aee2:	d016      	beq.n	802af12 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802aee4:	687b      	ldr	r3, [r7, #4]
 802aee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802aee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802aeea:	687a      	ldr	r2, [r7, #4]
 802aeec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802aeee:	4610      	mov	r0, r2
 802aef0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802aef2:	e00e      	b.n	802af12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802aef4:	6878      	ldr	r0, [r7, #4]
 802aef6:	f000 f845 	bl	802af84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802aefa:	e00a      	b.n	802af12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802aefc:	6878      	ldr	r0, [r7, #4]
 802aefe:	f000 f841 	bl	802af84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802af02:	e006      	b.n	802af12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802af04:	6878      	ldr	r0, [r7, #4]
 802af06:	f000 f83d 	bl	802af84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802af0a:	687b      	ldr	r3, [r7, #4]
 802af0c:	2200      	movs	r2, #0
 802af0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 802af10:	e01e      	b.n	802af50 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802af12:	bf00      	nop
    return;
 802af14:	e01c      	b.n	802af50 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802af16:	69fb      	ldr	r3, [r7, #28]
 802af18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802af1c:	2b00      	cmp	r3, #0
 802af1e:	d008      	beq.n	802af32 <HAL_UART_IRQHandler+0x1d6>
 802af20:	69bb      	ldr	r3, [r7, #24]
 802af22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802af26:	2b00      	cmp	r3, #0
 802af28:	d003      	beq.n	802af32 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 802af2a:	6878      	ldr	r0, [r7, #4]
 802af2c:	f000 f8b0 	bl	802b090 <UART_Transmit_IT>
    return;
 802af30:	e00f      	b.n	802af52 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802af32:	69fb      	ldr	r3, [r7, #28]
 802af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802af38:	2b00      	cmp	r3, #0
 802af3a:	d00a      	beq.n	802af52 <HAL_UART_IRQHandler+0x1f6>
 802af3c:	69bb      	ldr	r3, [r7, #24]
 802af3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802af42:	2b00      	cmp	r3, #0
 802af44:	d005      	beq.n	802af52 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 802af46:	6878      	ldr	r0, [r7, #4]
 802af48:	f000 f8f8 	bl	802b13c <UART_EndTransmit_IT>
    return;
 802af4c:	bf00      	nop
 802af4e:	e000      	b.n	802af52 <HAL_UART_IRQHandler+0x1f6>
    return;
 802af50:	bf00      	nop
  }
}
 802af52:	3720      	adds	r7, #32
 802af54:	46bd      	mov	sp, r7
 802af56:	bd80      	pop	{r7, pc}
 802af58:	0802b069 	.word	0x0802b069

0802af5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802af5c:	b480      	push	{r7}
 802af5e:	b083      	sub	sp, #12
 802af60:	af00      	add	r7, sp, #0
 802af62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802af64:	bf00      	nop
 802af66:	370c      	adds	r7, #12
 802af68:	46bd      	mov	sp, r7
 802af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af6e:	4770      	bx	lr

0802af70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802af70:	b480      	push	{r7}
 802af72:	b083      	sub	sp, #12
 802af74:	af00      	add	r7, sp, #0
 802af76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802af78:	bf00      	nop
 802af7a:	370c      	adds	r7, #12
 802af7c:	46bd      	mov	sp, r7
 802af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af82:	4770      	bx	lr

0802af84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802af84:	b480      	push	{r7}
 802af86:	b083      	sub	sp, #12
 802af88:	af00      	add	r7, sp, #0
 802af8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802af8c:	bf00      	nop
 802af8e:	370c      	adds	r7, #12
 802af90:	46bd      	mov	sp, r7
 802af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af96:	4770      	bx	lr

0802af98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 802af98:	b580      	push	{r7, lr}
 802af9a:	b084      	sub	sp, #16
 802af9c:	af00      	add	r7, sp, #0
 802af9e:	60f8      	str	r0, [r7, #12]
 802afa0:	60b9      	str	r1, [r7, #8]
 802afa2:	603b      	str	r3, [r7, #0]
 802afa4:	4613      	mov	r3, r2
 802afa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802afa8:	e02c      	b.n	802b004 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802afaa:	69bb      	ldr	r3, [r7, #24]
 802afac:	f1b3 3fff 	cmp.w	r3, #4294967295
 802afb0:	d028      	beq.n	802b004 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802afb2:	69bb      	ldr	r3, [r7, #24]
 802afb4:	2b00      	cmp	r3, #0
 802afb6:	d007      	beq.n	802afc8 <UART_WaitOnFlagUntilTimeout+0x30>
 802afb8:	f7f8 fa1a 	bl	80233f0 <HAL_GetTick>
 802afbc:	4602      	mov	r2, r0
 802afbe:	683b      	ldr	r3, [r7, #0]
 802afc0:	1ad3      	subs	r3, r2, r3
 802afc2:	69ba      	ldr	r2, [r7, #24]
 802afc4:	429a      	cmp	r2, r3
 802afc6:	d21d      	bcs.n	802b004 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802afc8:	68fb      	ldr	r3, [r7, #12]
 802afca:	681b      	ldr	r3, [r3, #0]
 802afcc:	68da      	ldr	r2, [r3, #12]
 802afce:	68fb      	ldr	r3, [r7, #12]
 802afd0:	681b      	ldr	r3, [r3, #0]
 802afd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802afd6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802afd8:	68fb      	ldr	r3, [r7, #12]
 802afda:	681b      	ldr	r3, [r3, #0]
 802afdc:	695a      	ldr	r2, [r3, #20]
 802afde:	68fb      	ldr	r3, [r7, #12]
 802afe0:	681b      	ldr	r3, [r3, #0]
 802afe2:	f022 0201 	bic.w	r2, r2, #1
 802afe6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 802afe8:	68fb      	ldr	r3, [r7, #12]
 802afea:	2220      	movs	r2, #32
 802afec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 802aff0:	68fb      	ldr	r3, [r7, #12]
 802aff2:	2220      	movs	r2, #32
 802aff4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802aff8:	68fb      	ldr	r3, [r7, #12]
 802affa:	2200      	movs	r2, #0
 802affc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 802b000:	2303      	movs	r3, #3
 802b002:	e00f      	b.n	802b024 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802b004:	68fb      	ldr	r3, [r7, #12]
 802b006:	681b      	ldr	r3, [r3, #0]
 802b008:	681a      	ldr	r2, [r3, #0]
 802b00a:	68bb      	ldr	r3, [r7, #8]
 802b00c:	4013      	ands	r3, r2
 802b00e:	68ba      	ldr	r2, [r7, #8]
 802b010:	429a      	cmp	r2, r3
 802b012:	bf0c      	ite	eq
 802b014:	2301      	moveq	r3, #1
 802b016:	2300      	movne	r3, #0
 802b018:	b2db      	uxtb	r3, r3
 802b01a:	461a      	mov	r2, r3
 802b01c:	79fb      	ldrb	r3, [r7, #7]
 802b01e:	429a      	cmp	r2, r3
 802b020:	d0c3      	beq.n	802afaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802b022:	2300      	movs	r3, #0
}
 802b024:	4618      	mov	r0, r3
 802b026:	3710      	adds	r7, #16
 802b028:	46bd      	mov	sp, r7
 802b02a:	bd80      	pop	{r7, pc}

0802b02c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802b02c:	b480      	push	{r7}
 802b02e:	b083      	sub	sp, #12
 802b030:	af00      	add	r7, sp, #0
 802b032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802b034:	687b      	ldr	r3, [r7, #4]
 802b036:	681b      	ldr	r3, [r3, #0]
 802b038:	68da      	ldr	r2, [r3, #12]
 802b03a:	687b      	ldr	r3, [r7, #4]
 802b03c:	681b      	ldr	r3, [r3, #0]
 802b03e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 802b042:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802b044:	687b      	ldr	r3, [r7, #4]
 802b046:	681b      	ldr	r3, [r3, #0]
 802b048:	695a      	ldr	r2, [r3, #20]
 802b04a:	687b      	ldr	r3, [r7, #4]
 802b04c:	681b      	ldr	r3, [r3, #0]
 802b04e:	f022 0201 	bic.w	r2, r2, #1
 802b052:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802b054:	687b      	ldr	r3, [r7, #4]
 802b056:	2220      	movs	r2, #32
 802b058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 802b05c:	bf00      	nop
 802b05e:	370c      	adds	r7, #12
 802b060:	46bd      	mov	sp, r7
 802b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b066:	4770      	bx	lr

0802b068 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b068:	b580      	push	{r7, lr}
 802b06a:	b084      	sub	sp, #16
 802b06c:	af00      	add	r7, sp, #0
 802b06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b070:	687b      	ldr	r3, [r7, #4]
 802b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802b076:	68fb      	ldr	r3, [r7, #12]
 802b078:	2200      	movs	r2, #0
 802b07a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802b07c:	68fb      	ldr	r3, [r7, #12]
 802b07e:	2200      	movs	r2, #0
 802b080:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802b082:	68f8      	ldr	r0, [r7, #12]
 802b084:	f7ff ff7e 	bl	802af84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802b088:	bf00      	nop
 802b08a:	3710      	adds	r7, #16
 802b08c:	46bd      	mov	sp, r7
 802b08e:	bd80      	pop	{r7, pc}

0802b090 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802b090:	b480      	push	{r7}
 802b092:	b085      	sub	sp, #20
 802b094:	af00      	add	r7, sp, #0
 802b096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802b098:	687b      	ldr	r3, [r7, #4]
 802b09a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802b09e:	b2db      	uxtb	r3, r3
 802b0a0:	2b21      	cmp	r3, #33	; 0x21
 802b0a2:	d144      	bne.n	802b12e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	689b      	ldr	r3, [r3, #8]
 802b0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b0ac:	d11a      	bne.n	802b0e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 802b0ae:	687b      	ldr	r3, [r7, #4]
 802b0b0:	6a1b      	ldr	r3, [r3, #32]
 802b0b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802b0b4:	68fb      	ldr	r3, [r7, #12]
 802b0b6:	881b      	ldrh	r3, [r3, #0]
 802b0b8:	461a      	mov	r2, r3
 802b0ba:	687b      	ldr	r3, [r7, #4]
 802b0bc:	681b      	ldr	r3, [r3, #0]
 802b0be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802b0c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 802b0c4:	687b      	ldr	r3, [r7, #4]
 802b0c6:	691b      	ldr	r3, [r3, #16]
 802b0c8:	2b00      	cmp	r3, #0
 802b0ca:	d105      	bne.n	802b0d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 802b0cc:	687b      	ldr	r3, [r7, #4]
 802b0ce:	6a1b      	ldr	r3, [r3, #32]
 802b0d0:	1c9a      	adds	r2, r3, #2
 802b0d2:	687b      	ldr	r3, [r7, #4]
 802b0d4:	621a      	str	r2, [r3, #32]
 802b0d6:	e00e      	b.n	802b0f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 802b0d8:	687b      	ldr	r3, [r7, #4]
 802b0da:	6a1b      	ldr	r3, [r3, #32]
 802b0dc:	1c5a      	adds	r2, r3, #1
 802b0de:	687b      	ldr	r3, [r7, #4]
 802b0e0:	621a      	str	r2, [r3, #32]
 802b0e2:	e008      	b.n	802b0f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802b0e4:	687b      	ldr	r3, [r7, #4]
 802b0e6:	6a1b      	ldr	r3, [r3, #32]
 802b0e8:	1c59      	adds	r1, r3, #1
 802b0ea:	687a      	ldr	r2, [r7, #4]
 802b0ec:	6211      	str	r1, [r2, #32]
 802b0ee:	781a      	ldrb	r2, [r3, #0]
 802b0f0:	687b      	ldr	r3, [r7, #4]
 802b0f2:	681b      	ldr	r3, [r3, #0]
 802b0f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802b0f6:	687b      	ldr	r3, [r7, #4]
 802b0f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802b0fa:	b29b      	uxth	r3, r3
 802b0fc:	3b01      	subs	r3, #1
 802b0fe:	b29b      	uxth	r3, r3
 802b100:	687a      	ldr	r2, [r7, #4]
 802b102:	4619      	mov	r1, r3
 802b104:	84d1      	strh	r1, [r2, #38]	; 0x26
 802b106:	2b00      	cmp	r3, #0
 802b108:	d10f      	bne.n	802b12a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802b10a:	687b      	ldr	r3, [r7, #4]
 802b10c:	681b      	ldr	r3, [r3, #0]
 802b10e:	68da      	ldr	r2, [r3, #12]
 802b110:	687b      	ldr	r3, [r7, #4]
 802b112:	681b      	ldr	r3, [r3, #0]
 802b114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802b118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802b11a:	687b      	ldr	r3, [r7, #4]
 802b11c:	681b      	ldr	r3, [r3, #0]
 802b11e:	68da      	ldr	r2, [r3, #12]
 802b120:	687b      	ldr	r3, [r7, #4]
 802b122:	681b      	ldr	r3, [r3, #0]
 802b124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802b12a:	2300      	movs	r3, #0
 802b12c:	e000      	b.n	802b130 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 802b12e:	2302      	movs	r3, #2
  }
}
 802b130:	4618      	mov	r0, r3
 802b132:	3714      	adds	r7, #20
 802b134:	46bd      	mov	sp, r7
 802b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b13a:	4770      	bx	lr

0802b13c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802b13c:	b580      	push	{r7, lr}
 802b13e:	b082      	sub	sp, #8
 802b140:	af00      	add	r7, sp, #0
 802b142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802b144:	687b      	ldr	r3, [r7, #4]
 802b146:	681b      	ldr	r3, [r3, #0]
 802b148:	68da      	ldr	r2, [r3, #12]
 802b14a:	687b      	ldr	r3, [r7, #4]
 802b14c:	681b      	ldr	r3, [r3, #0]
 802b14e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b152:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802b154:	687b      	ldr	r3, [r7, #4]
 802b156:	2220      	movs	r2, #32
 802b158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802b15c:	6878      	ldr	r0, [r7, #4]
 802b15e:	f7ff fefd 	bl	802af5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802b162:	2300      	movs	r3, #0
}
 802b164:	4618      	mov	r0, r3
 802b166:	3708      	adds	r7, #8
 802b168:	46bd      	mov	sp, r7
 802b16a:	bd80      	pop	{r7, pc}

0802b16c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802b16c:	b580      	push	{r7, lr}
 802b16e:	b084      	sub	sp, #16
 802b170:	af00      	add	r7, sp, #0
 802b172:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802b174:	687b      	ldr	r3, [r7, #4]
 802b176:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802b17a:	b2db      	uxtb	r3, r3
 802b17c:	2b22      	cmp	r3, #34	; 0x22
 802b17e:	d171      	bne.n	802b264 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802b180:	687b      	ldr	r3, [r7, #4]
 802b182:	689b      	ldr	r3, [r3, #8]
 802b184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b188:	d123      	bne.n	802b1d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 802b18a:	687b      	ldr	r3, [r7, #4]
 802b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b18e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 802b190:	687b      	ldr	r3, [r7, #4]
 802b192:	691b      	ldr	r3, [r3, #16]
 802b194:	2b00      	cmp	r3, #0
 802b196:	d10e      	bne.n	802b1b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802b198:	687b      	ldr	r3, [r7, #4]
 802b19a:	681b      	ldr	r3, [r3, #0]
 802b19c:	685b      	ldr	r3, [r3, #4]
 802b19e:	b29b      	uxth	r3, r3
 802b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802b1a4:	b29a      	uxth	r2, r3
 802b1a6:	68fb      	ldr	r3, [r7, #12]
 802b1a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 802b1aa:	687b      	ldr	r3, [r7, #4]
 802b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b1ae:	1c9a      	adds	r2, r3, #2
 802b1b0:	687b      	ldr	r3, [r7, #4]
 802b1b2:	629a      	str	r2, [r3, #40]	; 0x28
 802b1b4:	e029      	b.n	802b20a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802b1b6:	687b      	ldr	r3, [r7, #4]
 802b1b8:	681b      	ldr	r3, [r3, #0]
 802b1ba:	685b      	ldr	r3, [r3, #4]
 802b1bc:	b29b      	uxth	r3, r3
 802b1be:	b2db      	uxtb	r3, r3
 802b1c0:	b29a      	uxth	r2, r3
 802b1c2:	68fb      	ldr	r3, [r7, #12]
 802b1c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 802b1c6:	687b      	ldr	r3, [r7, #4]
 802b1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b1ca:	1c5a      	adds	r2, r3, #1
 802b1cc:	687b      	ldr	r3, [r7, #4]
 802b1ce:	629a      	str	r2, [r3, #40]	; 0x28
 802b1d0:	e01b      	b.n	802b20a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 802b1d2:	687b      	ldr	r3, [r7, #4]
 802b1d4:	691b      	ldr	r3, [r3, #16]
 802b1d6:	2b00      	cmp	r3, #0
 802b1d8:	d10a      	bne.n	802b1f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802b1da:	687b      	ldr	r3, [r7, #4]
 802b1dc:	681b      	ldr	r3, [r3, #0]
 802b1de:	6858      	ldr	r0, [r3, #4]
 802b1e0:	687b      	ldr	r3, [r7, #4]
 802b1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b1e4:	1c59      	adds	r1, r3, #1
 802b1e6:	687a      	ldr	r2, [r7, #4]
 802b1e8:	6291      	str	r1, [r2, #40]	; 0x28
 802b1ea:	b2c2      	uxtb	r2, r0
 802b1ec:	701a      	strb	r2, [r3, #0]
 802b1ee:	e00c      	b.n	802b20a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802b1f0:	687b      	ldr	r3, [r7, #4]
 802b1f2:	681b      	ldr	r3, [r3, #0]
 802b1f4:	685b      	ldr	r3, [r3, #4]
 802b1f6:	b2da      	uxtb	r2, r3
 802b1f8:	687b      	ldr	r3, [r7, #4]
 802b1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b1fc:	1c58      	adds	r0, r3, #1
 802b1fe:	6879      	ldr	r1, [r7, #4]
 802b200:	6288      	str	r0, [r1, #40]	; 0x28
 802b202:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802b206:	b2d2      	uxtb	r2, r2
 802b208:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 802b20a:	687b      	ldr	r3, [r7, #4]
 802b20c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802b20e:	b29b      	uxth	r3, r3
 802b210:	3b01      	subs	r3, #1
 802b212:	b29b      	uxth	r3, r3
 802b214:	687a      	ldr	r2, [r7, #4]
 802b216:	4619      	mov	r1, r3
 802b218:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802b21a:	2b00      	cmp	r3, #0
 802b21c:	d120      	bne.n	802b260 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802b21e:	687b      	ldr	r3, [r7, #4]
 802b220:	681b      	ldr	r3, [r3, #0]
 802b222:	68da      	ldr	r2, [r3, #12]
 802b224:	687b      	ldr	r3, [r7, #4]
 802b226:	681b      	ldr	r3, [r3, #0]
 802b228:	f022 0220 	bic.w	r2, r2, #32
 802b22c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802b22e:	687b      	ldr	r3, [r7, #4]
 802b230:	681b      	ldr	r3, [r3, #0]
 802b232:	68da      	ldr	r2, [r3, #12]
 802b234:	687b      	ldr	r3, [r7, #4]
 802b236:	681b      	ldr	r3, [r3, #0]
 802b238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802b23c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802b23e:	687b      	ldr	r3, [r7, #4]
 802b240:	681b      	ldr	r3, [r3, #0]
 802b242:	695a      	ldr	r2, [r3, #20]
 802b244:	687b      	ldr	r3, [r7, #4]
 802b246:	681b      	ldr	r3, [r3, #0]
 802b248:	f022 0201 	bic.w	r2, r2, #1
 802b24c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802b24e:	687b      	ldr	r3, [r7, #4]
 802b250:	2220      	movs	r2, #32
 802b252:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802b256:	6878      	ldr	r0, [r7, #4]
 802b258:	f7ff fe8a 	bl	802af70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 802b25c:	2300      	movs	r3, #0
 802b25e:	e002      	b.n	802b266 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 802b260:	2300      	movs	r3, #0
 802b262:	e000      	b.n	802b266 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 802b264:	2302      	movs	r3, #2
  }
}
 802b266:	4618      	mov	r0, r3
 802b268:	3710      	adds	r7, #16
 802b26a:	46bd      	mov	sp, r7
 802b26c:	bd80      	pop	{r7, pc}
	...

0802b270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b274:	b085      	sub	sp, #20
 802b276:	af00      	add	r7, sp, #0
 802b278:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802b27a:	687b      	ldr	r3, [r7, #4]
 802b27c:	681b      	ldr	r3, [r3, #0]
 802b27e:	691b      	ldr	r3, [r3, #16]
 802b280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802b284:	687b      	ldr	r3, [r7, #4]
 802b286:	68da      	ldr	r2, [r3, #12]
 802b288:	687b      	ldr	r3, [r7, #4]
 802b28a:	681b      	ldr	r3, [r3, #0]
 802b28c:	430a      	orrs	r2, r1
 802b28e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802b290:	687b      	ldr	r3, [r7, #4]
 802b292:	689a      	ldr	r2, [r3, #8]
 802b294:	687b      	ldr	r3, [r7, #4]
 802b296:	691b      	ldr	r3, [r3, #16]
 802b298:	431a      	orrs	r2, r3
 802b29a:	687b      	ldr	r3, [r7, #4]
 802b29c:	695b      	ldr	r3, [r3, #20]
 802b29e:	431a      	orrs	r2, r3
 802b2a0:	687b      	ldr	r3, [r7, #4]
 802b2a2:	69db      	ldr	r3, [r3, #28]
 802b2a4:	4313      	orrs	r3, r2
 802b2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 802b2a8:	687b      	ldr	r3, [r7, #4]
 802b2aa:	681b      	ldr	r3, [r3, #0]
 802b2ac:	68db      	ldr	r3, [r3, #12]
 802b2ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 802b2b2:	f023 030c 	bic.w	r3, r3, #12
 802b2b6:	687a      	ldr	r2, [r7, #4]
 802b2b8:	6812      	ldr	r2, [r2, #0]
 802b2ba:	68f9      	ldr	r1, [r7, #12]
 802b2bc:	430b      	orrs	r3, r1
 802b2be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802b2c0:	687b      	ldr	r3, [r7, #4]
 802b2c2:	681b      	ldr	r3, [r3, #0]
 802b2c4:	695b      	ldr	r3, [r3, #20]
 802b2c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802b2ca:	687b      	ldr	r3, [r7, #4]
 802b2cc:	699a      	ldr	r2, [r3, #24]
 802b2ce:	687b      	ldr	r3, [r7, #4]
 802b2d0:	681b      	ldr	r3, [r3, #0]
 802b2d2:	430a      	orrs	r2, r1
 802b2d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802b2d6:	687b      	ldr	r3, [r7, #4]
 802b2d8:	69db      	ldr	r3, [r3, #28]
 802b2da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802b2de:	f040 818b 	bne.w	802b5f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802b2e2:	687b      	ldr	r3, [r7, #4]
 802b2e4:	681b      	ldr	r3, [r3, #0]
 802b2e6:	4ac1      	ldr	r2, [pc, #772]	; (802b5ec <UART_SetConfig+0x37c>)
 802b2e8:	4293      	cmp	r3, r2
 802b2ea:	d005      	beq.n	802b2f8 <UART_SetConfig+0x88>
 802b2ec:	687b      	ldr	r3, [r7, #4]
 802b2ee:	681b      	ldr	r3, [r3, #0]
 802b2f0:	4abf      	ldr	r2, [pc, #764]	; (802b5f0 <UART_SetConfig+0x380>)
 802b2f2:	4293      	cmp	r3, r2
 802b2f4:	f040 80bd 	bne.w	802b472 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802b2f8:	f7fc ff88 	bl	802820c <HAL_RCC_GetPCLK2Freq>
 802b2fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802b2fe:	68bb      	ldr	r3, [r7, #8]
 802b300:	461d      	mov	r5, r3
 802b302:	f04f 0600 	mov.w	r6, #0
 802b306:	46a8      	mov	r8, r5
 802b308:	46b1      	mov	r9, r6
 802b30a:	eb18 0308 	adds.w	r3, r8, r8
 802b30e:	eb49 0409 	adc.w	r4, r9, r9
 802b312:	4698      	mov	r8, r3
 802b314:	46a1      	mov	r9, r4
 802b316:	eb18 0805 	adds.w	r8, r8, r5
 802b31a:	eb49 0906 	adc.w	r9, r9, r6
 802b31e:	f04f 0100 	mov.w	r1, #0
 802b322:	f04f 0200 	mov.w	r2, #0
 802b326:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802b32a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802b32e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802b332:	4688      	mov	r8, r1
 802b334:	4691      	mov	r9, r2
 802b336:	eb18 0005 	adds.w	r0, r8, r5
 802b33a:	eb49 0106 	adc.w	r1, r9, r6
 802b33e:	687b      	ldr	r3, [r7, #4]
 802b340:	685b      	ldr	r3, [r3, #4]
 802b342:	461d      	mov	r5, r3
 802b344:	f04f 0600 	mov.w	r6, #0
 802b348:	196b      	adds	r3, r5, r5
 802b34a:	eb46 0406 	adc.w	r4, r6, r6
 802b34e:	461a      	mov	r2, r3
 802b350:	4623      	mov	r3, r4
 802b352:	f7f5 fc29 	bl	8020ba8 <__aeabi_uldivmod>
 802b356:	4603      	mov	r3, r0
 802b358:	460c      	mov	r4, r1
 802b35a:	461a      	mov	r2, r3
 802b35c:	4ba5      	ldr	r3, [pc, #660]	; (802b5f4 <UART_SetConfig+0x384>)
 802b35e:	fba3 2302 	umull	r2, r3, r3, r2
 802b362:	095b      	lsrs	r3, r3, #5
 802b364:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802b368:	68bb      	ldr	r3, [r7, #8]
 802b36a:	461d      	mov	r5, r3
 802b36c:	f04f 0600 	mov.w	r6, #0
 802b370:	46a9      	mov	r9, r5
 802b372:	46b2      	mov	sl, r6
 802b374:	eb19 0309 	adds.w	r3, r9, r9
 802b378:	eb4a 040a 	adc.w	r4, sl, sl
 802b37c:	4699      	mov	r9, r3
 802b37e:	46a2      	mov	sl, r4
 802b380:	eb19 0905 	adds.w	r9, r9, r5
 802b384:	eb4a 0a06 	adc.w	sl, sl, r6
 802b388:	f04f 0100 	mov.w	r1, #0
 802b38c:	f04f 0200 	mov.w	r2, #0
 802b390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b394:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b398:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b39c:	4689      	mov	r9, r1
 802b39e:	4692      	mov	sl, r2
 802b3a0:	eb19 0005 	adds.w	r0, r9, r5
 802b3a4:	eb4a 0106 	adc.w	r1, sl, r6
 802b3a8:	687b      	ldr	r3, [r7, #4]
 802b3aa:	685b      	ldr	r3, [r3, #4]
 802b3ac:	461d      	mov	r5, r3
 802b3ae:	f04f 0600 	mov.w	r6, #0
 802b3b2:	196b      	adds	r3, r5, r5
 802b3b4:	eb46 0406 	adc.w	r4, r6, r6
 802b3b8:	461a      	mov	r2, r3
 802b3ba:	4623      	mov	r3, r4
 802b3bc:	f7f5 fbf4 	bl	8020ba8 <__aeabi_uldivmod>
 802b3c0:	4603      	mov	r3, r0
 802b3c2:	460c      	mov	r4, r1
 802b3c4:	461a      	mov	r2, r3
 802b3c6:	4b8b      	ldr	r3, [pc, #556]	; (802b5f4 <UART_SetConfig+0x384>)
 802b3c8:	fba3 1302 	umull	r1, r3, r3, r2
 802b3cc:	095b      	lsrs	r3, r3, #5
 802b3ce:	2164      	movs	r1, #100	; 0x64
 802b3d0:	fb01 f303 	mul.w	r3, r1, r3
 802b3d4:	1ad3      	subs	r3, r2, r3
 802b3d6:	00db      	lsls	r3, r3, #3
 802b3d8:	3332      	adds	r3, #50	; 0x32
 802b3da:	4a86      	ldr	r2, [pc, #536]	; (802b5f4 <UART_SetConfig+0x384>)
 802b3dc:	fba2 2303 	umull	r2, r3, r2, r3
 802b3e0:	095b      	lsrs	r3, r3, #5
 802b3e2:	005b      	lsls	r3, r3, #1
 802b3e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802b3e8:	4498      	add	r8, r3
 802b3ea:	68bb      	ldr	r3, [r7, #8]
 802b3ec:	461d      	mov	r5, r3
 802b3ee:	f04f 0600 	mov.w	r6, #0
 802b3f2:	46a9      	mov	r9, r5
 802b3f4:	46b2      	mov	sl, r6
 802b3f6:	eb19 0309 	adds.w	r3, r9, r9
 802b3fa:	eb4a 040a 	adc.w	r4, sl, sl
 802b3fe:	4699      	mov	r9, r3
 802b400:	46a2      	mov	sl, r4
 802b402:	eb19 0905 	adds.w	r9, r9, r5
 802b406:	eb4a 0a06 	adc.w	sl, sl, r6
 802b40a:	f04f 0100 	mov.w	r1, #0
 802b40e:	f04f 0200 	mov.w	r2, #0
 802b412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b416:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b41a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b41e:	4689      	mov	r9, r1
 802b420:	4692      	mov	sl, r2
 802b422:	eb19 0005 	adds.w	r0, r9, r5
 802b426:	eb4a 0106 	adc.w	r1, sl, r6
 802b42a:	687b      	ldr	r3, [r7, #4]
 802b42c:	685b      	ldr	r3, [r3, #4]
 802b42e:	461d      	mov	r5, r3
 802b430:	f04f 0600 	mov.w	r6, #0
 802b434:	196b      	adds	r3, r5, r5
 802b436:	eb46 0406 	adc.w	r4, r6, r6
 802b43a:	461a      	mov	r2, r3
 802b43c:	4623      	mov	r3, r4
 802b43e:	f7f5 fbb3 	bl	8020ba8 <__aeabi_uldivmod>
 802b442:	4603      	mov	r3, r0
 802b444:	460c      	mov	r4, r1
 802b446:	461a      	mov	r2, r3
 802b448:	4b6a      	ldr	r3, [pc, #424]	; (802b5f4 <UART_SetConfig+0x384>)
 802b44a:	fba3 1302 	umull	r1, r3, r3, r2
 802b44e:	095b      	lsrs	r3, r3, #5
 802b450:	2164      	movs	r1, #100	; 0x64
 802b452:	fb01 f303 	mul.w	r3, r1, r3
 802b456:	1ad3      	subs	r3, r2, r3
 802b458:	00db      	lsls	r3, r3, #3
 802b45a:	3332      	adds	r3, #50	; 0x32
 802b45c:	4a65      	ldr	r2, [pc, #404]	; (802b5f4 <UART_SetConfig+0x384>)
 802b45e:	fba2 2303 	umull	r2, r3, r2, r3
 802b462:	095b      	lsrs	r3, r3, #5
 802b464:	f003 0207 	and.w	r2, r3, #7
 802b468:	687b      	ldr	r3, [r7, #4]
 802b46a:	681b      	ldr	r3, [r3, #0]
 802b46c:	4442      	add	r2, r8
 802b46e:	609a      	str	r2, [r3, #8]
 802b470:	e26f      	b.n	802b952 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802b472:	f7fc feb7 	bl	80281e4 <HAL_RCC_GetPCLK1Freq>
 802b476:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802b478:	68bb      	ldr	r3, [r7, #8]
 802b47a:	461d      	mov	r5, r3
 802b47c:	f04f 0600 	mov.w	r6, #0
 802b480:	46a8      	mov	r8, r5
 802b482:	46b1      	mov	r9, r6
 802b484:	eb18 0308 	adds.w	r3, r8, r8
 802b488:	eb49 0409 	adc.w	r4, r9, r9
 802b48c:	4698      	mov	r8, r3
 802b48e:	46a1      	mov	r9, r4
 802b490:	eb18 0805 	adds.w	r8, r8, r5
 802b494:	eb49 0906 	adc.w	r9, r9, r6
 802b498:	f04f 0100 	mov.w	r1, #0
 802b49c:	f04f 0200 	mov.w	r2, #0
 802b4a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802b4a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802b4a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802b4ac:	4688      	mov	r8, r1
 802b4ae:	4691      	mov	r9, r2
 802b4b0:	eb18 0005 	adds.w	r0, r8, r5
 802b4b4:	eb49 0106 	adc.w	r1, r9, r6
 802b4b8:	687b      	ldr	r3, [r7, #4]
 802b4ba:	685b      	ldr	r3, [r3, #4]
 802b4bc:	461d      	mov	r5, r3
 802b4be:	f04f 0600 	mov.w	r6, #0
 802b4c2:	196b      	adds	r3, r5, r5
 802b4c4:	eb46 0406 	adc.w	r4, r6, r6
 802b4c8:	461a      	mov	r2, r3
 802b4ca:	4623      	mov	r3, r4
 802b4cc:	f7f5 fb6c 	bl	8020ba8 <__aeabi_uldivmod>
 802b4d0:	4603      	mov	r3, r0
 802b4d2:	460c      	mov	r4, r1
 802b4d4:	461a      	mov	r2, r3
 802b4d6:	4b47      	ldr	r3, [pc, #284]	; (802b5f4 <UART_SetConfig+0x384>)
 802b4d8:	fba3 2302 	umull	r2, r3, r3, r2
 802b4dc:	095b      	lsrs	r3, r3, #5
 802b4de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802b4e2:	68bb      	ldr	r3, [r7, #8]
 802b4e4:	461d      	mov	r5, r3
 802b4e6:	f04f 0600 	mov.w	r6, #0
 802b4ea:	46a9      	mov	r9, r5
 802b4ec:	46b2      	mov	sl, r6
 802b4ee:	eb19 0309 	adds.w	r3, r9, r9
 802b4f2:	eb4a 040a 	adc.w	r4, sl, sl
 802b4f6:	4699      	mov	r9, r3
 802b4f8:	46a2      	mov	sl, r4
 802b4fa:	eb19 0905 	adds.w	r9, r9, r5
 802b4fe:	eb4a 0a06 	adc.w	sl, sl, r6
 802b502:	f04f 0100 	mov.w	r1, #0
 802b506:	f04f 0200 	mov.w	r2, #0
 802b50a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b50e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b512:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b516:	4689      	mov	r9, r1
 802b518:	4692      	mov	sl, r2
 802b51a:	eb19 0005 	adds.w	r0, r9, r5
 802b51e:	eb4a 0106 	adc.w	r1, sl, r6
 802b522:	687b      	ldr	r3, [r7, #4]
 802b524:	685b      	ldr	r3, [r3, #4]
 802b526:	461d      	mov	r5, r3
 802b528:	f04f 0600 	mov.w	r6, #0
 802b52c:	196b      	adds	r3, r5, r5
 802b52e:	eb46 0406 	adc.w	r4, r6, r6
 802b532:	461a      	mov	r2, r3
 802b534:	4623      	mov	r3, r4
 802b536:	f7f5 fb37 	bl	8020ba8 <__aeabi_uldivmod>
 802b53a:	4603      	mov	r3, r0
 802b53c:	460c      	mov	r4, r1
 802b53e:	461a      	mov	r2, r3
 802b540:	4b2c      	ldr	r3, [pc, #176]	; (802b5f4 <UART_SetConfig+0x384>)
 802b542:	fba3 1302 	umull	r1, r3, r3, r2
 802b546:	095b      	lsrs	r3, r3, #5
 802b548:	2164      	movs	r1, #100	; 0x64
 802b54a:	fb01 f303 	mul.w	r3, r1, r3
 802b54e:	1ad3      	subs	r3, r2, r3
 802b550:	00db      	lsls	r3, r3, #3
 802b552:	3332      	adds	r3, #50	; 0x32
 802b554:	4a27      	ldr	r2, [pc, #156]	; (802b5f4 <UART_SetConfig+0x384>)
 802b556:	fba2 2303 	umull	r2, r3, r2, r3
 802b55a:	095b      	lsrs	r3, r3, #5
 802b55c:	005b      	lsls	r3, r3, #1
 802b55e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802b562:	4498      	add	r8, r3
 802b564:	68bb      	ldr	r3, [r7, #8]
 802b566:	461d      	mov	r5, r3
 802b568:	f04f 0600 	mov.w	r6, #0
 802b56c:	46a9      	mov	r9, r5
 802b56e:	46b2      	mov	sl, r6
 802b570:	eb19 0309 	adds.w	r3, r9, r9
 802b574:	eb4a 040a 	adc.w	r4, sl, sl
 802b578:	4699      	mov	r9, r3
 802b57a:	46a2      	mov	sl, r4
 802b57c:	eb19 0905 	adds.w	r9, r9, r5
 802b580:	eb4a 0a06 	adc.w	sl, sl, r6
 802b584:	f04f 0100 	mov.w	r1, #0
 802b588:	f04f 0200 	mov.w	r2, #0
 802b58c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b590:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b594:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b598:	4689      	mov	r9, r1
 802b59a:	4692      	mov	sl, r2
 802b59c:	eb19 0005 	adds.w	r0, r9, r5
 802b5a0:	eb4a 0106 	adc.w	r1, sl, r6
 802b5a4:	687b      	ldr	r3, [r7, #4]
 802b5a6:	685b      	ldr	r3, [r3, #4]
 802b5a8:	461d      	mov	r5, r3
 802b5aa:	f04f 0600 	mov.w	r6, #0
 802b5ae:	196b      	adds	r3, r5, r5
 802b5b0:	eb46 0406 	adc.w	r4, r6, r6
 802b5b4:	461a      	mov	r2, r3
 802b5b6:	4623      	mov	r3, r4
 802b5b8:	f7f5 faf6 	bl	8020ba8 <__aeabi_uldivmod>
 802b5bc:	4603      	mov	r3, r0
 802b5be:	460c      	mov	r4, r1
 802b5c0:	461a      	mov	r2, r3
 802b5c2:	4b0c      	ldr	r3, [pc, #48]	; (802b5f4 <UART_SetConfig+0x384>)
 802b5c4:	fba3 1302 	umull	r1, r3, r3, r2
 802b5c8:	095b      	lsrs	r3, r3, #5
 802b5ca:	2164      	movs	r1, #100	; 0x64
 802b5cc:	fb01 f303 	mul.w	r3, r1, r3
 802b5d0:	1ad3      	subs	r3, r2, r3
 802b5d2:	00db      	lsls	r3, r3, #3
 802b5d4:	3332      	adds	r3, #50	; 0x32
 802b5d6:	4a07      	ldr	r2, [pc, #28]	; (802b5f4 <UART_SetConfig+0x384>)
 802b5d8:	fba2 2303 	umull	r2, r3, r2, r3
 802b5dc:	095b      	lsrs	r3, r3, #5
 802b5de:	f003 0207 	and.w	r2, r3, #7
 802b5e2:	687b      	ldr	r3, [r7, #4]
 802b5e4:	681b      	ldr	r3, [r3, #0]
 802b5e6:	4442      	add	r2, r8
 802b5e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 802b5ea:	e1b2      	b.n	802b952 <UART_SetConfig+0x6e2>
 802b5ec:	40011000 	.word	0x40011000
 802b5f0:	40011400 	.word	0x40011400
 802b5f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802b5f8:	687b      	ldr	r3, [r7, #4]
 802b5fa:	681b      	ldr	r3, [r3, #0]
 802b5fc:	4ad7      	ldr	r2, [pc, #860]	; (802b95c <UART_SetConfig+0x6ec>)
 802b5fe:	4293      	cmp	r3, r2
 802b600:	d005      	beq.n	802b60e <UART_SetConfig+0x39e>
 802b602:	687b      	ldr	r3, [r7, #4]
 802b604:	681b      	ldr	r3, [r3, #0]
 802b606:	4ad6      	ldr	r2, [pc, #856]	; (802b960 <UART_SetConfig+0x6f0>)
 802b608:	4293      	cmp	r3, r2
 802b60a:	f040 80d1 	bne.w	802b7b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 802b60e:	f7fc fdfd 	bl	802820c <HAL_RCC_GetPCLK2Freq>
 802b612:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802b614:	68bb      	ldr	r3, [r7, #8]
 802b616:	469a      	mov	sl, r3
 802b618:	f04f 0b00 	mov.w	fp, #0
 802b61c:	46d0      	mov	r8, sl
 802b61e:	46d9      	mov	r9, fp
 802b620:	eb18 0308 	adds.w	r3, r8, r8
 802b624:	eb49 0409 	adc.w	r4, r9, r9
 802b628:	4698      	mov	r8, r3
 802b62a:	46a1      	mov	r9, r4
 802b62c:	eb18 080a 	adds.w	r8, r8, sl
 802b630:	eb49 090b 	adc.w	r9, r9, fp
 802b634:	f04f 0100 	mov.w	r1, #0
 802b638:	f04f 0200 	mov.w	r2, #0
 802b63c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802b640:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802b644:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802b648:	4688      	mov	r8, r1
 802b64a:	4691      	mov	r9, r2
 802b64c:	eb1a 0508 	adds.w	r5, sl, r8
 802b650:	eb4b 0609 	adc.w	r6, fp, r9
 802b654:	687b      	ldr	r3, [r7, #4]
 802b656:	685b      	ldr	r3, [r3, #4]
 802b658:	4619      	mov	r1, r3
 802b65a:	f04f 0200 	mov.w	r2, #0
 802b65e:	f04f 0300 	mov.w	r3, #0
 802b662:	f04f 0400 	mov.w	r4, #0
 802b666:	0094      	lsls	r4, r2, #2
 802b668:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802b66c:	008b      	lsls	r3, r1, #2
 802b66e:	461a      	mov	r2, r3
 802b670:	4623      	mov	r3, r4
 802b672:	4628      	mov	r0, r5
 802b674:	4631      	mov	r1, r6
 802b676:	f7f5 fa97 	bl	8020ba8 <__aeabi_uldivmod>
 802b67a:	4603      	mov	r3, r0
 802b67c:	460c      	mov	r4, r1
 802b67e:	461a      	mov	r2, r3
 802b680:	4bb8      	ldr	r3, [pc, #736]	; (802b964 <UART_SetConfig+0x6f4>)
 802b682:	fba3 2302 	umull	r2, r3, r3, r2
 802b686:	095b      	lsrs	r3, r3, #5
 802b688:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802b68c:	68bb      	ldr	r3, [r7, #8]
 802b68e:	469b      	mov	fp, r3
 802b690:	f04f 0c00 	mov.w	ip, #0
 802b694:	46d9      	mov	r9, fp
 802b696:	46e2      	mov	sl, ip
 802b698:	eb19 0309 	adds.w	r3, r9, r9
 802b69c:	eb4a 040a 	adc.w	r4, sl, sl
 802b6a0:	4699      	mov	r9, r3
 802b6a2:	46a2      	mov	sl, r4
 802b6a4:	eb19 090b 	adds.w	r9, r9, fp
 802b6a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 802b6ac:	f04f 0100 	mov.w	r1, #0
 802b6b0:	f04f 0200 	mov.w	r2, #0
 802b6b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b6b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b6bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b6c0:	4689      	mov	r9, r1
 802b6c2:	4692      	mov	sl, r2
 802b6c4:	eb1b 0509 	adds.w	r5, fp, r9
 802b6c8:	eb4c 060a 	adc.w	r6, ip, sl
 802b6cc:	687b      	ldr	r3, [r7, #4]
 802b6ce:	685b      	ldr	r3, [r3, #4]
 802b6d0:	4619      	mov	r1, r3
 802b6d2:	f04f 0200 	mov.w	r2, #0
 802b6d6:	f04f 0300 	mov.w	r3, #0
 802b6da:	f04f 0400 	mov.w	r4, #0
 802b6de:	0094      	lsls	r4, r2, #2
 802b6e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802b6e4:	008b      	lsls	r3, r1, #2
 802b6e6:	461a      	mov	r2, r3
 802b6e8:	4623      	mov	r3, r4
 802b6ea:	4628      	mov	r0, r5
 802b6ec:	4631      	mov	r1, r6
 802b6ee:	f7f5 fa5b 	bl	8020ba8 <__aeabi_uldivmod>
 802b6f2:	4603      	mov	r3, r0
 802b6f4:	460c      	mov	r4, r1
 802b6f6:	461a      	mov	r2, r3
 802b6f8:	4b9a      	ldr	r3, [pc, #616]	; (802b964 <UART_SetConfig+0x6f4>)
 802b6fa:	fba3 1302 	umull	r1, r3, r3, r2
 802b6fe:	095b      	lsrs	r3, r3, #5
 802b700:	2164      	movs	r1, #100	; 0x64
 802b702:	fb01 f303 	mul.w	r3, r1, r3
 802b706:	1ad3      	subs	r3, r2, r3
 802b708:	011b      	lsls	r3, r3, #4
 802b70a:	3332      	adds	r3, #50	; 0x32
 802b70c:	4a95      	ldr	r2, [pc, #596]	; (802b964 <UART_SetConfig+0x6f4>)
 802b70e:	fba2 2303 	umull	r2, r3, r2, r3
 802b712:	095b      	lsrs	r3, r3, #5
 802b714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b718:	4498      	add	r8, r3
 802b71a:	68bb      	ldr	r3, [r7, #8]
 802b71c:	469b      	mov	fp, r3
 802b71e:	f04f 0c00 	mov.w	ip, #0
 802b722:	46d9      	mov	r9, fp
 802b724:	46e2      	mov	sl, ip
 802b726:	eb19 0309 	adds.w	r3, r9, r9
 802b72a:	eb4a 040a 	adc.w	r4, sl, sl
 802b72e:	4699      	mov	r9, r3
 802b730:	46a2      	mov	sl, r4
 802b732:	eb19 090b 	adds.w	r9, r9, fp
 802b736:	eb4a 0a0c 	adc.w	sl, sl, ip
 802b73a:	f04f 0100 	mov.w	r1, #0
 802b73e:	f04f 0200 	mov.w	r2, #0
 802b742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b74a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b74e:	4689      	mov	r9, r1
 802b750:	4692      	mov	sl, r2
 802b752:	eb1b 0509 	adds.w	r5, fp, r9
 802b756:	eb4c 060a 	adc.w	r6, ip, sl
 802b75a:	687b      	ldr	r3, [r7, #4]
 802b75c:	685b      	ldr	r3, [r3, #4]
 802b75e:	4619      	mov	r1, r3
 802b760:	f04f 0200 	mov.w	r2, #0
 802b764:	f04f 0300 	mov.w	r3, #0
 802b768:	f04f 0400 	mov.w	r4, #0
 802b76c:	0094      	lsls	r4, r2, #2
 802b76e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802b772:	008b      	lsls	r3, r1, #2
 802b774:	461a      	mov	r2, r3
 802b776:	4623      	mov	r3, r4
 802b778:	4628      	mov	r0, r5
 802b77a:	4631      	mov	r1, r6
 802b77c:	f7f5 fa14 	bl	8020ba8 <__aeabi_uldivmod>
 802b780:	4603      	mov	r3, r0
 802b782:	460c      	mov	r4, r1
 802b784:	461a      	mov	r2, r3
 802b786:	4b77      	ldr	r3, [pc, #476]	; (802b964 <UART_SetConfig+0x6f4>)
 802b788:	fba3 1302 	umull	r1, r3, r3, r2
 802b78c:	095b      	lsrs	r3, r3, #5
 802b78e:	2164      	movs	r1, #100	; 0x64
 802b790:	fb01 f303 	mul.w	r3, r1, r3
 802b794:	1ad3      	subs	r3, r2, r3
 802b796:	011b      	lsls	r3, r3, #4
 802b798:	3332      	adds	r3, #50	; 0x32
 802b79a:	4a72      	ldr	r2, [pc, #456]	; (802b964 <UART_SetConfig+0x6f4>)
 802b79c:	fba2 2303 	umull	r2, r3, r2, r3
 802b7a0:	095b      	lsrs	r3, r3, #5
 802b7a2:	f003 020f 	and.w	r2, r3, #15
 802b7a6:	687b      	ldr	r3, [r7, #4]
 802b7a8:	681b      	ldr	r3, [r3, #0]
 802b7aa:	4442      	add	r2, r8
 802b7ac:	609a      	str	r2, [r3, #8]
 802b7ae:	e0d0      	b.n	802b952 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 802b7b0:	f7fc fd18 	bl	80281e4 <HAL_RCC_GetPCLK1Freq>
 802b7b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802b7b6:	68bb      	ldr	r3, [r7, #8]
 802b7b8:	469a      	mov	sl, r3
 802b7ba:	f04f 0b00 	mov.w	fp, #0
 802b7be:	46d0      	mov	r8, sl
 802b7c0:	46d9      	mov	r9, fp
 802b7c2:	eb18 0308 	adds.w	r3, r8, r8
 802b7c6:	eb49 0409 	adc.w	r4, r9, r9
 802b7ca:	4698      	mov	r8, r3
 802b7cc:	46a1      	mov	r9, r4
 802b7ce:	eb18 080a 	adds.w	r8, r8, sl
 802b7d2:	eb49 090b 	adc.w	r9, r9, fp
 802b7d6:	f04f 0100 	mov.w	r1, #0
 802b7da:	f04f 0200 	mov.w	r2, #0
 802b7de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802b7e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802b7e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802b7ea:	4688      	mov	r8, r1
 802b7ec:	4691      	mov	r9, r2
 802b7ee:	eb1a 0508 	adds.w	r5, sl, r8
 802b7f2:	eb4b 0609 	adc.w	r6, fp, r9
 802b7f6:	687b      	ldr	r3, [r7, #4]
 802b7f8:	685b      	ldr	r3, [r3, #4]
 802b7fa:	4619      	mov	r1, r3
 802b7fc:	f04f 0200 	mov.w	r2, #0
 802b800:	f04f 0300 	mov.w	r3, #0
 802b804:	f04f 0400 	mov.w	r4, #0
 802b808:	0094      	lsls	r4, r2, #2
 802b80a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802b80e:	008b      	lsls	r3, r1, #2
 802b810:	461a      	mov	r2, r3
 802b812:	4623      	mov	r3, r4
 802b814:	4628      	mov	r0, r5
 802b816:	4631      	mov	r1, r6
 802b818:	f7f5 f9c6 	bl	8020ba8 <__aeabi_uldivmod>
 802b81c:	4603      	mov	r3, r0
 802b81e:	460c      	mov	r4, r1
 802b820:	461a      	mov	r2, r3
 802b822:	4b50      	ldr	r3, [pc, #320]	; (802b964 <UART_SetConfig+0x6f4>)
 802b824:	fba3 2302 	umull	r2, r3, r3, r2
 802b828:	095b      	lsrs	r3, r3, #5
 802b82a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802b82e:	68bb      	ldr	r3, [r7, #8]
 802b830:	469b      	mov	fp, r3
 802b832:	f04f 0c00 	mov.w	ip, #0
 802b836:	46d9      	mov	r9, fp
 802b838:	46e2      	mov	sl, ip
 802b83a:	eb19 0309 	adds.w	r3, r9, r9
 802b83e:	eb4a 040a 	adc.w	r4, sl, sl
 802b842:	4699      	mov	r9, r3
 802b844:	46a2      	mov	sl, r4
 802b846:	eb19 090b 	adds.w	r9, r9, fp
 802b84a:	eb4a 0a0c 	adc.w	sl, sl, ip
 802b84e:	f04f 0100 	mov.w	r1, #0
 802b852:	f04f 0200 	mov.w	r2, #0
 802b856:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b85a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b85e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b862:	4689      	mov	r9, r1
 802b864:	4692      	mov	sl, r2
 802b866:	eb1b 0509 	adds.w	r5, fp, r9
 802b86a:	eb4c 060a 	adc.w	r6, ip, sl
 802b86e:	687b      	ldr	r3, [r7, #4]
 802b870:	685b      	ldr	r3, [r3, #4]
 802b872:	4619      	mov	r1, r3
 802b874:	f04f 0200 	mov.w	r2, #0
 802b878:	f04f 0300 	mov.w	r3, #0
 802b87c:	f04f 0400 	mov.w	r4, #0
 802b880:	0094      	lsls	r4, r2, #2
 802b882:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802b886:	008b      	lsls	r3, r1, #2
 802b888:	461a      	mov	r2, r3
 802b88a:	4623      	mov	r3, r4
 802b88c:	4628      	mov	r0, r5
 802b88e:	4631      	mov	r1, r6
 802b890:	f7f5 f98a 	bl	8020ba8 <__aeabi_uldivmod>
 802b894:	4603      	mov	r3, r0
 802b896:	460c      	mov	r4, r1
 802b898:	461a      	mov	r2, r3
 802b89a:	4b32      	ldr	r3, [pc, #200]	; (802b964 <UART_SetConfig+0x6f4>)
 802b89c:	fba3 1302 	umull	r1, r3, r3, r2
 802b8a0:	095b      	lsrs	r3, r3, #5
 802b8a2:	2164      	movs	r1, #100	; 0x64
 802b8a4:	fb01 f303 	mul.w	r3, r1, r3
 802b8a8:	1ad3      	subs	r3, r2, r3
 802b8aa:	011b      	lsls	r3, r3, #4
 802b8ac:	3332      	adds	r3, #50	; 0x32
 802b8ae:	4a2d      	ldr	r2, [pc, #180]	; (802b964 <UART_SetConfig+0x6f4>)
 802b8b0:	fba2 2303 	umull	r2, r3, r2, r3
 802b8b4:	095b      	lsrs	r3, r3, #5
 802b8b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b8ba:	4498      	add	r8, r3
 802b8bc:	68bb      	ldr	r3, [r7, #8]
 802b8be:	469b      	mov	fp, r3
 802b8c0:	f04f 0c00 	mov.w	ip, #0
 802b8c4:	46d9      	mov	r9, fp
 802b8c6:	46e2      	mov	sl, ip
 802b8c8:	eb19 0309 	adds.w	r3, r9, r9
 802b8cc:	eb4a 040a 	adc.w	r4, sl, sl
 802b8d0:	4699      	mov	r9, r3
 802b8d2:	46a2      	mov	sl, r4
 802b8d4:	eb19 090b 	adds.w	r9, r9, fp
 802b8d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 802b8dc:	f04f 0100 	mov.w	r1, #0
 802b8e0:	f04f 0200 	mov.w	r2, #0
 802b8e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802b8e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802b8ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b8f0:	4689      	mov	r9, r1
 802b8f2:	4692      	mov	sl, r2
 802b8f4:	eb1b 0509 	adds.w	r5, fp, r9
 802b8f8:	eb4c 060a 	adc.w	r6, ip, sl
 802b8fc:	687b      	ldr	r3, [r7, #4]
 802b8fe:	685b      	ldr	r3, [r3, #4]
 802b900:	4619      	mov	r1, r3
 802b902:	f04f 0200 	mov.w	r2, #0
 802b906:	f04f 0300 	mov.w	r3, #0
 802b90a:	f04f 0400 	mov.w	r4, #0
 802b90e:	0094      	lsls	r4, r2, #2
 802b910:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802b914:	008b      	lsls	r3, r1, #2
 802b916:	461a      	mov	r2, r3
 802b918:	4623      	mov	r3, r4
 802b91a:	4628      	mov	r0, r5
 802b91c:	4631      	mov	r1, r6
 802b91e:	f7f5 f943 	bl	8020ba8 <__aeabi_uldivmod>
 802b922:	4603      	mov	r3, r0
 802b924:	460c      	mov	r4, r1
 802b926:	461a      	mov	r2, r3
 802b928:	4b0e      	ldr	r3, [pc, #56]	; (802b964 <UART_SetConfig+0x6f4>)
 802b92a:	fba3 1302 	umull	r1, r3, r3, r2
 802b92e:	095b      	lsrs	r3, r3, #5
 802b930:	2164      	movs	r1, #100	; 0x64
 802b932:	fb01 f303 	mul.w	r3, r1, r3
 802b936:	1ad3      	subs	r3, r2, r3
 802b938:	011b      	lsls	r3, r3, #4
 802b93a:	3332      	adds	r3, #50	; 0x32
 802b93c:	4a09      	ldr	r2, [pc, #36]	; (802b964 <UART_SetConfig+0x6f4>)
 802b93e:	fba2 2303 	umull	r2, r3, r2, r3
 802b942:	095b      	lsrs	r3, r3, #5
 802b944:	f003 020f 	and.w	r2, r3, #15
 802b948:	687b      	ldr	r3, [r7, #4]
 802b94a:	681b      	ldr	r3, [r3, #0]
 802b94c:	4442      	add	r2, r8
 802b94e:	609a      	str	r2, [r3, #8]
}
 802b950:	e7ff      	b.n	802b952 <UART_SetConfig+0x6e2>
 802b952:	bf00      	nop
 802b954:	3714      	adds	r7, #20
 802b956:	46bd      	mov	sp, r7
 802b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b95c:	40011000 	.word	0x40011000
 802b960:	40011400 	.word	0x40011400
 802b964:	51eb851f 	.word	0x51eb851f

0802b968 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 802b968:	b084      	sub	sp, #16
 802b96a:	b480      	push	{r7}
 802b96c:	b085      	sub	sp, #20
 802b96e:	af00      	add	r7, sp, #0
 802b970:	6078      	str	r0, [r7, #4]
 802b972:	f107 001c 	add.w	r0, r7, #28
 802b976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 802b97a:	2300      	movs	r3, #0
 802b97c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 802b97e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 802b980:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 802b982:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 802b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 802b986:	431a      	orrs	r2, r3
             Init.BusWide             |\
 802b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 802b98a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 802b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 802b98e:	431a      	orrs	r2, r3
             Init.ClockDiv
 802b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 802b992:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 802b994:	68fa      	ldr	r2, [r7, #12]
 802b996:	4313      	orrs	r3, r2
 802b998:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	685b      	ldr	r3, [r3, #4]
 802b99e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 802b9a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802b9a6:	68fa      	ldr	r2, [r7, #12]
 802b9a8:	431a      	orrs	r2, r3
 802b9aa:	687b      	ldr	r3, [r7, #4]
 802b9ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 802b9ae:	2300      	movs	r3, #0
}
 802b9b0:	4618      	mov	r0, r3
 802b9b2:	3714      	adds	r7, #20
 802b9b4:	46bd      	mov	sp, r7
 802b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9ba:	b004      	add	sp, #16
 802b9bc:	4770      	bx	lr

0802b9be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 802b9be:	b480      	push	{r7}
 802b9c0:	b083      	sub	sp, #12
 802b9c2:	af00      	add	r7, sp, #0
 802b9c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 802b9c6:	687b      	ldr	r3, [r7, #4]
 802b9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 802b9cc:	4618      	mov	r0, r3
 802b9ce:	370c      	adds	r7, #12
 802b9d0:	46bd      	mov	sp, r7
 802b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9d6:	4770      	bx	lr

0802b9d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 802b9d8:	b480      	push	{r7}
 802b9da:	b083      	sub	sp, #12
 802b9dc:	af00      	add	r7, sp, #0
 802b9de:	6078      	str	r0, [r7, #4]
 802b9e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 802b9e2:	683b      	ldr	r3, [r7, #0]
 802b9e4:	681a      	ldr	r2, [r3, #0]
 802b9e6:	687b      	ldr	r3, [r7, #4]
 802b9e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802b9ec:	2300      	movs	r3, #0
}
 802b9ee:	4618      	mov	r0, r3
 802b9f0:	370c      	adds	r7, #12
 802b9f2:	46bd      	mov	sp, r7
 802b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9f8:	4770      	bx	lr

0802b9fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 802b9fa:	b580      	push	{r7, lr}
 802b9fc:	b082      	sub	sp, #8
 802b9fe:	af00      	add	r7, sp, #0
 802ba00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 802ba02:	687b      	ldr	r3, [r7, #4]
 802ba04:	2203      	movs	r2, #3
 802ba06:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 802ba08:	2002      	movs	r0, #2
 802ba0a:	f7f7 fcfd 	bl	8023408 <HAL_Delay>
  
  return HAL_OK;
 802ba0e:	2300      	movs	r3, #0
}
 802ba10:	4618      	mov	r0, r3
 802ba12:	3708      	adds	r7, #8
 802ba14:	46bd      	mov	sp, r7
 802ba16:	bd80      	pop	{r7, pc}

0802ba18 <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 802ba18:	b480      	push	{r7}
 802ba1a:	b083      	sub	sp, #12
 802ba1c:	af00      	add	r7, sp, #0
 802ba1e:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	2200      	movs	r2, #0
 802ba24:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 802ba26:	2300      	movs	r3, #0
}
 802ba28:	4618      	mov	r0, r3
 802ba2a:	370c      	adds	r7, #12
 802ba2c:	46bd      	mov	sp, r7
 802ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba32:	4770      	bx	lr

0802ba34 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 802ba34:	b480      	push	{r7}
 802ba36:	b083      	sub	sp, #12
 802ba38:	af00      	add	r7, sp, #0
 802ba3a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 802ba3c:	687b      	ldr	r3, [r7, #4]
 802ba3e:	681b      	ldr	r3, [r3, #0]
 802ba40:	f003 0303 	and.w	r3, r3, #3
}
 802ba44:	4618      	mov	r0, r3
 802ba46:	370c      	adds	r7, #12
 802ba48:	46bd      	mov	sp, r7
 802ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba4e:	4770      	bx	lr

0802ba50 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 802ba50:	b480      	push	{r7}
 802ba52:	b085      	sub	sp, #20
 802ba54:	af00      	add	r7, sp, #0
 802ba56:	6078      	str	r0, [r7, #4]
 802ba58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 802ba5a:	2300      	movs	r3, #0
 802ba5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 802ba5e:	683b      	ldr	r3, [r7, #0]
 802ba60:	681a      	ldr	r2, [r3, #0]
 802ba62:	687b      	ldr	r3, [r7, #4]
 802ba64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 802ba66:	683b      	ldr	r3, [r7, #0]
 802ba68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 802ba6a:	683b      	ldr	r3, [r7, #0]
 802ba6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 802ba6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 802ba70:	683b      	ldr	r3, [r7, #0]
 802ba72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 802ba74:	431a      	orrs	r2, r3
                       Command->CPSM);
 802ba76:	683b      	ldr	r3, [r7, #0]
 802ba78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 802ba7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 802ba7c:	68fa      	ldr	r2, [r7, #12]
 802ba7e:	4313      	orrs	r3, r2
 802ba80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 802ba82:	687b      	ldr	r3, [r7, #4]
 802ba84:	68db      	ldr	r3, [r3, #12]
 802ba86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802ba8a:	f023 030f 	bic.w	r3, r3, #15
 802ba8e:	68fa      	ldr	r2, [r7, #12]
 802ba90:	431a      	orrs	r2, r3
 802ba92:	687b      	ldr	r3, [r7, #4]
 802ba94:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 802ba96:	2300      	movs	r3, #0
}
 802ba98:	4618      	mov	r0, r3
 802ba9a:	3714      	adds	r7, #20
 802ba9c:	46bd      	mov	sp, r7
 802ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802baa2:	4770      	bx	lr

0802baa4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 802baa4:	b480      	push	{r7}
 802baa6:	b083      	sub	sp, #12
 802baa8:	af00      	add	r7, sp, #0
 802baaa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 802baac:	687b      	ldr	r3, [r7, #4]
 802baae:	691b      	ldr	r3, [r3, #16]
 802bab0:	b2db      	uxtb	r3, r3
}
 802bab2:	4618      	mov	r0, r3
 802bab4:	370c      	adds	r7, #12
 802bab6:	46bd      	mov	sp, r7
 802bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802babc:	4770      	bx	lr

0802babe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 802babe:	b480      	push	{r7}
 802bac0:	b085      	sub	sp, #20
 802bac2:	af00      	add	r7, sp, #0
 802bac4:	6078      	str	r0, [r7, #4]
 802bac6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 802bac8:	687b      	ldr	r3, [r7, #4]
 802baca:	3314      	adds	r3, #20
 802bacc:	461a      	mov	r2, r3
 802bace:	683b      	ldr	r3, [r7, #0]
 802bad0:	4413      	add	r3, r2
 802bad2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 802bad4:	68fb      	ldr	r3, [r7, #12]
 802bad6:	681b      	ldr	r3, [r3, #0]
}  
 802bad8:	4618      	mov	r0, r3
 802bada:	3714      	adds	r7, #20
 802badc:	46bd      	mov	sp, r7
 802bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bae2:	4770      	bx	lr

0802bae4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 802bae4:	b480      	push	{r7}
 802bae6:	b085      	sub	sp, #20
 802bae8:	af00      	add	r7, sp, #0
 802baea:	6078      	str	r0, [r7, #4]
 802baec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 802baee:	2300      	movs	r3, #0
 802baf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 802baf2:	683b      	ldr	r3, [r7, #0]
 802baf4:	681a      	ldr	r2, [r3, #0]
 802baf6:	687b      	ldr	r3, [r7, #4]
 802baf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 802bafa:	683b      	ldr	r3, [r7, #0]
 802bafc:	685a      	ldr	r2, [r3, #4]
 802bafe:	687b      	ldr	r3, [r7, #4]
 802bb00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 802bb02:	683b      	ldr	r3, [r7, #0]
 802bb04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 802bb06:	683b      	ldr	r3, [r7, #0]
 802bb08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 802bb0a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 802bb0c:	683b      	ldr	r3, [r7, #0]
 802bb0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 802bb10:	431a      	orrs	r2, r3
                       Data->DPSM);
 802bb12:	683b      	ldr	r3, [r7, #0]
 802bb14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 802bb16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 802bb18:	68fa      	ldr	r2, [r7, #12]
 802bb1a:	4313      	orrs	r3, r2
 802bb1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 802bb1e:	687b      	ldr	r3, [r7, #4]
 802bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bb22:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 802bb26:	68fb      	ldr	r3, [r7, #12]
 802bb28:	431a      	orrs	r2, r3
 802bb2a:	687b      	ldr	r3, [r7, #4]
 802bb2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 802bb2e:	2300      	movs	r3, #0

}
 802bb30:	4618      	mov	r0, r3
 802bb32:	3714      	adds	r7, #20
 802bb34:	46bd      	mov	sp, r7
 802bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb3a:	4770      	bx	lr

0802bb3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 802bb3c:	b580      	push	{r7, lr}
 802bb3e:	b088      	sub	sp, #32
 802bb40:	af00      	add	r7, sp, #0
 802bb42:	6078      	str	r0, [r7, #4]
 802bb44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 802bb46:	683b      	ldr	r3, [r7, #0]
 802bb48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 802bb4a:	2310      	movs	r3, #16
 802bb4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bb4e:	2340      	movs	r3, #64	; 0x40
 802bb50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bb52:	2300      	movs	r3, #0
 802bb54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bb56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bb5c:	f107 0308 	add.w	r3, r7, #8
 802bb60:	4619      	mov	r1, r3
 802bb62:	6878      	ldr	r0, [r7, #4]
 802bb64:	f7ff ff74 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 802bb68:	f241 3288 	movw	r2, #5000	; 0x1388
 802bb6c:	2110      	movs	r1, #16
 802bb6e:	6878      	ldr	r0, [r7, #4]
 802bb70:	f000 f9fe 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bb74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bb76:	69fb      	ldr	r3, [r7, #28]
}
 802bb78:	4618      	mov	r0, r3
 802bb7a:	3720      	adds	r7, #32
 802bb7c:	46bd      	mov	sp, r7
 802bb7e:	bd80      	pop	{r7, pc}

0802bb80 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 802bb80:	b580      	push	{r7, lr}
 802bb82:	b088      	sub	sp, #32
 802bb84:	af00      	add	r7, sp, #0
 802bb86:	6078      	str	r0, [r7, #4]
 802bb88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 802bb8a:	683b      	ldr	r3, [r7, #0]
 802bb8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 802bb8e:	2311      	movs	r3, #17
 802bb90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bb92:	2340      	movs	r3, #64	; 0x40
 802bb94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bb96:	2300      	movs	r3, #0
 802bb98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bba0:	f107 0308 	add.w	r3, r7, #8
 802bba4:	4619      	mov	r1, r3
 802bba6:	6878      	ldr	r0, [r7, #4]
 802bba8:	f7ff ff52 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 802bbac:	f241 3288 	movw	r2, #5000	; 0x1388
 802bbb0:	2111      	movs	r1, #17
 802bbb2:	6878      	ldr	r0, [r7, #4]
 802bbb4:	f000 f9dc 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bbb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bbba:	69fb      	ldr	r3, [r7, #28]
}
 802bbbc:	4618      	mov	r0, r3
 802bbbe:	3720      	adds	r7, #32
 802bbc0:	46bd      	mov	sp, r7
 802bbc2:	bd80      	pop	{r7, pc}

0802bbc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 802bbc4:	b580      	push	{r7, lr}
 802bbc6:	b088      	sub	sp, #32
 802bbc8:	af00      	add	r7, sp, #0
 802bbca:	6078      	str	r0, [r7, #4]
 802bbcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 802bbce:	683b      	ldr	r3, [r7, #0]
 802bbd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 802bbd2:	2312      	movs	r3, #18
 802bbd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bbd6:	2340      	movs	r3, #64	; 0x40
 802bbd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bbda:	2300      	movs	r3, #0
 802bbdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bbe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bbe4:	f107 0308 	add.w	r3, r7, #8
 802bbe8:	4619      	mov	r1, r3
 802bbea:	6878      	ldr	r0, [r7, #4]
 802bbec:	f7ff ff30 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 802bbf0:	f241 3288 	movw	r2, #5000	; 0x1388
 802bbf4:	2112      	movs	r1, #18
 802bbf6:	6878      	ldr	r0, [r7, #4]
 802bbf8:	f000 f9ba 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bbfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bbfe:	69fb      	ldr	r3, [r7, #28]
}
 802bc00:	4618      	mov	r0, r3
 802bc02:	3720      	adds	r7, #32
 802bc04:	46bd      	mov	sp, r7
 802bc06:	bd80      	pop	{r7, pc}

0802bc08 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 802bc08:	b580      	push	{r7, lr}
 802bc0a:	b088      	sub	sp, #32
 802bc0c:	af00      	add	r7, sp, #0
 802bc0e:	6078      	str	r0, [r7, #4]
 802bc10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 802bc12:	683b      	ldr	r3, [r7, #0]
 802bc14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 802bc16:	2318      	movs	r3, #24
 802bc18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bc1a:	2340      	movs	r3, #64	; 0x40
 802bc1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bc1e:	2300      	movs	r3, #0
 802bc20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bc26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bc28:	f107 0308 	add.w	r3, r7, #8
 802bc2c:	4619      	mov	r1, r3
 802bc2e:	6878      	ldr	r0, [r7, #4]
 802bc30:	f7ff ff0e 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 802bc34:	f241 3288 	movw	r2, #5000	; 0x1388
 802bc38:	2118      	movs	r1, #24
 802bc3a:	6878      	ldr	r0, [r7, #4]
 802bc3c:	f000 f998 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bc40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bc42:	69fb      	ldr	r3, [r7, #28]
}
 802bc44:	4618      	mov	r0, r3
 802bc46:	3720      	adds	r7, #32
 802bc48:	46bd      	mov	sp, r7
 802bc4a:	bd80      	pop	{r7, pc}

0802bc4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 802bc4c:	b580      	push	{r7, lr}
 802bc4e:	b088      	sub	sp, #32
 802bc50:	af00      	add	r7, sp, #0
 802bc52:	6078      	str	r0, [r7, #4]
 802bc54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 802bc56:	683b      	ldr	r3, [r7, #0]
 802bc58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 802bc5a:	2319      	movs	r3, #25
 802bc5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bc5e:	2340      	movs	r3, #64	; 0x40
 802bc60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bc62:	2300      	movs	r3, #0
 802bc64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bc6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bc6c:	f107 0308 	add.w	r3, r7, #8
 802bc70:	4619      	mov	r1, r3
 802bc72:	6878      	ldr	r0, [r7, #4]
 802bc74:	f7ff feec 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 802bc78:	f241 3288 	movw	r2, #5000	; 0x1388
 802bc7c:	2119      	movs	r1, #25
 802bc7e:	6878      	ldr	r0, [r7, #4]
 802bc80:	f000 f976 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bc84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bc86:	69fb      	ldr	r3, [r7, #28]
}
 802bc88:	4618      	mov	r0, r3
 802bc8a:	3720      	adds	r7, #32
 802bc8c:	46bd      	mov	sp, r7
 802bc8e:	bd80      	pop	{r7, pc}

0802bc90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 802bc90:	b580      	push	{r7, lr}
 802bc92:	b088      	sub	sp, #32
 802bc94:	af00      	add	r7, sp, #0
 802bc96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 802bc98:	2300      	movs	r3, #0
 802bc9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 802bc9c:	230c      	movs	r3, #12
 802bc9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bca0:	2340      	movs	r3, #64	; 0x40
 802bca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bca4:	2300      	movs	r3, #0
 802bca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bcac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bcae:	f107 0308 	add.w	r3, r7, #8
 802bcb2:	4619      	mov	r1, r3
 802bcb4:	6878      	ldr	r0, [r7, #4]
 802bcb6:	f7ff fecb 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 802bcba:	4a05      	ldr	r2, [pc, #20]	; (802bcd0 <SDMMC_CmdStopTransfer+0x40>)
 802bcbc:	210c      	movs	r1, #12
 802bcbe:	6878      	ldr	r0, [r7, #4]
 802bcc0:	f000 f956 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bcc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bcc6:	69fb      	ldr	r3, [r7, #28]
}
 802bcc8:	4618      	mov	r0, r3
 802bcca:	3720      	adds	r7, #32
 802bccc:	46bd      	mov	sp, r7
 802bcce:	bd80      	pop	{r7, pc}
 802bcd0:	05f5e100 	.word	0x05f5e100

0802bcd4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 802bcd4:	b580      	push	{r7, lr}
 802bcd6:	b08a      	sub	sp, #40	; 0x28
 802bcd8:	af00      	add	r7, sp, #0
 802bcda:	60f8      	str	r0, [r7, #12]
 802bcdc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 802bce0:	683b      	ldr	r3, [r7, #0]
 802bce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 802bce4:	2307      	movs	r3, #7
 802bce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bce8:	2340      	movs	r3, #64	; 0x40
 802bcea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bcec:	2300      	movs	r3, #0
 802bcee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bcf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bcf4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bcf6:	f107 0310 	add.w	r3, r7, #16
 802bcfa:	4619      	mov	r1, r3
 802bcfc:	68f8      	ldr	r0, [r7, #12]
 802bcfe:	f7ff fea7 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 802bd02:	f241 3288 	movw	r2, #5000	; 0x1388
 802bd06:	2107      	movs	r1, #7
 802bd08:	68f8      	ldr	r0, [r7, #12]
 802bd0a:	f000 f931 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bd0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 802bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802bd12:	4618      	mov	r0, r3
 802bd14:	3728      	adds	r7, #40	; 0x28
 802bd16:	46bd      	mov	sp, r7
 802bd18:	bd80      	pop	{r7, pc}

0802bd1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 802bd1a:	b580      	push	{r7, lr}
 802bd1c:	b088      	sub	sp, #32
 802bd1e:	af00      	add	r7, sp, #0
 802bd20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 802bd22:	2300      	movs	r3, #0
 802bd24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 802bd26:	2300      	movs	r3, #0
 802bd28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 802bd2a:	2300      	movs	r3, #0
 802bd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bd2e:	2300      	movs	r3, #0
 802bd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bd32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bd36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bd38:	f107 0308 	add.w	r3, r7, #8
 802bd3c:	4619      	mov	r1, r3
 802bd3e:	6878      	ldr	r0, [r7, #4]
 802bd40:	f7ff fe86 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 802bd44:	6878      	ldr	r0, [r7, #4]
 802bd46:	f000 f8eb 	bl	802bf20 <SDMMC_GetCmdError>
 802bd4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bd4c:	69fb      	ldr	r3, [r7, #28]
}
 802bd4e:	4618      	mov	r0, r3
 802bd50:	3720      	adds	r7, #32
 802bd52:	46bd      	mov	sp, r7
 802bd54:	bd80      	pop	{r7, pc}

0802bd56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 802bd56:	b580      	push	{r7, lr}
 802bd58:	b088      	sub	sp, #32
 802bd5a:	af00      	add	r7, sp, #0
 802bd5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 802bd5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 802bd62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 802bd64:	2308      	movs	r3, #8
 802bd66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bd68:	2340      	movs	r3, #64	; 0x40
 802bd6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bd6c:	2300      	movs	r3, #0
 802bd6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bd74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bd76:	f107 0308 	add.w	r3, r7, #8
 802bd7a:	4619      	mov	r1, r3
 802bd7c:	6878      	ldr	r0, [r7, #4]
 802bd7e:	f7ff fe67 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 802bd82:	6878      	ldr	r0, [r7, #4]
 802bd84:	f000 fad4 	bl	802c330 <SDMMC_GetCmdResp7>
 802bd88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bd8a:	69fb      	ldr	r3, [r7, #28]
}
 802bd8c:	4618      	mov	r0, r3
 802bd8e:	3720      	adds	r7, #32
 802bd90:	46bd      	mov	sp, r7
 802bd92:	bd80      	pop	{r7, pc}

0802bd94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 802bd94:	b580      	push	{r7, lr}
 802bd96:	b088      	sub	sp, #32
 802bd98:	af00      	add	r7, sp, #0
 802bd9a:	6078      	str	r0, [r7, #4]
 802bd9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 802bd9e:	683b      	ldr	r3, [r7, #0]
 802bda0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 802bda2:	2337      	movs	r3, #55	; 0x37
 802bda4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bda6:	2340      	movs	r3, #64	; 0x40
 802bda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bdaa:	2300      	movs	r3, #0
 802bdac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bdae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bdb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802bdb4:	f107 0308 	add.w	r3, r7, #8
 802bdb8:	4619      	mov	r1, r3
 802bdba:	6878      	ldr	r0, [r7, #4]
 802bdbc:	f7ff fe48 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 802bdc0:	f241 3288 	movw	r2, #5000	; 0x1388
 802bdc4:	2137      	movs	r1, #55	; 0x37
 802bdc6:	6878      	ldr	r0, [r7, #4]
 802bdc8:	f000 f8d2 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bdcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bdce:	69fb      	ldr	r3, [r7, #28]
}
 802bdd0:	4618      	mov	r0, r3
 802bdd2:	3720      	adds	r7, #32
 802bdd4:	46bd      	mov	sp, r7
 802bdd6:	bd80      	pop	{r7, pc}

0802bdd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 802bdd8:	b580      	push	{r7, lr}
 802bdda:	b088      	sub	sp, #32
 802bddc:	af00      	add	r7, sp, #0
 802bdde:	6078      	str	r0, [r7, #4]
 802bde0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 802bde2:	683b      	ldr	r3, [r7, #0]
 802bde4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802bde8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802bdec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 802bdee:	2329      	movs	r3, #41	; 0x29
 802bdf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802bdf2:	2340      	movs	r3, #64	; 0x40
 802bdf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bdf6:	2300      	movs	r3, #0
 802bdf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bdfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bdfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802be00:	f107 0308 	add.w	r3, r7, #8
 802be04:	4619      	mov	r1, r3
 802be06:	6878      	ldr	r0, [r7, #4]
 802be08:	f7ff fe22 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 802be0c:	6878      	ldr	r0, [r7, #4]
 802be0e:	f000 f9e1 	bl	802c1d4 <SDMMC_GetCmdResp3>
 802be12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802be14:	69fb      	ldr	r3, [r7, #28]
}
 802be16:	4618      	mov	r0, r3
 802be18:	3720      	adds	r7, #32
 802be1a:	46bd      	mov	sp, r7
 802be1c:	bd80      	pop	{r7, pc}

0802be1e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 802be1e:	b580      	push	{r7, lr}
 802be20:	b088      	sub	sp, #32
 802be22:	af00      	add	r7, sp, #0
 802be24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 802be26:	2300      	movs	r3, #0
 802be28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802be2a:	2302      	movs	r3, #2
 802be2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 802be2e:	23c0      	movs	r3, #192	; 0xc0
 802be30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802be32:	2300      	movs	r3, #0
 802be34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802be36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802be3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802be3c:	f107 0308 	add.w	r3, r7, #8
 802be40:	4619      	mov	r1, r3
 802be42:	6878      	ldr	r0, [r7, #4]
 802be44:	f7ff fe04 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 802be48:	6878      	ldr	r0, [r7, #4]
 802be4a:	f000 f97d 	bl	802c148 <SDMMC_GetCmdResp2>
 802be4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802be50:	69fb      	ldr	r3, [r7, #28]
}
 802be52:	4618      	mov	r0, r3
 802be54:	3720      	adds	r7, #32
 802be56:	46bd      	mov	sp, r7
 802be58:	bd80      	pop	{r7, pc}

0802be5a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 802be5a:	b580      	push	{r7, lr}
 802be5c:	b088      	sub	sp, #32
 802be5e:	af00      	add	r7, sp, #0
 802be60:	6078      	str	r0, [r7, #4]
 802be62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802be64:	683b      	ldr	r3, [r7, #0]
 802be66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802be68:	2309      	movs	r3, #9
 802be6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 802be6c:	23c0      	movs	r3, #192	; 0xc0
 802be6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802be70:	2300      	movs	r3, #0
 802be72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802be74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802be78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802be7a:	f107 0308 	add.w	r3, r7, #8
 802be7e:	4619      	mov	r1, r3
 802be80:	6878      	ldr	r0, [r7, #4]
 802be82:	f7ff fde5 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 802be86:	6878      	ldr	r0, [r7, #4]
 802be88:	f000 f95e 	bl	802c148 <SDMMC_GetCmdResp2>
 802be8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802be8e:	69fb      	ldr	r3, [r7, #28]
}
 802be90:	4618      	mov	r0, r3
 802be92:	3720      	adds	r7, #32
 802be94:	46bd      	mov	sp, r7
 802be96:	bd80      	pop	{r7, pc}

0802be98 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 802be98:	b580      	push	{r7, lr}
 802be9a:	b088      	sub	sp, #32
 802be9c:	af00      	add	r7, sp, #0
 802be9e:	6078      	str	r0, [r7, #4]
 802bea0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 802bea2:	2300      	movs	r3, #0
 802bea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802bea6:	2303      	movs	r3, #3
 802bea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802beaa:	2340      	movs	r3, #64	; 0x40
 802beac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802beae:	2300      	movs	r3, #0
 802beb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802beb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802beb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802beb8:	f107 0308 	add.w	r3, r7, #8
 802bebc:	4619      	mov	r1, r3
 802bebe:	6878      	ldr	r0, [r7, #4]
 802bec0:	f7ff fdc6 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 802bec4:	683a      	ldr	r2, [r7, #0]
 802bec6:	2103      	movs	r1, #3
 802bec8:	6878      	ldr	r0, [r7, #4]
 802beca:	f000 f9bd 	bl	802c248 <SDMMC_GetCmdResp6>
 802bece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bed0:	69fb      	ldr	r3, [r7, #28]
}
 802bed2:	4618      	mov	r0, r3
 802bed4:	3720      	adds	r7, #32
 802bed6:	46bd      	mov	sp, r7
 802bed8:	bd80      	pop	{r7, pc}

0802beda <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 802beda:	b580      	push	{r7, lr}
 802bedc:	b088      	sub	sp, #32
 802bede:	af00      	add	r7, sp, #0
 802bee0:	6078      	str	r0, [r7, #4]
 802bee2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 802bee4:	683b      	ldr	r3, [r7, #0]
 802bee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 802bee8:	230d      	movs	r3, #13
 802beea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802beec:	2340      	movs	r3, #64	; 0x40
 802beee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802bef0:	2300      	movs	r3, #0
 802bef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802bef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802befa:	f107 0308 	add.w	r3, r7, #8
 802befe:	4619      	mov	r1, r3
 802bf00:	6878      	ldr	r0, [r7, #4]
 802bf02:	f7ff fda5 	bl	802ba50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 802bf06:	f241 3288 	movw	r2, #5000	; 0x1388
 802bf0a:	210d      	movs	r1, #13
 802bf0c:	6878      	ldr	r0, [r7, #4]
 802bf0e:	f000 f82f 	bl	802bf70 <SDMMC_GetCmdResp1>
 802bf12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802bf14:	69fb      	ldr	r3, [r7, #28]
}
 802bf16:	4618      	mov	r0, r3
 802bf18:	3720      	adds	r7, #32
 802bf1a:	46bd      	mov	sp, r7
 802bf1c:	bd80      	pop	{r7, pc}
	...

0802bf20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 802bf20:	b490      	push	{r4, r7}
 802bf22:	b082      	sub	sp, #8
 802bf24:	af00      	add	r7, sp, #0
 802bf26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802bf28:	4b0f      	ldr	r3, [pc, #60]	; (802bf68 <SDMMC_GetCmdError+0x48>)
 802bf2a:	681b      	ldr	r3, [r3, #0]
 802bf2c:	4a0f      	ldr	r2, [pc, #60]	; (802bf6c <SDMMC_GetCmdError+0x4c>)
 802bf2e:	fba2 2303 	umull	r2, r3, r2, r3
 802bf32:	0a5b      	lsrs	r3, r3, #9
 802bf34:	f241 3288 	movw	r2, #5000	; 0x1388
 802bf38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802bf3c:	4623      	mov	r3, r4
 802bf3e:	1e5c      	subs	r4, r3, #1
 802bf40:	2b00      	cmp	r3, #0
 802bf42:	d102      	bne.n	802bf4a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802bf44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802bf48:	e009      	b.n	802bf5e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 802bf4a:	687b      	ldr	r3, [r7, #4]
 802bf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bf52:	2b00      	cmp	r3, #0
 802bf54:	d0f2      	beq.n	802bf3c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	22c5      	movs	r2, #197	; 0xc5
 802bf5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 802bf5c:	2300      	movs	r3, #0
}
 802bf5e:	4618      	mov	r0, r3
 802bf60:	3708      	adds	r7, #8
 802bf62:	46bd      	mov	sp, r7
 802bf64:	bc90      	pop	{r4, r7}
 802bf66:	4770      	bx	lr
 802bf68:	20000000 	.word	0x20000000
 802bf6c:	10624dd3 	.word	0x10624dd3

0802bf70 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 802bf70:	b590      	push	{r4, r7, lr}
 802bf72:	b087      	sub	sp, #28
 802bf74:	af00      	add	r7, sp, #0
 802bf76:	60f8      	str	r0, [r7, #12]
 802bf78:	460b      	mov	r3, r1
 802bf7a:	607a      	str	r2, [r7, #4]
 802bf7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 802bf7e:	4b6f      	ldr	r3, [pc, #444]	; (802c13c <SDMMC_GetCmdResp1+0x1cc>)
 802bf80:	681b      	ldr	r3, [r3, #0]
 802bf82:	4a6f      	ldr	r2, [pc, #444]	; (802c140 <SDMMC_GetCmdResp1+0x1d0>)
 802bf84:	fba2 2303 	umull	r2, r3, r2, r3
 802bf88:	0a5b      	lsrs	r3, r3, #9
 802bf8a:	687a      	ldr	r2, [r7, #4]
 802bf8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802bf90:	4623      	mov	r3, r4
 802bf92:	1e5c      	subs	r4, r3, #1
 802bf94:	2b00      	cmp	r3, #0
 802bf96:	d102      	bne.n	802bf9e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802bf98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802bf9c:	e0c9      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 802bf9e:	68fb      	ldr	r3, [r7, #12]
 802bfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bfa2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802bfa4:	697b      	ldr	r3, [r7, #20]
 802bfa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802bfaa:	2b00      	cmp	r3, #0
 802bfac:	d0f0      	beq.n	802bf90 <SDMMC_GetCmdResp1+0x20>
 802bfae:	697b      	ldr	r3, [r7, #20]
 802bfb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802bfb4:	2b00      	cmp	r3, #0
 802bfb6:	d1eb      	bne.n	802bf90 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 802bfb8:	68fb      	ldr	r3, [r7, #12]
 802bfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bfbc:	f003 0304 	and.w	r3, r3, #4
 802bfc0:	2b00      	cmp	r3, #0
 802bfc2:	d004      	beq.n	802bfce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 802bfc4:	68fb      	ldr	r3, [r7, #12]
 802bfc6:	2204      	movs	r2, #4
 802bfc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802bfca:	2304      	movs	r3, #4
 802bfcc:	e0b1      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 802bfce:	68fb      	ldr	r3, [r7, #12]
 802bfd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bfd2:	f003 0301 	and.w	r3, r3, #1
 802bfd6:	2b00      	cmp	r3, #0
 802bfd8:	d004      	beq.n	802bfe4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 802bfda:	68fb      	ldr	r3, [r7, #12]
 802bfdc:	2201      	movs	r2, #1
 802bfde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802bfe0:	2301      	movs	r3, #1
 802bfe2:	e0a6      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 802bfe4:	68fb      	ldr	r3, [r7, #12]
 802bfe6:	22c5      	movs	r2, #197	; 0xc5
 802bfe8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 802bfea:	68f8      	ldr	r0, [r7, #12]
 802bfec:	f7ff fd5a 	bl	802baa4 <SDIO_GetCommandResponse>
 802bff0:	4603      	mov	r3, r0
 802bff2:	461a      	mov	r2, r3
 802bff4:	7afb      	ldrb	r3, [r7, #11]
 802bff6:	4293      	cmp	r3, r2
 802bff8:	d001      	beq.n	802bffe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802bffa:	2301      	movs	r3, #1
 802bffc:	e099      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 802bffe:	2100      	movs	r1, #0
 802c000:	68f8      	ldr	r0, [r7, #12]
 802c002:	f7ff fd5c 	bl	802babe <SDIO_GetResponse>
 802c006:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 802c008:	693a      	ldr	r2, [r7, #16]
 802c00a:	4b4e      	ldr	r3, [pc, #312]	; (802c144 <SDMMC_GetCmdResp1+0x1d4>)
 802c00c:	4013      	ands	r3, r2
 802c00e:	2b00      	cmp	r3, #0
 802c010:	d101      	bne.n	802c016 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 802c012:	2300      	movs	r3, #0
 802c014:	e08d      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 802c016:	693b      	ldr	r3, [r7, #16]
 802c018:	2b00      	cmp	r3, #0
 802c01a:	da02      	bge.n	802c022 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 802c01c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802c020:	e087      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 802c022:	693b      	ldr	r3, [r7, #16]
 802c024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802c028:	2b00      	cmp	r3, #0
 802c02a:	d001      	beq.n	802c030 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 802c02c:	2340      	movs	r3, #64	; 0x40
 802c02e:	e080      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 802c030:	693b      	ldr	r3, [r7, #16]
 802c032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802c036:	2b00      	cmp	r3, #0
 802c038:	d001      	beq.n	802c03e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802c03a:	2380      	movs	r3, #128	; 0x80
 802c03c:	e079      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 802c03e:	693b      	ldr	r3, [r7, #16]
 802c040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802c044:	2b00      	cmp	r3, #0
 802c046:	d002      	beq.n	802c04e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 802c048:	f44f 7380 	mov.w	r3, #256	; 0x100
 802c04c:	e071      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 802c04e:	693b      	ldr	r3, [r7, #16]
 802c050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802c054:	2b00      	cmp	r3, #0
 802c056:	d002      	beq.n	802c05e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 802c058:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c05c:	e069      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 802c05e:	693b      	ldr	r3, [r7, #16]
 802c060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802c064:	2b00      	cmp	r3, #0
 802c066:	d002      	beq.n	802c06e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 802c068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c06c:	e061      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 802c06e:	693b      	ldr	r3, [r7, #16]
 802c070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802c074:	2b00      	cmp	r3, #0
 802c076:	d002      	beq.n	802c07e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 802c078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802c07c:	e059      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 802c07e:	693b      	ldr	r3, [r7, #16]
 802c080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802c084:	2b00      	cmp	r3, #0
 802c086:	d002      	beq.n	802c08e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802c088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802c08c:	e051      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 802c08e:	693b      	ldr	r3, [r7, #16]
 802c090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802c094:	2b00      	cmp	r3, #0
 802c096:	d002      	beq.n	802c09e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802c098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802c09c:	e049      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 802c09e:	693b      	ldr	r3, [r7, #16]
 802c0a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802c0a4:	2b00      	cmp	r3, #0
 802c0a6:	d002      	beq.n	802c0ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 802c0a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802c0ac:	e041      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802c0ae:	693b      	ldr	r3, [r7, #16]
 802c0b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802c0b4:	2b00      	cmp	r3, #0
 802c0b6:	d002      	beq.n	802c0be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 802c0b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802c0bc:	e039      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 802c0be:	693b      	ldr	r3, [r7, #16]
 802c0c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802c0c4:	2b00      	cmp	r3, #0
 802c0c6:	d002      	beq.n	802c0ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 802c0c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802c0cc:	e031      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 802c0ce:	693b      	ldr	r3, [r7, #16]
 802c0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802c0d4:	2b00      	cmp	r3, #0
 802c0d6:	d002      	beq.n	802c0de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 802c0d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802c0dc:	e029      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 802c0de:	693b      	ldr	r3, [r7, #16]
 802c0e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802c0e4:	2b00      	cmp	r3, #0
 802c0e6:	d002      	beq.n	802c0ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 802c0e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802c0ec:	e021      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 802c0ee:	693b      	ldr	r3, [r7, #16]
 802c0f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802c0f4:	2b00      	cmp	r3, #0
 802c0f6:	d002      	beq.n	802c0fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 802c0f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802c0fc:	e019      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 802c0fe:	693b      	ldr	r3, [r7, #16]
 802c100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802c104:	2b00      	cmp	r3, #0
 802c106:	d002      	beq.n	802c10e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 802c108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802c10c:	e011      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 802c10e:	693b      	ldr	r3, [r7, #16]
 802c110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802c114:	2b00      	cmp	r3, #0
 802c116:	d002      	beq.n	802c11e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 802c118:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802c11c:	e009      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 802c11e:	693b      	ldr	r3, [r7, #16]
 802c120:	f003 0308 	and.w	r3, r3, #8
 802c124:	2b00      	cmp	r3, #0
 802c126:	d002      	beq.n	802c12e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 802c128:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802c12c:	e001      	b.n	802c132 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802c12e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 802c132:	4618      	mov	r0, r3
 802c134:	371c      	adds	r7, #28
 802c136:	46bd      	mov	sp, r7
 802c138:	bd90      	pop	{r4, r7, pc}
 802c13a:	bf00      	nop
 802c13c:	20000000 	.word	0x20000000
 802c140:	10624dd3 	.word	0x10624dd3
 802c144:	fdffe008 	.word	0xfdffe008

0802c148 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 802c148:	b490      	push	{r4, r7}
 802c14a:	b084      	sub	sp, #16
 802c14c:	af00      	add	r7, sp, #0
 802c14e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802c150:	4b1e      	ldr	r3, [pc, #120]	; (802c1cc <SDMMC_GetCmdResp2+0x84>)
 802c152:	681b      	ldr	r3, [r3, #0]
 802c154:	4a1e      	ldr	r2, [pc, #120]	; (802c1d0 <SDMMC_GetCmdResp2+0x88>)
 802c156:	fba2 2303 	umull	r2, r3, r2, r3
 802c15a:	0a5b      	lsrs	r3, r3, #9
 802c15c:	f241 3288 	movw	r2, #5000	; 0x1388
 802c160:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802c164:	4623      	mov	r3, r4
 802c166:	1e5c      	subs	r4, r3, #1
 802c168:	2b00      	cmp	r3, #0
 802c16a:	d102      	bne.n	802c172 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802c16c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c170:	e026      	b.n	802c1c0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 802c172:	687b      	ldr	r3, [r7, #4]
 802c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c176:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c178:	68fb      	ldr	r3, [r7, #12]
 802c17a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802c17e:	2b00      	cmp	r3, #0
 802c180:	d0f0      	beq.n	802c164 <SDMMC_GetCmdResp2+0x1c>
 802c182:	68fb      	ldr	r3, [r7, #12]
 802c184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c188:	2b00      	cmp	r3, #0
 802c18a:	d1eb      	bne.n	802c164 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 802c18c:	687b      	ldr	r3, [r7, #4]
 802c18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c190:	f003 0304 	and.w	r3, r3, #4
 802c194:	2b00      	cmp	r3, #0
 802c196:	d004      	beq.n	802c1a2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 802c198:	687b      	ldr	r3, [r7, #4]
 802c19a:	2204      	movs	r2, #4
 802c19c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802c19e:	2304      	movs	r3, #4
 802c1a0:	e00e      	b.n	802c1c0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 802c1a2:	687b      	ldr	r3, [r7, #4]
 802c1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c1a6:	f003 0301 	and.w	r3, r3, #1
 802c1aa:	2b00      	cmp	r3, #0
 802c1ac:	d004      	beq.n	802c1b8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 802c1ae:	687b      	ldr	r3, [r7, #4]
 802c1b0:	2201      	movs	r2, #1
 802c1b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802c1b4:	2301      	movs	r3, #1
 802c1b6:	e003      	b.n	802c1c0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 802c1b8:	687b      	ldr	r3, [r7, #4]
 802c1ba:	22c5      	movs	r2, #197	; 0xc5
 802c1bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 802c1be:	2300      	movs	r3, #0
}
 802c1c0:	4618      	mov	r0, r3
 802c1c2:	3710      	adds	r7, #16
 802c1c4:	46bd      	mov	sp, r7
 802c1c6:	bc90      	pop	{r4, r7}
 802c1c8:	4770      	bx	lr
 802c1ca:	bf00      	nop
 802c1cc:	20000000 	.word	0x20000000
 802c1d0:	10624dd3 	.word	0x10624dd3

0802c1d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 802c1d4:	b490      	push	{r4, r7}
 802c1d6:	b084      	sub	sp, #16
 802c1d8:	af00      	add	r7, sp, #0
 802c1da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802c1dc:	4b18      	ldr	r3, [pc, #96]	; (802c240 <SDMMC_GetCmdResp3+0x6c>)
 802c1de:	681b      	ldr	r3, [r3, #0]
 802c1e0:	4a18      	ldr	r2, [pc, #96]	; (802c244 <SDMMC_GetCmdResp3+0x70>)
 802c1e2:	fba2 2303 	umull	r2, r3, r2, r3
 802c1e6:	0a5b      	lsrs	r3, r3, #9
 802c1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 802c1ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802c1f0:	4623      	mov	r3, r4
 802c1f2:	1e5c      	subs	r4, r3, #1
 802c1f4:	2b00      	cmp	r3, #0
 802c1f6:	d102      	bne.n	802c1fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802c1f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c1fc:	e01b      	b.n	802c236 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 802c1fe:	687b      	ldr	r3, [r7, #4]
 802c200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c202:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c204:	68fb      	ldr	r3, [r7, #12]
 802c206:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802c20a:	2b00      	cmp	r3, #0
 802c20c:	d0f0      	beq.n	802c1f0 <SDMMC_GetCmdResp3+0x1c>
 802c20e:	68fb      	ldr	r3, [r7, #12]
 802c210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c214:	2b00      	cmp	r3, #0
 802c216:	d1eb      	bne.n	802c1f0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 802c218:	687b      	ldr	r3, [r7, #4]
 802c21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c21c:	f003 0304 	and.w	r3, r3, #4
 802c220:	2b00      	cmp	r3, #0
 802c222:	d004      	beq.n	802c22e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 802c224:	687b      	ldr	r3, [r7, #4]
 802c226:	2204      	movs	r2, #4
 802c228:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802c22a:	2304      	movs	r3, #4
 802c22c:	e003      	b.n	802c236 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	22c5      	movs	r2, #197	; 0xc5
 802c232:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 802c234:	2300      	movs	r3, #0
}
 802c236:	4618      	mov	r0, r3
 802c238:	3710      	adds	r7, #16
 802c23a:	46bd      	mov	sp, r7
 802c23c:	bc90      	pop	{r4, r7}
 802c23e:	4770      	bx	lr
 802c240:	20000000 	.word	0x20000000
 802c244:	10624dd3 	.word	0x10624dd3

0802c248 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 802c248:	b590      	push	{r4, r7, lr}
 802c24a:	b087      	sub	sp, #28
 802c24c:	af00      	add	r7, sp, #0
 802c24e:	60f8      	str	r0, [r7, #12]
 802c250:	460b      	mov	r3, r1
 802c252:	607a      	str	r2, [r7, #4]
 802c254:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802c256:	4b34      	ldr	r3, [pc, #208]	; (802c328 <SDMMC_GetCmdResp6+0xe0>)
 802c258:	681b      	ldr	r3, [r3, #0]
 802c25a:	4a34      	ldr	r2, [pc, #208]	; (802c32c <SDMMC_GetCmdResp6+0xe4>)
 802c25c:	fba2 2303 	umull	r2, r3, r2, r3
 802c260:	0a5b      	lsrs	r3, r3, #9
 802c262:	f241 3288 	movw	r2, #5000	; 0x1388
 802c266:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802c26a:	4623      	mov	r3, r4
 802c26c:	1e5c      	subs	r4, r3, #1
 802c26e:	2b00      	cmp	r3, #0
 802c270:	d102      	bne.n	802c278 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 802c272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c276:	e052      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 802c278:	68fb      	ldr	r3, [r7, #12]
 802c27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c27c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c27e:	697b      	ldr	r3, [r7, #20]
 802c280:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802c284:	2b00      	cmp	r3, #0
 802c286:	d0f0      	beq.n	802c26a <SDMMC_GetCmdResp6+0x22>
 802c288:	697b      	ldr	r3, [r7, #20]
 802c28a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c28e:	2b00      	cmp	r3, #0
 802c290:	d1eb      	bne.n	802c26a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 802c292:	68fb      	ldr	r3, [r7, #12]
 802c294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c296:	f003 0304 	and.w	r3, r3, #4
 802c29a:	2b00      	cmp	r3, #0
 802c29c:	d004      	beq.n	802c2a8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 802c29e:	68fb      	ldr	r3, [r7, #12]
 802c2a0:	2204      	movs	r2, #4
 802c2a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802c2a4:	2304      	movs	r3, #4
 802c2a6:	e03a      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 802c2a8:	68fb      	ldr	r3, [r7, #12]
 802c2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c2ac:	f003 0301 	and.w	r3, r3, #1
 802c2b0:	2b00      	cmp	r3, #0
 802c2b2:	d004      	beq.n	802c2be <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 802c2b4:	68fb      	ldr	r3, [r7, #12]
 802c2b6:	2201      	movs	r2, #1
 802c2b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802c2ba:	2301      	movs	r3, #1
 802c2bc:	e02f      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 802c2be:	68f8      	ldr	r0, [r7, #12]
 802c2c0:	f7ff fbf0 	bl	802baa4 <SDIO_GetCommandResponse>
 802c2c4:	4603      	mov	r3, r0
 802c2c6:	461a      	mov	r2, r3
 802c2c8:	7afb      	ldrb	r3, [r7, #11]
 802c2ca:	4293      	cmp	r3, r2
 802c2cc:	d001      	beq.n	802c2d2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802c2ce:	2301      	movs	r3, #1
 802c2d0:	e025      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 802c2d2:	68fb      	ldr	r3, [r7, #12]
 802c2d4:	22c5      	movs	r2, #197	; 0xc5
 802c2d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 802c2d8:	2100      	movs	r1, #0
 802c2da:	68f8      	ldr	r0, [r7, #12]
 802c2dc:	f7ff fbef 	bl	802babe <SDIO_GetResponse>
 802c2e0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 802c2e2:	693b      	ldr	r3, [r7, #16]
 802c2e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 802c2e8:	2b00      	cmp	r3, #0
 802c2ea:	d106      	bne.n	802c2fa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 802c2ec:	693b      	ldr	r3, [r7, #16]
 802c2ee:	0c1b      	lsrs	r3, r3, #16
 802c2f0:	b29a      	uxth	r2, r3
 802c2f2:	687b      	ldr	r3, [r7, #4]
 802c2f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 802c2f6:	2300      	movs	r3, #0
 802c2f8:	e011      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 802c2fa:	693b      	ldr	r3, [r7, #16]
 802c2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802c300:	2b00      	cmp	r3, #0
 802c302:	d002      	beq.n	802c30a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802c304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802c308:	e009      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 802c30a:	693b      	ldr	r3, [r7, #16]
 802c30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802c310:	2b00      	cmp	r3, #0
 802c312:	d002      	beq.n	802c31a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802c314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802c318:	e001      	b.n	802c31e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802c31a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 802c31e:	4618      	mov	r0, r3
 802c320:	371c      	adds	r7, #28
 802c322:	46bd      	mov	sp, r7
 802c324:	bd90      	pop	{r4, r7, pc}
 802c326:	bf00      	nop
 802c328:	20000000 	.word	0x20000000
 802c32c:	10624dd3 	.word	0x10624dd3

0802c330 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 802c330:	b490      	push	{r4, r7}
 802c332:	b084      	sub	sp, #16
 802c334:	af00      	add	r7, sp, #0
 802c336:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802c338:	4b21      	ldr	r3, [pc, #132]	; (802c3c0 <SDMMC_GetCmdResp7+0x90>)
 802c33a:	681b      	ldr	r3, [r3, #0]
 802c33c:	4a21      	ldr	r2, [pc, #132]	; (802c3c4 <SDMMC_GetCmdResp7+0x94>)
 802c33e:	fba2 2303 	umull	r2, r3, r2, r3
 802c342:	0a5b      	lsrs	r3, r3, #9
 802c344:	f241 3288 	movw	r2, #5000	; 0x1388
 802c348:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802c34c:	4623      	mov	r3, r4
 802c34e:	1e5c      	subs	r4, r3, #1
 802c350:	2b00      	cmp	r3, #0
 802c352:	d102      	bne.n	802c35a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802c354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c358:	e02c      	b.n	802c3b4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 802c35a:	687b      	ldr	r3, [r7, #4]
 802c35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c35e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c360:	68fb      	ldr	r3, [r7, #12]
 802c362:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802c366:	2b00      	cmp	r3, #0
 802c368:	d0f0      	beq.n	802c34c <SDMMC_GetCmdResp7+0x1c>
 802c36a:	68fb      	ldr	r3, [r7, #12]
 802c36c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 802c370:	2b00      	cmp	r3, #0
 802c372:	d1eb      	bne.n	802c34c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 802c374:	687b      	ldr	r3, [r7, #4]
 802c376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c378:	f003 0304 	and.w	r3, r3, #4
 802c37c:	2b00      	cmp	r3, #0
 802c37e:	d004      	beq.n	802c38a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 802c380:	687b      	ldr	r3, [r7, #4]
 802c382:	2204      	movs	r2, #4
 802c384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802c386:	2304      	movs	r3, #4
 802c388:	e014      	b.n	802c3b4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 802c38a:	687b      	ldr	r3, [r7, #4]
 802c38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c38e:	f003 0301 	and.w	r3, r3, #1
 802c392:	2b00      	cmp	r3, #0
 802c394:	d004      	beq.n	802c3a0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 802c396:	687b      	ldr	r3, [r7, #4]
 802c398:	2201      	movs	r2, #1
 802c39a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802c39c:	2301      	movs	r3, #1
 802c39e:	e009      	b.n	802c3b4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 802c3a0:	687b      	ldr	r3, [r7, #4]
 802c3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c3a8:	2b00      	cmp	r3, #0
 802c3aa:	d002      	beq.n	802c3b2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 802c3ac:	687b      	ldr	r3, [r7, #4]
 802c3ae:	2240      	movs	r2, #64	; 0x40
 802c3b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 802c3b2:	2300      	movs	r3, #0
  
}
 802c3b4:	4618      	mov	r0, r3
 802c3b6:	3710      	adds	r7, #16
 802c3b8:	46bd      	mov	sp, r7
 802c3ba:	bc90      	pop	{r4, r7}
 802c3bc:	4770      	bx	lr
 802c3be:	bf00      	nop
 802c3c0:	20000000 	.word	0x20000000
 802c3c4:	10624dd3 	.word	0x10624dd3

0802c3c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802c3c8:	b084      	sub	sp, #16
 802c3ca:	b580      	push	{r7, lr}
 802c3cc:	b084      	sub	sp, #16
 802c3ce:	af00      	add	r7, sp, #0
 802c3d0:	6078      	str	r0, [r7, #4]
 802c3d2:	f107 001c 	add.w	r0, r7, #28
 802c3d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c3dc:	2b01      	cmp	r3, #1
 802c3de:	d122      	bne.n	802c426 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802c3e0:	687b      	ldr	r3, [r7, #4]
 802c3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c3e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802c3e8:	687b      	ldr	r3, [r7, #4]
 802c3ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802c3ec:	687b      	ldr	r3, [r7, #4]
 802c3ee:	68db      	ldr	r3, [r3, #12]
 802c3f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802c3f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c3f8:	687a      	ldr	r2, [r7, #4]
 802c3fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802c3fc:	687b      	ldr	r3, [r7, #4]
 802c3fe:	68db      	ldr	r3, [r3, #12]
 802c400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802c404:	687b      	ldr	r3, [r7, #4]
 802c406:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c40a:	2b01      	cmp	r3, #1
 802c40c:	d105      	bne.n	802c41a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802c40e:	687b      	ldr	r3, [r7, #4]
 802c410:	68db      	ldr	r3, [r3, #12]
 802c412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 802c41a:	6878      	ldr	r0, [r7, #4]
 802c41c:	f001 fac6 	bl	802d9ac <USB_CoreReset>
 802c420:	4603      	mov	r3, r0
 802c422:	73fb      	strb	r3, [r7, #15]
 802c424:	e01a      	b.n	802c45c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802c426:	687b      	ldr	r3, [r7, #4]
 802c428:	68db      	ldr	r3, [r3, #12]
 802c42a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802c42e:	687b      	ldr	r3, [r7, #4]
 802c430:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802c432:	6878      	ldr	r0, [r7, #4]
 802c434:	f001 faba 	bl	802d9ac <USB_CoreReset>
 802c438:	4603      	mov	r3, r0
 802c43a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802c43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c43e:	2b00      	cmp	r3, #0
 802c440:	d106      	bne.n	802c450 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802c442:	687b      	ldr	r3, [r7, #4]
 802c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802c44a:	687b      	ldr	r3, [r7, #4]
 802c44c:	639a      	str	r2, [r3, #56]	; 0x38
 802c44e:	e005      	b.n	802c45c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802c450:	687b      	ldr	r3, [r7, #4]
 802c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802c458:	687b      	ldr	r3, [r7, #4]
 802c45a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c45e:	2b01      	cmp	r3, #1
 802c460:	d10b      	bne.n	802c47a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802c462:	687b      	ldr	r3, [r7, #4]
 802c464:	689b      	ldr	r3, [r3, #8]
 802c466:	f043 0206 	orr.w	r2, r3, #6
 802c46a:	687b      	ldr	r3, [r7, #4]
 802c46c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802c46e:	687b      	ldr	r3, [r7, #4]
 802c470:	689b      	ldr	r3, [r3, #8]
 802c472:	f043 0220 	orr.w	r2, r3, #32
 802c476:	687b      	ldr	r3, [r7, #4]
 802c478:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802c47a:	7bfb      	ldrb	r3, [r7, #15]
}
 802c47c:	4618      	mov	r0, r3
 802c47e:	3710      	adds	r7, #16
 802c480:	46bd      	mov	sp, r7
 802c482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802c486:	b004      	add	sp, #16
 802c488:	4770      	bx	lr
	...

0802c48c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802c48c:	b480      	push	{r7}
 802c48e:	b087      	sub	sp, #28
 802c490:	af00      	add	r7, sp, #0
 802c492:	60f8      	str	r0, [r7, #12]
 802c494:	60b9      	str	r1, [r7, #8]
 802c496:	4613      	mov	r3, r2
 802c498:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802c49a:	79fb      	ldrb	r3, [r7, #7]
 802c49c:	2b02      	cmp	r3, #2
 802c49e:	d165      	bne.n	802c56c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802c4a0:	68bb      	ldr	r3, [r7, #8]
 802c4a2:	4a41      	ldr	r2, [pc, #260]	; (802c5a8 <USB_SetTurnaroundTime+0x11c>)
 802c4a4:	4293      	cmp	r3, r2
 802c4a6:	d906      	bls.n	802c4b6 <USB_SetTurnaroundTime+0x2a>
 802c4a8:	68bb      	ldr	r3, [r7, #8]
 802c4aa:	4a40      	ldr	r2, [pc, #256]	; (802c5ac <USB_SetTurnaroundTime+0x120>)
 802c4ac:	4293      	cmp	r3, r2
 802c4ae:	d802      	bhi.n	802c4b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802c4b0:	230f      	movs	r3, #15
 802c4b2:	617b      	str	r3, [r7, #20]
 802c4b4:	e062      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802c4b6:	68bb      	ldr	r3, [r7, #8]
 802c4b8:	4a3c      	ldr	r2, [pc, #240]	; (802c5ac <USB_SetTurnaroundTime+0x120>)
 802c4ba:	4293      	cmp	r3, r2
 802c4bc:	d906      	bls.n	802c4cc <USB_SetTurnaroundTime+0x40>
 802c4be:	68bb      	ldr	r3, [r7, #8]
 802c4c0:	4a3b      	ldr	r2, [pc, #236]	; (802c5b0 <USB_SetTurnaroundTime+0x124>)
 802c4c2:	4293      	cmp	r3, r2
 802c4c4:	d802      	bhi.n	802c4cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802c4c6:	230e      	movs	r3, #14
 802c4c8:	617b      	str	r3, [r7, #20]
 802c4ca:	e057      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802c4cc:	68bb      	ldr	r3, [r7, #8]
 802c4ce:	4a38      	ldr	r2, [pc, #224]	; (802c5b0 <USB_SetTurnaroundTime+0x124>)
 802c4d0:	4293      	cmp	r3, r2
 802c4d2:	d906      	bls.n	802c4e2 <USB_SetTurnaroundTime+0x56>
 802c4d4:	68bb      	ldr	r3, [r7, #8]
 802c4d6:	4a37      	ldr	r2, [pc, #220]	; (802c5b4 <USB_SetTurnaroundTime+0x128>)
 802c4d8:	4293      	cmp	r3, r2
 802c4da:	d802      	bhi.n	802c4e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802c4dc:	230d      	movs	r3, #13
 802c4de:	617b      	str	r3, [r7, #20]
 802c4e0:	e04c      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802c4e2:	68bb      	ldr	r3, [r7, #8]
 802c4e4:	4a33      	ldr	r2, [pc, #204]	; (802c5b4 <USB_SetTurnaroundTime+0x128>)
 802c4e6:	4293      	cmp	r3, r2
 802c4e8:	d906      	bls.n	802c4f8 <USB_SetTurnaroundTime+0x6c>
 802c4ea:	68bb      	ldr	r3, [r7, #8]
 802c4ec:	4a32      	ldr	r2, [pc, #200]	; (802c5b8 <USB_SetTurnaroundTime+0x12c>)
 802c4ee:	4293      	cmp	r3, r2
 802c4f0:	d802      	bhi.n	802c4f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802c4f2:	230c      	movs	r3, #12
 802c4f4:	617b      	str	r3, [r7, #20]
 802c4f6:	e041      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802c4f8:	68bb      	ldr	r3, [r7, #8]
 802c4fa:	4a2f      	ldr	r2, [pc, #188]	; (802c5b8 <USB_SetTurnaroundTime+0x12c>)
 802c4fc:	4293      	cmp	r3, r2
 802c4fe:	d906      	bls.n	802c50e <USB_SetTurnaroundTime+0x82>
 802c500:	68bb      	ldr	r3, [r7, #8]
 802c502:	4a2e      	ldr	r2, [pc, #184]	; (802c5bc <USB_SetTurnaroundTime+0x130>)
 802c504:	4293      	cmp	r3, r2
 802c506:	d802      	bhi.n	802c50e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802c508:	230b      	movs	r3, #11
 802c50a:	617b      	str	r3, [r7, #20]
 802c50c:	e036      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802c50e:	68bb      	ldr	r3, [r7, #8]
 802c510:	4a2a      	ldr	r2, [pc, #168]	; (802c5bc <USB_SetTurnaroundTime+0x130>)
 802c512:	4293      	cmp	r3, r2
 802c514:	d906      	bls.n	802c524 <USB_SetTurnaroundTime+0x98>
 802c516:	68bb      	ldr	r3, [r7, #8]
 802c518:	4a29      	ldr	r2, [pc, #164]	; (802c5c0 <USB_SetTurnaroundTime+0x134>)
 802c51a:	4293      	cmp	r3, r2
 802c51c:	d802      	bhi.n	802c524 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802c51e:	230a      	movs	r3, #10
 802c520:	617b      	str	r3, [r7, #20]
 802c522:	e02b      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802c524:	68bb      	ldr	r3, [r7, #8]
 802c526:	4a26      	ldr	r2, [pc, #152]	; (802c5c0 <USB_SetTurnaroundTime+0x134>)
 802c528:	4293      	cmp	r3, r2
 802c52a:	d906      	bls.n	802c53a <USB_SetTurnaroundTime+0xae>
 802c52c:	68bb      	ldr	r3, [r7, #8]
 802c52e:	4a25      	ldr	r2, [pc, #148]	; (802c5c4 <USB_SetTurnaroundTime+0x138>)
 802c530:	4293      	cmp	r3, r2
 802c532:	d802      	bhi.n	802c53a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802c534:	2309      	movs	r3, #9
 802c536:	617b      	str	r3, [r7, #20]
 802c538:	e020      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802c53a:	68bb      	ldr	r3, [r7, #8]
 802c53c:	4a21      	ldr	r2, [pc, #132]	; (802c5c4 <USB_SetTurnaroundTime+0x138>)
 802c53e:	4293      	cmp	r3, r2
 802c540:	d906      	bls.n	802c550 <USB_SetTurnaroundTime+0xc4>
 802c542:	68bb      	ldr	r3, [r7, #8]
 802c544:	4a20      	ldr	r2, [pc, #128]	; (802c5c8 <USB_SetTurnaroundTime+0x13c>)
 802c546:	4293      	cmp	r3, r2
 802c548:	d802      	bhi.n	802c550 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802c54a:	2308      	movs	r3, #8
 802c54c:	617b      	str	r3, [r7, #20]
 802c54e:	e015      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802c550:	68bb      	ldr	r3, [r7, #8]
 802c552:	4a1d      	ldr	r2, [pc, #116]	; (802c5c8 <USB_SetTurnaroundTime+0x13c>)
 802c554:	4293      	cmp	r3, r2
 802c556:	d906      	bls.n	802c566 <USB_SetTurnaroundTime+0xda>
 802c558:	68bb      	ldr	r3, [r7, #8]
 802c55a:	4a1c      	ldr	r2, [pc, #112]	; (802c5cc <USB_SetTurnaroundTime+0x140>)
 802c55c:	4293      	cmp	r3, r2
 802c55e:	d802      	bhi.n	802c566 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802c560:	2307      	movs	r3, #7
 802c562:	617b      	str	r3, [r7, #20]
 802c564:	e00a      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802c566:	2306      	movs	r3, #6
 802c568:	617b      	str	r3, [r7, #20]
 802c56a:	e007      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802c56c:	79fb      	ldrb	r3, [r7, #7]
 802c56e:	2b00      	cmp	r3, #0
 802c570:	d102      	bne.n	802c578 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802c572:	2309      	movs	r3, #9
 802c574:	617b      	str	r3, [r7, #20]
 802c576:	e001      	b.n	802c57c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802c578:	2309      	movs	r3, #9
 802c57a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802c57c:	68fb      	ldr	r3, [r7, #12]
 802c57e:	68db      	ldr	r3, [r3, #12]
 802c580:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802c584:	68fb      	ldr	r3, [r7, #12]
 802c586:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802c588:	68fb      	ldr	r3, [r7, #12]
 802c58a:	68da      	ldr	r2, [r3, #12]
 802c58c:	697b      	ldr	r3, [r7, #20]
 802c58e:	029b      	lsls	r3, r3, #10
 802c590:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802c594:	431a      	orrs	r2, r3
 802c596:	68fb      	ldr	r3, [r7, #12]
 802c598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802c59a:	2300      	movs	r3, #0
}
 802c59c:	4618      	mov	r0, r3
 802c59e:	371c      	adds	r7, #28
 802c5a0:	46bd      	mov	sp, r7
 802c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5a6:	4770      	bx	lr
 802c5a8:	00d8acbf 	.word	0x00d8acbf
 802c5ac:	00e4e1bf 	.word	0x00e4e1bf
 802c5b0:	00f423ff 	.word	0x00f423ff
 802c5b4:	0106737f 	.word	0x0106737f
 802c5b8:	011a499f 	.word	0x011a499f
 802c5bc:	01312cff 	.word	0x01312cff
 802c5c0:	014ca43f 	.word	0x014ca43f
 802c5c4:	016e35ff 	.word	0x016e35ff
 802c5c8:	01a6ab1f 	.word	0x01a6ab1f
 802c5cc:	01e847ff 	.word	0x01e847ff

0802c5d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802c5d0:	b480      	push	{r7}
 802c5d2:	b083      	sub	sp, #12
 802c5d4:	af00      	add	r7, sp, #0
 802c5d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802c5d8:	687b      	ldr	r3, [r7, #4]
 802c5da:	689b      	ldr	r3, [r3, #8]
 802c5dc:	f043 0201 	orr.w	r2, r3, #1
 802c5e0:	687b      	ldr	r3, [r7, #4]
 802c5e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802c5e4:	2300      	movs	r3, #0
}
 802c5e6:	4618      	mov	r0, r3
 802c5e8:	370c      	adds	r7, #12
 802c5ea:	46bd      	mov	sp, r7
 802c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5f0:	4770      	bx	lr

0802c5f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802c5f2:	b480      	push	{r7}
 802c5f4:	b083      	sub	sp, #12
 802c5f6:	af00      	add	r7, sp, #0
 802c5f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802c5fa:	687b      	ldr	r3, [r7, #4]
 802c5fc:	689b      	ldr	r3, [r3, #8]
 802c5fe:	f023 0201 	bic.w	r2, r3, #1
 802c602:	687b      	ldr	r3, [r7, #4]
 802c604:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802c606:	2300      	movs	r3, #0
}
 802c608:	4618      	mov	r0, r3
 802c60a:	370c      	adds	r7, #12
 802c60c:	46bd      	mov	sp, r7
 802c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c612:	4770      	bx	lr

0802c614 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802c614:	b580      	push	{r7, lr}
 802c616:	b082      	sub	sp, #8
 802c618:	af00      	add	r7, sp, #0
 802c61a:	6078      	str	r0, [r7, #4]
 802c61c:	460b      	mov	r3, r1
 802c61e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802c620:	687b      	ldr	r3, [r7, #4]
 802c622:	68db      	ldr	r3, [r3, #12]
 802c624:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802c628:	687b      	ldr	r3, [r7, #4]
 802c62a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802c62c:	78fb      	ldrb	r3, [r7, #3]
 802c62e:	2b01      	cmp	r3, #1
 802c630:	d106      	bne.n	802c640 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802c632:	687b      	ldr	r3, [r7, #4]
 802c634:	68db      	ldr	r3, [r3, #12]
 802c636:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	60da      	str	r2, [r3, #12]
 802c63e:	e00b      	b.n	802c658 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 802c640:	78fb      	ldrb	r3, [r7, #3]
 802c642:	2b00      	cmp	r3, #0
 802c644:	d106      	bne.n	802c654 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802c646:	687b      	ldr	r3, [r7, #4]
 802c648:	68db      	ldr	r3, [r3, #12]
 802c64a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802c64e:	687b      	ldr	r3, [r7, #4]
 802c650:	60da      	str	r2, [r3, #12]
 802c652:	e001      	b.n	802c658 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 802c654:	2301      	movs	r3, #1
 802c656:	e003      	b.n	802c660 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 802c658:	2032      	movs	r0, #50	; 0x32
 802c65a:	f7f6 fed5 	bl	8023408 <HAL_Delay>

  return HAL_OK;
 802c65e:	2300      	movs	r3, #0
}
 802c660:	4618      	mov	r0, r3
 802c662:	3708      	adds	r7, #8
 802c664:	46bd      	mov	sp, r7
 802c666:	bd80      	pop	{r7, pc}

0802c668 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802c668:	b084      	sub	sp, #16
 802c66a:	b580      	push	{r7, lr}
 802c66c:	b086      	sub	sp, #24
 802c66e:	af00      	add	r7, sp, #0
 802c670:	6078      	str	r0, [r7, #4]
 802c672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802c676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802c67a:	2300      	movs	r3, #0
 802c67c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c67e:	687b      	ldr	r3, [r7, #4]
 802c680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802c682:	2300      	movs	r3, #0
 802c684:	613b      	str	r3, [r7, #16]
 802c686:	e009      	b.n	802c69c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802c688:	687a      	ldr	r2, [r7, #4]
 802c68a:	693b      	ldr	r3, [r7, #16]
 802c68c:	3340      	adds	r3, #64	; 0x40
 802c68e:	009b      	lsls	r3, r3, #2
 802c690:	4413      	add	r3, r2
 802c692:	2200      	movs	r2, #0
 802c694:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802c696:	693b      	ldr	r3, [r7, #16]
 802c698:	3301      	adds	r3, #1
 802c69a:	613b      	str	r3, [r7, #16]
 802c69c:	693b      	ldr	r3, [r7, #16]
 802c69e:	2b0e      	cmp	r3, #14
 802c6a0:	d9f2      	bls.n	802c688 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802c6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c6a4:	2b00      	cmp	r3, #0
 802c6a6:	d11c      	bne.n	802c6e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802c6a8:	68fb      	ldr	r3, [r7, #12]
 802c6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c6ae:	685b      	ldr	r3, [r3, #4]
 802c6b0:	68fa      	ldr	r2, [r7, #12]
 802c6b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c6b6:	f043 0302 	orr.w	r3, r3, #2
 802c6ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802c6bc:	687b      	ldr	r3, [r7, #4]
 802c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802c6c4:	687b      	ldr	r3, [r7, #4]
 802c6c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802c6c8:	687b      	ldr	r3, [r7, #4]
 802c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802c6d4:	687b      	ldr	r3, [r7, #4]
 802c6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802c6dc:	687b      	ldr	r3, [r7, #4]
 802c6de:	639a      	str	r2, [r3, #56]	; 0x38
 802c6e0:	e00b      	b.n	802c6fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802c6ee:	687b      	ldr	r3, [r7, #4]
 802c6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802c6f6:	687b      	ldr	r3, [r7, #4]
 802c6f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802c6fa:	68fb      	ldr	r3, [r7, #12]
 802c6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802c700:	461a      	mov	r2, r3
 802c702:	2300      	movs	r3, #0
 802c704:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802c706:	68fb      	ldr	r3, [r7, #12]
 802c708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c70c:	4619      	mov	r1, r3
 802c70e:	68fb      	ldr	r3, [r7, #12]
 802c710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c714:	461a      	mov	r2, r3
 802c716:	680b      	ldr	r3, [r1, #0]
 802c718:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c71c:	2b01      	cmp	r3, #1
 802c71e:	d10c      	bne.n	802c73a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c722:	2b00      	cmp	r3, #0
 802c724:	d104      	bne.n	802c730 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802c726:	2100      	movs	r1, #0
 802c728:	6878      	ldr	r0, [r7, #4]
 802c72a:	f000 f949 	bl	802c9c0 <USB_SetDevSpeed>
 802c72e:	e008      	b.n	802c742 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802c730:	2101      	movs	r1, #1
 802c732:	6878      	ldr	r0, [r7, #4]
 802c734:	f000 f944 	bl	802c9c0 <USB_SetDevSpeed>
 802c738:	e003      	b.n	802c742 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802c73a:	2103      	movs	r1, #3
 802c73c:	6878      	ldr	r0, [r7, #4]
 802c73e:	f000 f93f 	bl	802c9c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802c742:	2110      	movs	r1, #16
 802c744:	6878      	ldr	r0, [r7, #4]
 802c746:	f000 f8f3 	bl	802c930 <USB_FlushTxFifo>
 802c74a:	4603      	mov	r3, r0
 802c74c:	2b00      	cmp	r3, #0
 802c74e:	d001      	beq.n	802c754 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802c750:	2301      	movs	r3, #1
 802c752:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802c754:	6878      	ldr	r0, [r7, #4]
 802c756:	f000 f911 	bl	802c97c <USB_FlushRxFifo>
 802c75a:	4603      	mov	r3, r0
 802c75c:	2b00      	cmp	r3, #0
 802c75e:	d001      	beq.n	802c764 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802c760:	2301      	movs	r3, #1
 802c762:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802c764:	68fb      	ldr	r3, [r7, #12]
 802c766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c76a:	461a      	mov	r2, r3
 802c76c:	2300      	movs	r3, #0
 802c76e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802c770:	68fb      	ldr	r3, [r7, #12]
 802c772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c776:	461a      	mov	r2, r3
 802c778:	2300      	movs	r3, #0
 802c77a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802c77c:	68fb      	ldr	r3, [r7, #12]
 802c77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c782:	461a      	mov	r2, r3
 802c784:	2300      	movs	r3, #0
 802c786:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802c788:	2300      	movs	r3, #0
 802c78a:	613b      	str	r3, [r7, #16]
 802c78c:	e043      	b.n	802c816 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802c78e:	693b      	ldr	r3, [r7, #16]
 802c790:	015a      	lsls	r2, r3, #5
 802c792:	68fb      	ldr	r3, [r7, #12]
 802c794:	4413      	add	r3, r2
 802c796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c79a:	681b      	ldr	r3, [r3, #0]
 802c79c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c7a4:	d118      	bne.n	802c7d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 802c7a6:	693b      	ldr	r3, [r7, #16]
 802c7a8:	2b00      	cmp	r3, #0
 802c7aa:	d10a      	bne.n	802c7c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802c7ac:	693b      	ldr	r3, [r7, #16]
 802c7ae:	015a      	lsls	r2, r3, #5
 802c7b0:	68fb      	ldr	r3, [r7, #12]
 802c7b2:	4413      	add	r3, r2
 802c7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c7b8:	461a      	mov	r2, r3
 802c7ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802c7be:	6013      	str	r3, [r2, #0]
 802c7c0:	e013      	b.n	802c7ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802c7c2:	693b      	ldr	r3, [r7, #16]
 802c7c4:	015a      	lsls	r2, r3, #5
 802c7c6:	68fb      	ldr	r3, [r7, #12]
 802c7c8:	4413      	add	r3, r2
 802c7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c7ce:	461a      	mov	r2, r3
 802c7d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802c7d4:	6013      	str	r3, [r2, #0]
 802c7d6:	e008      	b.n	802c7ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802c7d8:	693b      	ldr	r3, [r7, #16]
 802c7da:	015a      	lsls	r2, r3, #5
 802c7dc:	68fb      	ldr	r3, [r7, #12]
 802c7de:	4413      	add	r3, r2
 802c7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c7e4:	461a      	mov	r2, r3
 802c7e6:	2300      	movs	r3, #0
 802c7e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802c7ea:	693b      	ldr	r3, [r7, #16]
 802c7ec:	015a      	lsls	r2, r3, #5
 802c7ee:	68fb      	ldr	r3, [r7, #12]
 802c7f0:	4413      	add	r3, r2
 802c7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c7f6:	461a      	mov	r2, r3
 802c7f8:	2300      	movs	r3, #0
 802c7fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802c7fc:	693b      	ldr	r3, [r7, #16]
 802c7fe:	015a      	lsls	r2, r3, #5
 802c800:	68fb      	ldr	r3, [r7, #12]
 802c802:	4413      	add	r3, r2
 802c804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c808:	461a      	mov	r2, r3
 802c80a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802c80e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802c810:	693b      	ldr	r3, [r7, #16]
 802c812:	3301      	adds	r3, #1
 802c814:	613b      	str	r3, [r7, #16]
 802c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c818:	693a      	ldr	r2, [r7, #16]
 802c81a:	429a      	cmp	r2, r3
 802c81c:	d3b7      	bcc.n	802c78e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802c81e:	2300      	movs	r3, #0
 802c820:	613b      	str	r3, [r7, #16]
 802c822:	e043      	b.n	802c8ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802c824:	693b      	ldr	r3, [r7, #16]
 802c826:	015a      	lsls	r2, r3, #5
 802c828:	68fb      	ldr	r3, [r7, #12]
 802c82a:	4413      	add	r3, r2
 802c82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c830:	681b      	ldr	r3, [r3, #0]
 802c832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c83a:	d118      	bne.n	802c86e <USB_DevInit+0x206>
    {
      if (i == 0U)
 802c83c:	693b      	ldr	r3, [r7, #16]
 802c83e:	2b00      	cmp	r3, #0
 802c840:	d10a      	bne.n	802c858 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802c842:	693b      	ldr	r3, [r7, #16]
 802c844:	015a      	lsls	r2, r3, #5
 802c846:	68fb      	ldr	r3, [r7, #12]
 802c848:	4413      	add	r3, r2
 802c84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c84e:	461a      	mov	r2, r3
 802c850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802c854:	6013      	str	r3, [r2, #0]
 802c856:	e013      	b.n	802c880 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802c858:	693b      	ldr	r3, [r7, #16]
 802c85a:	015a      	lsls	r2, r3, #5
 802c85c:	68fb      	ldr	r3, [r7, #12]
 802c85e:	4413      	add	r3, r2
 802c860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c864:	461a      	mov	r2, r3
 802c866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802c86a:	6013      	str	r3, [r2, #0]
 802c86c:	e008      	b.n	802c880 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802c86e:	693b      	ldr	r3, [r7, #16]
 802c870:	015a      	lsls	r2, r3, #5
 802c872:	68fb      	ldr	r3, [r7, #12]
 802c874:	4413      	add	r3, r2
 802c876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c87a:	461a      	mov	r2, r3
 802c87c:	2300      	movs	r3, #0
 802c87e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802c880:	693b      	ldr	r3, [r7, #16]
 802c882:	015a      	lsls	r2, r3, #5
 802c884:	68fb      	ldr	r3, [r7, #12]
 802c886:	4413      	add	r3, r2
 802c888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c88c:	461a      	mov	r2, r3
 802c88e:	2300      	movs	r3, #0
 802c890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802c892:	693b      	ldr	r3, [r7, #16]
 802c894:	015a      	lsls	r2, r3, #5
 802c896:	68fb      	ldr	r3, [r7, #12]
 802c898:	4413      	add	r3, r2
 802c89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c89e:	461a      	mov	r2, r3
 802c8a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802c8a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802c8a6:	693b      	ldr	r3, [r7, #16]
 802c8a8:	3301      	adds	r3, #1
 802c8aa:	613b      	str	r3, [r7, #16]
 802c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c8ae:	693a      	ldr	r2, [r7, #16]
 802c8b0:	429a      	cmp	r2, r3
 802c8b2:	d3b7      	bcc.n	802c824 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802c8b4:	68fb      	ldr	r3, [r7, #12]
 802c8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c8ba:	691b      	ldr	r3, [r3, #16]
 802c8bc:	68fa      	ldr	r2, [r7, #12]
 802c8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802c8c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802c8c8:	687b      	ldr	r3, [r7, #4]
 802c8ca:	2200      	movs	r2, #0
 802c8cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802c8ce:	687b      	ldr	r3, [r7, #4]
 802c8d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802c8d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c8d8:	2b00      	cmp	r3, #0
 802c8da:	d105      	bne.n	802c8e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802c8dc:	687b      	ldr	r3, [r7, #4]
 802c8de:	699b      	ldr	r3, [r3, #24]
 802c8e0:	f043 0210 	orr.w	r2, r3, #16
 802c8e4:	687b      	ldr	r3, [r7, #4]
 802c8e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802c8e8:	687b      	ldr	r3, [r7, #4]
 802c8ea:	699a      	ldr	r2, [r3, #24]
 802c8ec:	4b0f      	ldr	r3, [pc, #60]	; (802c92c <USB_DevInit+0x2c4>)
 802c8ee:	4313      	orrs	r3, r2
 802c8f0:	687a      	ldr	r2, [r7, #4]
 802c8f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802c8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c8f6:	2b00      	cmp	r3, #0
 802c8f8:	d005      	beq.n	802c906 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802c8fa:	687b      	ldr	r3, [r7, #4]
 802c8fc:	699b      	ldr	r3, [r3, #24]
 802c8fe:	f043 0208 	orr.w	r2, r3, #8
 802c902:	687b      	ldr	r3, [r7, #4]
 802c904:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802c906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c908:	2b01      	cmp	r3, #1
 802c90a:	d107      	bne.n	802c91c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802c90c:	687b      	ldr	r3, [r7, #4]
 802c90e:	699b      	ldr	r3, [r3, #24]
 802c910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802c914:	f043 0304 	orr.w	r3, r3, #4
 802c918:	687a      	ldr	r2, [r7, #4]
 802c91a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802c91c:	7dfb      	ldrb	r3, [r7, #23]
}
 802c91e:	4618      	mov	r0, r3
 802c920:	3718      	adds	r7, #24
 802c922:	46bd      	mov	sp, r7
 802c924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802c928:	b004      	add	sp, #16
 802c92a:	4770      	bx	lr
 802c92c:	803c3800 	.word	0x803c3800

0802c930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802c930:	b480      	push	{r7}
 802c932:	b085      	sub	sp, #20
 802c934:	af00      	add	r7, sp, #0
 802c936:	6078      	str	r0, [r7, #4]
 802c938:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 802c93a:	2300      	movs	r3, #0
 802c93c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802c93e:	683b      	ldr	r3, [r7, #0]
 802c940:	019b      	lsls	r3, r3, #6
 802c942:	f043 0220 	orr.w	r2, r3, #32
 802c946:	687b      	ldr	r3, [r7, #4]
 802c948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802c94a:	68fb      	ldr	r3, [r7, #12]
 802c94c:	3301      	adds	r3, #1
 802c94e:	60fb      	str	r3, [r7, #12]
 802c950:	68fb      	ldr	r3, [r7, #12]
 802c952:	4a09      	ldr	r2, [pc, #36]	; (802c978 <USB_FlushTxFifo+0x48>)
 802c954:	4293      	cmp	r3, r2
 802c956:	d901      	bls.n	802c95c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 802c958:	2303      	movs	r3, #3
 802c95a:	e006      	b.n	802c96a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802c95c:	687b      	ldr	r3, [r7, #4]
 802c95e:	691b      	ldr	r3, [r3, #16]
 802c960:	f003 0320 	and.w	r3, r3, #32
 802c964:	2b20      	cmp	r3, #32
 802c966:	d0f0      	beq.n	802c94a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 802c968:	2300      	movs	r3, #0
}
 802c96a:	4618      	mov	r0, r3
 802c96c:	3714      	adds	r7, #20
 802c96e:	46bd      	mov	sp, r7
 802c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c974:	4770      	bx	lr
 802c976:	bf00      	nop
 802c978:	00030d40 	.word	0x00030d40

0802c97c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802c97c:	b480      	push	{r7}
 802c97e:	b085      	sub	sp, #20
 802c980:	af00      	add	r7, sp, #0
 802c982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 802c984:	2300      	movs	r3, #0
 802c986:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802c988:	687b      	ldr	r3, [r7, #4]
 802c98a:	2210      	movs	r2, #16
 802c98c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802c98e:	68fb      	ldr	r3, [r7, #12]
 802c990:	3301      	adds	r3, #1
 802c992:	60fb      	str	r3, [r7, #12]
 802c994:	68fb      	ldr	r3, [r7, #12]
 802c996:	4a09      	ldr	r2, [pc, #36]	; (802c9bc <USB_FlushRxFifo+0x40>)
 802c998:	4293      	cmp	r3, r2
 802c99a:	d901      	bls.n	802c9a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 802c99c:	2303      	movs	r3, #3
 802c99e:	e006      	b.n	802c9ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802c9a0:	687b      	ldr	r3, [r7, #4]
 802c9a2:	691b      	ldr	r3, [r3, #16]
 802c9a4:	f003 0310 	and.w	r3, r3, #16
 802c9a8:	2b10      	cmp	r3, #16
 802c9aa:	d0f0      	beq.n	802c98e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 802c9ac:	2300      	movs	r3, #0
}
 802c9ae:	4618      	mov	r0, r3
 802c9b0:	3714      	adds	r7, #20
 802c9b2:	46bd      	mov	sp, r7
 802c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9b8:	4770      	bx	lr
 802c9ba:	bf00      	nop
 802c9bc:	00030d40 	.word	0x00030d40

0802c9c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802c9c0:	b480      	push	{r7}
 802c9c2:	b085      	sub	sp, #20
 802c9c4:	af00      	add	r7, sp, #0
 802c9c6:	6078      	str	r0, [r7, #4]
 802c9c8:	460b      	mov	r3, r1
 802c9ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c9cc:	687b      	ldr	r3, [r7, #4]
 802c9ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802c9d0:	68fb      	ldr	r3, [r7, #12]
 802c9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c9d6:	681a      	ldr	r2, [r3, #0]
 802c9d8:	78fb      	ldrb	r3, [r7, #3]
 802c9da:	68f9      	ldr	r1, [r7, #12]
 802c9dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802c9e0:	4313      	orrs	r3, r2
 802c9e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802c9e4:	2300      	movs	r3, #0
}
 802c9e6:	4618      	mov	r0, r3
 802c9e8:	3714      	adds	r7, #20
 802c9ea:	46bd      	mov	sp, r7
 802c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9f0:	4770      	bx	lr

0802c9f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802c9f2:	b480      	push	{r7}
 802c9f4:	b087      	sub	sp, #28
 802c9f6:	af00      	add	r7, sp, #0
 802c9f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802c9fe:	693b      	ldr	r3, [r7, #16]
 802ca00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ca04:	689b      	ldr	r3, [r3, #8]
 802ca06:	f003 0306 	and.w	r3, r3, #6
 802ca0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802ca0c:	68fb      	ldr	r3, [r7, #12]
 802ca0e:	2b00      	cmp	r3, #0
 802ca10:	d102      	bne.n	802ca18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802ca12:	2300      	movs	r3, #0
 802ca14:	75fb      	strb	r3, [r7, #23]
 802ca16:	e00a      	b.n	802ca2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802ca18:	68fb      	ldr	r3, [r7, #12]
 802ca1a:	2b02      	cmp	r3, #2
 802ca1c:	d002      	beq.n	802ca24 <USB_GetDevSpeed+0x32>
 802ca1e:	68fb      	ldr	r3, [r7, #12]
 802ca20:	2b06      	cmp	r3, #6
 802ca22:	d102      	bne.n	802ca2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802ca24:	2302      	movs	r3, #2
 802ca26:	75fb      	strb	r3, [r7, #23]
 802ca28:	e001      	b.n	802ca2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802ca2a:	230f      	movs	r3, #15
 802ca2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802ca2e:	7dfb      	ldrb	r3, [r7, #23]
}
 802ca30:	4618      	mov	r0, r3
 802ca32:	371c      	adds	r7, #28
 802ca34:	46bd      	mov	sp, r7
 802ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca3a:	4770      	bx	lr

0802ca3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802ca3c:	b480      	push	{r7}
 802ca3e:	b085      	sub	sp, #20
 802ca40:	af00      	add	r7, sp, #0
 802ca42:	6078      	str	r0, [r7, #4]
 802ca44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ca46:	687b      	ldr	r3, [r7, #4]
 802ca48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ca4a:	683b      	ldr	r3, [r7, #0]
 802ca4c:	781b      	ldrb	r3, [r3, #0]
 802ca4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802ca50:	683b      	ldr	r3, [r7, #0]
 802ca52:	785b      	ldrb	r3, [r3, #1]
 802ca54:	2b01      	cmp	r3, #1
 802ca56:	d13a      	bne.n	802cace <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802ca58:	68fb      	ldr	r3, [r7, #12]
 802ca5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ca5e:	69da      	ldr	r2, [r3, #28]
 802ca60:	683b      	ldr	r3, [r7, #0]
 802ca62:	781b      	ldrb	r3, [r3, #0]
 802ca64:	f003 030f 	and.w	r3, r3, #15
 802ca68:	2101      	movs	r1, #1
 802ca6a:	fa01 f303 	lsl.w	r3, r1, r3
 802ca6e:	b29b      	uxth	r3, r3
 802ca70:	68f9      	ldr	r1, [r7, #12]
 802ca72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ca76:	4313      	orrs	r3, r2
 802ca78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802ca7a:	68bb      	ldr	r3, [r7, #8]
 802ca7c:	015a      	lsls	r2, r3, #5
 802ca7e:	68fb      	ldr	r3, [r7, #12]
 802ca80:	4413      	add	r3, r2
 802ca82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ca86:	681b      	ldr	r3, [r3, #0]
 802ca88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ca8c:	2b00      	cmp	r3, #0
 802ca8e:	d155      	bne.n	802cb3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802ca90:	68bb      	ldr	r3, [r7, #8]
 802ca92:	015a      	lsls	r2, r3, #5
 802ca94:	68fb      	ldr	r3, [r7, #12]
 802ca96:	4413      	add	r3, r2
 802ca98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ca9c:	681a      	ldr	r2, [r3, #0]
 802ca9e:	683b      	ldr	r3, [r7, #0]
 802caa0:	689b      	ldr	r3, [r3, #8]
 802caa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802caa6:	683b      	ldr	r3, [r7, #0]
 802caa8:	78db      	ldrb	r3, [r3, #3]
 802caaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802caac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802caae:	68bb      	ldr	r3, [r7, #8]
 802cab0:	059b      	lsls	r3, r3, #22
 802cab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802cab4:	4313      	orrs	r3, r2
 802cab6:	68ba      	ldr	r2, [r7, #8]
 802cab8:	0151      	lsls	r1, r2, #5
 802caba:	68fa      	ldr	r2, [r7, #12]
 802cabc:	440a      	add	r2, r1
 802cabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802caca:	6013      	str	r3, [r2, #0]
 802cacc:	e036      	b.n	802cb3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802cace:	68fb      	ldr	r3, [r7, #12]
 802cad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cad4:	69da      	ldr	r2, [r3, #28]
 802cad6:	683b      	ldr	r3, [r7, #0]
 802cad8:	781b      	ldrb	r3, [r3, #0]
 802cada:	f003 030f 	and.w	r3, r3, #15
 802cade:	2101      	movs	r1, #1
 802cae0:	fa01 f303 	lsl.w	r3, r1, r3
 802cae4:	041b      	lsls	r3, r3, #16
 802cae6:	68f9      	ldr	r1, [r7, #12]
 802cae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802caec:	4313      	orrs	r3, r2
 802caee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802caf0:	68bb      	ldr	r3, [r7, #8]
 802caf2:	015a      	lsls	r2, r3, #5
 802caf4:	68fb      	ldr	r3, [r7, #12]
 802caf6:	4413      	add	r3, r2
 802caf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cafc:	681b      	ldr	r3, [r3, #0]
 802cafe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802cb02:	2b00      	cmp	r3, #0
 802cb04:	d11a      	bne.n	802cb3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802cb06:	68bb      	ldr	r3, [r7, #8]
 802cb08:	015a      	lsls	r2, r3, #5
 802cb0a:	68fb      	ldr	r3, [r7, #12]
 802cb0c:	4413      	add	r3, r2
 802cb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cb12:	681a      	ldr	r2, [r3, #0]
 802cb14:	683b      	ldr	r3, [r7, #0]
 802cb16:	689b      	ldr	r3, [r3, #8]
 802cb18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802cb1c:	683b      	ldr	r3, [r7, #0]
 802cb1e:	78db      	ldrb	r3, [r3, #3]
 802cb20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802cb22:	430b      	orrs	r3, r1
 802cb24:	4313      	orrs	r3, r2
 802cb26:	68ba      	ldr	r2, [r7, #8]
 802cb28:	0151      	lsls	r1, r2, #5
 802cb2a:	68fa      	ldr	r2, [r7, #12]
 802cb2c:	440a      	add	r2, r1
 802cb2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802cb32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cb36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802cb3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802cb3c:	2300      	movs	r3, #0
}
 802cb3e:	4618      	mov	r0, r3
 802cb40:	3714      	adds	r7, #20
 802cb42:	46bd      	mov	sp, r7
 802cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb48:	4770      	bx	lr
	...

0802cb4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802cb4c:	b480      	push	{r7}
 802cb4e:	b085      	sub	sp, #20
 802cb50:	af00      	add	r7, sp, #0
 802cb52:	6078      	str	r0, [r7, #4]
 802cb54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802cb56:	687b      	ldr	r3, [r7, #4]
 802cb58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802cb5a:	683b      	ldr	r3, [r7, #0]
 802cb5c:	781b      	ldrb	r3, [r3, #0]
 802cb5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802cb60:	683b      	ldr	r3, [r7, #0]
 802cb62:	785b      	ldrb	r3, [r3, #1]
 802cb64:	2b01      	cmp	r3, #1
 802cb66:	d161      	bne.n	802cc2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802cb68:	68bb      	ldr	r3, [r7, #8]
 802cb6a:	015a      	lsls	r2, r3, #5
 802cb6c:	68fb      	ldr	r3, [r7, #12]
 802cb6e:	4413      	add	r3, r2
 802cb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cb74:	681b      	ldr	r3, [r3, #0]
 802cb76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802cb7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802cb7e:	d11f      	bne.n	802cbc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802cb80:	68bb      	ldr	r3, [r7, #8]
 802cb82:	015a      	lsls	r2, r3, #5
 802cb84:	68fb      	ldr	r3, [r7, #12]
 802cb86:	4413      	add	r3, r2
 802cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cb8c:	681b      	ldr	r3, [r3, #0]
 802cb8e:	68ba      	ldr	r2, [r7, #8]
 802cb90:	0151      	lsls	r1, r2, #5
 802cb92:	68fa      	ldr	r2, [r7, #12]
 802cb94:	440a      	add	r2, r1
 802cb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cb9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802cb9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802cba0:	68bb      	ldr	r3, [r7, #8]
 802cba2:	015a      	lsls	r2, r3, #5
 802cba4:	68fb      	ldr	r3, [r7, #12]
 802cba6:	4413      	add	r3, r2
 802cba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cbac:	681b      	ldr	r3, [r3, #0]
 802cbae:	68ba      	ldr	r2, [r7, #8]
 802cbb0:	0151      	lsls	r1, r2, #5
 802cbb2:	68fa      	ldr	r2, [r7, #12]
 802cbb4:	440a      	add	r2, r1
 802cbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cbba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802cbbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802cbc0:	68fb      	ldr	r3, [r7, #12]
 802cbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cbc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802cbc8:	683b      	ldr	r3, [r7, #0]
 802cbca:	781b      	ldrb	r3, [r3, #0]
 802cbcc:	f003 030f 	and.w	r3, r3, #15
 802cbd0:	2101      	movs	r1, #1
 802cbd2:	fa01 f303 	lsl.w	r3, r1, r3
 802cbd6:	b29b      	uxth	r3, r3
 802cbd8:	43db      	mvns	r3, r3
 802cbda:	68f9      	ldr	r1, [r7, #12]
 802cbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802cbe0:	4013      	ands	r3, r2
 802cbe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802cbe4:	68fb      	ldr	r3, [r7, #12]
 802cbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cbea:	69da      	ldr	r2, [r3, #28]
 802cbec:	683b      	ldr	r3, [r7, #0]
 802cbee:	781b      	ldrb	r3, [r3, #0]
 802cbf0:	f003 030f 	and.w	r3, r3, #15
 802cbf4:	2101      	movs	r1, #1
 802cbf6:	fa01 f303 	lsl.w	r3, r1, r3
 802cbfa:	b29b      	uxth	r3, r3
 802cbfc:	43db      	mvns	r3, r3
 802cbfe:	68f9      	ldr	r1, [r7, #12]
 802cc00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802cc04:	4013      	ands	r3, r2
 802cc06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802cc08:	68bb      	ldr	r3, [r7, #8]
 802cc0a:	015a      	lsls	r2, r3, #5
 802cc0c:	68fb      	ldr	r3, [r7, #12]
 802cc0e:	4413      	add	r3, r2
 802cc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cc14:	681a      	ldr	r2, [r3, #0]
 802cc16:	68bb      	ldr	r3, [r7, #8]
 802cc18:	0159      	lsls	r1, r3, #5
 802cc1a:	68fb      	ldr	r3, [r7, #12]
 802cc1c:	440b      	add	r3, r1
 802cc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cc22:	4619      	mov	r1, r3
 802cc24:	4b35      	ldr	r3, [pc, #212]	; (802ccfc <USB_DeactivateEndpoint+0x1b0>)
 802cc26:	4013      	ands	r3, r2
 802cc28:	600b      	str	r3, [r1, #0]
 802cc2a:	e060      	b.n	802ccee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802cc2c:	68bb      	ldr	r3, [r7, #8]
 802cc2e:	015a      	lsls	r2, r3, #5
 802cc30:	68fb      	ldr	r3, [r7, #12]
 802cc32:	4413      	add	r3, r2
 802cc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc38:	681b      	ldr	r3, [r3, #0]
 802cc3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802cc3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802cc42:	d11f      	bne.n	802cc84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802cc44:	68bb      	ldr	r3, [r7, #8]
 802cc46:	015a      	lsls	r2, r3, #5
 802cc48:	68fb      	ldr	r3, [r7, #12]
 802cc4a:	4413      	add	r3, r2
 802cc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc50:	681b      	ldr	r3, [r3, #0]
 802cc52:	68ba      	ldr	r2, [r7, #8]
 802cc54:	0151      	lsls	r1, r2, #5
 802cc56:	68fa      	ldr	r2, [r7, #12]
 802cc58:	440a      	add	r2, r1
 802cc5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802cc5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802cc62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802cc64:	68bb      	ldr	r3, [r7, #8]
 802cc66:	015a      	lsls	r2, r3, #5
 802cc68:	68fb      	ldr	r3, [r7, #12]
 802cc6a:	4413      	add	r3, r2
 802cc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc70:	681b      	ldr	r3, [r3, #0]
 802cc72:	68ba      	ldr	r2, [r7, #8]
 802cc74:	0151      	lsls	r1, r2, #5
 802cc76:	68fa      	ldr	r2, [r7, #12]
 802cc78:	440a      	add	r2, r1
 802cc7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802cc7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802cc82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802cc84:	68fb      	ldr	r3, [r7, #12]
 802cc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cc8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802cc8c:	683b      	ldr	r3, [r7, #0]
 802cc8e:	781b      	ldrb	r3, [r3, #0]
 802cc90:	f003 030f 	and.w	r3, r3, #15
 802cc94:	2101      	movs	r1, #1
 802cc96:	fa01 f303 	lsl.w	r3, r1, r3
 802cc9a:	041b      	lsls	r3, r3, #16
 802cc9c:	43db      	mvns	r3, r3
 802cc9e:	68f9      	ldr	r1, [r7, #12]
 802cca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802cca4:	4013      	ands	r3, r2
 802cca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802cca8:	68fb      	ldr	r3, [r7, #12]
 802ccaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ccae:	69da      	ldr	r2, [r3, #28]
 802ccb0:	683b      	ldr	r3, [r7, #0]
 802ccb2:	781b      	ldrb	r3, [r3, #0]
 802ccb4:	f003 030f 	and.w	r3, r3, #15
 802ccb8:	2101      	movs	r1, #1
 802ccba:	fa01 f303 	lsl.w	r3, r1, r3
 802ccbe:	041b      	lsls	r3, r3, #16
 802ccc0:	43db      	mvns	r3, r3
 802ccc2:	68f9      	ldr	r1, [r7, #12]
 802ccc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ccc8:	4013      	ands	r3, r2
 802ccca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802cccc:	68bb      	ldr	r3, [r7, #8]
 802ccce:	015a      	lsls	r2, r3, #5
 802ccd0:	68fb      	ldr	r3, [r7, #12]
 802ccd2:	4413      	add	r3, r2
 802ccd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ccd8:	681a      	ldr	r2, [r3, #0]
 802ccda:	68bb      	ldr	r3, [r7, #8]
 802ccdc:	0159      	lsls	r1, r3, #5
 802ccde:	68fb      	ldr	r3, [r7, #12]
 802cce0:	440b      	add	r3, r1
 802cce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cce6:	4619      	mov	r1, r3
 802cce8:	4b05      	ldr	r3, [pc, #20]	; (802cd00 <USB_DeactivateEndpoint+0x1b4>)
 802ccea:	4013      	ands	r3, r2
 802ccec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802ccee:	2300      	movs	r3, #0
}
 802ccf0:	4618      	mov	r0, r3
 802ccf2:	3714      	adds	r7, #20
 802ccf4:	46bd      	mov	sp, r7
 802ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ccfa:	4770      	bx	lr
 802ccfc:	ec337800 	.word	0xec337800
 802cd00:	eff37800 	.word	0xeff37800

0802cd04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802cd04:	b580      	push	{r7, lr}
 802cd06:	b08a      	sub	sp, #40	; 0x28
 802cd08:	af02      	add	r7, sp, #8
 802cd0a:	60f8      	str	r0, [r7, #12]
 802cd0c:	60b9      	str	r1, [r7, #8]
 802cd0e:	4613      	mov	r3, r2
 802cd10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802cd12:	68fb      	ldr	r3, [r7, #12]
 802cd14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802cd16:	68bb      	ldr	r3, [r7, #8]
 802cd18:	781b      	ldrb	r3, [r3, #0]
 802cd1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802cd1c:	68bb      	ldr	r3, [r7, #8]
 802cd1e:	785b      	ldrb	r3, [r3, #1]
 802cd20:	2b01      	cmp	r3, #1
 802cd22:	f040 815c 	bne.w	802cfde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802cd26:	68bb      	ldr	r3, [r7, #8]
 802cd28:	695b      	ldr	r3, [r3, #20]
 802cd2a:	2b00      	cmp	r3, #0
 802cd2c:	d132      	bne.n	802cd94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802cd2e:	69bb      	ldr	r3, [r7, #24]
 802cd30:	015a      	lsls	r2, r3, #5
 802cd32:	69fb      	ldr	r3, [r7, #28]
 802cd34:	4413      	add	r3, r2
 802cd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cd3a:	691b      	ldr	r3, [r3, #16]
 802cd3c:	69ba      	ldr	r2, [r7, #24]
 802cd3e:	0151      	lsls	r1, r2, #5
 802cd40:	69fa      	ldr	r2, [r7, #28]
 802cd42:	440a      	add	r2, r1
 802cd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cd48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802cd4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802cd50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802cd52:	69bb      	ldr	r3, [r7, #24]
 802cd54:	015a      	lsls	r2, r3, #5
 802cd56:	69fb      	ldr	r3, [r7, #28]
 802cd58:	4413      	add	r3, r2
 802cd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cd5e:	691b      	ldr	r3, [r3, #16]
 802cd60:	69ba      	ldr	r2, [r7, #24]
 802cd62:	0151      	lsls	r1, r2, #5
 802cd64:	69fa      	ldr	r2, [r7, #28]
 802cd66:	440a      	add	r2, r1
 802cd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cd6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802cd70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802cd72:	69bb      	ldr	r3, [r7, #24]
 802cd74:	015a      	lsls	r2, r3, #5
 802cd76:	69fb      	ldr	r3, [r7, #28]
 802cd78:	4413      	add	r3, r2
 802cd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cd7e:	691b      	ldr	r3, [r3, #16]
 802cd80:	69ba      	ldr	r2, [r7, #24]
 802cd82:	0151      	lsls	r1, r2, #5
 802cd84:	69fa      	ldr	r2, [r7, #28]
 802cd86:	440a      	add	r2, r1
 802cd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cd8c:	0cdb      	lsrs	r3, r3, #19
 802cd8e:	04db      	lsls	r3, r3, #19
 802cd90:	6113      	str	r3, [r2, #16]
 802cd92:	e074      	b.n	802ce7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802cd94:	69bb      	ldr	r3, [r7, #24]
 802cd96:	015a      	lsls	r2, r3, #5
 802cd98:	69fb      	ldr	r3, [r7, #28]
 802cd9a:	4413      	add	r3, r2
 802cd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cda0:	691b      	ldr	r3, [r3, #16]
 802cda2:	69ba      	ldr	r2, [r7, #24]
 802cda4:	0151      	lsls	r1, r2, #5
 802cda6:	69fa      	ldr	r2, [r7, #28]
 802cda8:	440a      	add	r2, r1
 802cdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cdae:	0cdb      	lsrs	r3, r3, #19
 802cdb0:	04db      	lsls	r3, r3, #19
 802cdb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802cdb4:	69bb      	ldr	r3, [r7, #24]
 802cdb6:	015a      	lsls	r2, r3, #5
 802cdb8:	69fb      	ldr	r3, [r7, #28]
 802cdba:	4413      	add	r3, r2
 802cdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cdc0:	691b      	ldr	r3, [r3, #16]
 802cdc2:	69ba      	ldr	r2, [r7, #24]
 802cdc4:	0151      	lsls	r1, r2, #5
 802cdc6:	69fa      	ldr	r2, [r7, #28]
 802cdc8:	440a      	add	r2, r1
 802cdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cdce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802cdd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802cdd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802cdd8:	69bb      	ldr	r3, [r7, #24]
 802cdda:	015a      	lsls	r2, r3, #5
 802cddc:	69fb      	ldr	r3, [r7, #28]
 802cdde:	4413      	add	r3, r2
 802cde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cde4:	691a      	ldr	r2, [r3, #16]
 802cde6:	68bb      	ldr	r3, [r7, #8]
 802cde8:	6959      	ldr	r1, [r3, #20]
 802cdea:	68bb      	ldr	r3, [r7, #8]
 802cdec:	689b      	ldr	r3, [r3, #8]
 802cdee:	440b      	add	r3, r1
 802cdf0:	1e59      	subs	r1, r3, #1
 802cdf2:	68bb      	ldr	r3, [r7, #8]
 802cdf4:	689b      	ldr	r3, [r3, #8]
 802cdf6:	fbb1 f3f3 	udiv	r3, r1, r3
 802cdfa:	04d9      	lsls	r1, r3, #19
 802cdfc:	4b9d      	ldr	r3, [pc, #628]	; (802d074 <USB_EPStartXfer+0x370>)
 802cdfe:	400b      	ands	r3, r1
 802ce00:	69b9      	ldr	r1, [r7, #24]
 802ce02:	0148      	lsls	r0, r1, #5
 802ce04:	69f9      	ldr	r1, [r7, #28]
 802ce06:	4401      	add	r1, r0
 802ce08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802ce0c:	4313      	orrs	r3, r2
 802ce0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802ce10:	69bb      	ldr	r3, [r7, #24]
 802ce12:	015a      	lsls	r2, r3, #5
 802ce14:	69fb      	ldr	r3, [r7, #28]
 802ce16:	4413      	add	r3, r2
 802ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ce1c:	691a      	ldr	r2, [r3, #16]
 802ce1e:	68bb      	ldr	r3, [r7, #8]
 802ce20:	695b      	ldr	r3, [r3, #20]
 802ce22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802ce26:	69b9      	ldr	r1, [r7, #24]
 802ce28:	0148      	lsls	r0, r1, #5
 802ce2a:	69f9      	ldr	r1, [r7, #28]
 802ce2c:	4401      	add	r1, r0
 802ce2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802ce32:	4313      	orrs	r3, r2
 802ce34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802ce36:	68bb      	ldr	r3, [r7, #8]
 802ce38:	78db      	ldrb	r3, [r3, #3]
 802ce3a:	2b01      	cmp	r3, #1
 802ce3c:	d11f      	bne.n	802ce7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802ce3e:	69bb      	ldr	r3, [r7, #24]
 802ce40:	015a      	lsls	r2, r3, #5
 802ce42:	69fb      	ldr	r3, [r7, #28]
 802ce44:	4413      	add	r3, r2
 802ce46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ce4a:	691b      	ldr	r3, [r3, #16]
 802ce4c:	69ba      	ldr	r2, [r7, #24]
 802ce4e:	0151      	lsls	r1, r2, #5
 802ce50:	69fa      	ldr	r2, [r7, #28]
 802ce52:	440a      	add	r2, r1
 802ce54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ce58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802ce5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802ce5e:	69bb      	ldr	r3, [r7, #24]
 802ce60:	015a      	lsls	r2, r3, #5
 802ce62:	69fb      	ldr	r3, [r7, #28]
 802ce64:	4413      	add	r3, r2
 802ce66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ce6a:	691b      	ldr	r3, [r3, #16]
 802ce6c:	69ba      	ldr	r2, [r7, #24]
 802ce6e:	0151      	lsls	r1, r2, #5
 802ce70:	69fa      	ldr	r2, [r7, #28]
 802ce72:	440a      	add	r2, r1
 802ce74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ce78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802ce7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802ce7e:	79fb      	ldrb	r3, [r7, #7]
 802ce80:	2b01      	cmp	r3, #1
 802ce82:	d14b      	bne.n	802cf1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802ce84:	68bb      	ldr	r3, [r7, #8]
 802ce86:	691b      	ldr	r3, [r3, #16]
 802ce88:	2b00      	cmp	r3, #0
 802ce8a:	d009      	beq.n	802cea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802ce8c:	69bb      	ldr	r3, [r7, #24]
 802ce8e:	015a      	lsls	r2, r3, #5
 802ce90:	69fb      	ldr	r3, [r7, #28]
 802ce92:	4413      	add	r3, r2
 802ce94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ce98:	461a      	mov	r2, r3
 802ce9a:	68bb      	ldr	r3, [r7, #8]
 802ce9c:	691b      	ldr	r3, [r3, #16]
 802ce9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802cea0:	68bb      	ldr	r3, [r7, #8]
 802cea2:	78db      	ldrb	r3, [r3, #3]
 802cea4:	2b01      	cmp	r3, #1
 802cea6:	d128      	bne.n	802cefa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802cea8:	69fb      	ldr	r3, [r7, #28]
 802ceaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ceae:	689b      	ldr	r3, [r3, #8]
 802ceb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ceb4:	2b00      	cmp	r3, #0
 802ceb6:	d110      	bne.n	802ceda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802ceb8:	69bb      	ldr	r3, [r7, #24]
 802ceba:	015a      	lsls	r2, r3, #5
 802cebc:	69fb      	ldr	r3, [r7, #28]
 802cebe:	4413      	add	r3, r2
 802cec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cec4:	681b      	ldr	r3, [r3, #0]
 802cec6:	69ba      	ldr	r2, [r7, #24]
 802cec8:	0151      	lsls	r1, r2, #5
 802ceca:	69fa      	ldr	r2, [r7, #28]
 802cecc:	440a      	add	r2, r1
 802cece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ced2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802ced6:	6013      	str	r3, [r2, #0]
 802ced8:	e00f      	b.n	802cefa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802ceda:	69bb      	ldr	r3, [r7, #24]
 802cedc:	015a      	lsls	r2, r3, #5
 802cede:	69fb      	ldr	r3, [r7, #28]
 802cee0:	4413      	add	r3, r2
 802cee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cee6:	681b      	ldr	r3, [r3, #0]
 802cee8:	69ba      	ldr	r2, [r7, #24]
 802ceea:	0151      	lsls	r1, r2, #5
 802ceec:	69fa      	ldr	r2, [r7, #28]
 802ceee:	440a      	add	r2, r1
 802cef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802cefa:	69bb      	ldr	r3, [r7, #24]
 802cefc:	015a      	lsls	r2, r3, #5
 802cefe:	69fb      	ldr	r3, [r7, #28]
 802cf00:	4413      	add	r3, r2
 802cf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cf06:	681b      	ldr	r3, [r3, #0]
 802cf08:	69ba      	ldr	r2, [r7, #24]
 802cf0a:	0151      	lsls	r1, r2, #5
 802cf0c:	69fa      	ldr	r2, [r7, #28]
 802cf0e:	440a      	add	r2, r1
 802cf10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cf14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802cf18:	6013      	str	r3, [r2, #0]
 802cf1a:	e12f      	b.n	802d17c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802cf1c:	69bb      	ldr	r3, [r7, #24]
 802cf1e:	015a      	lsls	r2, r3, #5
 802cf20:	69fb      	ldr	r3, [r7, #28]
 802cf22:	4413      	add	r3, r2
 802cf24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cf28:	681b      	ldr	r3, [r3, #0]
 802cf2a:	69ba      	ldr	r2, [r7, #24]
 802cf2c:	0151      	lsls	r1, r2, #5
 802cf2e:	69fa      	ldr	r2, [r7, #28]
 802cf30:	440a      	add	r2, r1
 802cf32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cf36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802cf3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802cf3c:	68bb      	ldr	r3, [r7, #8]
 802cf3e:	78db      	ldrb	r3, [r3, #3]
 802cf40:	2b01      	cmp	r3, #1
 802cf42:	d015      	beq.n	802cf70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802cf44:	68bb      	ldr	r3, [r7, #8]
 802cf46:	695b      	ldr	r3, [r3, #20]
 802cf48:	2b00      	cmp	r3, #0
 802cf4a:	f000 8117 	beq.w	802d17c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802cf4e:	69fb      	ldr	r3, [r7, #28]
 802cf50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cf54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802cf56:	68bb      	ldr	r3, [r7, #8]
 802cf58:	781b      	ldrb	r3, [r3, #0]
 802cf5a:	f003 030f 	and.w	r3, r3, #15
 802cf5e:	2101      	movs	r1, #1
 802cf60:	fa01 f303 	lsl.w	r3, r1, r3
 802cf64:	69f9      	ldr	r1, [r7, #28]
 802cf66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802cf6a:	4313      	orrs	r3, r2
 802cf6c:	634b      	str	r3, [r1, #52]	; 0x34
 802cf6e:	e105      	b.n	802d17c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802cf70:	69fb      	ldr	r3, [r7, #28]
 802cf72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cf76:	689b      	ldr	r3, [r3, #8]
 802cf78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802cf7c:	2b00      	cmp	r3, #0
 802cf7e:	d110      	bne.n	802cfa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802cf80:	69bb      	ldr	r3, [r7, #24]
 802cf82:	015a      	lsls	r2, r3, #5
 802cf84:	69fb      	ldr	r3, [r7, #28]
 802cf86:	4413      	add	r3, r2
 802cf88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cf8c:	681b      	ldr	r3, [r3, #0]
 802cf8e:	69ba      	ldr	r2, [r7, #24]
 802cf90:	0151      	lsls	r1, r2, #5
 802cf92:	69fa      	ldr	r2, [r7, #28]
 802cf94:	440a      	add	r2, r1
 802cf96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cf9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802cf9e:	6013      	str	r3, [r2, #0]
 802cfa0:	e00f      	b.n	802cfc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802cfa2:	69bb      	ldr	r3, [r7, #24]
 802cfa4:	015a      	lsls	r2, r3, #5
 802cfa6:	69fb      	ldr	r3, [r7, #28]
 802cfa8:	4413      	add	r3, r2
 802cfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cfae:	681b      	ldr	r3, [r3, #0]
 802cfb0:	69ba      	ldr	r2, [r7, #24]
 802cfb2:	0151      	lsls	r1, r2, #5
 802cfb4:	69fa      	ldr	r2, [r7, #28]
 802cfb6:	440a      	add	r2, r1
 802cfb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cfbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cfc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802cfc2:	68bb      	ldr	r3, [r7, #8]
 802cfc4:	68d9      	ldr	r1, [r3, #12]
 802cfc6:	68bb      	ldr	r3, [r7, #8]
 802cfc8:	781a      	ldrb	r2, [r3, #0]
 802cfca:	68bb      	ldr	r3, [r7, #8]
 802cfcc:	695b      	ldr	r3, [r3, #20]
 802cfce:	b298      	uxth	r0, r3
 802cfd0:	79fb      	ldrb	r3, [r7, #7]
 802cfd2:	9300      	str	r3, [sp, #0]
 802cfd4:	4603      	mov	r3, r0
 802cfd6:	68f8      	ldr	r0, [r7, #12]
 802cfd8:	f000 fa2b 	bl	802d432 <USB_WritePacket>
 802cfdc:	e0ce      	b.n	802d17c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802cfde:	69bb      	ldr	r3, [r7, #24]
 802cfe0:	015a      	lsls	r2, r3, #5
 802cfe2:	69fb      	ldr	r3, [r7, #28]
 802cfe4:	4413      	add	r3, r2
 802cfe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cfea:	691b      	ldr	r3, [r3, #16]
 802cfec:	69ba      	ldr	r2, [r7, #24]
 802cfee:	0151      	lsls	r1, r2, #5
 802cff0:	69fa      	ldr	r2, [r7, #28]
 802cff2:	440a      	add	r2, r1
 802cff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802cff8:	0cdb      	lsrs	r3, r3, #19
 802cffa:	04db      	lsls	r3, r3, #19
 802cffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802cffe:	69bb      	ldr	r3, [r7, #24]
 802d000:	015a      	lsls	r2, r3, #5
 802d002:	69fb      	ldr	r3, [r7, #28]
 802d004:	4413      	add	r3, r2
 802d006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d00a:	691b      	ldr	r3, [r3, #16]
 802d00c:	69ba      	ldr	r2, [r7, #24]
 802d00e:	0151      	lsls	r1, r2, #5
 802d010:	69fa      	ldr	r2, [r7, #28]
 802d012:	440a      	add	r2, r1
 802d014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d01c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802d022:	68bb      	ldr	r3, [r7, #8]
 802d024:	695b      	ldr	r3, [r3, #20]
 802d026:	2b00      	cmp	r3, #0
 802d028:	d126      	bne.n	802d078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802d02a:	69bb      	ldr	r3, [r7, #24]
 802d02c:	015a      	lsls	r2, r3, #5
 802d02e:	69fb      	ldr	r3, [r7, #28]
 802d030:	4413      	add	r3, r2
 802d032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d036:	691a      	ldr	r2, [r3, #16]
 802d038:	68bb      	ldr	r3, [r7, #8]
 802d03a:	689b      	ldr	r3, [r3, #8]
 802d03c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d040:	69b9      	ldr	r1, [r7, #24]
 802d042:	0148      	lsls	r0, r1, #5
 802d044:	69f9      	ldr	r1, [r7, #28]
 802d046:	4401      	add	r1, r0
 802d048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d04c:	4313      	orrs	r3, r2
 802d04e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802d050:	69bb      	ldr	r3, [r7, #24]
 802d052:	015a      	lsls	r2, r3, #5
 802d054:	69fb      	ldr	r3, [r7, #28]
 802d056:	4413      	add	r3, r2
 802d058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d05c:	691b      	ldr	r3, [r3, #16]
 802d05e:	69ba      	ldr	r2, [r7, #24]
 802d060:	0151      	lsls	r1, r2, #5
 802d062:	69fa      	ldr	r2, [r7, #28]
 802d064:	440a      	add	r2, r1
 802d066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d06a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d06e:	6113      	str	r3, [r2, #16]
 802d070:	e036      	b.n	802d0e0 <USB_EPStartXfer+0x3dc>
 802d072:	bf00      	nop
 802d074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802d078:	68bb      	ldr	r3, [r7, #8]
 802d07a:	695a      	ldr	r2, [r3, #20]
 802d07c:	68bb      	ldr	r3, [r7, #8]
 802d07e:	689b      	ldr	r3, [r3, #8]
 802d080:	4413      	add	r3, r2
 802d082:	1e5a      	subs	r2, r3, #1
 802d084:	68bb      	ldr	r3, [r7, #8]
 802d086:	689b      	ldr	r3, [r3, #8]
 802d088:	fbb2 f3f3 	udiv	r3, r2, r3
 802d08c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802d08e:	69bb      	ldr	r3, [r7, #24]
 802d090:	015a      	lsls	r2, r3, #5
 802d092:	69fb      	ldr	r3, [r7, #28]
 802d094:	4413      	add	r3, r2
 802d096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d09a:	691a      	ldr	r2, [r3, #16]
 802d09c:	8afb      	ldrh	r3, [r7, #22]
 802d09e:	04d9      	lsls	r1, r3, #19
 802d0a0:	4b39      	ldr	r3, [pc, #228]	; (802d188 <USB_EPStartXfer+0x484>)
 802d0a2:	400b      	ands	r3, r1
 802d0a4:	69b9      	ldr	r1, [r7, #24]
 802d0a6:	0148      	lsls	r0, r1, #5
 802d0a8:	69f9      	ldr	r1, [r7, #28]
 802d0aa:	4401      	add	r1, r0
 802d0ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d0b0:	4313      	orrs	r3, r2
 802d0b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 802d0b4:	69bb      	ldr	r3, [r7, #24]
 802d0b6:	015a      	lsls	r2, r3, #5
 802d0b8:	69fb      	ldr	r3, [r7, #28]
 802d0ba:	4413      	add	r3, r2
 802d0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d0c0:	691a      	ldr	r2, [r3, #16]
 802d0c2:	68bb      	ldr	r3, [r7, #8]
 802d0c4:	689b      	ldr	r3, [r3, #8]
 802d0c6:	8af9      	ldrh	r1, [r7, #22]
 802d0c8:	fb01 f303 	mul.w	r3, r1, r3
 802d0cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d0d0:	69b9      	ldr	r1, [r7, #24]
 802d0d2:	0148      	lsls	r0, r1, #5
 802d0d4:	69f9      	ldr	r1, [r7, #28]
 802d0d6:	4401      	add	r1, r0
 802d0d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d0dc:	4313      	orrs	r3, r2
 802d0de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802d0e0:	79fb      	ldrb	r3, [r7, #7]
 802d0e2:	2b01      	cmp	r3, #1
 802d0e4:	d10d      	bne.n	802d102 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802d0e6:	68bb      	ldr	r3, [r7, #8]
 802d0e8:	68db      	ldr	r3, [r3, #12]
 802d0ea:	2b00      	cmp	r3, #0
 802d0ec:	d009      	beq.n	802d102 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802d0ee:	68bb      	ldr	r3, [r7, #8]
 802d0f0:	68d9      	ldr	r1, [r3, #12]
 802d0f2:	69bb      	ldr	r3, [r7, #24]
 802d0f4:	015a      	lsls	r2, r3, #5
 802d0f6:	69fb      	ldr	r3, [r7, #28]
 802d0f8:	4413      	add	r3, r2
 802d0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d0fe:	460a      	mov	r2, r1
 802d100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802d102:	68bb      	ldr	r3, [r7, #8]
 802d104:	78db      	ldrb	r3, [r3, #3]
 802d106:	2b01      	cmp	r3, #1
 802d108:	d128      	bne.n	802d15c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d10a:	69fb      	ldr	r3, [r7, #28]
 802d10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d110:	689b      	ldr	r3, [r3, #8]
 802d112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d116:	2b00      	cmp	r3, #0
 802d118:	d110      	bne.n	802d13c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802d11a:	69bb      	ldr	r3, [r7, #24]
 802d11c:	015a      	lsls	r2, r3, #5
 802d11e:	69fb      	ldr	r3, [r7, #28]
 802d120:	4413      	add	r3, r2
 802d122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d126:	681b      	ldr	r3, [r3, #0]
 802d128:	69ba      	ldr	r2, [r7, #24]
 802d12a:	0151      	lsls	r1, r2, #5
 802d12c:	69fa      	ldr	r2, [r7, #28]
 802d12e:	440a      	add	r2, r1
 802d130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d138:	6013      	str	r3, [r2, #0]
 802d13a:	e00f      	b.n	802d15c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802d13c:	69bb      	ldr	r3, [r7, #24]
 802d13e:	015a      	lsls	r2, r3, #5
 802d140:	69fb      	ldr	r3, [r7, #28]
 802d142:	4413      	add	r3, r2
 802d144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d148:	681b      	ldr	r3, [r3, #0]
 802d14a:	69ba      	ldr	r2, [r7, #24]
 802d14c:	0151      	lsls	r1, r2, #5
 802d14e:	69fa      	ldr	r2, [r7, #28]
 802d150:	440a      	add	r2, r1
 802d152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d15a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802d15c:	69bb      	ldr	r3, [r7, #24]
 802d15e:	015a      	lsls	r2, r3, #5
 802d160:	69fb      	ldr	r3, [r7, #28]
 802d162:	4413      	add	r3, r2
 802d164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d168:	681b      	ldr	r3, [r3, #0]
 802d16a:	69ba      	ldr	r2, [r7, #24]
 802d16c:	0151      	lsls	r1, r2, #5
 802d16e:	69fa      	ldr	r2, [r7, #28]
 802d170:	440a      	add	r2, r1
 802d172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d17a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802d17c:	2300      	movs	r3, #0
}
 802d17e:	4618      	mov	r0, r3
 802d180:	3720      	adds	r7, #32
 802d182:	46bd      	mov	sp, r7
 802d184:	bd80      	pop	{r7, pc}
 802d186:	bf00      	nop
 802d188:	1ff80000 	.word	0x1ff80000

0802d18c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802d18c:	b480      	push	{r7}
 802d18e:	b087      	sub	sp, #28
 802d190:	af00      	add	r7, sp, #0
 802d192:	60f8      	str	r0, [r7, #12]
 802d194:	60b9      	str	r1, [r7, #8]
 802d196:	4613      	mov	r3, r2
 802d198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d19a:	68fb      	ldr	r3, [r7, #12]
 802d19c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802d19e:	68bb      	ldr	r3, [r7, #8]
 802d1a0:	781b      	ldrb	r3, [r3, #0]
 802d1a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d1a4:	68bb      	ldr	r3, [r7, #8]
 802d1a6:	785b      	ldrb	r3, [r3, #1]
 802d1a8:	2b01      	cmp	r3, #1
 802d1aa:	f040 80cd 	bne.w	802d348 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802d1ae:	68bb      	ldr	r3, [r7, #8]
 802d1b0:	695b      	ldr	r3, [r3, #20]
 802d1b2:	2b00      	cmp	r3, #0
 802d1b4:	d132      	bne.n	802d21c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d1b6:	693b      	ldr	r3, [r7, #16]
 802d1b8:	015a      	lsls	r2, r3, #5
 802d1ba:	697b      	ldr	r3, [r7, #20]
 802d1bc:	4413      	add	r3, r2
 802d1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d1c2:	691b      	ldr	r3, [r3, #16]
 802d1c4:	693a      	ldr	r2, [r7, #16]
 802d1c6:	0151      	lsls	r1, r2, #5
 802d1c8:	697a      	ldr	r2, [r7, #20]
 802d1ca:	440a      	add	r2, r1
 802d1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d1d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d1d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d1d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d1da:	693b      	ldr	r3, [r7, #16]
 802d1dc:	015a      	lsls	r2, r3, #5
 802d1de:	697b      	ldr	r3, [r7, #20]
 802d1e0:	4413      	add	r3, r2
 802d1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d1e6:	691b      	ldr	r3, [r3, #16]
 802d1e8:	693a      	ldr	r2, [r7, #16]
 802d1ea:	0151      	lsls	r1, r2, #5
 802d1ec:	697a      	ldr	r2, [r7, #20]
 802d1ee:	440a      	add	r2, r1
 802d1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d1f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d1f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d1fa:	693b      	ldr	r3, [r7, #16]
 802d1fc:	015a      	lsls	r2, r3, #5
 802d1fe:	697b      	ldr	r3, [r7, #20]
 802d200:	4413      	add	r3, r2
 802d202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d206:	691b      	ldr	r3, [r3, #16]
 802d208:	693a      	ldr	r2, [r7, #16]
 802d20a:	0151      	lsls	r1, r2, #5
 802d20c:	697a      	ldr	r2, [r7, #20]
 802d20e:	440a      	add	r2, r1
 802d210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d214:	0cdb      	lsrs	r3, r3, #19
 802d216:	04db      	lsls	r3, r3, #19
 802d218:	6113      	str	r3, [r2, #16]
 802d21a:	e04e      	b.n	802d2ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d21c:	693b      	ldr	r3, [r7, #16]
 802d21e:	015a      	lsls	r2, r3, #5
 802d220:	697b      	ldr	r3, [r7, #20]
 802d222:	4413      	add	r3, r2
 802d224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d228:	691b      	ldr	r3, [r3, #16]
 802d22a:	693a      	ldr	r2, [r7, #16]
 802d22c:	0151      	lsls	r1, r2, #5
 802d22e:	697a      	ldr	r2, [r7, #20]
 802d230:	440a      	add	r2, r1
 802d232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d236:	0cdb      	lsrs	r3, r3, #19
 802d238:	04db      	lsls	r3, r3, #19
 802d23a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d23c:	693b      	ldr	r3, [r7, #16]
 802d23e:	015a      	lsls	r2, r3, #5
 802d240:	697b      	ldr	r3, [r7, #20]
 802d242:	4413      	add	r3, r2
 802d244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d248:	691b      	ldr	r3, [r3, #16]
 802d24a:	693a      	ldr	r2, [r7, #16]
 802d24c:	0151      	lsls	r1, r2, #5
 802d24e:	697a      	ldr	r2, [r7, #20]
 802d250:	440a      	add	r2, r1
 802d252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d256:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d25a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d25e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802d260:	68bb      	ldr	r3, [r7, #8]
 802d262:	695a      	ldr	r2, [r3, #20]
 802d264:	68bb      	ldr	r3, [r7, #8]
 802d266:	689b      	ldr	r3, [r3, #8]
 802d268:	429a      	cmp	r2, r3
 802d26a:	d903      	bls.n	802d274 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802d26c:	68bb      	ldr	r3, [r7, #8]
 802d26e:	689a      	ldr	r2, [r3, #8]
 802d270:	68bb      	ldr	r3, [r7, #8]
 802d272:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d274:	693b      	ldr	r3, [r7, #16]
 802d276:	015a      	lsls	r2, r3, #5
 802d278:	697b      	ldr	r3, [r7, #20]
 802d27a:	4413      	add	r3, r2
 802d27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d280:	691b      	ldr	r3, [r3, #16]
 802d282:	693a      	ldr	r2, [r7, #16]
 802d284:	0151      	lsls	r1, r2, #5
 802d286:	697a      	ldr	r2, [r7, #20]
 802d288:	440a      	add	r2, r1
 802d28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d28e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802d294:	693b      	ldr	r3, [r7, #16]
 802d296:	015a      	lsls	r2, r3, #5
 802d298:	697b      	ldr	r3, [r7, #20]
 802d29a:	4413      	add	r3, r2
 802d29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2a0:	691a      	ldr	r2, [r3, #16]
 802d2a2:	68bb      	ldr	r3, [r7, #8]
 802d2a4:	695b      	ldr	r3, [r3, #20]
 802d2a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d2aa:	6939      	ldr	r1, [r7, #16]
 802d2ac:	0148      	lsls	r0, r1, #5
 802d2ae:	6979      	ldr	r1, [r7, #20]
 802d2b0:	4401      	add	r1, r0
 802d2b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d2b6:	4313      	orrs	r3, r2
 802d2b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802d2ba:	79fb      	ldrb	r3, [r7, #7]
 802d2bc:	2b01      	cmp	r3, #1
 802d2be:	d11e      	bne.n	802d2fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802d2c0:	68bb      	ldr	r3, [r7, #8]
 802d2c2:	691b      	ldr	r3, [r3, #16]
 802d2c4:	2b00      	cmp	r3, #0
 802d2c6:	d009      	beq.n	802d2dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802d2c8:	693b      	ldr	r3, [r7, #16]
 802d2ca:	015a      	lsls	r2, r3, #5
 802d2cc:	697b      	ldr	r3, [r7, #20]
 802d2ce:	4413      	add	r3, r2
 802d2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2d4:	461a      	mov	r2, r3
 802d2d6:	68bb      	ldr	r3, [r7, #8]
 802d2d8:	691b      	ldr	r3, [r3, #16]
 802d2da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d2dc:	693b      	ldr	r3, [r7, #16]
 802d2de:	015a      	lsls	r2, r3, #5
 802d2e0:	697b      	ldr	r3, [r7, #20]
 802d2e2:	4413      	add	r3, r2
 802d2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2e8:	681b      	ldr	r3, [r3, #0]
 802d2ea:	693a      	ldr	r2, [r7, #16]
 802d2ec:	0151      	lsls	r1, r2, #5
 802d2ee:	697a      	ldr	r2, [r7, #20]
 802d2f0:	440a      	add	r2, r1
 802d2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d2f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d2fa:	6013      	str	r3, [r2, #0]
 802d2fc:	e092      	b.n	802d424 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d2fe:	693b      	ldr	r3, [r7, #16]
 802d300:	015a      	lsls	r2, r3, #5
 802d302:	697b      	ldr	r3, [r7, #20]
 802d304:	4413      	add	r3, r2
 802d306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d30a:	681b      	ldr	r3, [r3, #0]
 802d30c:	693a      	ldr	r2, [r7, #16]
 802d30e:	0151      	lsls	r1, r2, #5
 802d310:	697a      	ldr	r2, [r7, #20]
 802d312:	440a      	add	r2, r1
 802d314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d31c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802d31e:	68bb      	ldr	r3, [r7, #8]
 802d320:	695b      	ldr	r3, [r3, #20]
 802d322:	2b00      	cmp	r3, #0
 802d324:	d07e      	beq.n	802d424 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802d326:	697b      	ldr	r3, [r7, #20]
 802d328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d32c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802d32e:	68bb      	ldr	r3, [r7, #8]
 802d330:	781b      	ldrb	r3, [r3, #0]
 802d332:	f003 030f 	and.w	r3, r3, #15
 802d336:	2101      	movs	r1, #1
 802d338:	fa01 f303 	lsl.w	r3, r1, r3
 802d33c:	6979      	ldr	r1, [r7, #20]
 802d33e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d342:	4313      	orrs	r3, r2
 802d344:	634b      	str	r3, [r1, #52]	; 0x34
 802d346:	e06d      	b.n	802d424 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802d348:	693b      	ldr	r3, [r7, #16]
 802d34a:	015a      	lsls	r2, r3, #5
 802d34c:	697b      	ldr	r3, [r7, #20]
 802d34e:	4413      	add	r3, r2
 802d350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d354:	691b      	ldr	r3, [r3, #16]
 802d356:	693a      	ldr	r2, [r7, #16]
 802d358:	0151      	lsls	r1, r2, #5
 802d35a:	697a      	ldr	r2, [r7, #20]
 802d35c:	440a      	add	r2, r1
 802d35e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d362:	0cdb      	lsrs	r3, r3, #19
 802d364:	04db      	lsls	r3, r3, #19
 802d366:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802d368:	693b      	ldr	r3, [r7, #16]
 802d36a:	015a      	lsls	r2, r3, #5
 802d36c:	697b      	ldr	r3, [r7, #20]
 802d36e:	4413      	add	r3, r2
 802d370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d374:	691b      	ldr	r3, [r3, #16]
 802d376:	693a      	ldr	r2, [r7, #16]
 802d378:	0151      	lsls	r1, r2, #5
 802d37a:	697a      	ldr	r2, [r7, #20]
 802d37c:	440a      	add	r2, r1
 802d37e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d38a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802d38c:	68bb      	ldr	r3, [r7, #8]
 802d38e:	695b      	ldr	r3, [r3, #20]
 802d390:	2b00      	cmp	r3, #0
 802d392:	d003      	beq.n	802d39c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 802d394:	68bb      	ldr	r3, [r7, #8]
 802d396:	689a      	ldr	r2, [r3, #8]
 802d398:	68bb      	ldr	r3, [r7, #8]
 802d39a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802d39c:	693b      	ldr	r3, [r7, #16]
 802d39e:	015a      	lsls	r2, r3, #5
 802d3a0:	697b      	ldr	r3, [r7, #20]
 802d3a2:	4413      	add	r3, r2
 802d3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d3a8:	691b      	ldr	r3, [r3, #16]
 802d3aa:	693a      	ldr	r2, [r7, #16]
 802d3ac:	0151      	lsls	r1, r2, #5
 802d3ae:	697a      	ldr	r2, [r7, #20]
 802d3b0:	440a      	add	r2, r1
 802d3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d3b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d3ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 802d3bc:	693b      	ldr	r3, [r7, #16]
 802d3be:	015a      	lsls	r2, r3, #5
 802d3c0:	697b      	ldr	r3, [r7, #20]
 802d3c2:	4413      	add	r3, r2
 802d3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d3c8:	691a      	ldr	r2, [r3, #16]
 802d3ca:	68bb      	ldr	r3, [r7, #8]
 802d3cc:	689b      	ldr	r3, [r3, #8]
 802d3ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d3d2:	6939      	ldr	r1, [r7, #16]
 802d3d4:	0148      	lsls	r0, r1, #5
 802d3d6:	6979      	ldr	r1, [r7, #20]
 802d3d8:	4401      	add	r1, r0
 802d3da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d3de:	4313      	orrs	r3, r2
 802d3e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802d3e2:	79fb      	ldrb	r3, [r7, #7]
 802d3e4:	2b01      	cmp	r3, #1
 802d3e6:	d10d      	bne.n	802d404 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802d3e8:	68bb      	ldr	r3, [r7, #8]
 802d3ea:	68db      	ldr	r3, [r3, #12]
 802d3ec:	2b00      	cmp	r3, #0
 802d3ee:	d009      	beq.n	802d404 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802d3f0:	68bb      	ldr	r3, [r7, #8]
 802d3f2:	68d9      	ldr	r1, [r3, #12]
 802d3f4:	693b      	ldr	r3, [r7, #16]
 802d3f6:	015a      	lsls	r2, r3, #5
 802d3f8:	697b      	ldr	r3, [r7, #20]
 802d3fa:	4413      	add	r3, r2
 802d3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d400:	460a      	mov	r2, r1
 802d402:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802d404:	693b      	ldr	r3, [r7, #16]
 802d406:	015a      	lsls	r2, r3, #5
 802d408:	697b      	ldr	r3, [r7, #20]
 802d40a:	4413      	add	r3, r2
 802d40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d410:	681b      	ldr	r3, [r3, #0]
 802d412:	693a      	ldr	r2, [r7, #16]
 802d414:	0151      	lsls	r1, r2, #5
 802d416:	697a      	ldr	r2, [r7, #20]
 802d418:	440a      	add	r2, r1
 802d41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d41e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802d424:	2300      	movs	r3, #0
}
 802d426:	4618      	mov	r0, r3
 802d428:	371c      	adds	r7, #28
 802d42a:	46bd      	mov	sp, r7
 802d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d430:	4770      	bx	lr

0802d432 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802d432:	b480      	push	{r7}
 802d434:	b089      	sub	sp, #36	; 0x24
 802d436:	af00      	add	r7, sp, #0
 802d438:	60f8      	str	r0, [r7, #12]
 802d43a:	60b9      	str	r1, [r7, #8]
 802d43c:	4611      	mov	r1, r2
 802d43e:	461a      	mov	r2, r3
 802d440:	460b      	mov	r3, r1
 802d442:	71fb      	strb	r3, [r7, #7]
 802d444:	4613      	mov	r3, r2
 802d446:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d448:	68fb      	ldr	r3, [r7, #12]
 802d44a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 802d44c:	68bb      	ldr	r3, [r7, #8]
 802d44e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 802d450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802d454:	2b00      	cmp	r3, #0
 802d456:	d11a      	bne.n	802d48e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802d458:	88bb      	ldrh	r3, [r7, #4]
 802d45a:	3303      	adds	r3, #3
 802d45c:	089b      	lsrs	r3, r3, #2
 802d45e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802d460:	2300      	movs	r3, #0
 802d462:	61bb      	str	r3, [r7, #24]
 802d464:	e00f      	b.n	802d486 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802d466:	79fb      	ldrb	r3, [r7, #7]
 802d468:	031a      	lsls	r2, r3, #12
 802d46a:	697b      	ldr	r3, [r7, #20]
 802d46c:	4413      	add	r3, r2
 802d46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802d472:	461a      	mov	r2, r3
 802d474:	69fb      	ldr	r3, [r7, #28]
 802d476:	681b      	ldr	r3, [r3, #0]
 802d478:	6013      	str	r3, [r2, #0]
      pSrc++;
 802d47a:	69fb      	ldr	r3, [r7, #28]
 802d47c:	3304      	adds	r3, #4
 802d47e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802d480:	69bb      	ldr	r3, [r7, #24]
 802d482:	3301      	adds	r3, #1
 802d484:	61bb      	str	r3, [r7, #24]
 802d486:	69ba      	ldr	r2, [r7, #24]
 802d488:	693b      	ldr	r3, [r7, #16]
 802d48a:	429a      	cmp	r2, r3
 802d48c:	d3eb      	bcc.n	802d466 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802d48e:	2300      	movs	r3, #0
}
 802d490:	4618      	mov	r0, r3
 802d492:	3724      	adds	r7, #36	; 0x24
 802d494:	46bd      	mov	sp, r7
 802d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d49a:	4770      	bx	lr

0802d49c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802d49c:	b480      	push	{r7}
 802d49e:	b089      	sub	sp, #36	; 0x24
 802d4a0:	af00      	add	r7, sp, #0
 802d4a2:	60f8      	str	r0, [r7, #12]
 802d4a4:	60b9      	str	r1, [r7, #8]
 802d4a6:	4613      	mov	r3, r2
 802d4a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d4aa:	68fb      	ldr	r3, [r7, #12]
 802d4ac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 802d4ae:	68bb      	ldr	r3, [r7, #8]
 802d4b0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 802d4b2:	88fb      	ldrh	r3, [r7, #6]
 802d4b4:	3303      	adds	r3, #3
 802d4b6:	089b      	lsrs	r3, r3, #2
 802d4b8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 802d4ba:	2300      	movs	r3, #0
 802d4bc:	61bb      	str	r3, [r7, #24]
 802d4be:	e00b      	b.n	802d4d8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802d4c0:	697b      	ldr	r3, [r7, #20]
 802d4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802d4c6:	681a      	ldr	r2, [r3, #0]
 802d4c8:	69fb      	ldr	r3, [r7, #28]
 802d4ca:	601a      	str	r2, [r3, #0]
    pDest++;
 802d4cc:	69fb      	ldr	r3, [r7, #28]
 802d4ce:	3304      	adds	r3, #4
 802d4d0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 802d4d2:	69bb      	ldr	r3, [r7, #24]
 802d4d4:	3301      	adds	r3, #1
 802d4d6:	61bb      	str	r3, [r7, #24]
 802d4d8:	69ba      	ldr	r2, [r7, #24]
 802d4da:	693b      	ldr	r3, [r7, #16]
 802d4dc:	429a      	cmp	r2, r3
 802d4de:	d3ef      	bcc.n	802d4c0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 802d4e0:	69fb      	ldr	r3, [r7, #28]
}
 802d4e2:	4618      	mov	r0, r3
 802d4e4:	3724      	adds	r7, #36	; 0x24
 802d4e6:	46bd      	mov	sp, r7
 802d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4ec:	4770      	bx	lr

0802d4ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d4ee:	b480      	push	{r7}
 802d4f0:	b085      	sub	sp, #20
 802d4f2:	af00      	add	r7, sp, #0
 802d4f4:	6078      	str	r0, [r7, #4]
 802d4f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d4f8:	687b      	ldr	r3, [r7, #4]
 802d4fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d4fc:	683b      	ldr	r3, [r7, #0]
 802d4fe:	781b      	ldrb	r3, [r3, #0]
 802d500:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802d502:	683b      	ldr	r3, [r7, #0]
 802d504:	785b      	ldrb	r3, [r3, #1]
 802d506:	2b01      	cmp	r3, #1
 802d508:	d12c      	bne.n	802d564 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802d50a:	68bb      	ldr	r3, [r7, #8]
 802d50c:	015a      	lsls	r2, r3, #5
 802d50e:	68fb      	ldr	r3, [r7, #12]
 802d510:	4413      	add	r3, r2
 802d512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d516:	681b      	ldr	r3, [r3, #0]
 802d518:	2b00      	cmp	r3, #0
 802d51a:	db12      	blt.n	802d542 <USB_EPSetStall+0x54>
 802d51c:	68bb      	ldr	r3, [r7, #8]
 802d51e:	2b00      	cmp	r3, #0
 802d520:	d00f      	beq.n	802d542 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802d522:	68bb      	ldr	r3, [r7, #8]
 802d524:	015a      	lsls	r2, r3, #5
 802d526:	68fb      	ldr	r3, [r7, #12]
 802d528:	4413      	add	r3, r2
 802d52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d52e:	681b      	ldr	r3, [r3, #0]
 802d530:	68ba      	ldr	r2, [r7, #8]
 802d532:	0151      	lsls	r1, r2, #5
 802d534:	68fa      	ldr	r2, [r7, #12]
 802d536:	440a      	add	r2, r1
 802d538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d53c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802d540:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802d542:	68bb      	ldr	r3, [r7, #8]
 802d544:	015a      	lsls	r2, r3, #5
 802d546:	68fb      	ldr	r3, [r7, #12]
 802d548:	4413      	add	r3, r2
 802d54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d54e:	681b      	ldr	r3, [r3, #0]
 802d550:	68ba      	ldr	r2, [r7, #8]
 802d552:	0151      	lsls	r1, r2, #5
 802d554:	68fa      	ldr	r2, [r7, #12]
 802d556:	440a      	add	r2, r1
 802d558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d55c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802d560:	6013      	str	r3, [r2, #0]
 802d562:	e02b      	b.n	802d5bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802d564:	68bb      	ldr	r3, [r7, #8]
 802d566:	015a      	lsls	r2, r3, #5
 802d568:	68fb      	ldr	r3, [r7, #12]
 802d56a:	4413      	add	r3, r2
 802d56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d570:	681b      	ldr	r3, [r3, #0]
 802d572:	2b00      	cmp	r3, #0
 802d574:	db12      	blt.n	802d59c <USB_EPSetStall+0xae>
 802d576:	68bb      	ldr	r3, [r7, #8]
 802d578:	2b00      	cmp	r3, #0
 802d57a:	d00f      	beq.n	802d59c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802d57c:	68bb      	ldr	r3, [r7, #8]
 802d57e:	015a      	lsls	r2, r3, #5
 802d580:	68fb      	ldr	r3, [r7, #12]
 802d582:	4413      	add	r3, r2
 802d584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d588:	681b      	ldr	r3, [r3, #0]
 802d58a:	68ba      	ldr	r2, [r7, #8]
 802d58c:	0151      	lsls	r1, r2, #5
 802d58e:	68fa      	ldr	r2, [r7, #12]
 802d590:	440a      	add	r2, r1
 802d592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802d59a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802d59c:	68bb      	ldr	r3, [r7, #8]
 802d59e:	015a      	lsls	r2, r3, #5
 802d5a0:	68fb      	ldr	r3, [r7, #12]
 802d5a2:	4413      	add	r3, r2
 802d5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d5a8:	681b      	ldr	r3, [r3, #0]
 802d5aa:	68ba      	ldr	r2, [r7, #8]
 802d5ac:	0151      	lsls	r1, r2, #5
 802d5ae:	68fa      	ldr	r2, [r7, #12]
 802d5b0:	440a      	add	r2, r1
 802d5b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d5b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802d5ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802d5bc:	2300      	movs	r3, #0
}
 802d5be:	4618      	mov	r0, r3
 802d5c0:	3714      	adds	r7, #20
 802d5c2:	46bd      	mov	sp, r7
 802d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5c8:	4770      	bx	lr

0802d5ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d5ca:	b480      	push	{r7}
 802d5cc:	b085      	sub	sp, #20
 802d5ce:	af00      	add	r7, sp, #0
 802d5d0:	6078      	str	r0, [r7, #4]
 802d5d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d5d4:	687b      	ldr	r3, [r7, #4]
 802d5d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d5d8:	683b      	ldr	r3, [r7, #0]
 802d5da:	781b      	ldrb	r3, [r3, #0]
 802d5dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802d5de:	683b      	ldr	r3, [r7, #0]
 802d5e0:	785b      	ldrb	r3, [r3, #1]
 802d5e2:	2b01      	cmp	r3, #1
 802d5e4:	d128      	bne.n	802d638 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802d5e6:	68bb      	ldr	r3, [r7, #8]
 802d5e8:	015a      	lsls	r2, r3, #5
 802d5ea:	68fb      	ldr	r3, [r7, #12]
 802d5ec:	4413      	add	r3, r2
 802d5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d5f2:	681b      	ldr	r3, [r3, #0]
 802d5f4:	68ba      	ldr	r2, [r7, #8]
 802d5f6:	0151      	lsls	r1, r2, #5
 802d5f8:	68fa      	ldr	r2, [r7, #12]
 802d5fa:	440a      	add	r2, r1
 802d5fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802d604:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802d606:	683b      	ldr	r3, [r7, #0]
 802d608:	78db      	ldrb	r3, [r3, #3]
 802d60a:	2b03      	cmp	r3, #3
 802d60c:	d003      	beq.n	802d616 <USB_EPClearStall+0x4c>
 802d60e:	683b      	ldr	r3, [r7, #0]
 802d610:	78db      	ldrb	r3, [r3, #3]
 802d612:	2b02      	cmp	r3, #2
 802d614:	d138      	bne.n	802d688 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802d616:	68bb      	ldr	r3, [r7, #8]
 802d618:	015a      	lsls	r2, r3, #5
 802d61a:	68fb      	ldr	r3, [r7, #12]
 802d61c:	4413      	add	r3, r2
 802d61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d622:	681b      	ldr	r3, [r3, #0]
 802d624:	68ba      	ldr	r2, [r7, #8]
 802d626:	0151      	lsls	r1, r2, #5
 802d628:	68fa      	ldr	r2, [r7, #12]
 802d62a:	440a      	add	r2, r1
 802d62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d634:	6013      	str	r3, [r2, #0]
 802d636:	e027      	b.n	802d688 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802d638:	68bb      	ldr	r3, [r7, #8]
 802d63a:	015a      	lsls	r2, r3, #5
 802d63c:	68fb      	ldr	r3, [r7, #12]
 802d63e:	4413      	add	r3, r2
 802d640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d644:	681b      	ldr	r3, [r3, #0]
 802d646:	68ba      	ldr	r2, [r7, #8]
 802d648:	0151      	lsls	r1, r2, #5
 802d64a:	68fa      	ldr	r2, [r7, #12]
 802d64c:	440a      	add	r2, r1
 802d64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802d656:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802d658:	683b      	ldr	r3, [r7, #0]
 802d65a:	78db      	ldrb	r3, [r3, #3]
 802d65c:	2b03      	cmp	r3, #3
 802d65e:	d003      	beq.n	802d668 <USB_EPClearStall+0x9e>
 802d660:	683b      	ldr	r3, [r7, #0]
 802d662:	78db      	ldrb	r3, [r3, #3]
 802d664:	2b02      	cmp	r3, #2
 802d666:	d10f      	bne.n	802d688 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802d668:	68bb      	ldr	r3, [r7, #8]
 802d66a:	015a      	lsls	r2, r3, #5
 802d66c:	68fb      	ldr	r3, [r7, #12]
 802d66e:	4413      	add	r3, r2
 802d670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d674:	681b      	ldr	r3, [r3, #0]
 802d676:	68ba      	ldr	r2, [r7, #8]
 802d678:	0151      	lsls	r1, r2, #5
 802d67a:	68fa      	ldr	r2, [r7, #12]
 802d67c:	440a      	add	r2, r1
 802d67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d686:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802d688:	2300      	movs	r3, #0
}
 802d68a:	4618      	mov	r0, r3
 802d68c:	3714      	adds	r7, #20
 802d68e:	46bd      	mov	sp, r7
 802d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d694:	4770      	bx	lr

0802d696 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802d696:	b480      	push	{r7}
 802d698:	b085      	sub	sp, #20
 802d69a:	af00      	add	r7, sp, #0
 802d69c:	6078      	str	r0, [r7, #4]
 802d69e:	460b      	mov	r3, r1
 802d6a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d6a2:	687b      	ldr	r3, [r7, #4]
 802d6a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802d6a6:	68fb      	ldr	r3, [r7, #12]
 802d6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d6ac:	681b      	ldr	r3, [r3, #0]
 802d6ae:	68fa      	ldr	r2, [r7, #12]
 802d6b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d6b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802d6b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802d6ba:	68fb      	ldr	r3, [r7, #12]
 802d6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d6c0:	681a      	ldr	r2, [r3, #0]
 802d6c2:	78fb      	ldrb	r3, [r7, #3]
 802d6c4:	011b      	lsls	r3, r3, #4
 802d6c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802d6ca:	68f9      	ldr	r1, [r7, #12]
 802d6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d6d0:	4313      	orrs	r3, r2
 802d6d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802d6d4:	2300      	movs	r3, #0
}
 802d6d6:	4618      	mov	r0, r3
 802d6d8:	3714      	adds	r7, #20
 802d6da:	46bd      	mov	sp, r7
 802d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6e0:	4770      	bx	lr

0802d6e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802d6e2:	b480      	push	{r7}
 802d6e4:	b085      	sub	sp, #20
 802d6e6:	af00      	add	r7, sp, #0
 802d6e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d6ea:	687b      	ldr	r3, [r7, #4]
 802d6ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802d6ee:	68fb      	ldr	r3, [r7, #12]
 802d6f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802d6f4:	681b      	ldr	r3, [r3, #0]
 802d6f6:	68fa      	ldr	r2, [r7, #12]
 802d6f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802d6fc:	f023 0303 	bic.w	r3, r3, #3
 802d700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802d702:	68fb      	ldr	r3, [r7, #12]
 802d704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d708:	685b      	ldr	r3, [r3, #4]
 802d70a:	68fa      	ldr	r2, [r7, #12]
 802d70c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d710:	f023 0302 	bic.w	r3, r3, #2
 802d714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802d716:	2300      	movs	r3, #0
}
 802d718:	4618      	mov	r0, r3
 802d71a:	3714      	adds	r7, #20
 802d71c:	46bd      	mov	sp, r7
 802d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d722:	4770      	bx	lr

0802d724 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802d724:	b480      	push	{r7}
 802d726:	b085      	sub	sp, #20
 802d728:	af00      	add	r7, sp, #0
 802d72a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d72c:	687b      	ldr	r3, [r7, #4]
 802d72e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802d730:	68fb      	ldr	r3, [r7, #12]
 802d732:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802d736:	681b      	ldr	r3, [r3, #0]
 802d738:	68fa      	ldr	r2, [r7, #12]
 802d73a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802d73e:	f023 0303 	bic.w	r3, r3, #3
 802d742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802d744:	68fb      	ldr	r3, [r7, #12]
 802d746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d74a:	685b      	ldr	r3, [r3, #4]
 802d74c:	68fa      	ldr	r2, [r7, #12]
 802d74e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d752:	f043 0302 	orr.w	r3, r3, #2
 802d756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802d758:	2300      	movs	r3, #0
}
 802d75a:	4618      	mov	r0, r3
 802d75c:	3714      	adds	r7, #20
 802d75e:	46bd      	mov	sp, r7
 802d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d764:	4770      	bx	lr

0802d766 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802d766:	b480      	push	{r7}
 802d768:	b085      	sub	sp, #20
 802d76a:	af00      	add	r7, sp, #0
 802d76c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802d76e:	687b      	ldr	r3, [r7, #4]
 802d770:	695b      	ldr	r3, [r3, #20]
 802d772:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802d774:	687b      	ldr	r3, [r7, #4]
 802d776:	699b      	ldr	r3, [r3, #24]
 802d778:	68fa      	ldr	r2, [r7, #12]
 802d77a:	4013      	ands	r3, r2
 802d77c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802d77e:	68fb      	ldr	r3, [r7, #12]
}
 802d780:	4618      	mov	r0, r3
 802d782:	3714      	adds	r7, #20
 802d784:	46bd      	mov	sp, r7
 802d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d78a:	4770      	bx	lr

0802d78c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802d78c:	b480      	push	{r7}
 802d78e:	b085      	sub	sp, #20
 802d790:	af00      	add	r7, sp, #0
 802d792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d794:	687b      	ldr	r3, [r7, #4]
 802d796:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802d798:	68fb      	ldr	r3, [r7, #12]
 802d79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d79e:	699b      	ldr	r3, [r3, #24]
 802d7a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802d7a2:	68fb      	ldr	r3, [r7, #12]
 802d7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d7a8:	69db      	ldr	r3, [r3, #28]
 802d7aa:	68ba      	ldr	r2, [r7, #8]
 802d7ac:	4013      	ands	r3, r2
 802d7ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802d7b0:	68bb      	ldr	r3, [r7, #8]
 802d7b2:	0c1b      	lsrs	r3, r3, #16
}
 802d7b4:	4618      	mov	r0, r3
 802d7b6:	3714      	adds	r7, #20
 802d7b8:	46bd      	mov	sp, r7
 802d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7be:	4770      	bx	lr

0802d7c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802d7c0:	b480      	push	{r7}
 802d7c2:	b085      	sub	sp, #20
 802d7c4:	af00      	add	r7, sp, #0
 802d7c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d7c8:	687b      	ldr	r3, [r7, #4]
 802d7ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802d7cc:	68fb      	ldr	r3, [r7, #12]
 802d7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d7d2:	699b      	ldr	r3, [r3, #24]
 802d7d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802d7d6:	68fb      	ldr	r3, [r7, #12]
 802d7d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d7dc:	69db      	ldr	r3, [r3, #28]
 802d7de:	68ba      	ldr	r2, [r7, #8]
 802d7e0:	4013      	ands	r3, r2
 802d7e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802d7e4:	68bb      	ldr	r3, [r7, #8]
 802d7e6:	b29b      	uxth	r3, r3
}
 802d7e8:	4618      	mov	r0, r3
 802d7ea:	3714      	adds	r7, #20
 802d7ec:	46bd      	mov	sp, r7
 802d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7f2:	4770      	bx	lr

0802d7f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802d7f4:	b480      	push	{r7}
 802d7f6:	b085      	sub	sp, #20
 802d7f8:	af00      	add	r7, sp, #0
 802d7fa:	6078      	str	r0, [r7, #4]
 802d7fc:	460b      	mov	r3, r1
 802d7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d800:	687b      	ldr	r3, [r7, #4]
 802d802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802d804:	78fb      	ldrb	r3, [r7, #3]
 802d806:	015a      	lsls	r2, r3, #5
 802d808:	68fb      	ldr	r3, [r7, #12]
 802d80a:	4413      	add	r3, r2
 802d80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d810:	689b      	ldr	r3, [r3, #8]
 802d812:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802d814:	68fb      	ldr	r3, [r7, #12]
 802d816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d81a:	695b      	ldr	r3, [r3, #20]
 802d81c:	68ba      	ldr	r2, [r7, #8]
 802d81e:	4013      	ands	r3, r2
 802d820:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802d822:	68bb      	ldr	r3, [r7, #8]
}
 802d824:	4618      	mov	r0, r3
 802d826:	3714      	adds	r7, #20
 802d828:	46bd      	mov	sp, r7
 802d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d82e:	4770      	bx	lr

0802d830 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802d830:	b480      	push	{r7}
 802d832:	b087      	sub	sp, #28
 802d834:	af00      	add	r7, sp, #0
 802d836:	6078      	str	r0, [r7, #4]
 802d838:	460b      	mov	r3, r1
 802d83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d83c:	687b      	ldr	r3, [r7, #4]
 802d83e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 802d840:	697b      	ldr	r3, [r7, #20]
 802d842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d846:	691b      	ldr	r3, [r3, #16]
 802d848:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802d84a:	697b      	ldr	r3, [r7, #20]
 802d84c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802d852:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802d854:	78fb      	ldrb	r3, [r7, #3]
 802d856:	f003 030f 	and.w	r3, r3, #15
 802d85a:	68fa      	ldr	r2, [r7, #12]
 802d85c:	fa22 f303 	lsr.w	r3, r2, r3
 802d860:	01db      	lsls	r3, r3, #7
 802d862:	b2db      	uxtb	r3, r3
 802d864:	693a      	ldr	r2, [r7, #16]
 802d866:	4313      	orrs	r3, r2
 802d868:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802d86a:	78fb      	ldrb	r3, [r7, #3]
 802d86c:	015a      	lsls	r2, r3, #5
 802d86e:	697b      	ldr	r3, [r7, #20]
 802d870:	4413      	add	r3, r2
 802d872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d876:	689b      	ldr	r3, [r3, #8]
 802d878:	693a      	ldr	r2, [r7, #16]
 802d87a:	4013      	ands	r3, r2
 802d87c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802d87e:	68bb      	ldr	r3, [r7, #8]
}
 802d880:	4618      	mov	r0, r3
 802d882:	371c      	adds	r7, #28
 802d884:	46bd      	mov	sp, r7
 802d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d88a:	4770      	bx	lr

0802d88c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802d88c:	b480      	push	{r7}
 802d88e:	b083      	sub	sp, #12
 802d890:	af00      	add	r7, sp, #0
 802d892:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802d894:	687b      	ldr	r3, [r7, #4]
 802d896:	695b      	ldr	r3, [r3, #20]
 802d898:	f003 0301 	and.w	r3, r3, #1
}
 802d89c:	4618      	mov	r0, r3
 802d89e:	370c      	adds	r7, #12
 802d8a0:	46bd      	mov	sp, r7
 802d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8a6:	4770      	bx	lr

0802d8a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802d8a8:	b480      	push	{r7}
 802d8aa:	b085      	sub	sp, #20
 802d8ac:	af00      	add	r7, sp, #0
 802d8ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d8b0:	687b      	ldr	r3, [r7, #4]
 802d8b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802d8b4:	68fb      	ldr	r3, [r7, #12]
 802d8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8ba:	681b      	ldr	r3, [r3, #0]
 802d8bc:	68fa      	ldr	r2, [r7, #12]
 802d8be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d8c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802d8c6:	f023 0307 	bic.w	r3, r3, #7
 802d8ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802d8cc:	68fb      	ldr	r3, [r7, #12]
 802d8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d8d2:	685b      	ldr	r3, [r3, #4]
 802d8d4:	68fa      	ldr	r2, [r7, #12]
 802d8d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d8da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802d8de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802d8e0:	2300      	movs	r3, #0
}
 802d8e2:	4618      	mov	r0, r3
 802d8e4:	3714      	adds	r7, #20
 802d8e6:	46bd      	mov	sp, r7
 802d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8ec:	4770      	bx	lr
	...

0802d8f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802d8f0:	b480      	push	{r7}
 802d8f2:	b087      	sub	sp, #28
 802d8f4:	af00      	add	r7, sp, #0
 802d8f6:	60f8      	str	r0, [r7, #12]
 802d8f8:	460b      	mov	r3, r1
 802d8fa:	607a      	str	r2, [r7, #4]
 802d8fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d8fe:	68fb      	ldr	r3, [r7, #12]
 802d900:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802d902:	68fb      	ldr	r3, [r7, #12]
 802d904:	333c      	adds	r3, #60	; 0x3c
 802d906:	3304      	adds	r3, #4
 802d908:	681b      	ldr	r3, [r3, #0]
 802d90a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802d90c:	693b      	ldr	r3, [r7, #16]
 802d90e:	4a26      	ldr	r2, [pc, #152]	; (802d9a8 <USB_EP0_OutStart+0xb8>)
 802d910:	4293      	cmp	r3, r2
 802d912:	d90a      	bls.n	802d92a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d914:	697b      	ldr	r3, [r7, #20]
 802d916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d91a:	681b      	ldr	r3, [r3, #0]
 802d91c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d924:	d101      	bne.n	802d92a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802d926:	2300      	movs	r3, #0
 802d928:	e037      	b.n	802d99a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802d92a:	697b      	ldr	r3, [r7, #20]
 802d92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d930:	461a      	mov	r2, r3
 802d932:	2300      	movs	r3, #0
 802d934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802d936:	697b      	ldr	r3, [r7, #20]
 802d938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d93c:	691b      	ldr	r3, [r3, #16]
 802d93e:	697a      	ldr	r2, [r7, #20]
 802d940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802d94a:	697b      	ldr	r3, [r7, #20]
 802d94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d950:	691b      	ldr	r3, [r3, #16]
 802d952:	697a      	ldr	r2, [r7, #20]
 802d954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d958:	f043 0318 	orr.w	r3, r3, #24
 802d95c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802d95e:	697b      	ldr	r3, [r7, #20]
 802d960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d964:	691b      	ldr	r3, [r3, #16]
 802d966:	697a      	ldr	r2, [r7, #20]
 802d968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d96c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802d970:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802d972:	7afb      	ldrb	r3, [r7, #11]
 802d974:	2b01      	cmp	r3, #1
 802d976:	d10f      	bne.n	802d998 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802d978:	697b      	ldr	r3, [r7, #20]
 802d97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d97e:	461a      	mov	r2, r3
 802d980:	687b      	ldr	r3, [r7, #4]
 802d982:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802d984:	697b      	ldr	r3, [r7, #20]
 802d986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d98a:	681b      	ldr	r3, [r3, #0]
 802d98c:	697a      	ldr	r2, [r7, #20]
 802d98e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d992:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802d996:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802d998:	2300      	movs	r3, #0
}
 802d99a:	4618      	mov	r0, r3
 802d99c:	371c      	adds	r7, #28
 802d99e:	46bd      	mov	sp, r7
 802d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d9a4:	4770      	bx	lr
 802d9a6:	bf00      	nop
 802d9a8:	4f54300a 	.word	0x4f54300a

0802d9ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802d9ac:	b480      	push	{r7}
 802d9ae:	b085      	sub	sp, #20
 802d9b0:	af00      	add	r7, sp, #0
 802d9b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 802d9b4:	2300      	movs	r3, #0
 802d9b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 802d9b8:	68fb      	ldr	r3, [r7, #12]
 802d9ba:	3301      	adds	r3, #1
 802d9bc:	60fb      	str	r3, [r7, #12]
 802d9be:	68fb      	ldr	r3, [r7, #12]
 802d9c0:	4a13      	ldr	r2, [pc, #76]	; (802da10 <USB_CoreReset+0x64>)
 802d9c2:	4293      	cmp	r3, r2
 802d9c4:	d901      	bls.n	802d9ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802d9c6:	2303      	movs	r3, #3
 802d9c8:	e01b      	b.n	802da02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d9ca:	687b      	ldr	r3, [r7, #4]
 802d9cc:	691b      	ldr	r3, [r3, #16]
 802d9ce:	2b00      	cmp	r3, #0
 802d9d0:	daf2      	bge.n	802d9b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802d9d2:	2300      	movs	r3, #0
 802d9d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802d9d6:	687b      	ldr	r3, [r7, #4]
 802d9d8:	691b      	ldr	r3, [r3, #16]
 802d9da:	f043 0201 	orr.w	r2, r3, #1
 802d9de:	687b      	ldr	r3, [r7, #4]
 802d9e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802d9e2:	68fb      	ldr	r3, [r7, #12]
 802d9e4:	3301      	adds	r3, #1
 802d9e6:	60fb      	str	r3, [r7, #12]
 802d9e8:	68fb      	ldr	r3, [r7, #12]
 802d9ea:	4a09      	ldr	r2, [pc, #36]	; (802da10 <USB_CoreReset+0x64>)
 802d9ec:	4293      	cmp	r3, r2
 802d9ee:	d901      	bls.n	802d9f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802d9f0:	2303      	movs	r3, #3
 802d9f2:	e006      	b.n	802da02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802d9f4:	687b      	ldr	r3, [r7, #4]
 802d9f6:	691b      	ldr	r3, [r3, #16]
 802d9f8:	f003 0301 	and.w	r3, r3, #1
 802d9fc:	2b01      	cmp	r3, #1
 802d9fe:	d0f0      	beq.n	802d9e2 <USB_CoreReset+0x36>

  return HAL_OK;
 802da00:	2300      	movs	r3, #0
}
 802da02:	4618      	mov	r0, r3
 802da04:	3714      	adds	r7, #20
 802da06:	46bd      	mov	sp, r7
 802da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da0c:	4770      	bx	lr
 802da0e:	bf00      	nop
 802da10:	00030d40 	.word	0x00030d40

0802da14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802da14:	b084      	sub	sp, #16
 802da16:	b580      	push	{r7, lr}
 802da18:	b084      	sub	sp, #16
 802da1a:	af00      	add	r7, sp, #0
 802da1c:	6078      	str	r0, [r7, #4]
 802da1e:	f107 001c 	add.w	r0, r7, #28
 802da22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 802da26:	687b      	ldr	r3, [r7, #4]
 802da28:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802da2a:	68bb      	ldr	r3, [r7, #8]
 802da2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802da30:	461a      	mov	r2, r3
 802da32:	2300      	movs	r3, #0
 802da34:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802da36:	687b      	ldr	r3, [r7, #4]
 802da38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802da3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802da42:	687b      	ldr	r3, [r7, #4]
 802da44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802da46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802da4a:	687b      	ldr	r3, [r7, #4]
 802da4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802da4e:	687b      	ldr	r3, [r7, #4]
 802da50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802da52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802da56:	687b      	ldr	r3, [r7, #4]
 802da58:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802da5a:	687b      	ldr	r3, [r7, #4]
 802da5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802da5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802da62:	2b00      	cmp	r3, #0
 802da64:	d018      	beq.n	802da98 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da68:	2b01      	cmp	r3, #1
 802da6a:	d10a      	bne.n	802da82 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802da6c:	68bb      	ldr	r3, [r7, #8]
 802da6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802da72:	681b      	ldr	r3, [r3, #0]
 802da74:	68ba      	ldr	r2, [r7, #8]
 802da76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802da7a:	f043 0304 	orr.w	r3, r3, #4
 802da7e:	6013      	str	r3, [r2, #0]
 802da80:	e014      	b.n	802daac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802da82:	68bb      	ldr	r3, [r7, #8]
 802da84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802da88:	681b      	ldr	r3, [r3, #0]
 802da8a:	68ba      	ldr	r2, [r7, #8]
 802da8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802da90:	f023 0304 	bic.w	r3, r3, #4
 802da94:	6013      	str	r3, [r2, #0]
 802da96:	e009      	b.n	802daac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802da98:	68bb      	ldr	r3, [r7, #8]
 802da9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802da9e:	681b      	ldr	r3, [r3, #0]
 802daa0:	68ba      	ldr	r2, [r7, #8]
 802daa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802daa6:	f023 0304 	bic.w	r3, r3, #4
 802daaa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 802daac:	2110      	movs	r1, #16
 802daae:	6878      	ldr	r0, [r7, #4]
 802dab0:	f7fe ff3e 	bl	802c930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 802dab4:	6878      	ldr	r0, [r7, #4]
 802dab6:	f7fe ff61 	bl	802c97c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802daba:	2300      	movs	r3, #0
 802dabc:	60fb      	str	r3, [r7, #12]
 802dabe:	e015      	b.n	802daec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802dac0:	68fb      	ldr	r3, [r7, #12]
 802dac2:	015a      	lsls	r2, r3, #5
 802dac4:	68bb      	ldr	r3, [r7, #8]
 802dac6:	4413      	add	r3, r2
 802dac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802dacc:	461a      	mov	r2, r3
 802dace:	f04f 33ff 	mov.w	r3, #4294967295
 802dad2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802dad4:	68fb      	ldr	r3, [r7, #12]
 802dad6:	015a      	lsls	r2, r3, #5
 802dad8:	68bb      	ldr	r3, [r7, #8]
 802dada:	4413      	add	r3, r2
 802dadc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802dae0:	461a      	mov	r2, r3
 802dae2:	2300      	movs	r3, #0
 802dae4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802dae6:	68fb      	ldr	r3, [r7, #12]
 802dae8:	3301      	adds	r3, #1
 802daea:	60fb      	str	r3, [r7, #12]
 802daec:	6a3b      	ldr	r3, [r7, #32]
 802daee:	68fa      	ldr	r2, [r7, #12]
 802daf0:	429a      	cmp	r2, r3
 802daf2:	d3e5      	bcc.n	802dac0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 802daf4:	2101      	movs	r1, #1
 802daf6:	6878      	ldr	r0, [r7, #4]
 802daf8:	f000 f8ac 	bl	802dc54 <USB_DriveVbus>

  HAL_Delay(200U);
 802dafc:	20c8      	movs	r0, #200	; 0xc8
 802dafe:	f7f5 fc83 	bl	8023408 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802db02:	687b      	ldr	r3, [r7, #4]
 802db04:	2200      	movs	r2, #0
 802db06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802db08:	687b      	ldr	r3, [r7, #4]
 802db0a:	f04f 32ff 	mov.w	r2, #4294967295
 802db0e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802db10:	687b      	ldr	r3, [r7, #4]
 802db12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802db14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802db18:	2b00      	cmp	r3, #0
 802db1a:	d00b      	beq.n	802db34 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802db1c:	687b      	ldr	r3, [r7, #4]
 802db1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 802db22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802db24:	687b      	ldr	r3, [r7, #4]
 802db26:	4a14      	ldr	r2, [pc, #80]	; (802db78 <USB_HostInit+0x164>)
 802db28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802db2a:	687b      	ldr	r3, [r7, #4]
 802db2c:	4a13      	ldr	r2, [pc, #76]	; (802db7c <USB_HostInit+0x168>)
 802db2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802db32:	e009      	b.n	802db48 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802db34:	687b      	ldr	r3, [r7, #4]
 802db36:	2280      	movs	r2, #128	; 0x80
 802db38:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802db3a:	687b      	ldr	r3, [r7, #4]
 802db3c:	4a10      	ldr	r2, [pc, #64]	; (802db80 <USB_HostInit+0x16c>)
 802db3e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802db40:	687b      	ldr	r3, [r7, #4]
 802db42:	4a10      	ldr	r2, [pc, #64]	; (802db84 <USB_HostInit+0x170>)
 802db44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802db4a:	2b00      	cmp	r3, #0
 802db4c:	d105      	bne.n	802db5a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802db4e:	687b      	ldr	r3, [r7, #4]
 802db50:	699b      	ldr	r3, [r3, #24]
 802db52:	f043 0210 	orr.w	r2, r3, #16
 802db56:	687b      	ldr	r3, [r7, #4]
 802db58:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802db5a:	687b      	ldr	r3, [r7, #4]
 802db5c:	699a      	ldr	r2, [r3, #24]
 802db5e:	4b0a      	ldr	r3, [pc, #40]	; (802db88 <USB_HostInit+0x174>)
 802db60:	4313      	orrs	r3, r2
 802db62:	687a      	ldr	r2, [r7, #4]
 802db64:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 802db66:	2300      	movs	r3, #0
}
 802db68:	4618      	mov	r0, r3
 802db6a:	3710      	adds	r7, #16
 802db6c:	46bd      	mov	sp, r7
 802db6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802db72:	b004      	add	sp, #16
 802db74:	4770      	bx	lr
 802db76:	bf00      	nop
 802db78:	01000200 	.word	0x01000200
 802db7c:	00e00300 	.word	0x00e00300
 802db80:	00600080 	.word	0x00600080
 802db84:	004000e0 	.word	0x004000e0
 802db88:	a3200008 	.word	0xa3200008

0802db8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802db8c:	b480      	push	{r7}
 802db8e:	b085      	sub	sp, #20
 802db90:	af00      	add	r7, sp, #0
 802db92:	6078      	str	r0, [r7, #4]
 802db94:	460b      	mov	r3, r1
 802db96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802db98:	687b      	ldr	r3, [r7, #4]
 802db9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802db9c:	68fb      	ldr	r3, [r7, #12]
 802db9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802dba2:	681b      	ldr	r3, [r3, #0]
 802dba4:	68fa      	ldr	r2, [r7, #12]
 802dba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802dbaa:	f023 0303 	bic.w	r3, r3, #3
 802dbae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802dbb0:	68fb      	ldr	r3, [r7, #12]
 802dbb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802dbb6:	681a      	ldr	r2, [r3, #0]
 802dbb8:	78fb      	ldrb	r3, [r7, #3]
 802dbba:	f003 0303 	and.w	r3, r3, #3
 802dbbe:	68f9      	ldr	r1, [r7, #12]
 802dbc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802dbc4:	4313      	orrs	r3, r2
 802dbc6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802dbc8:	78fb      	ldrb	r3, [r7, #3]
 802dbca:	2b01      	cmp	r3, #1
 802dbcc:	d107      	bne.n	802dbde <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802dbce:	68fb      	ldr	r3, [r7, #12]
 802dbd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802dbd4:	461a      	mov	r2, r3
 802dbd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802dbda:	6053      	str	r3, [r2, #4]
 802dbdc:	e009      	b.n	802dbf2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802dbde:	78fb      	ldrb	r3, [r7, #3]
 802dbe0:	2b02      	cmp	r3, #2
 802dbe2:	d106      	bne.n	802dbf2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802dbe4:	68fb      	ldr	r3, [r7, #12]
 802dbe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802dbea:	461a      	mov	r2, r3
 802dbec:	f241 7370 	movw	r3, #6000	; 0x1770
 802dbf0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802dbf2:	2300      	movs	r3, #0
}
 802dbf4:	4618      	mov	r0, r3
 802dbf6:	3714      	adds	r7, #20
 802dbf8:	46bd      	mov	sp, r7
 802dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dbfe:	4770      	bx	lr

0802dc00 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802dc00:	b580      	push	{r7, lr}
 802dc02:	b084      	sub	sp, #16
 802dc04:	af00      	add	r7, sp, #0
 802dc06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dc08:	687b      	ldr	r3, [r7, #4]
 802dc0a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802dc0c:	2300      	movs	r3, #0
 802dc0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802dc10:	68fb      	ldr	r3, [r7, #12]
 802dc12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802dc16:	681b      	ldr	r3, [r3, #0]
 802dc18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802dc1a:	68bb      	ldr	r3, [r7, #8]
 802dc1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802dc20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802dc22:	68bb      	ldr	r3, [r7, #8]
 802dc24:	68fa      	ldr	r2, [r7, #12]
 802dc26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802dc2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802dc2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802dc30:	2064      	movs	r0, #100	; 0x64
 802dc32:	f7f5 fbe9 	bl	8023408 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802dc36:	68bb      	ldr	r3, [r7, #8]
 802dc38:	68fa      	ldr	r2, [r7, #12]
 802dc3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802dc3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802dc42:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802dc44:	200a      	movs	r0, #10
 802dc46:	f7f5 fbdf 	bl	8023408 <HAL_Delay>

  return HAL_OK;
 802dc4a:	2300      	movs	r3, #0
}
 802dc4c:	4618      	mov	r0, r3
 802dc4e:	3710      	adds	r7, #16
 802dc50:	46bd      	mov	sp, r7
 802dc52:	bd80      	pop	{r7, pc}

0802dc54 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802dc54:	b480      	push	{r7}
 802dc56:	b085      	sub	sp, #20
 802dc58:	af00      	add	r7, sp, #0
 802dc5a:	6078      	str	r0, [r7, #4]
 802dc5c:	460b      	mov	r3, r1
 802dc5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dc60:	687b      	ldr	r3, [r7, #4]
 802dc62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802dc64:	2300      	movs	r3, #0
 802dc66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802dc68:	68fb      	ldr	r3, [r7, #12]
 802dc6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802dc6e:	681b      	ldr	r3, [r3, #0]
 802dc70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802dc72:	68bb      	ldr	r3, [r7, #8]
 802dc74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802dc78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802dc7a:	68bb      	ldr	r3, [r7, #8]
 802dc7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802dc80:	2b00      	cmp	r3, #0
 802dc82:	d109      	bne.n	802dc98 <USB_DriveVbus+0x44>
 802dc84:	78fb      	ldrb	r3, [r7, #3]
 802dc86:	2b01      	cmp	r3, #1
 802dc88:	d106      	bne.n	802dc98 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802dc8a:	68bb      	ldr	r3, [r7, #8]
 802dc8c:	68fa      	ldr	r2, [r7, #12]
 802dc8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802dc92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802dc96:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802dc98:	68bb      	ldr	r3, [r7, #8]
 802dc9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802dc9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802dca2:	d109      	bne.n	802dcb8 <USB_DriveVbus+0x64>
 802dca4:	78fb      	ldrb	r3, [r7, #3]
 802dca6:	2b00      	cmp	r3, #0
 802dca8:	d106      	bne.n	802dcb8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802dcaa:	68bb      	ldr	r3, [r7, #8]
 802dcac:	68fa      	ldr	r2, [r7, #12]
 802dcae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802dcb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802dcb6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802dcb8:	2300      	movs	r3, #0
}
 802dcba:	4618      	mov	r0, r3
 802dcbc:	3714      	adds	r7, #20
 802dcbe:	46bd      	mov	sp, r7
 802dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dcc4:	4770      	bx	lr

0802dcc6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802dcc6:	b480      	push	{r7}
 802dcc8:	b085      	sub	sp, #20
 802dcca:	af00      	add	r7, sp, #0
 802dccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dcce:	687b      	ldr	r3, [r7, #4]
 802dcd0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802dcd2:	2300      	movs	r3, #0
 802dcd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802dcd6:	68fb      	ldr	r3, [r7, #12]
 802dcd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802dcdc:	681b      	ldr	r3, [r3, #0]
 802dcde:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802dce0:	68bb      	ldr	r3, [r7, #8]
 802dce2:	0c5b      	lsrs	r3, r3, #17
 802dce4:	f003 0303 	and.w	r3, r3, #3
}
 802dce8:	4618      	mov	r0, r3
 802dcea:	3714      	adds	r7, #20
 802dcec:	46bd      	mov	sp, r7
 802dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dcf2:	4770      	bx	lr

0802dcf4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802dcf4:	b480      	push	{r7}
 802dcf6:	b085      	sub	sp, #20
 802dcf8:	af00      	add	r7, sp, #0
 802dcfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dcfc:	687b      	ldr	r3, [r7, #4]
 802dcfe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802dd00:	68fb      	ldr	r3, [r7, #12]
 802dd02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802dd06:	689b      	ldr	r3, [r3, #8]
 802dd08:	b29b      	uxth	r3, r3
}
 802dd0a:	4618      	mov	r0, r3
 802dd0c:	3714      	adds	r7, #20
 802dd0e:	46bd      	mov	sp, r7
 802dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dd14:	4770      	bx	lr
	...

0802dd18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802dd18:	b480      	push	{r7}
 802dd1a:	b087      	sub	sp, #28
 802dd1c:	af00      	add	r7, sp, #0
 802dd1e:	6078      	str	r0, [r7, #4]
 802dd20:	4608      	mov	r0, r1
 802dd22:	4611      	mov	r1, r2
 802dd24:	461a      	mov	r2, r3
 802dd26:	4603      	mov	r3, r0
 802dd28:	70fb      	strb	r3, [r7, #3]
 802dd2a:	460b      	mov	r3, r1
 802dd2c:	70bb      	strb	r3, [r7, #2]
 802dd2e:	4613      	mov	r3, r2
 802dd30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802dd32:	2300      	movs	r3, #0
 802dd34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dd36:	687b      	ldr	r3, [r7, #4]
 802dd38:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802dd3a:	78fb      	ldrb	r3, [r7, #3]
 802dd3c:	015a      	lsls	r2, r3, #5
 802dd3e:	68bb      	ldr	r3, [r7, #8]
 802dd40:	4413      	add	r3, r2
 802dd42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802dd46:	461a      	mov	r2, r3
 802dd48:	f04f 33ff 	mov.w	r3, #4294967295
 802dd4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802dd4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802dd52:	2b03      	cmp	r3, #3
 802dd54:	d87e      	bhi.n	802de54 <USB_HC_Init+0x13c>
 802dd56:	a201      	add	r2, pc, #4	; (adr r2, 802dd5c <USB_HC_Init+0x44>)
 802dd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dd5c:	0802dd6d 	.word	0x0802dd6d
 802dd60:	0802de17 	.word	0x0802de17
 802dd64:	0802dd6d 	.word	0x0802dd6d
 802dd68:	0802ddd9 	.word	0x0802ddd9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802dd6c:	78fb      	ldrb	r3, [r7, #3]
 802dd6e:	015a      	lsls	r2, r3, #5
 802dd70:	68bb      	ldr	r3, [r7, #8]
 802dd72:	4413      	add	r3, r2
 802dd74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802dd78:	461a      	mov	r2, r3
 802dd7a:	f240 439d 	movw	r3, #1181	; 0x49d
 802dd7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802dd80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802dd84:	2b00      	cmp	r3, #0
 802dd86:	da10      	bge.n	802ddaa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802dd88:	78fb      	ldrb	r3, [r7, #3]
 802dd8a:	015a      	lsls	r2, r3, #5
 802dd8c:	68bb      	ldr	r3, [r7, #8]
 802dd8e:	4413      	add	r3, r2
 802dd90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802dd94:	68db      	ldr	r3, [r3, #12]
 802dd96:	78fa      	ldrb	r2, [r7, #3]
 802dd98:	0151      	lsls	r1, r2, #5
 802dd9a:	68ba      	ldr	r2, [r7, #8]
 802dd9c:	440a      	add	r2, r1
 802dd9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802dda2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802dda6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 802dda8:	e057      	b.n	802de5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802ddaa:	687b      	ldr	r3, [r7, #4]
 802ddac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ddae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ddb2:	2b00      	cmp	r3, #0
 802ddb4:	d051      	beq.n	802de5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 802ddb6:	78fb      	ldrb	r3, [r7, #3]
 802ddb8:	015a      	lsls	r2, r3, #5
 802ddba:	68bb      	ldr	r3, [r7, #8]
 802ddbc:	4413      	add	r3, r2
 802ddbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ddc2:	68db      	ldr	r3, [r3, #12]
 802ddc4:	78fa      	ldrb	r2, [r7, #3]
 802ddc6:	0151      	lsls	r1, r2, #5
 802ddc8:	68ba      	ldr	r2, [r7, #8]
 802ddca:	440a      	add	r2, r1
 802ddcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ddd0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802ddd4:	60d3      	str	r3, [r2, #12]
      break;
 802ddd6:	e040      	b.n	802de5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802ddd8:	78fb      	ldrb	r3, [r7, #3]
 802ddda:	015a      	lsls	r2, r3, #5
 802dddc:	68bb      	ldr	r3, [r7, #8]
 802ddde:	4413      	add	r3, r2
 802dde0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802dde4:	461a      	mov	r2, r3
 802dde6:	f240 639d 	movw	r3, #1693	; 0x69d
 802ddea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802ddec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802ddf0:	2b00      	cmp	r3, #0
 802ddf2:	da34      	bge.n	802de5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802ddf4:	78fb      	ldrb	r3, [r7, #3]
 802ddf6:	015a      	lsls	r2, r3, #5
 802ddf8:	68bb      	ldr	r3, [r7, #8]
 802ddfa:	4413      	add	r3, r2
 802ddfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802de00:	68db      	ldr	r3, [r3, #12]
 802de02:	78fa      	ldrb	r2, [r7, #3]
 802de04:	0151      	lsls	r1, r2, #5
 802de06:	68ba      	ldr	r2, [r7, #8]
 802de08:	440a      	add	r2, r1
 802de0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802de0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802de12:	60d3      	str	r3, [r2, #12]
      }

      break;
 802de14:	e023      	b.n	802de5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802de16:	78fb      	ldrb	r3, [r7, #3]
 802de18:	015a      	lsls	r2, r3, #5
 802de1a:	68bb      	ldr	r3, [r7, #8]
 802de1c:	4413      	add	r3, r2
 802de1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802de22:	461a      	mov	r2, r3
 802de24:	f240 2325 	movw	r3, #549	; 0x225
 802de28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802de2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802de2e:	2b00      	cmp	r3, #0
 802de30:	da17      	bge.n	802de62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802de32:	78fb      	ldrb	r3, [r7, #3]
 802de34:	015a      	lsls	r2, r3, #5
 802de36:	68bb      	ldr	r3, [r7, #8]
 802de38:	4413      	add	r3, r2
 802de3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802de3e:	68db      	ldr	r3, [r3, #12]
 802de40:	78fa      	ldrb	r2, [r7, #3]
 802de42:	0151      	lsls	r1, r2, #5
 802de44:	68ba      	ldr	r2, [r7, #8]
 802de46:	440a      	add	r2, r1
 802de48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802de4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802de50:	60d3      	str	r3, [r2, #12]
      }
      break;
 802de52:	e006      	b.n	802de62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802de54:	2301      	movs	r3, #1
 802de56:	75fb      	strb	r3, [r7, #23]
      break;
 802de58:	e004      	b.n	802de64 <USB_HC_Init+0x14c>
      break;
 802de5a:	bf00      	nop
 802de5c:	e002      	b.n	802de64 <USB_HC_Init+0x14c>
      break;
 802de5e:	bf00      	nop
 802de60:	e000      	b.n	802de64 <USB_HC_Init+0x14c>
      break;
 802de62:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802de64:	68bb      	ldr	r3, [r7, #8]
 802de66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802de6a:	699a      	ldr	r2, [r3, #24]
 802de6c:	78fb      	ldrb	r3, [r7, #3]
 802de6e:	f003 030f 	and.w	r3, r3, #15
 802de72:	2101      	movs	r1, #1
 802de74:	fa01 f303 	lsl.w	r3, r1, r3
 802de78:	68b9      	ldr	r1, [r7, #8]
 802de7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802de7e:	4313      	orrs	r3, r2
 802de80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802de82:	687b      	ldr	r3, [r7, #4]
 802de84:	699b      	ldr	r3, [r3, #24]
 802de86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802de8a:	687b      	ldr	r3, [r7, #4]
 802de8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802de8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802de92:	2b00      	cmp	r3, #0
 802de94:	da03      	bge.n	802de9e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802de96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802de9a:	613b      	str	r3, [r7, #16]
 802de9c:	e001      	b.n	802dea2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 802de9e:	2300      	movs	r3, #0
 802dea0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 802dea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 802dea6:	2b02      	cmp	r3, #2
 802dea8:	d103      	bne.n	802deb2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802deaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802deae:	60fb      	str	r3, [r7, #12]
 802deb0:	e001      	b.n	802deb6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802deb2:	2300      	movs	r3, #0
 802deb4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802deb6:	787b      	ldrb	r3, [r7, #1]
 802deb8:	059b      	lsls	r3, r3, #22
 802deba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802debe:	78bb      	ldrb	r3, [r7, #2]
 802dec0:	02db      	lsls	r3, r3, #11
 802dec2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802dec6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802dec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802decc:	049b      	lsls	r3, r3, #18
 802dece:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802ded2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802ded4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802ded6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802deda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802dedc:	693b      	ldr	r3, [r7, #16]
 802dede:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802dee0:	78fb      	ldrb	r3, [r7, #3]
 802dee2:	0159      	lsls	r1, r3, #5
 802dee4:	68bb      	ldr	r3, [r7, #8]
 802dee6:	440b      	add	r3, r1
 802dee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802deec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802deee:	68fb      	ldr	r3, [r7, #12]
 802def0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802def2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 802def4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802def8:	2b03      	cmp	r3, #3
 802defa:	d10f      	bne.n	802df1c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 802defc:	78fb      	ldrb	r3, [r7, #3]
 802defe:	015a      	lsls	r2, r3, #5
 802df00:	68bb      	ldr	r3, [r7, #8]
 802df02:	4413      	add	r3, r2
 802df04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802df08:	681b      	ldr	r3, [r3, #0]
 802df0a:	78fa      	ldrb	r2, [r7, #3]
 802df0c:	0151      	lsls	r1, r2, #5
 802df0e:	68ba      	ldr	r2, [r7, #8]
 802df10:	440a      	add	r2, r1
 802df12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802df16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802df1a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802df1c:	7dfb      	ldrb	r3, [r7, #23]
}
 802df1e:	4618      	mov	r0, r3
 802df20:	371c      	adds	r7, #28
 802df22:	46bd      	mov	sp, r7
 802df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df28:	4770      	bx	lr
 802df2a:	bf00      	nop

0802df2c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802df2c:	b580      	push	{r7, lr}
 802df2e:	b08c      	sub	sp, #48	; 0x30
 802df30:	af02      	add	r7, sp, #8
 802df32:	60f8      	str	r0, [r7, #12]
 802df34:	60b9      	str	r1, [r7, #8]
 802df36:	4613      	mov	r3, r2
 802df38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802df3a:	68fb      	ldr	r3, [r7, #12]
 802df3c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802df3e:	68bb      	ldr	r3, [r7, #8]
 802df40:	785b      	ldrb	r3, [r3, #1]
 802df42:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802df44:	f44f 7380 	mov.w	r3, #256	; 0x100
 802df48:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802df4a:	68fb      	ldr	r3, [r7, #12]
 802df4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802df4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802df52:	2b00      	cmp	r3, #0
 802df54:	d028      	beq.n	802dfa8 <USB_HC_StartXfer+0x7c>
 802df56:	68bb      	ldr	r3, [r7, #8]
 802df58:	791b      	ldrb	r3, [r3, #4]
 802df5a:	2b00      	cmp	r3, #0
 802df5c:	d124      	bne.n	802dfa8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 802df5e:	79fb      	ldrb	r3, [r7, #7]
 802df60:	2b00      	cmp	r3, #0
 802df62:	d10b      	bne.n	802df7c <USB_HC_StartXfer+0x50>
 802df64:	68bb      	ldr	r3, [r7, #8]
 802df66:	795b      	ldrb	r3, [r3, #5]
 802df68:	2b01      	cmp	r3, #1
 802df6a:	d107      	bne.n	802df7c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802df6c:	68bb      	ldr	r3, [r7, #8]
 802df6e:	785b      	ldrb	r3, [r3, #1]
 802df70:	4619      	mov	r1, r3
 802df72:	68f8      	ldr	r0, [r7, #12]
 802df74:	f000 fa30 	bl	802e3d8 <USB_DoPing>
      return HAL_OK;
 802df78:	2300      	movs	r3, #0
 802df7a:	e114      	b.n	802e1a6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 802df7c:	79fb      	ldrb	r3, [r7, #7]
 802df7e:	2b01      	cmp	r3, #1
 802df80:	d112      	bne.n	802dfa8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 802df82:	69fb      	ldr	r3, [r7, #28]
 802df84:	015a      	lsls	r2, r3, #5
 802df86:	6a3b      	ldr	r3, [r7, #32]
 802df88:	4413      	add	r3, r2
 802df8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802df8e:	68db      	ldr	r3, [r3, #12]
 802df90:	69fa      	ldr	r2, [r7, #28]
 802df92:	0151      	lsls	r1, r2, #5
 802df94:	6a3a      	ldr	r2, [r7, #32]
 802df96:	440a      	add	r2, r1
 802df98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802df9c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 802dfa0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 802dfa2:	68bb      	ldr	r3, [r7, #8]
 802dfa4:	2200      	movs	r2, #0
 802dfa6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802dfa8:	68bb      	ldr	r3, [r7, #8]
 802dfaa:	691b      	ldr	r3, [r3, #16]
 802dfac:	2b00      	cmp	r3, #0
 802dfae:	d018      	beq.n	802dfe2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802dfb0:	68bb      	ldr	r3, [r7, #8]
 802dfb2:	691b      	ldr	r3, [r3, #16]
 802dfb4:	68ba      	ldr	r2, [r7, #8]
 802dfb6:	8912      	ldrh	r2, [r2, #8]
 802dfb8:	4413      	add	r3, r2
 802dfba:	3b01      	subs	r3, #1
 802dfbc:	68ba      	ldr	r2, [r7, #8]
 802dfbe:	8912      	ldrh	r2, [r2, #8]
 802dfc0:	fbb3 f3f2 	udiv	r3, r3, r2
 802dfc4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802dfc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802dfc8:	8b7b      	ldrh	r3, [r7, #26]
 802dfca:	429a      	cmp	r2, r3
 802dfcc:	d90b      	bls.n	802dfe6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 802dfce:	8b7b      	ldrh	r3, [r7, #26]
 802dfd0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 802dfd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802dfd4:	68ba      	ldr	r2, [r7, #8]
 802dfd6:	8912      	ldrh	r2, [r2, #8]
 802dfd8:	fb02 f203 	mul.w	r2, r2, r3
 802dfdc:	68bb      	ldr	r3, [r7, #8]
 802dfde:	611a      	str	r2, [r3, #16]
 802dfe0:	e001      	b.n	802dfe6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 802dfe2:	2301      	movs	r3, #1
 802dfe4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 802dfe6:	68bb      	ldr	r3, [r7, #8]
 802dfe8:	78db      	ldrb	r3, [r3, #3]
 802dfea:	2b00      	cmp	r3, #0
 802dfec:	d006      	beq.n	802dffc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 802dfee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802dff0:	68ba      	ldr	r2, [r7, #8]
 802dff2:	8912      	ldrh	r2, [r2, #8]
 802dff4:	fb02 f203 	mul.w	r2, r2, r3
 802dff8:	68bb      	ldr	r3, [r7, #8]
 802dffa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 802dffc:	68bb      	ldr	r3, [r7, #8]
 802dffe:	691b      	ldr	r3, [r3, #16]
 802e000:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802e004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e006:	04d9      	lsls	r1, r3, #19
 802e008:	4b69      	ldr	r3, [pc, #420]	; (802e1b0 <USB_HC_StartXfer+0x284>)
 802e00a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 802e00c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802e00e:	68bb      	ldr	r3, [r7, #8]
 802e010:	7a9b      	ldrb	r3, [r3, #10]
 802e012:	075b      	lsls	r3, r3, #29
 802e014:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 802e018:	69f9      	ldr	r1, [r7, #28]
 802e01a:	0148      	lsls	r0, r1, #5
 802e01c:	6a39      	ldr	r1, [r7, #32]
 802e01e:	4401      	add	r1, r0
 802e020:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802e024:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 802e026:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802e028:	79fb      	ldrb	r3, [r7, #7]
 802e02a:	2b00      	cmp	r3, #0
 802e02c:	d009      	beq.n	802e042 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802e02e:	68bb      	ldr	r3, [r7, #8]
 802e030:	68d9      	ldr	r1, [r3, #12]
 802e032:	69fb      	ldr	r3, [r7, #28]
 802e034:	015a      	lsls	r2, r3, #5
 802e036:	6a3b      	ldr	r3, [r7, #32]
 802e038:	4413      	add	r3, r2
 802e03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e03e:	460a      	mov	r2, r1
 802e040:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802e042:	6a3b      	ldr	r3, [r7, #32]
 802e044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802e048:	689b      	ldr	r3, [r3, #8]
 802e04a:	f003 0301 	and.w	r3, r3, #1
 802e04e:	2b00      	cmp	r3, #0
 802e050:	bf0c      	ite	eq
 802e052:	2301      	moveq	r3, #1
 802e054:	2300      	movne	r3, #0
 802e056:	b2db      	uxtb	r3, r3
 802e058:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802e05a:	69fb      	ldr	r3, [r7, #28]
 802e05c:	015a      	lsls	r2, r3, #5
 802e05e:	6a3b      	ldr	r3, [r7, #32]
 802e060:	4413      	add	r3, r2
 802e062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e066:	681b      	ldr	r3, [r3, #0]
 802e068:	69fa      	ldr	r2, [r7, #28]
 802e06a:	0151      	lsls	r1, r2, #5
 802e06c:	6a3a      	ldr	r2, [r7, #32]
 802e06e:	440a      	add	r2, r1
 802e070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e074:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802e078:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802e07a:	69fb      	ldr	r3, [r7, #28]
 802e07c:	015a      	lsls	r2, r3, #5
 802e07e:	6a3b      	ldr	r3, [r7, #32]
 802e080:	4413      	add	r3, r2
 802e082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e086:	681a      	ldr	r2, [r3, #0]
 802e088:	7e7b      	ldrb	r3, [r7, #25]
 802e08a:	075b      	lsls	r3, r3, #29
 802e08c:	69f9      	ldr	r1, [r7, #28]
 802e08e:	0148      	lsls	r0, r1, #5
 802e090:	6a39      	ldr	r1, [r7, #32]
 802e092:	4401      	add	r1, r0
 802e094:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802e098:	4313      	orrs	r3, r2
 802e09a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802e09c:	69fb      	ldr	r3, [r7, #28]
 802e09e:	015a      	lsls	r2, r3, #5
 802e0a0:	6a3b      	ldr	r3, [r7, #32]
 802e0a2:	4413      	add	r3, r2
 802e0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e0a8:	681b      	ldr	r3, [r3, #0]
 802e0aa:	4a42      	ldr	r2, [pc, #264]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0ac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802e0ae:	4b41      	ldr	r3, [pc, #260]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0b0:	681b      	ldr	r3, [r3, #0]
 802e0b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e0b6:	4a3f      	ldr	r2, [pc, #252]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0b8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802e0ba:	68bb      	ldr	r3, [r7, #8]
 802e0bc:	78db      	ldrb	r3, [r3, #3]
 802e0be:	2b00      	cmp	r3, #0
 802e0c0:	d006      	beq.n	802e0d0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802e0c2:	4b3c      	ldr	r3, [pc, #240]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0c4:	681b      	ldr	r3, [r3, #0]
 802e0c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802e0ca:	4a3a      	ldr	r2, [pc, #232]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0cc:	6013      	str	r3, [r2, #0]
 802e0ce:	e005      	b.n	802e0dc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802e0d0:	4b38      	ldr	r3, [pc, #224]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0d2:	681b      	ldr	r3, [r3, #0]
 802e0d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802e0d8:	4a36      	ldr	r2, [pc, #216]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0da:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802e0dc:	4b35      	ldr	r3, [pc, #212]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0de:	681b      	ldr	r3, [r3, #0]
 802e0e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e0e4:	4a33      	ldr	r2, [pc, #204]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0e6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802e0e8:	69fb      	ldr	r3, [r7, #28]
 802e0ea:	015a      	lsls	r2, r3, #5
 802e0ec:	6a3b      	ldr	r3, [r7, #32]
 802e0ee:	4413      	add	r3, r2
 802e0f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e0f4:	461a      	mov	r2, r3
 802e0f6:	4b2f      	ldr	r3, [pc, #188]	; (802e1b4 <USB_HC_StartXfer+0x288>)
 802e0f8:	681b      	ldr	r3, [r3, #0]
 802e0fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802e0fc:	79fb      	ldrb	r3, [r7, #7]
 802e0fe:	2b00      	cmp	r3, #0
 802e100:	d001      	beq.n	802e106 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802e102:	2300      	movs	r3, #0
 802e104:	e04f      	b.n	802e1a6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802e106:	68bb      	ldr	r3, [r7, #8]
 802e108:	78db      	ldrb	r3, [r3, #3]
 802e10a:	2b00      	cmp	r3, #0
 802e10c:	d14a      	bne.n	802e1a4 <USB_HC_StartXfer+0x278>
 802e10e:	68bb      	ldr	r3, [r7, #8]
 802e110:	691b      	ldr	r3, [r3, #16]
 802e112:	2b00      	cmp	r3, #0
 802e114:	d046      	beq.n	802e1a4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 802e116:	68bb      	ldr	r3, [r7, #8]
 802e118:	79db      	ldrb	r3, [r3, #7]
 802e11a:	2b03      	cmp	r3, #3
 802e11c:	d830      	bhi.n	802e180 <USB_HC_StartXfer+0x254>
 802e11e:	a201      	add	r2, pc, #4	; (adr r2, 802e124 <USB_HC_StartXfer+0x1f8>)
 802e120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e124:	0802e135 	.word	0x0802e135
 802e128:	0802e159 	.word	0x0802e159
 802e12c:	0802e135 	.word	0x0802e135
 802e130:	0802e159 	.word	0x0802e159
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802e134:	68bb      	ldr	r3, [r7, #8]
 802e136:	691b      	ldr	r3, [r3, #16]
 802e138:	3303      	adds	r3, #3
 802e13a:	089b      	lsrs	r3, r3, #2
 802e13c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802e13e:	8afa      	ldrh	r2, [r7, #22]
 802e140:	68fb      	ldr	r3, [r7, #12]
 802e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e144:	b29b      	uxth	r3, r3
 802e146:	429a      	cmp	r2, r3
 802e148:	d91c      	bls.n	802e184 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802e14a:	68fb      	ldr	r3, [r7, #12]
 802e14c:	699b      	ldr	r3, [r3, #24]
 802e14e:	f043 0220 	orr.w	r2, r3, #32
 802e152:	68fb      	ldr	r3, [r7, #12]
 802e154:	619a      	str	r2, [r3, #24]
        }
        break;
 802e156:	e015      	b.n	802e184 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802e158:	68bb      	ldr	r3, [r7, #8]
 802e15a:	691b      	ldr	r3, [r3, #16]
 802e15c:	3303      	adds	r3, #3
 802e15e:	089b      	lsrs	r3, r3, #2
 802e160:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802e162:	8afa      	ldrh	r2, [r7, #22]
 802e164:	6a3b      	ldr	r3, [r7, #32]
 802e166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802e16a:	691b      	ldr	r3, [r3, #16]
 802e16c:	b29b      	uxth	r3, r3
 802e16e:	429a      	cmp	r2, r3
 802e170:	d90a      	bls.n	802e188 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802e172:	68fb      	ldr	r3, [r7, #12]
 802e174:	699b      	ldr	r3, [r3, #24]
 802e176:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802e17a:	68fb      	ldr	r3, [r7, #12]
 802e17c:	619a      	str	r2, [r3, #24]
        }
        break;
 802e17e:	e003      	b.n	802e188 <USB_HC_StartXfer+0x25c>

      default:
        break;
 802e180:	bf00      	nop
 802e182:	e002      	b.n	802e18a <USB_HC_StartXfer+0x25e>
        break;
 802e184:	bf00      	nop
 802e186:	e000      	b.n	802e18a <USB_HC_StartXfer+0x25e>
        break;
 802e188:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802e18a:	68bb      	ldr	r3, [r7, #8]
 802e18c:	68d9      	ldr	r1, [r3, #12]
 802e18e:	68bb      	ldr	r3, [r7, #8]
 802e190:	785a      	ldrb	r2, [r3, #1]
 802e192:	68bb      	ldr	r3, [r7, #8]
 802e194:	691b      	ldr	r3, [r3, #16]
 802e196:	b298      	uxth	r0, r3
 802e198:	2300      	movs	r3, #0
 802e19a:	9300      	str	r3, [sp, #0]
 802e19c:	4603      	mov	r3, r0
 802e19e:	68f8      	ldr	r0, [r7, #12]
 802e1a0:	f7ff f947 	bl	802d432 <USB_WritePacket>
  }

  return HAL_OK;
 802e1a4:	2300      	movs	r3, #0
}
 802e1a6:	4618      	mov	r0, r3
 802e1a8:	3728      	adds	r7, #40	; 0x28
 802e1aa:	46bd      	mov	sp, r7
 802e1ac:	bd80      	pop	{r7, pc}
 802e1ae:	bf00      	nop
 802e1b0:	1ff80000 	.word	0x1ff80000
 802e1b4:	2000039c 	.word	0x2000039c

0802e1b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e1b8:	b480      	push	{r7}
 802e1ba:	b085      	sub	sp, #20
 802e1bc:	af00      	add	r7, sp, #0
 802e1be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802e1c4:	68fb      	ldr	r3, [r7, #12]
 802e1c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802e1ca:	695b      	ldr	r3, [r3, #20]
 802e1cc:	b29b      	uxth	r3, r3
}
 802e1ce:	4618      	mov	r0, r3
 802e1d0:	3714      	adds	r7, #20
 802e1d2:	46bd      	mov	sp, r7
 802e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1d8:	4770      	bx	lr

0802e1da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802e1da:	b480      	push	{r7}
 802e1dc:	b087      	sub	sp, #28
 802e1de:	af00      	add	r7, sp, #0
 802e1e0:	6078      	str	r0, [r7, #4]
 802e1e2:	460b      	mov	r3, r1
 802e1e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e1e6:	687b      	ldr	r3, [r7, #4]
 802e1e8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 802e1ea:	78fb      	ldrb	r3, [r7, #3]
 802e1ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 802e1ee:	2300      	movs	r3, #0
 802e1f0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802e1f2:	68fb      	ldr	r3, [r7, #12]
 802e1f4:	015a      	lsls	r2, r3, #5
 802e1f6:	693b      	ldr	r3, [r7, #16]
 802e1f8:	4413      	add	r3, r2
 802e1fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e1fe:	681b      	ldr	r3, [r3, #0]
 802e200:	0c9b      	lsrs	r3, r3, #18
 802e202:	f003 0303 	and.w	r3, r3, #3
 802e206:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802e208:	68bb      	ldr	r3, [r7, #8]
 802e20a:	2b00      	cmp	r3, #0
 802e20c:	d002      	beq.n	802e214 <USB_HC_Halt+0x3a>
 802e20e:	68bb      	ldr	r3, [r7, #8]
 802e210:	2b02      	cmp	r3, #2
 802e212:	d16c      	bne.n	802e2ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802e214:	68fb      	ldr	r3, [r7, #12]
 802e216:	015a      	lsls	r2, r3, #5
 802e218:	693b      	ldr	r3, [r7, #16]
 802e21a:	4413      	add	r3, r2
 802e21c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e220:	681b      	ldr	r3, [r3, #0]
 802e222:	68fa      	ldr	r2, [r7, #12]
 802e224:	0151      	lsls	r1, r2, #5
 802e226:	693a      	ldr	r2, [r7, #16]
 802e228:	440a      	add	r2, r1
 802e22a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e22e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e232:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802e234:	687b      	ldr	r3, [r7, #4]
 802e236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802e23c:	2b00      	cmp	r3, #0
 802e23e:	d143      	bne.n	802e2c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802e240:	68fb      	ldr	r3, [r7, #12]
 802e242:	015a      	lsls	r2, r3, #5
 802e244:	693b      	ldr	r3, [r7, #16]
 802e246:	4413      	add	r3, r2
 802e248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e24c:	681b      	ldr	r3, [r3, #0]
 802e24e:	68fa      	ldr	r2, [r7, #12]
 802e250:	0151      	lsls	r1, r2, #5
 802e252:	693a      	ldr	r2, [r7, #16]
 802e254:	440a      	add	r2, r1
 802e256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e25a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e25e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802e260:	68fb      	ldr	r3, [r7, #12]
 802e262:	015a      	lsls	r2, r3, #5
 802e264:	693b      	ldr	r3, [r7, #16]
 802e266:	4413      	add	r3, r2
 802e268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e26c:	681b      	ldr	r3, [r3, #0]
 802e26e:	68fa      	ldr	r2, [r7, #12]
 802e270:	0151      	lsls	r1, r2, #5
 802e272:	693a      	ldr	r2, [r7, #16]
 802e274:	440a      	add	r2, r1
 802e276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e27a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e27e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 802e280:	68fb      	ldr	r3, [r7, #12]
 802e282:	015a      	lsls	r2, r3, #5
 802e284:	693b      	ldr	r3, [r7, #16]
 802e286:	4413      	add	r3, r2
 802e288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e28c:	681b      	ldr	r3, [r3, #0]
 802e28e:	68fa      	ldr	r2, [r7, #12]
 802e290:	0151      	lsls	r1, r2, #5
 802e292:	693a      	ldr	r2, [r7, #16]
 802e294:	440a      	add	r2, r1
 802e296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e29a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802e29e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 802e2a0:	697b      	ldr	r3, [r7, #20]
 802e2a2:	3301      	adds	r3, #1
 802e2a4:	617b      	str	r3, [r7, #20]
 802e2a6:	697b      	ldr	r3, [r7, #20]
 802e2a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e2ac:	d81d      	bhi.n	802e2ea <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802e2ae:	68fb      	ldr	r3, [r7, #12]
 802e2b0:	015a      	lsls	r2, r3, #5
 802e2b2:	693b      	ldr	r3, [r7, #16]
 802e2b4:	4413      	add	r3, r2
 802e2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e2ba:	681b      	ldr	r3, [r3, #0]
 802e2bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e2c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e2c4:	d0ec      	beq.n	802e2a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802e2c6:	e080      	b.n	802e3ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802e2c8:	68fb      	ldr	r3, [r7, #12]
 802e2ca:	015a      	lsls	r2, r3, #5
 802e2cc:	693b      	ldr	r3, [r7, #16]
 802e2ce:	4413      	add	r3, r2
 802e2d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e2d4:	681b      	ldr	r3, [r3, #0]
 802e2d6:	68fa      	ldr	r2, [r7, #12]
 802e2d8:	0151      	lsls	r1, r2, #5
 802e2da:	693a      	ldr	r2, [r7, #16]
 802e2dc:	440a      	add	r2, r1
 802e2de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e2e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e2e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802e2e8:	e06f      	b.n	802e3ca <USB_HC_Halt+0x1f0>
          break;
 802e2ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802e2ec:	e06d      	b.n	802e3ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802e2ee:	68fb      	ldr	r3, [r7, #12]
 802e2f0:	015a      	lsls	r2, r3, #5
 802e2f2:	693b      	ldr	r3, [r7, #16]
 802e2f4:	4413      	add	r3, r2
 802e2f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e2fa:	681b      	ldr	r3, [r3, #0]
 802e2fc:	68fa      	ldr	r2, [r7, #12]
 802e2fe:	0151      	lsls	r1, r2, #5
 802e300:	693a      	ldr	r2, [r7, #16]
 802e302:	440a      	add	r2, r1
 802e304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e30c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802e30e:	693b      	ldr	r3, [r7, #16]
 802e310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802e314:	691b      	ldr	r3, [r3, #16]
 802e316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802e31a:	2b00      	cmp	r3, #0
 802e31c:	d143      	bne.n	802e3a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802e31e:	68fb      	ldr	r3, [r7, #12]
 802e320:	015a      	lsls	r2, r3, #5
 802e322:	693b      	ldr	r3, [r7, #16]
 802e324:	4413      	add	r3, r2
 802e326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e32a:	681b      	ldr	r3, [r3, #0]
 802e32c:	68fa      	ldr	r2, [r7, #12]
 802e32e:	0151      	lsls	r1, r2, #5
 802e330:	693a      	ldr	r2, [r7, #16]
 802e332:	440a      	add	r2, r1
 802e334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e33c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802e33e:	68fb      	ldr	r3, [r7, #12]
 802e340:	015a      	lsls	r2, r3, #5
 802e342:	693b      	ldr	r3, [r7, #16]
 802e344:	4413      	add	r3, r2
 802e346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e34a:	681b      	ldr	r3, [r3, #0]
 802e34c:	68fa      	ldr	r2, [r7, #12]
 802e34e:	0151      	lsls	r1, r2, #5
 802e350:	693a      	ldr	r2, [r7, #16]
 802e352:	440a      	add	r2, r1
 802e354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e35c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 802e35e:	68fb      	ldr	r3, [r7, #12]
 802e360:	015a      	lsls	r2, r3, #5
 802e362:	693b      	ldr	r3, [r7, #16]
 802e364:	4413      	add	r3, r2
 802e366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e36a:	681b      	ldr	r3, [r3, #0]
 802e36c:	68fa      	ldr	r2, [r7, #12]
 802e36e:	0151      	lsls	r1, r2, #5
 802e370:	693a      	ldr	r2, [r7, #16]
 802e372:	440a      	add	r2, r1
 802e374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802e37c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 802e37e:	697b      	ldr	r3, [r7, #20]
 802e380:	3301      	adds	r3, #1
 802e382:	617b      	str	r3, [r7, #20]
 802e384:	697b      	ldr	r3, [r7, #20]
 802e386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e38a:	d81d      	bhi.n	802e3c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802e38c:	68fb      	ldr	r3, [r7, #12]
 802e38e:	015a      	lsls	r2, r3, #5
 802e390:	693b      	ldr	r3, [r7, #16]
 802e392:	4413      	add	r3, r2
 802e394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e398:	681b      	ldr	r3, [r3, #0]
 802e39a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e39e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e3a2:	d0ec      	beq.n	802e37e <USB_HC_Halt+0x1a4>
 802e3a4:	e011      	b.n	802e3ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802e3a6:	68fb      	ldr	r3, [r7, #12]
 802e3a8:	015a      	lsls	r2, r3, #5
 802e3aa:	693b      	ldr	r3, [r7, #16]
 802e3ac:	4413      	add	r3, r2
 802e3ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e3b2:	681b      	ldr	r3, [r3, #0]
 802e3b4:	68fa      	ldr	r2, [r7, #12]
 802e3b6:	0151      	lsls	r1, r2, #5
 802e3b8:	693a      	ldr	r2, [r7, #16]
 802e3ba:	440a      	add	r2, r1
 802e3bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e3c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e3c4:	6013      	str	r3, [r2, #0]
 802e3c6:	e000      	b.n	802e3ca <USB_HC_Halt+0x1f0>
          break;
 802e3c8:	bf00      	nop
    }
  }

  return HAL_OK;
 802e3ca:	2300      	movs	r3, #0
}
 802e3cc:	4618      	mov	r0, r3
 802e3ce:	371c      	adds	r7, #28
 802e3d0:	46bd      	mov	sp, r7
 802e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3d6:	4770      	bx	lr

0802e3d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802e3d8:	b480      	push	{r7}
 802e3da:	b087      	sub	sp, #28
 802e3dc:	af00      	add	r7, sp, #0
 802e3de:	6078      	str	r0, [r7, #4]
 802e3e0:	460b      	mov	r3, r1
 802e3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e3e4:	687b      	ldr	r3, [r7, #4]
 802e3e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802e3e8:	78fb      	ldrb	r3, [r7, #3]
 802e3ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802e3ec:	2301      	movs	r3, #1
 802e3ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802e3f0:	68fb      	ldr	r3, [r7, #12]
 802e3f2:	04da      	lsls	r2, r3, #19
 802e3f4:	4b15      	ldr	r3, [pc, #84]	; (802e44c <USB_DoPing+0x74>)
 802e3f6:	4013      	ands	r3, r2
 802e3f8:	693a      	ldr	r2, [r7, #16]
 802e3fa:	0151      	lsls	r1, r2, #5
 802e3fc:	697a      	ldr	r2, [r7, #20]
 802e3fe:	440a      	add	r2, r1
 802e400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802e404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e408:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802e40a:	693b      	ldr	r3, [r7, #16]
 802e40c:	015a      	lsls	r2, r3, #5
 802e40e:	697b      	ldr	r3, [r7, #20]
 802e410:	4413      	add	r3, r2
 802e412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e416:	681b      	ldr	r3, [r3, #0]
 802e418:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802e41a:	68bb      	ldr	r3, [r7, #8]
 802e41c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e420:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802e422:	68bb      	ldr	r3, [r7, #8]
 802e424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e428:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802e42a:	693b      	ldr	r3, [r7, #16]
 802e42c:	015a      	lsls	r2, r3, #5
 802e42e:	697b      	ldr	r3, [r7, #20]
 802e430:	4413      	add	r3, r2
 802e432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e436:	461a      	mov	r2, r3
 802e438:	68bb      	ldr	r3, [r7, #8]
 802e43a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802e43c:	2300      	movs	r3, #0
}
 802e43e:	4618      	mov	r0, r3
 802e440:	371c      	adds	r7, #28
 802e442:	46bd      	mov	sp, r7
 802e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e448:	4770      	bx	lr
 802e44a:	bf00      	nop
 802e44c:	1ff80000 	.word	0x1ff80000

0802e450 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802e450:	b580      	push	{r7, lr}
 802e452:	b086      	sub	sp, #24
 802e454:	af00      	add	r7, sp, #0
 802e456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e458:	687b      	ldr	r3, [r7, #4]
 802e45a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 802e45c:	2300      	movs	r3, #0
 802e45e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802e460:	6878      	ldr	r0, [r7, #4]
 802e462:	f7fe f8c6 	bl	802c5f2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 802e466:	2110      	movs	r1, #16
 802e468:	6878      	ldr	r0, [r7, #4]
 802e46a:	f7fe fa61 	bl	802c930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 802e46e:	6878      	ldr	r0, [r7, #4]
 802e470:	f7fe fa84 	bl	802c97c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802e474:	2300      	movs	r3, #0
 802e476:	613b      	str	r3, [r7, #16]
 802e478:	e01f      	b.n	802e4ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 802e47a:	693b      	ldr	r3, [r7, #16]
 802e47c:	015a      	lsls	r2, r3, #5
 802e47e:	68fb      	ldr	r3, [r7, #12]
 802e480:	4413      	add	r3, r2
 802e482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e486:	681b      	ldr	r3, [r3, #0]
 802e488:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802e48a:	68bb      	ldr	r3, [r7, #8]
 802e48c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e490:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802e492:	68bb      	ldr	r3, [r7, #8]
 802e494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e498:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802e49a:	68bb      	ldr	r3, [r7, #8]
 802e49c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802e4a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 802e4a2:	693b      	ldr	r3, [r7, #16]
 802e4a4:	015a      	lsls	r2, r3, #5
 802e4a6:	68fb      	ldr	r3, [r7, #12]
 802e4a8:	4413      	add	r3, r2
 802e4aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e4ae:	461a      	mov	r2, r3
 802e4b0:	68bb      	ldr	r3, [r7, #8]
 802e4b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802e4b4:	693b      	ldr	r3, [r7, #16]
 802e4b6:	3301      	adds	r3, #1
 802e4b8:	613b      	str	r3, [r7, #16]
 802e4ba:	693b      	ldr	r3, [r7, #16]
 802e4bc:	2b0f      	cmp	r3, #15
 802e4be:	d9dc      	bls.n	802e47a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802e4c0:	2300      	movs	r3, #0
 802e4c2:	613b      	str	r3, [r7, #16]
 802e4c4:	e034      	b.n	802e530 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 802e4c6:	693b      	ldr	r3, [r7, #16]
 802e4c8:	015a      	lsls	r2, r3, #5
 802e4ca:	68fb      	ldr	r3, [r7, #12]
 802e4cc:	4413      	add	r3, r2
 802e4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e4d2:	681b      	ldr	r3, [r3, #0]
 802e4d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 802e4d6:	68bb      	ldr	r3, [r7, #8]
 802e4d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e4dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 802e4de:	68bb      	ldr	r3, [r7, #8]
 802e4e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e4e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802e4e6:	68bb      	ldr	r3, [r7, #8]
 802e4e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802e4ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 802e4ee:	693b      	ldr	r3, [r7, #16]
 802e4f0:	015a      	lsls	r2, r3, #5
 802e4f2:	68fb      	ldr	r3, [r7, #12]
 802e4f4:	4413      	add	r3, r2
 802e4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e4fa:	461a      	mov	r2, r3
 802e4fc:	68bb      	ldr	r3, [r7, #8]
 802e4fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 802e500:	697b      	ldr	r3, [r7, #20]
 802e502:	3301      	adds	r3, #1
 802e504:	617b      	str	r3, [r7, #20]
 802e506:	697b      	ldr	r3, [r7, #20]
 802e508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e50c:	d80c      	bhi.n	802e528 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802e50e:	693b      	ldr	r3, [r7, #16]
 802e510:	015a      	lsls	r2, r3, #5
 802e512:	68fb      	ldr	r3, [r7, #12]
 802e514:	4413      	add	r3, r2
 802e516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802e51a:	681b      	ldr	r3, [r3, #0]
 802e51c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e524:	d0ec      	beq.n	802e500 <USB_StopHost+0xb0>
 802e526:	e000      	b.n	802e52a <USB_StopHost+0xda>
        break;
 802e528:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802e52a:	693b      	ldr	r3, [r7, #16]
 802e52c:	3301      	adds	r3, #1
 802e52e:	613b      	str	r3, [r7, #16]
 802e530:	693b      	ldr	r3, [r7, #16]
 802e532:	2b0f      	cmp	r3, #15
 802e534:	d9c7      	bls.n	802e4c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802e536:	68fb      	ldr	r3, [r7, #12]
 802e538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802e53c:	461a      	mov	r2, r3
 802e53e:	f04f 33ff 	mov.w	r3, #4294967295
 802e542:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802e544:	687b      	ldr	r3, [r7, #4]
 802e546:	f04f 32ff 	mov.w	r2, #4294967295
 802e54a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802e54c:	6878      	ldr	r0, [r7, #4]
 802e54e:	f7fe f83f 	bl	802c5d0 <USB_EnableGlobalInt>

  return HAL_OK;
 802e552:	2300      	movs	r3, #0
}
 802e554:	4618      	mov	r0, r3
 802e556:	3718      	adds	r7, #24
 802e558:	46bd      	mov	sp, r7
 802e55a:	bd80      	pop	{r7, pc}

0802e55c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 802e55c:	b580      	push	{r7, lr}
 802e55e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 802e560:	4908      	ldr	r1, [pc, #32]	; (802e584 <MX_FATFS_Init+0x28>)
 802e562:	4809      	ldr	r0, [pc, #36]	; (802e588 <MX_FATFS_Init+0x2c>)
 802e564:	f005 fabc 	bl	8033ae0 <FATFS_LinkDriver>
 802e568:	4603      	mov	r3, r0
 802e56a:	461a      	mov	r2, r3
 802e56c:	4b07      	ldr	r3, [pc, #28]	; (802e58c <MX_FATFS_Init+0x30>)
 802e56e:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 802e570:	4907      	ldr	r1, [pc, #28]	; (802e590 <MX_FATFS_Init+0x34>)
 802e572:	4808      	ldr	r0, [pc, #32]	; (802e594 <MX_FATFS_Init+0x38>)
 802e574:	f005 fab4 	bl	8033ae0 <FATFS_LinkDriver>
 802e578:	4603      	mov	r3, r0
 802e57a:	461a      	mov	r2, r3
 802e57c:	4b06      	ldr	r3, [pc, #24]	; (802e598 <MX_FATFS_Init+0x3c>)
 802e57e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 802e580:	bf00      	nop
 802e582:	bd80      	pop	{r7, pc}
 802e584:	200016cc 	.word	0x200016cc
 802e588:	08038348 	.word	0x08038348
 802e58c:	200016c4 	.word	0x200016c4
 802e590:	200016c8 	.word	0x200016c8
 802e594:	0803835c 	.word	0x0803835c
 802e598:	200057a0 	.word	0x200057a0

0802e59c <MX_FATFS_DeInit>:
  /* USER CODE END get_fattime */
}

/* USER CODE BEGIN Application */
void MX_FATFS_DeInit(void)
{
 802e59c:	b580      	push	{r7, lr}
 802e59e:	af00      	add	r7, sp, #0
	FATFS_UnLinkDriver(SDPath);
 802e5a0:	4804      	ldr	r0, [pc, #16]	; (802e5b4 <MX_FATFS_DeInit+0x18>)
 802e5a2:	f005 fae5 	bl	8033b70 <FATFS_UnLinkDriver>
	FATFS_UnLinkDriver(USBHPath);
 802e5a6:	4804      	ldr	r0, [pc, #16]	; (802e5b8 <MX_FATFS_DeInit+0x1c>)
 802e5a8:	f005 fae2 	bl	8033b70 <FATFS_UnLinkDriver>
	BSP_SD_DeInit();
 802e5ac:	f000 f8a8 	bl	802e700 <BSP_SD_DeInit>
}
 802e5b0:	bf00      	nop
 802e5b2:	bd80      	pop	{r7, pc}
 802e5b4:	200016cc 	.word	0x200016cc
 802e5b8:	200016c8 	.word	0x200016c8

0802e5bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 802e5bc:	b580      	push	{r7, lr}
 802e5be:	b082      	sub	sp, #8
 802e5c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 802e5c2:	2300      	movs	r3, #0
 802e5c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 802e5c6:	f000 f888 	bl	802e6da <BSP_SD_IsDetected>
 802e5ca:	4603      	mov	r3, r0
 802e5cc:	2b01      	cmp	r3, #1
 802e5ce:	d001      	beq.n	802e5d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 802e5d0:	2301      	movs	r3, #1
 802e5d2:	e005      	b.n	802e5e0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 802e5d4:	4804      	ldr	r0, [pc, #16]	; (802e5e8 <BSP_SD_Init+0x2c>)
 802e5d6:	f7fa f9a8 	bl	802892a <HAL_SD_Init>
 802e5da:	4603      	mov	r3, r0
 802e5dc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 802e5de:	79fb      	ldrb	r3, [r7, #7]
}
 802e5e0:	4618      	mov	r0, r3
 802e5e2:	3708      	adds	r7, #8
 802e5e4:	46bd      	mov	sp, r7
 802e5e6:	bd80      	pop	{r7, pc}
 802e5e8:	20001514 	.word	0x20001514

0802e5ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 802e5ec:	b580      	push	{r7, lr}
 802e5ee:	b086      	sub	sp, #24
 802e5f0:	af00      	add	r7, sp, #0
 802e5f2:	60f8      	str	r0, [r7, #12]
 802e5f4:	60b9      	str	r1, [r7, #8]
 802e5f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 802e5f8:	2300      	movs	r3, #0
 802e5fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 802e5fc:	687b      	ldr	r3, [r7, #4]
 802e5fe:	68ba      	ldr	r2, [r7, #8]
 802e600:	68f9      	ldr	r1, [r7, #12]
 802e602:	4806      	ldr	r0, [pc, #24]	; (802e61c <BSP_SD_ReadBlocks_DMA+0x30>)
 802e604:	f7fa fa42 	bl	8028a8c <HAL_SD_ReadBlocks_DMA>
 802e608:	4603      	mov	r3, r0
 802e60a:	2b00      	cmp	r3, #0
 802e60c:	d001      	beq.n	802e612 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 802e60e:	2301      	movs	r3, #1
 802e610:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802e612:	7dfb      	ldrb	r3, [r7, #23]
}
 802e614:	4618      	mov	r0, r3
 802e616:	3718      	adds	r7, #24
 802e618:	46bd      	mov	sp, r7
 802e61a:	bd80      	pop	{r7, pc}
 802e61c:	20001514 	.word	0x20001514

0802e620 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 802e620:	b580      	push	{r7, lr}
 802e622:	b086      	sub	sp, #24
 802e624:	af00      	add	r7, sp, #0
 802e626:	60f8      	str	r0, [r7, #12]
 802e628:	60b9      	str	r1, [r7, #8]
 802e62a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 802e62c:	2300      	movs	r3, #0
 802e62e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 802e630:	687b      	ldr	r3, [r7, #4]
 802e632:	68ba      	ldr	r2, [r7, #8]
 802e634:	68f9      	ldr	r1, [r7, #12]
 802e636:	4806      	ldr	r0, [pc, #24]	; (802e650 <BSP_SD_WriteBlocks_DMA+0x30>)
 802e638:	f7fa fb12 	bl	8028c60 <HAL_SD_WriteBlocks_DMA>
 802e63c:	4603      	mov	r3, r0
 802e63e:	2b00      	cmp	r3, #0
 802e640:	d001      	beq.n	802e646 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 802e642:	2301      	movs	r3, #1
 802e644:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802e646:	7dfb      	ldrb	r3, [r7, #23]
}
 802e648:	4618      	mov	r0, r3
 802e64a:	3718      	adds	r7, #24
 802e64c:	46bd      	mov	sp, r7
 802e64e:	bd80      	pop	{r7, pc}
 802e650:	20001514 	.word	0x20001514

0802e654 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 802e654:	b580      	push	{r7, lr}
 802e656:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 802e658:	4805      	ldr	r0, [pc, #20]	; (802e670 <BSP_SD_GetCardState+0x1c>)
 802e65a:	f7fa ff51 	bl	8029500 <HAL_SD_GetCardState>
 802e65e:	4603      	mov	r3, r0
 802e660:	2b04      	cmp	r3, #4
 802e662:	bf14      	ite	ne
 802e664:	2301      	movne	r3, #1
 802e666:	2300      	moveq	r3, #0
 802e668:	b2db      	uxtb	r3, r3
}
 802e66a:	4618      	mov	r0, r3
 802e66c:	bd80      	pop	{r7, pc}
 802e66e:	bf00      	nop
 802e670:	20001514 	.word	0x20001514

0802e674 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 802e674:	b580      	push	{r7, lr}
 802e676:	b082      	sub	sp, #8
 802e678:	af00      	add	r7, sp, #0
 802e67a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 802e67c:	6879      	ldr	r1, [r7, #4]
 802e67e:	4803      	ldr	r0, [pc, #12]	; (802e68c <BSP_SD_GetCardInfo+0x18>)
 802e680:	f7fa ff12 	bl	80294a8 <HAL_SD_GetCardInfo>
}
 802e684:	bf00      	nop
 802e686:	3708      	adds	r7, #8
 802e688:	46bd      	mov	sp, r7
 802e68a:	bd80      	pop	{r7, pc}
 802e68c:	20001514 	.word	0x20001514

0802e690 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 802e690:	b580      	push	{r7, lr}
 802e692:	b082      	sub	sp, #8
 802e694:	af00      	add	r7, sp, #0
 802e696:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 802e698:	f000 f818 	bl	802e6cc <BSP_SD_AbortCallback>
}
 802e69c:	bf00      	nop
 802e69e:	3708      	adds	r7, #8
 802e6a0:	46bd      	mov	sp, r7
 802e6a2:	bd80      	pop	{r7, pc}

0802e6a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 802e6a4:	b580      	push	{r7, lr}
 802e6a6:	b082      	sub	sp, #8
 802e6a8:	af00      	add	r7, sp, #0
 802e6aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 802e6ac:	f000 f9fe 	bl	802eaac <BSP_SD_WriteCpltCallback>
}
 802e6b0:	bf00      	nop
 802e6b2:	3708      	adds	r7, #8
 802e6b4:	46bd      	mov	sp, r7
 802e6b6:	bd80      	pop	{r7, pc}

0802e6b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 802e6b8:	b580      	push	{r7, lr}
 802e6ba:	b082      	sub	sp, #8
 802e6bc:	af00      	add	r7, sp, #0
 802e6be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 802e6c0:	f000 fa00 	bl	802eac4 <BSP_SD_ReadCpltCallback>
}
 802e6c4:	bf00      	nop
 802e6c6:	3708      	adds	r7, #8
 802e6c8:	46bd      	mov	sp, r7
 802e6ca:	bd80      	pop	{r7, pc}

0802e6cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 802e6cc:	b480      	push	{r7}
 802e6ce:	af00      	add	r7, sp, #0

}
 802e6d0:	bf00      	nop
 802e6d2:	46bd      	mov	sp, r7
 802e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6d8:	4770      	bx	lr

0802e6da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 802e6da:	b580      	push	{r7, lr}
 802e6dc:	b082      	sub	sp, #8
 802e6de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 802e6e0:	2301      	movs	r3, #1
 802e6e2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 802e6e4:	f000 f862 	bl	802e7ac <BSP_PlatformIsDetected>
 802e6e8:	4603      	mov	r3, r0
 802e6ea:	2b00      	cmp	r3, #0
 802e6ec:	d101      	bne.n	802e6f2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 802e6ee:	2300      	movs	r3, #0
 802e6f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 802e6f2:	79fb      	ldrb	r3, [r7, #7]
 802e6f4:	b2db      	uxtb	r3, r3
}
 802e6f6:	4618      	mov	r0, r3
 802e6f8:	3708      	adds	r7, #8
 802e6fa:	46bd      	mov	sp, r7
 802e6fc:	bd80      	pop	{r7, pc}
	...

0802e700 <BSP_SD_DeInit>:

/* USER CODE BEGIN AdditionalCode */
/* user code can be inserted here */
uint8_t BSP_SD_DeInit(void)
{
 802e700:	b580      	push	{r7, lr}
 802e702:	af00      	add	r7, sp, #0
    /* HAL SD de-initialization */
    HAL_SD_DeInit(&hsd);
 802e704:	4827      	ldr	r0, [pc, #156]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e706:	f7fa f9a1 	bl	8028a4c <HAL_SD_DeInit>

    /* Msp SD de-initialization */
    HAL_SD_MspDeInit(&hsd);
 802e70a:	4826      	ldr	r0, [pc, #152]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e70c:	f7f3 ff9c 	bl	8022648 <HAL_SD_MspDeInit>

    /* SDMMC Reset */
    __HAL_RCC_SDIO_FORCE_RESET();
 802e710:	4b25      	ldr	r3, [pc, #148]	; (802e7a8 <BSP_SD_DeInit+0xa8>)
 802e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e714:	4a24      	ldr	r2, [pc, #144]	; (802e7a8 <BSP_SD_DeInit+0xa8>)
 802e716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802e71a:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_RCC_SDIO_RELEASE_RESET();
 802e71c:	4b22      	ldr	r3, [pc, #136]	; (802e7a8 <BSP_SD_DeInit+0xa8>)
 802e71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e720:	4a21      	ldr	r2, [pc, #132]	; (802e7a8 <BSP_SD_DeInit+0xa8>)
 802e722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802e726:	6253      	str	r3, [r2, #36]	; 0x24

    /* Misc */
    hsd.State               = HAL_SD_STATE_RESET;
 802e728:	4b1e      	ldr	r3, [pc, #120]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e72a:	2200      	movs	r2, #0
 802e72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd.Context             = 0;
 802e730:	4b1c      	ldr	r3, [pc, #112]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e732:	2200      	movs	r2, #0
 802e734:	631a      	str	r2, [r3, #48]	; 0x30
    hsd.ErrorCode           = 0;
 802e736:	4b1b      	ldr	r3, [pc, #108]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e738:	2200      	movs	r2, #0
 802e73a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd.SdCard.CardType     = 0;
 802e73c:	4b19      	ldr	r3, [pc, #100]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e73e:	2200      	movs	r2, #0
 802e740:	645a      	str	r2, [r3, #68]	; 0x44
    hsd.SdCard.CardVersion  = 0;
 802e742:	4b18      	ldr	r3, [pc, #96]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e744:	2200      	movs	r2, #0
 802e746:	649a      	str	r2, [r3, #72]	; 0x48
    hsd.SdCard.Class        = 0;
 802e748:	4b16      	ldr	r3, [pc, #88]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e74a:	2200      	movs	r2, #0
 802e74c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd.SdCard.RelCardAdd   = 0;
 802e74e:	4b15      	ldr	r3, [pc, #84]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e750:	2200      	movs	r2, #0
 802e752:	651a      	str	r2, [r3, #80]	; 0x50
    hsd.SdCard.BlockNbr     = 0;
 802e754:	4b13      	ldr	r3, [pc, #76]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e756:	2200      	movs	r2, #0
 802e758:	655a      	str	r2, [r3, #84]	; 0x54
    hsd.SdCard.BlockSize    = 0;
 802e75a:	4b12      	ldr	r3, [pc, #72]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e75c:	2200      	movs	r2, #0
 802e75e:	659a      	str	r2, [r3, #88]	; 0x58
    hsd.SdCard.LogBlockNbr  = 0;
 802e760:	4b10      	ldr	r3, [pc, #64]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e762:	2200      	movs	r2, #0
 802e764:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd.SdCard.LogBlockSize = 0;
 802e766:	4b0f      	ldr	r3, [pc, #60]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e768:	2200      	movs	r2, #0
 802e76a:	661a      	str	r2, [r3, #96]	; 0x60
    hsd.CSD[0]              = 0;
 802e76c:	4b0d      	ldr	r3, [pc, #52]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e76e:	2200      	movs	r2, #0
 802e770:	665a      	str	r2, [r3, #100]	; 0x64
    hsd.CSD[1]              = 0;
 802e772:	4b0c      	ldr	r3, [pc, #48]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e774:	2200      	movs	r2, #0
 802e776:	669a      	str	r2, [r3, #104]	; 0x68
    hsd.CSD[2]              = 0;
 802e778:	4b0a      	ldr	r3, [pc, #40]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e77a:	2200      	movs	r2, #0
 802e77c:	66da      	str	r2, [r3, #108]	; 0x6c
    hsd.CSD[3]              = 0;
 802e77e:	4b09      	ldr	r3, [pc, #36]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e780:	2200      	movs	r2, #0
 802e782:	671a      	str	r2, [r3, #112]	; 0x70
    hsd.CID[0]              = 0;
 802e784:	4b07      	ldr	r3, [pc, #28]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e786:	2200      	movs	r2, #0
 802e788:	675a      	str	r2, [r3, #116]	; 0x74
    hsd.CID[1]              = 0;
 802e78a:	4b06      	ldr	r3, [pc, #24]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e78c:	2200      	movs	r2, #0
 802e78e:	679a      	str	r2, [r3, #120]	; 0x78
    hsd.CID[2]              = 0;
 802e790:	4b04      	ldr	r3, [pc, #16]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e792:	2200      	movs	r2, #0
 802e794:	67da      	str	r2, [r3, #124]	; 0x7c
    hsd.CID[3]              = 0;
 802e796:	4b03      	ldr	r3, [pc, #12]	; (802e7a4 <BSP_SD_DeInit+0xa4>)
 802e798:	2200      	movs	r2, #0
 802e79a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return MSD_OK;
 802e79e:	2300      	movs	r3, #0
}
 802e7a0:	4618      	mov	r0, r3
 802e7a2:	bd80      	pop	{r7, pc}
 802e7a4:	20001514 	.word	0x20001514
 802e7a8:	40023800 	.word	0x40023800

0802e7ac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 802e7ac:	b580      	push	{r7, lr}
 802e7ae:	b082      	sub	sp, #8
 802e7b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 802e7b2:	2301      	movs	r3, #1
 802e7b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 802e7b6:	2102      	movs	r1, #2
 802e7b8:	4806      	ldr	r0, [pc, #24]	; (802e7d4 <BSP_PlatformIsDetected+0x28>)
 802e7ba:	f7f6 f8d9 	bl	8024970 <HAL_GPIO_ReadPin>
 802e7be:	4603      	mov	r3, r0
 802e7c0:	2b00      	cmp	r3, #0
 802e7c2:	d001      	beq.n	802e7c8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 802e7c4:	2300      	movs	r3, #0
 802e7c6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 802e7c8:	79fb      	ldrb	r3, [r7, #7]
}
 802e7ca:	4618      	mov	r0, r3
 802e7cc:	3708      	adds	r7, #8
 802e7ce:	46bd      	mov	sp, r7
 802e7d0:	bd80      	pop	{r7, pc}
 802e7d2:	bf00      	nop
 802e7d4:	40020c00 	.word	0x40020c00

0802e7d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 802e7d8:	b580      	push	{r7, lr}
 802e7da:	b084      	sub	sp, #16
 802e7dc:	af00      	add	r7, sp, #0
 802e7de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 802e7e0:	f7f4 fe06 	bl	80233f0 <HAL_GetTick>
 802e7e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 802e7e6:	e006      	b.n	802e7f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802e7e8:	f7ff ff34 	bl	802e654 <BSP_SD_GetCardState>
 802e7ec:	4603      	mov	r3, r0
 802e7ee:	2b00      	cmp	r3, #0
 802e7f0:	d101      	bne.n	802e7f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 802e7f2:	2300      	movs	r3, #0
 802e7f4:	e009      	b.n	802e80a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 802e7f6:	f7f4 fdfb 	bl	80233f0 <HAL_GetTick>
 802e7fa:	4602      	mov	r2, r0
 802e7fc:	68fb      	ldr	r3, [r7, #12]
 802e7fe:	1ad3      	subs	r3, r2, r3
 802e800:	687a      	ldr	r2, [r7, #4]
 802e802:	429a      	cmp	r2, r3
 802e804:	d8f0      	bhi.n	802e7e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 802e806:	f04f 33ff 	mov.w	r3, #4294967295
}
 802e80a:	4618      	mov	r0, r3
 802e80c:	3710      	adds	r7, #16
 802e80e:	46bd      	mov	sp, r7
 802e810:	bd80      	pop	{r7, pc}
	...

0802e814 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 802e814:	b580      	push	{r7, lr}
 802e816:	b082      	sub	sp, #8
 802e818:	af00      	add	r7, sp, #0
 802e81a:	4603      	mov	r3, r0
 802e81c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 802e81e:	4b0b      	ldr	r3, [pc, #44]	; (802e84c <SD_CheckStatus+0x38>)
 802e820:	2201      	movs	r2, #1
 802e822:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 802e824:	f7ff ff16 	bl	802e654 <BSP_SD_GetCardState>
 802e828:	4603      	mov	r3, r0
 802e82a:	2b00      	cmp	r3, #0
 802e82c:	d107      	bne.n	802e83e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 802e82e:	4b07      	ldr	r3, [pc, #28]	; (802e84c <SD_CheckStatus+0x38>)
 802e830:	781b      	ldrb	r3, [r3, #0]
 802e832:	b2db      	uxtb	r3, r3
 802e834:	f023 0301 	bic.w	r3, r3, #1
 802e838:	b2da      	uxtb	r2, r3
 802e83a:	4b04      	ldr	r3, [pc, #16]	; (802e84c <SD_CheckStatus+0x38>)
 802e83c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 802e83e:	4b03      	ldr	r3, [pc, #12]	; (802e84c <SD_CheckStatus+0x38>)
 802e840:	781b      	ldrb	r3, [r3, #0]
 802e842:	b2db      	uxtb	r3, r3
}
 802e844:	4618      	mov	r0, r3
 802e846:	3708      	adds	r7, #8
 802e848:	46bd      	mov	sp, r7
 802e84a:	bd80      	pop	{r7, pc}
 802e84c:	20000009 	.word	0x20000009

0802e850 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 802e850:	b580      	push	{r7, lr}
 802e852:	b082      	sub	sp, #8
 802e854:	af00      	add	r7, sp, #0
 802e856:	4603      	mov	r3, r0
 802e858:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 802e85a:	f7ff feaf 	bl	802e5bc <BSP_SD_Init>
 802e85e:	4603      	mov	r3, r0
 802e860:	2b00      	cmp	r3, #0
 802e862:	d107      	bne.n	802e874 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 802e864:	79fb      	ldrb	r3, [r7, #7]
 802e866:	4618      	mov	r0, r3
 802e868:	f7ff ffd4 	bl	802e814 <SD_CheckStatus>
 802e86c:	4603      	mov	r3, r0
 802e86e:	461a      	mov	r2, r3
 802e870:	4b04      	ldr	r3, [pc, #16]	; (802e884 <SD_initialize+0x34>)
 802e872:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 802e874:	4b03      	ldr	r3, [pc, #12]	; (802e884 <SD_initialize+0x34>)
 802e876:	781b      	ldrb	r3, [r3, #0]
 802e878:	b2db      	uxtb	r3, r3
}
 802e87a:	4618      	mov	r0, r3
 802e87c:	3708      	adds	r7, #8
 802e87e:	46bd      	mov	sp, r7
 802e880:	bd80      	pop	{r7, pc}
 802e882:	bf00      	nop
 802e884:	20000009 	.word	0x20000009

0802e888 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 802e888:	b580      	push	{r7, lr}
 802e88a:	b082      	sub	sp, #8
 802e88c:	af00      	add	r7, sp, #0
 802e88e:	4603      	mov	r3, r0
 802e890:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 802e892:	79fb      	ldrb	r3, [r7, #7]
 802e894:	4618      	mov	r0, r3
 802e896:	f7ff ffbd 	bl	802e814 <SD_CheckStatus>
 802e89a:	4603      	mov	r3, r0
}
 802e89c:	4618      	mov	r0, r3
 802e89e:	3708      	adds	r7, #8
 802e8a0:	46bd      	mov	sp, r7
 802e8a2:	bd80      	pop	{r7, pc}

0802e8a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802e8a4:	b580      	push	{r7, lr}
 802e8a6:	b086      	sub	sp, #24
 802e8a8:	af00      	add	r7, sp, #0
 802e8aa:	60b9      	str	r1, [r7, #8]
 802e8ac:	607a      	str	r2, [r7, #4]
 802e8ae:	603b      	str	r3, [r7, #0]
 802e8b0:	4603      	mov	r3, r0
 802e8b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802e8b4:	2301      	movs	r3, #1
 802e8b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802e8b8:	f247 5030 	movw	r0, #30000	; 0x7530
 802e8bc:	f7ff ff8c 	bl	802e7d8 <SD_CheckStatusWithTimeout>
 802e8c0:	4603      	mov	r3, r0
 802e8c2:	2b00      	cmp	r3, #0
 802e8c4:	da01      	bge.n	802e8ca <SD_read+0x26>
  {
    return res;
 802e8c6:	7dfb      	ldrb	r3, [r7, #23]
 802e8c8:	e03b      	b.n	802e942 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 802e8ca:	683a      	ldr	r2, [r7, #0]
 802e8cc:	6879      	ldr	r1, [r7, #4]
 802e8ce:	68b8      	ldr	r0, [r7, #8]
 802e8d0:	f7ff fe8c 	bl	802e5ec <BSP_SD_ReadBlocks_DMA>
 802e8d4:	4603      	mov	r3, r0
 802e8d6:	2b00      	cmp	r3, #0
 802e8d8:	d132      	bne.n	802e940 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 802e8da:	4b1c      	ldr	r3, [pc, #112]	; (802e94c <SD_read+0xa8>)
 802e8dc:	2200      	movs	r2, #0
 802e8de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 802e8e0:	f7f4 fd86 	bl	80233f0 <HAL_GetTick>
 802e8e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802e8e6:	bf00      	nop
 802e8e8:	4b18      	ldr	r3, [pc, #96]	; (802e94c <SD_read+0xa8>)
 802e8ea:	681b      	ldr	r3, [r3, #0]
 802e8ec:	2b00      	cmp	r3, #0
 802e8ee:	d108      	bne.n	802e902 <SD_read+0x5e>
 802e8f0:	f7f4 fd7e 	bl	80233f0 <HAL_GetTick>
 802e8f4:	4602      	mov	r2, r0
 802e8f6:	693b      	ldr	r3, [r7, #16]
 802e8f8:	1ad3      	subs	r3, r2, r3
 802e8fa:	f247 522f 	movw	r2, #29999	; 0x752f
 802e8fe:	4293      	cmp	r3, r2
 802e900:	d9f2      	bls.n	802e8e8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 802e902:	4b12      	ldr	r3, [pc, #72]	; (802e94c <SD_read+0xa8>)
 802e904:	681b      	ldr	r3, [r3, #0]
 802e906:	2b00      	cmp	r3, #0
 802e908:	d102      	bne.n	802e910 <SD_read+0x6c>
      {
        res = RES_ERROR;
 802e90a:	2301      	movs	r3, #1
 802e90c:	75fb      	strb	r3, [r7, #23]
 802e90e:	e017      	b.n	802e940 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 802e910:	4b0e      	ldr	r3, [pc, #56]	; (802e94c <SD_read+0xa8>)
 802e912:	2200      	movs	r2, #0
 802e914:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 802e916:	f7f4 fd6b 	bl	80233f0 <HAL_GetTick>
 802e91a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802e91c:	e007      	b.n	802e92e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802e91e:	f7ff fe99 	bl	802e654 <BSP_SD_GetCardState>
 802e922:	4603      	mov	r3, r0
 802e924:	2b00      	cmp	r3, #0
 802e926:	d102      	bne.n	802e92e <SD_read+0x8a>
          {
            res = RES_OK;
 802e928:	2300      	movs	r3, #0
 802e92a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 802e92c:	e008      	b.n	802e940 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802e92e:	f7f4 fd5f 	bl	80233f0 <HAL_GetTick>
 802e932:	4602      	mov	r2, r0
 802e934:	693b      	ldr	r3, [r7, #16]
 802e936:	1ad3      	subs	r3, r2, r3
 802e938:	f247 522f 	movw	r2, #29999	; 0x752f
 802e93c:	4293      	cmp	r3, r2
 802e93e:	d9ee      	bls.n	802e91e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 802e940:	7dfb      	ldrb	r3, [r7, #23]
}
 802e942:	4618      	mov	r0, r3
 802e944:	3718      	adds	r7, #24
 802e946:	46bd      	mov	sp, r7
 802e948:	bd80      	pop	{r7, pc}
 802e94a:	bf00      	nop
 802e94c:	200003a4 	.word	0x200003a4

0802e950 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802e950:	b580      	push	{r7, lr}
 802e952:	b086      	sub	sp, #24
 802e954:	af00      	add	r7, sp, #0
 802e956:	60b9      	str	r1, [r7, #8]
 802e958:	607a      	str	r2, [r7, #4]
 802e95a:	603b      	str	r3, [r7, #0]
 802e95c:	4603      	mov	r3, r0
 802e95e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802e960:	2301      	movs	r3, #1
 802e962:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 802e964:	4b24      	ldr	r3, [pc, #144]	; (802e9f8 <SD_write+0xa8>)
 802e966:	2200      	movs	r2, #0
 802e968:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802e96a:	f247 5030 	movw	r0, #30000	; 0x7530
 802e96e:	f7ff ff33 	bl	802e7d8 <SD_CheckStatusWithTimeout>
 802e972:	4603      	mov	r3, r0
 802e974:	2b00      	cmp	r3, #0
 802e976:	da01      	bge.n	802e97c <SD_write+0x2c>
  {
    return res;
 802e978:	7dfb      	ldrb	r3, [r7, #23]
 802e97a:	e038      	b.n	802e9ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 802e97c:	683a      	ldr	r2, [r7, #0]
 802e97e:	6879      	ldr	r1, [r7, #4]
 802e980:	68b8      	ldr	r0, [r7, #8]
 802e982:	f7ff fe4d 	bl	802e620 <BSP_SD_WriteBlocks_DMA>
 802e986:	4603      	mov	r3, r0
 802e988:	2b00      	cmp	r3, #0
 802e98a:	d12f      	bne.n	802e9ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 802e98c:	f7f4 fd30 	bl	80233f0 <HAL_GetTick>
 802e990:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802e992:	bf00      	nop
 802e994:	4b18      	ldr	r3, [pc, #96]	; (802e9f8 <SD_write+0xa8>)
 802e996:	681b      	ldr	r3, [r3, #0]
 802e998:	2b00      	cmp	r3, #0
 802e99a:	d108      	bne.n	802e9ae <SD_write+0x5e>
 802e99c:	f7f4 fd28 	bl	80233f0 <HAL_GetTick>
 802e9a0:	4602      	mov	r2, r0
 802e9a2:	693b      	ldr	r3, [r7, #16]
 802e9a4:	1ad3      	subs	r3, r2, r3
 802e9a6:	f247 522f 	movw	r2, #29999	; 0x752f
 802e9aa:	4293      	cmp	r3, r2
 802e9ac:	d9f2      	bls.n	802e994 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 802e9ae:	4b12      	ldr	r3, [pc, #72]	; (802e9f8 <SD_write+0xa8>)
 802e9b0:	681b      	ldr	r3, [r3, #0]
 802e9b2:	2b00      	cmp	r3, #0
 802e9b4:	d102      	bne.n	802e9bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 802e9b6:	2301      	movs	r3, #1
 802e9b8:	75fb      	strb	r3, [r7, #23]
 802e9ba:	e017      	b.n	802e9ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 802e9bc:	4b0e      	ldr	r3, [pc, #56]	; (802e9f8 <SD_write+0xa8>)
 802e9be:	2200      	movs	r2, #0
 802e9c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 802e9c2:	f7f4 fd15 	bl	80233f0 <HAL_GetTick>
 802e9c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802e9c8:	e007      	b.n	802e9da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802e9ca:	f7ff fe43 	bl	802e654 <BSP_SD_GetCardState>
 802e9ce:	4603      	mov	r3, r0
 802e9d0:	2b00      	cmp	r3, #0
 802e9d2:	d102      	bne.n	802e9da <SD_write+0x8a>
          {
            res = RES_OK;
 802e9d4:	2300      	movs	r3, #0
 802e9d6:	75fb      	strb	r3, [r7, #23]
            break;
 802e9d8:	e008      	b.n	802e9ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802e9da:	f7f4 fd09 	bl	80233f0 <HAL_GetTick>
 802e9de:	4602      	mov	r2, r0
 802e9e0:	693b      	ldr	r3, [r7, #16]
 802e9e2:	1ad3      	subs	r3, r2, r3
 802e9e4:	f247 522f 	movw	r2, #29999	; 0x752f
 802e9e8:	4293      	cmp	r3, r2
 802e9ea:	d9ee      	bls.n	802e9ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 802e9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 802e9ee:	4618      	mov	r0, r3
 802e9f0:	3718      	adds	r7, #24
 802e9f2:	46bd      	mov	sp, r7
 802e9f4:	bd80      	pop	{r7, pc}
 802e9f6:	bf00      	nop
 802e9f8:	200003a0 	.word	0x200003a0

0802e9fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802e9fc:	b580      	push	{r7, lr}
 802e9fe:	b08c      	sub	sp, #48	; 0x30
 802ea00:	af00      	add	r7, sp, #0
 802ea02:	4603      	mov	r3, r0
 802ea04:	603a      	str	r2, [r7, #0]
 802ea06:	71fb      	strb	r3, [r7, #7]
 802ea08:	460b      	mov	r3, r1
 802ea0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802ea0c:	2301      	movs	r3, #1
 802ea0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802ea12:	4b25      	ldr	r3, [pc, #148]	; (802eaa8 <SD_ioctl+0xac>)
 802ea14:	781b      	ldrb	r3, [r3, #0]
 802ea16:	b2db      	uxtb	r3, r3
 802ea18:	f003 0301 	and.w	r3, r3, #1
 802ea1c:	2b00      	cmp	r3, #0
 802ea1e:	d001      	beq.n	802ea24 <SD_ioctl+0x28>
 802ea20:	2303      	movs	r3, #3
 802ea22:	e03c      	b.n	802ea9e <SD_ioctl+0xa2>

  switch (cmd)
 802ea24:	79bb      	ldrb	r3, [r7, #6]
 802ea26:	2b03      	cmp	r3, #3
 802ea28:	d834      	bhi.n	802ea94 <SD_ioctl+0x98>
 802ea2a:	a201      	add	r2, pc, #4	; (adr r2, 802ea30 <SD_ioctl+0x34>)
 802ea2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ea30:	0802ea41 	.word	0x0802ea41
 802ea34:	0802ea49 	.word	0x0802ea49
 802ea38:	0802ea61 	.word	0x0802ea61
 802ea3c:	0802ea7b 	.word	0x0802ea7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 802ea40:	2300      	movs	r3, #0
 802ea42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802ea46:	e028      	b.n	802ea9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 802ea48:	f107 030c 	add.w	r3, r7, #12
 802ea4c:	4618      	mov	r0, r3
 802ea4e:	f7ff fe11 	bl	802e674 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802ea52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ea54:	683b      	ldr	r3, [r7, #0]
 802ea56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802ea58:	2300      	movs	r3, #0
 802ea5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802ea5e:	e01c      	b.n	802ea9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802ea60:	f107 030c 	add.w	r3, r7, #12
 802ea64:	4618      	mov	r0, r3
 802ea66:	f7ff fe05 	bl	802e674 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802ea6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ea6c:	b29a      	uxth	r2, r3
 802ea6e:	683b      	ldr	r3, [r7, #0]
 802ea70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 802ea72:	2300      	movs	r3, #0
 802ea74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802ea78:	e00f      	b.n	802ea9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802ea7a:	f107 030c 	add.w	r3, r7, #12
 802ea7e:	4618      	mov	r0, r3
 802ea80:	f7ff fdf8 	bl	802e674 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 802ea84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ea86:	0a5a      	lsrs	r2, r3, #9
 802ea88:	683b      	ldr	r3, [r7, #0]
 802ea8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802ea8c:	2300      	movs	r3, #0
 802ea8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802ea92:	e002      	b.n	802ea9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 802ea94:	2304      	movs	r3, #4
 802ea96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 802ea9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802ea9e:	4618      	mov	r0, r3
 802eaa0:	3730      	adds	r7, #48	; 0x30
 802eaa2:	46bd      	mov	sp, r7
 802eaa4:	bd80      	pop	{r7, pc}
 802eaa6:	bf00      	nop
 802eaa8:	20000009 	.word	0x20000009

0802eaac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 802eaac:	b480      	push	{r7}
 802eaae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 802eab0:	4b03      	ldr	r3, [pc, #12]	; (802eac0 <BSP_SD_WriteCpltCallback+0x14>)
 802eab2:	2201      	movs	r2, #1
 802eab4:	601a      	str	r2, [r3, #0]
}
 802eab6:	bf00      	nop
 802eab8:	46bd      	mov	sp, r7
 802eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eabe:	4770      	bx	lr
 802eac0:	200003a0 	.word	0x200003a0

0802eac4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 802eac4:	b480      	push	{r7}
 802eac6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 802eac8:	4b03      	ldr	r3, [pc, #12]	; (802ead8 <BSP_SD_ReadCpltCallback+0x14>)
 802eaca:	2201      	movs	r2, #1
 802eacc:	601a      	str	r2, [r3, #0]
}
 802eace:	bf00      	nop
 802ead0:	46bd      	mov	sp, r7
 802ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ead6:	4770      	bx	lr
 802ead8:	200003a4 	.word	0x200003a4

0802eadc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 802eadc:	b480      	push	{r7}
 802eade:	b083      	sub	sp, #12
 802eae0:	af00      	add	r7, sp, #0
 802eae2:	4603      	mov	r3, r0
 802eae4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 802eae6:	2300      	movs	r3, #0
}
 802eae8:	4618      	mov	r0, r3
 802eaea:	370c      	adds	r7, #12
 802eaec:	46bd      	mov	sp, r7
 802eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eaf2:	4770      	bx	lr

0802eaf4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 802eaf4:	b580      	push	{r7, lr}
 802eaf6:	b084      	sub	sp, #16
 802eaf8:	af00      	add	r7, sp, #0
 802eafa:	4603      	mov	r3, r0
 802eafc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 802eafe:	2301      	movs	r3, #1
 802eb00:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 802eb02:	79fb      	ldrb	r3, [r7, #7]
 802eb04:	4619      	mov	r1, r3
 802eb06:	4808      	ldr	r0, [pc, #32]	; (802eb28 <USBH_status+0x34>)
 802eb08:	f002 fbc4 	bl	8031294 <USBH_MSC_UnitIsReady>
 802eb0c:	4603      	mov	r3, r0
 802eb0e:	2b00      	cmp	r3, #0
 802eb10:	d002      	beq.n	802eb18 <USBH_status+0x24>
  {
    res = RES_OK;
 802eb12:	2300      	movs	r3, #0
 802eb14:	73fb      	strb	r3, [r7, #15]
 802eb16:	e001      	b.n	802eb1c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 802eb18:	2301      	movs	r3, #1
 802eb1a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 802eb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 802eb1e:	4618      	mov	r0, r3
 802eb20:	3710      	adds	r7, #16
 802eb22:	46bd      	mov	sp, r7
 802eb24:	bd80      	pop	{r7, pc}
 802eb26:	bf00      	nop
 802eb28:	2000707c 	.word	0x2000707c

0802eb2c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802eb2c:	b580      	push	{r7, lr}
 802eb2e:	b094      	sub	sp, #80	; 0x50
 802eb30:	af02      	add	r7, sp, #8
 802eb32:	60b9      	str	r1, [r7, #8]
 802eb34:	607a      	str	r2, [r7, #4]
 802eb36:	603b      	str	r3, [r7, #0]
 802eb38:	4603      	mov	r3, r0
 802eb3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802eb3c:	2301      	movs	r3, #1
 802eb3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 802eb42:	2300      	movs	r3, #0
 802eb44:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802eb48:	68bb      	ldr	r3, [r7, #8]
 802eb4a:	f003 0303 	and.w	r3, r3, #3
 802eb4e:	2b00      	cmp	r3, #0
 802eb50:	d02d      	beq.n	802ebae <USBH_read+0x82>
 802eb52:	4b34      	ldr	r3, [pc, #208]	; (802ec24 <USBH_read+0xf8>)
 802eb54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802eb58:	691b      	ldr	r3, [r3, #16]
 802eb5a:	2b00      	cmp	r3, #0
 802eb5c:	d027      	beq.n	802ebae <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 802eb5e:	e01a      	b.n	802eb96 <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 802eb60:	687a      	ldr	r2, [r7, #4]
 802eb62:	683b      	ldr	r3, [r7, #0]
 802eb64:	441a      	add	r2, r3
 802eb66:	7bf9      	ldrb	r1, [r7, #15]
 802eb68:	2301      	movs	r3, #1
 802eb6a:	9300      	str	r3, [sp, #0]
 802eb6c:	4b2e      	ldr	r3, [pc, #184]	; (802ec28 <USBH_read+0xfc>)
 802eb6e:	482d      	ldr	r0, [pc, #180]	; (802ec24 <USBH_read+0xf8>)
 802eb70:	f002 fbda 	bl	8031328 <USBH_MSC_Read>
 802eb74:	4603      	mov	r3, r0
 802eb76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

      if(status == USBH_OK)
 802eb7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802eb7e:	2b00      	cmp	r3, #0
 802eb80:	d113      	bne.n	802ebaa <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 802eb82:	683b      	ldr	r3, [r7, #0]
 802eb84:	031b      	lsls	r3, r3, #12
 802eb86:	68ba      	ldr	r2, [r7, #8]
 802eb88:	4413      	add	r3, r2
 802eb8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802eb8e:	4926      	ldr	r1, [pc, #152]	; (802ec28 <USBH_read+0xfc>)
 802eb90:	4618      	mov	r0, r3
 802eb92:	f006 f85d 	bl	8034c50 <memcpy>
    while ((count--)&&(status == USBH_OK))
 802eb96:	683b      	ldr	r3, [r7, #0]
 802eb98:	1e5a      	subs	r2, r3, #1
 802eb9a:	603a      	str	r2, [r7, #0]
 802eb9c:	2b00      	cmp	r3, #0
 802eb9e:	d012      	beq.n	802ebc6 <USBH_read+0x9a>
 802eba0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802eba4:	2b00      	cmp	r3, #0
 802eba6:	d0db      	beq.n	802eb60 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802eba8:	e00d      	b.n	802ebc6 <USBH_read+0x9a>
      }
      else
      {
        break;
 802ebaa:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802ebac:	e00b      	b.n	802ebc6 <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
 802ebae:	7bf9      	ldrb	r1, [r7, #15]
 802ebb0:	683b      	ldr	r3, [r7, #0]
 802ebb2:	9300      	str	r3, [sp, #0]
 802ebb4:	68bb      	ldr	r3, [r7, #8]
 802ebb6:	687a      	ldr	r2, [r7, #4]
 802ebb8:	481a      	ldr	r0, [pc, #104]	; (802ec24 <USBH_read+0xf8>)
 802ebba:	f002 fbb5 	bl	8031328 <USBH_MSC_Read>
 802ebbe:	4603      	mov	r3, r0
 802ebc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802ebc4:	e000      	b.n	802ebc8 <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802ebc6:	bf00      	nop
  }

  if(status == USBH_OK)
 802ebc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802ebcc:	2b00      	cmp	r3, #0
 802ebce:	d103      	bne.n	802ebd8 <USBH_read+0xac>
  {
    res = RES_OK;
 802ebd0:	2300      	movs	r3, #0
 802ebd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802ebd6:	e01e      	b.n	802ec16 <USBH_read+0xea>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 802ebd8:	f107 0210 	add.w	r2, r7, #16
 802ebdc:	7bfb      	ldrb	r3, [r7, #15]
 802ebde:	4619      	mov	r1, r3
 802ebe0:	4810      	ldr	r0, [pc, #64]	; (802ec24 <USBH_read+0xf8>)
 802ebe2:	f002 fb7d 	bl	80312e0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 802ebe6:	7f7b      	ldrb	r3, [r7, #29]
 802ebe8:	2b28      	cmp	r3, #40	; 0x28
 802ebea:	d003      	beq.n	802ebf4 <USBH_read+0xc8>
 802ebec:	2b3a      	cmp	r3, #58	; 0x3a
 802ebee:	d001      	beq.n	802ebf4 <USBH_read+0xc8>
 802ebf0:	2b04      	cmp	r3, #4
 802ebf2:	d10c      	bne.n	802ec0e <USBH_read+0xe2>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 802ebf4:	480d      	ldr	r0, [pc, #52]	; (802ec2c <USBH_read+0x100>)
 802ebf6:	f006 fd43 	bl	8035680 <iprintf>
 802ebfa:	480d      	ldr	r0, [pc, #52]	; (802ec30 <USBH_read+0x104>)
 802ebfc:	f006 fd40 	bl	8035680 <iprintf>
 802ec00:	200a      	movs	r0, #10
 802ec02:	f006 fd55 	bl	80356b0 <putchar>
      res = RES_NOTRDY;
 802ec06:	2303      	movs	r3, #3
 802ec08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ec0c:	e003      	b.n	802ec16 <USBH_read+0xea>

    default:
      res = RES_ERROR;
 802ec0e:	2301      	movs	r3, #1
 802ec10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ec14:	bf00      	nop
    }
  }

  return res;
 802ec16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 802ec1a:	4618      	mov	r0, r3
 802ec1c:	3748      	adds	r7, #72	; 0x48
 802ec1e:	46bd      	mov	sp, r7
 802ec20:	bd80      	pop	{r7, pc}
 802ec22:	bf00      	nop
 802ec24:	2000707c 	.word	0x2000707c
 802ec28:	200003a8 	.word	0x200003a8
 802ec2c:	08037868 	.word	0x08037868
 802ec30:	08037870 	.word	0x08037870

0802ec34 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802ec34:	b580      	push	{r7, lr}
 802ec36:	b094      	sub	sp, #80	; 0x50
 802ec38:	af02      	add	r7, sp, #8
 802ec3a:	60b9      	str	r1, [r7, #8]
 802ec3c:	607a      	str	r2, [r7, #4]
 802ec3e:	603b      	str	r3, [r7, #0]
 802ec40:	4603      	mov	r3, r0
 802ec42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802ec44:	2301      	movs	r3, #1
 802ec46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 802ec4a:	2300      	movs	r3, #0
 802ec4c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802ec50:	68bb      	ldr	r3, [r7, #8]
 802ec52:	f003 0303 	and.w	r3, r3, #3
 802ec56:	2b00      	cmp	r3, #0
 802ec58:	d029      	beq.n	802ecae <USBH_write+0x7a>
 802ec5a:	4b3a      	ldr	r3, [pc, #232]	; (802ed44 <USBH_write+0x110>)
 802ec5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802ec60:	691b      	ldr	r3, [r3, #16]
 802ec62:	2b00      	cmp	r3, #0
 802ec64:	d023      	beq.n	802ecae <USBH_write+0x7a>
  {

    while (count--)
 802ec66:	e01a      	b.n	802ec9e <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 802ec68:	683b      	ldr	r3, [r7, #0]
 802ec6a:	031b      	lsls	r3, r3, #12
 802ec6c:	68ba      	ldr	r2, [r7, #8]
 802ec6e:	4413      	add	r3, r2
 802ec70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802ec74:	4619      	mov	r1, r3
 802ec76:	4834      	ldr	r0, [pc, #208]	; (802ed48 <USBH_write+0x114>)
 802ec78:	f005 ffea 	bl	8034c50 <memcpy>

      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 802ec7c:	687a      	ldr	r2, [r7, #4]
 802ec7e:	683b      	ldr	r3, [r7, #0]
 802ec80:	441a      	add	r2, r3
 802ec82:	7bf9      	ldrb	r1, [r7, #15]
 802ec84:	2301      	movs	r3, #1
 802ec86:	9300      	str	r3, [sp, #0]
 802ec88:	4b2f      	ldr	r3, [pc, #188]	; (802ed48 <USBH_write+0x114>)
 802ec8a:	482e      	ldr	r0, [pc, #184]	; (802ed44 <USBH_write+0x110>)
 802ec8c:	f002 fbb5 	bl	80313fa <USBH_MSC_Write>
 802ec90:	4603      	mov	r3, r0
 802ec92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if(status == USBH_FAIL)
 802ec96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802ec9a:	2b02      	cmp	r3, #2
 802ec9c:	d005      	beq.n	802ecaa <USBH_write+0x76>
    while (count--)
 802ec9e:	683b      	ldr	r3, [r7, #0]
 802eca0:	1e5a      	subs	r2, r3, #1
 802eca2:	603a      	str	r2, [r7, #0]
 802eca4:	2b00      	cmp	r3, #0
 802eca6:	d1df      	bne.n	802ec68 <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802eca8:	e00c      	b.n	802ecc4 <USBH_write+0x90>
      {
        break;
 802ecaa:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 802ecac:	e00a      	b.n	802ecc4 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
 802ecae:	7bf9      	ldrb	r1, [r7, #15]
 802ecb0:	683b      	ldr	r3, [r7, #0]
 802ecb2:	9300      	str	r3, [sp, #0]
 802ecb4:	68bb      	ldr	r3, [r7, #8]
 802ecb6:	687a      	ldr	r2, [r7, #4]
 802ecb8:	4822      	ldr	r0, [pc, #136]	; (802ed44 <USBH_write+0x110>)
 802ecba:	f002 fb9e 	bl	80313fa <USBH_MSC_Write>
 802ecbe:	4603      	mov	r3, r0
 802ecc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }

  if(status == USBH_OK)
 802ecc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802ecc8:	2b00      	cmp	r3, #0
 802ecca:	d103      	bne.n	802ecd4 <USBH_write+0xa0>
  {
    res = RES_OK;
 802eccc:	2300      	movs	r3, #0
 802ecce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802ecd2:	e031      	b.n	802ed38 <USBH_write+0x104>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 802ecd4:	f107 0210 	add.w	r2, r7, #16
 802ecd8:	7bfb      	ldrb	r3, [r7, #15]
 802ecda:	4619      	mov	r1, r3
 802ecdc:	4819      	ldr	r0, [pc, #100]	; (802ed44 <USBH_write+0x110>)
 802ecde:	f002 faff 	bl	80312e0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 802ece2:	7f7b      	ldrb	r3, [r7, #29]
 802ece4:	2b27      	cmp	r3, #39	; 0x27
 802ece6:	d009      	beq.n	802ecfc <USBH_write+0xc8>
 802ece8:	2b27      	cmp	r3, #39	; 0x27
 802ecea:	dc02      	bgt.n	802ecf2 <USBH_write+0xbe>
 802ecec:	2b04      	cmp	r3, #4
 802ecee:	d012      	beq.n	802ed16 <USBH_write+0xe2>
 802ecf0:	e01e      	b.n	802ed30 <USBH_write+0xfc>
 802ecf2:	2b28      	cmp	r3, #40	; 0x28
 802ecf4:	d00f      	beq.n	802ed16 <USBH_write+0xe2>
 802ecf6:	2b3a      	cmp	r3, #58	; 0x3a
 802ecf8:	d00d      	beq.n	802ed16 <USBH_write+0xe2>
 802ecfa:	e019      	b.n	802ed30 <USBH_write+0xfc>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 802ecfc:	4813      	ldr	r0, [pc, #76]	; (802ed4c <USBH_write+0x118>)
 802ecfe:	f006 fcbf 	bl	8035680 <iprintf>
 802ed02:	4813      	ldr	r0, [pc, #76]	; (802ed50 <USBH_write+0x11c>)
 802ed04:	f006 fcbc 	bl	8035680 <iprintf>
 802ed08:	200a      	movs	r0, #10
 802ed0a:	f006 fcd1 	bl	80356b0 <putchar>
      res = RES_WRPRT;
 802ed0e:	2302      	movs	r3, #2
 802ed10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ed14:	e010      	b.n	802ed38 <USBH_write+0x104>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 802ed16:	480d      	ldr	r0, [pc, #52]	; (802ed4c <USBH_write+0x118>)
 802ed18:	f006 fcb2 	bl	8035680 <iprintf>
 802ed1c:	480d      	ldr	r0, [pc, #52]	; (802ed54 <USBH_write+0x120>)
 802ed1e:	f006 fcaf 	bl	8035680 <iprintf>
 802ed22:	200a      	movs	r0, #10
 802ed24:	f006 fcc4 	bl	80356b0 <putchar>
      res = RES_NOTRDY;
 802ed28:	2303      	movs	r3, #3
 802ed2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ed2e:	e003      	b.n	802ed38 <USBH_write+0x104>

    default:
      res = RES_ERROR;
 802ed30:	2301      	movs	r3, #1
 802ed32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 802ed36:	bf00      	nop
    }
  }

  return res;
 802ed38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 802ed3c:	4618      	mov	r0, r3
 802ed3e:	3748      	adds	r7, #72	; 0x48
 802ed40:	46bd      	mov	sp, r7
 802ed42:	bd80      	pop	{r7, pc}
 802ed44:	2000707c 	.word	0x2000707c
 802ed48:	200003a8 	.word	0x200003a8
 802ed4c:	08037868 	.word	0x08037868
 802ed50:	08037888 	.word	0x08037888
 802ed54:	08037870 	.word	0x08037870

0802ed58 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802ed58:	b580      	push	{r7, lr}
 802ed5a:	b090      	sub	sp, #64	; 0x40
 802ed5c:	af00      	add	r7, sp, #0
 802ed5e:	4603      	mov	r3, r0
 802ed60:	603a      	str	r2, [r7, #0]
 802ed62:	71fb      	strb	r3, [r7, #7]
 802ed64:	460b      	mov	r3, r1
 802ed66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802ed68:	2301      	movs	r3, #1
 802ed6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 802ed6e:	79bb      	ldrb	r3, [r7, #6]
 802ed70:	2b03      	cmp	r3, #3
 802ed72:	d852      	bhi.n	802ee1a <USBH_ioctl+0xc2>
 802ed74:	a201      	add	r2, pc, #4	; (adr r2, 802ed7c <USBH_ioctl+0x24>)
 802ed76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ed7a:	bf00      	nop
 802ed7c:	0802ed8d 	.word	0x0802ed8d
 802ed80:	0802ed95 	.word	0x0802ed95
 802ed84:	0802edbf 	.word	0x0802edbf
 802ed88:	0802edeb 	.word	0x0802edeb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 802ed8c:	2300      	movs	r3, #0
 802ed8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802ed92:	e045      	b.n	802ee20 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802ed94:	f107 0208 	add.w	r2, r7, #8
 802ed98:	79fb      	ldrb	r3, [r7, #7]
 802ed9a:	4619      	mov	r1, r3
 802ed9c:	4823      	ldr	r0, [pc, #140]	; (802ee2c <USBH_ioctl+0xd4>)
 802ed9e:	f002 fa9f 	bl	80312e0 <USBH_MSC_GetLUNInfo>
 802eda2:	4603      	mov	r3, r0
 802eda4:	2b00      	cmp	r3, #0
 802eda6:	d106      	bne.n	802edb6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 802eda8:	68fa      	ldr	r2, [r7, #12]
 802edaa:	683b      	ldr	r3, [r7, #0]
 802edac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802edae:	2300      	movs	r3, #0
 802edb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802edb4:	e034      	b.n	802ee20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802edb6:	2301      	movs	r3, #1
 802edb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802edbc:	e030      	b.n	802ee20 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802edbe:	f107 0208 	add.w	r2, r7, #8
 802edc2:	79fb      	ldrb	r3, [r7, #7]
 802edc4:	4619      	mov	r1, r3
 802edc6:	4819      	ldr	r0, [pc, #100]	; (802ee2c <USBH_ioctl+0xd4>)
 802edc8:	f002 fa8a 	bl	80312e0 <USBH_MSC_GetLUNInfo>
 802edcc:	4603      	mov	r3, r0
 802edce:	2b00      	cmp	r3, #0
 802edd0:	d107      	bne.n	802ede2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 802edd2:	8a3b      	ldrh	r3, [r7, #16]
 802edd4:	461a      	mov	r2, r3
 802edd6:	683b      	ldr	r3, [r7, #0]
 802edd8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802edda:	2300      	movs	r3, #0
 802eddc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802ede0:	e01e      	b.n	802ee20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802ede2:	2301      	movs	r3, #1
 802ede4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802ede8:	e01a      	b.n	802ee20 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802edea:	f107 0208 	add.w	r2, r7, #8
 802edee:	79fb      	ldrb	r3, [r7, #7]
 802edf0:	4619      	mov	r1, r3
 802edf2:	480e      	ldr	r0, [pc, #56]	; (802ee2c <USBH_ioctl+0xd4>)
 802edf4:	f002 fa74 	bl	80312e0 <USBH_MSC_GetLUNInfo>
 802edf8:	4603      	mov	r3, r0
 802edfa:	2b00      	cmp	r3, #0
 802edfc:	d109      	bne.n	802ee12 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 802edfe:	8a3b      	ldrh	r3, [r7, #16]
 802ee00:	0a5b      	lsrs	r3, r3, #9
 802ee02:	b29b      	uxth	r3, r3
 802ee04:	461a      	mov	r2, r3
 802ee06:	683b      	ldr	r3, [r7, #0]
 802ee08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802ee0a:	2300      	movs	r3, #0
 802ee0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802ee10:	e006      	b.n	802ee20 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802ee12:	2301      	movs	r3, #1
 802ee14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802ee18:	e002      	b.n	802ee20 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 802ee1a:	2304      	movs	r3, #4
 802ee1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 802ee20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 802ee24:	4618      	mov	r0, r3
 802ee26:	3740      	adds	r7, #64	; 0x40
 802ee28:	46bd      	mov	sp, r7
 802ee2a:	bd80      	pop	{r7, pc}
 802ee2c:	2000707c 	.word	0x2000707c

0802ee30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802ee30:	b580      	push	{r7, lr}
 802ee32:	b084      	sub	sp, #16
 802ee34:	af00      	add	r7, sp, #0
 802ee36:	6078      	str	r0, [r7, #4]
 802ee38:	460b      	mov	r3, r1
 802ee3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802ee3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 802ee40:	f005 fef6 	bl	8034c30 <malloc>
 802ee44:	4603      	mov	r3, r0
 802ee46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ee48:	68fb      	ldr	r3, [r7, #12]
 802ee4a:	2b00      	cmp	r3, #0
 802ee4c:	d105      	bne.n	802ee5a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 802ee4e:	687b      	ldr	r3, [r7, #4]
 802ee50:	2200      	movs	r2, #0
 802ee52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 802ee56:	2302      	movs	r3, #2
 802ee58:	e066      	b.n	802ef28 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 802ee5a:	687b      	ldr	r3, [r7, #4]
 802ee5c:	68fa      	ldr	r2, [r7, #12]
 802ee5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ee62:	687b      	ldr	r3, [r7, #4]
 802ee64:	7c1b      	ldrb	r3, [r3, #16]
 802ee66:	2b00      	cmp	r3, #0
 802ee68:	d119      	bne.n	802ee9e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802ee6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802ee6e:	2202      	movs	r2, #2
 802ee70:	2181      	movs	r1, #129	; 0x81
 802ee72:	6878      	ldr	r0, [r7, #4]
 802ee74:	f005 fa23 	bl	80342be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802ee78:	687b      	ldr	r3, [r7, #4]
 802ee7a:	2201      	movs	r2, #1
 802ee7c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802ee7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802ee82:	2202      	movs	r2, #2
 802ee84:	2101      	movs	r1, #1
 802ee86:	6878      	ldr	r0, [r7, #4]
 802ee88:	f005 fa19 	bl	80342be <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802ee8c:	687b      	ldr	r3, [r7, #4]
 802ee8e:	2201      	movs	r2, #1
 802ee90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 802ee94:	687b      	ldr	r3, [r7, #4]
 802ee96:	2210      	movs	r2, #16
 802ee98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 802ee9c:	e016      	b.n	802eecc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802ee9e:	2340      	movs	r3, #64	; 0x40
 802eea0:	2202      	movs	r2, #2
 802eea2:	2181      	movs	r1, #129	; 0x81
 802eea4:	6878      	ldr	r0, [r7, #4]
 802eea6:	f005 fa0a 	bl	80342be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802eeaa:	687b      	ldr	r3, [r7, #4]
 802eeac:	2201      	movs	r2, #1
 802eeae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802eeb0:	2340      	movs	r3, #64	; 0x40
 802eeb2:	2202      	movs	r2, #2
 802eeb4:	2101      	movs	r1, #1
 802eeb6:	6878      	ldr	r0, [r7, #4]
 802eeb8:	f005 fa01 	bl	80342be <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	2201      	movs	r2, #1
 802eec0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 802eec4:	687b      	ldr	r3, [r7, #4]
 802eec6:	2210      	movs	r2, #16
 802eec8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802eecc:	2308      	movs	r3, #8
 802eece:	2203      	movs	r2, #3
 802eed0:	2182      	movs	r1, #130	; 0x82
 802eed2:	6878      	ldr	r0, [r7, #4]
 802eed4:	f005 f9f3 	bl	80342be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802eed8:	687b      	ldr	r3, [r7, #4]
 802eeda:	2201      	movs	r2, #1
 802eedc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 802eee0:	687b      	ldr	r3, [r7, #4]
 802eee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802eee6:	681b      	ldr	r3, [r3, #0]
 802eee8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802eeea:	68fb      	ldr	r3, [r7, #12]
 802eeec:	2200      	movs	r2, #0
 802eeee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 802eef2:	68fb      	ldr	r3, [r7, #12]
 802eef4:	2200      	movs	r2, #0
 802eef6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802eefa:	687b      	ldr	r3, [r7, #4]
 802eefc:	7c1b      	ldrb	r3, [r3, #16]
 802eefe:	2b00      	cmp	r3, #0
 802ef00:	d109      	bne.n	802ef16 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802ef02:	68fb      	ldr	r3, [r7, #12]
 802ef04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802ef08:	f44f 7300 	mov.w	r3, #512	; 0x200
 802ef0c:	2101      	movs	r1, #1
 802ef0e:	6878      	ldr	r0, [r7, #4]
 802ef10:	f005 fac4 	bl	803449c <USBD_LL_PrepareReceive>
 802ef14:	e007      	b.n	802ef26 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802ef16:	68fb      	ldr	r3, [r7, #12]
 802ef18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802ef1c:	2340      	movs	r3, #64	; 0x40
 802ef1e:	2101      	movs	r1, #1
 802ef20:	6878      	ldr	r0, [r7, #4]
 802ef22:	f005 fabb 	bl	803449c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802ef26:	2300      	movs	r3, #0
}
 802ef28:	4618      	mov	r0, r3
 802ef2a:	3710      	adds	r7, #16
 802ef2c:	46bd      	mov	sp, r7
 802ef2e:	bd80      	pop	{r7, pc}

0802ef30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802ef30:	b580      	push	{r7, lr}
 802ef32:	b084      	sub	sp, #16
 802ef34:	af00      	add	r7, sp, #0
 802ef36:	6078      	str	r0, [r7, #4]
 802ef38:	460b      	mov	r3, r1
 802ef3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 802ef3c:	2300      	movs	r3, #0
 802ef3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 802ef40:	2181      	movs	r1, #129	; 0x81
 802ef42:	6878      	ldr	r0, [r7, #4]
 802ef44:	f005 f9e1 	bl	803430a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	2200      	movs	r2, #0
 802ef4c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 802ef4e:	2101      	movs	r1, #1
 802ef50:	6878      	ldr	r0, [r7, #4]
 802ef52:	f005 f9da 	bl	803430a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802ef56:	687b      	ldr	r3, [r7, #4]
 802ef58:	2200      	movs	r2, #0
 802ef5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 802ef5e:	2182      	movs	r1, #130	; 0x82
 802ef60:	6878      	ldr	r0, [r7, #4]
 802ef62:	f005 f9d2 	bl	803430a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 802ef66:	687b      	ldr	r3, [r7, #4]
 802ef68:	2200      	movs	r2, #0
 802ef6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 802ef6e:	687b      	ldr	r3, [r7, #4]
 802ef70:	2200      	movs	r2, #0
 802ef72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 802ef76:	687b      	ldr	r3, [r7, #4]
 802ef78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802ef7c:	2b00      	cmp	r3, #0
 802ef7e:	d00e      	beq.n	802ef9e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 802ef80:	687b      	ldr	r3, [r7, #4]
 802ef82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802ef86:	685b      	ldr	r3, [r3, #4]
 802ef88:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 802ef8a:	687b      	ldr	r3, [r7, #4]
 802ef8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802ef90:	4618      	mov	r0, r3
 802ef92:	f005 fe55 	bl	8034c40 <free>
    pdev->pClassData = NULL;
 802ef96:	687b      	ldr	r3, [r7, #4]
 802ef98:	2200      	movs	r2, #0
 802ef9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 802ef9e:	7bfb      	ldrb	r3, [r7, #15]
}
 802efa0:	4618      	mov	r0, r3
 802efa2:	3710      	adds	r7, #16
 802efa4:	46bd      	mov	sp, r7
 802efa6:	bd80      	pop	{r7, pc}

0802efa8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 802efa8:	b580      	push	{r7, lr}
 802efaa:	b086      	sub	sp, #24
 802efac:	af00      	add	r7, sp, #0
 802efae:	6078      	str	r0, [r7, #4]
 802efb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802efb2:	687b      	ldr	r3, [r7, #4]
 802efb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802efb8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 802efba:	2300      	movs	r3, #0
 802efbc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 802efbe:	2300      	movs	r3, #0
 802efc0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 802efc2:	2300      	movs	r3, #0
 802efc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802efc6:	683b      	ldr	r3, [r7, #0]
 802efc8:	781b      	ldrb	r3, [r3, #0]
 802efca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802efce:	2b00      	cmp	r3, #0
 802efd0:	d03a      	beq.n	802f048 <USBD_CDC_Setup+0xa0>
 802efd2:	2b20      	cmp	r3, #32
 802efd4:	f040 8097 	bne.w	802f106 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 802efd8:	683b      	ldr	r3, [r7, #0]
 802efda:	88db      	ldrh	r3, [r3, #6]
 802efdc:	2b00      	cmp	r3, #0
 802efde:	d029      	beq.n	802f034 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 802efe0:	683b      	ldr	r3, [r7, #0]
 802efe2:	781b      	ldrb	r3, [r3, #0]
 802efe4:	b25b      	sxtb	r3, r3
 802efe6:	2b00      	cmp	r3, #0
 802efe8:	da11      	bge.n	802f00e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802efea:	687b      	ldr	r3, [r7, #4]
 802efec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802eff0:	689b      	ldr	r3, [r3, #8]
 802eff2:	683a      	ldr	r2, [r7, #0]
 802eff4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 802eff6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802eff8:	683a      	ldr	r2, [r7, #0]
 802effa:	88d2      	ldrh	r2, [r2, #6]
 802effc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 802effe:	6939      	ldr	r1, [r7, #16]
 802f000:	683b      	ldr	r3, [r7, #0]
 802f002:	88db      	ldrh	r3, [r3, #6]
 802f004:	461a      	mov	r2, r3
 802f006:	6878      	ldr	r0, [r7, #4]
 802f008:	f001 fa6d 	bl	80304e6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 802f00c:	e082      	b.n	802f114 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 802f00e:	683b      	ldr	r3, [r7, #0]
 802f010:	785a      	ldrb	r2, [r3, #1]
 802f012:	693b      	ldr	r3, [r7, #16]
 802f014:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 802f018:	683b      	ldr	r3, [r7, #0]
 802f01a:	88db      	ldrh	r3, [r3, #6]
 802f01c:	b2da      	uxtb	r2, r3
 802f01e:	693b      	ldr	r3, [r7, #16]
 802f020:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 802f024:	6939      	ldr	r1, [r7, #16]
 802f026:	683b      	ldr	r3, [r7, #0]
 802f028:	88db      	ldrh	r3, [r3, #6]
 802f02a:	461a      	mov	r2, r3
 802f02c:	6878      	ldr	r0, [r7, #4]
 802f02e:	f001 fa86 	bl	803053e <USBD_CtlPrepareRx>
    break;
 802f032:	e06f      	b.n	802f114 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802f034:	687b      	ldr	r3, [r7, #4]
 802f036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f03a:	689b      	ldr	r3, [r3, #8]
 802f03c:	683a      	ldr	r2, [r7, #0]
 802f03e:	7850      	ldrb	r0, [r2, #1]
 802f040:	2200      	movs	r2, #0
 802f042:	6839      	ldr	r1, [r7, #0]
 802f044:	4798      	blx	r3
    break;
 802f046:	e065      	b.n	802f114 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 802f048:	683b      	ldr	r3, [r7, #0]
 802f04a:	785b      	ldrb	r3, [r3, #1]
 802f04c:	2b0b      	cmp	r3, #11
 802f04e:	d84f      	bhi.n	802f0f0 <USBD_CDC_Setup+0x148>
 802f050:	a201      	add	r2, pc, #4	; (adr r2, 802f058 <USBD_CDC_Setup+0xb0>)
 802f052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f056:	bf00      	nop
 802f058:	0802f089 	.word	0x0802f089
 802f05c:	0802f0ff 	.word	0x0802f0ff
 802f060:	0802f0f1 	.word	0x0802f0f1
 802f064:	0802f0f1 	.word	0x0802f0f1
 802f068:	0802f0f1 	.word	0x0802f0f1
 802f06c:	0802f0f1 	.word	0x0802f0f1
 802f070:	0802f0f1 	.word	0x0802f0f1
 802f074:	0802f0f1 	.word	0x0802f0f1
 802f078:	0802f0f1 	.word	0x0802f0f1
 802f07c:	0802f0f1 	.word	0x0802f0f1
 802f080:	0802f0b1 	.word	0x0802f0b1
 802f084:	0802f0d9 	.word	0x0802f0d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f088:	687b      	ldr	r3, [r7, #4]
 802f08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f08e:	2b03      	cmp	r3, #3
 802f090:	d107      	bne.n	802f0a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802f092:	f107 030c 	add.w	r3, r7, #12
 802f096:	2202      	movs	r2, #2
 802f098:	4619      	mov	r1, r3
 802f09a:	6878      	ldr	r0, [r7, #4]
 802f09c:	f001 fa23 	bl	80304e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 802f0a0:	e030      	b.n	802f104 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 802f0a2:	6839      	ldr	r1, [r7, #0]
 802f0a4:	6878      	ldr	r0, [r7, #4]
 802f0a6:	f001 f9ad 	bl	8030404 <USBD_CtlError>
        ret = USBD_FAIL;
 802f0aa:	2303      	movs	r3, #3
 802f0ac:	75fb      	strb	r3, [r7, #23]
      break;
 802f0ae:	e029      	b.n	802f104 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f0b0:	687b      	ldr	r3, [r7, #4]
 802f0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f0b6:	2b03      	cmp	r3, #3
 802f0b8:	d107      	bne.n	802f0ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 802f0ba:	f107 030f 	add.w	r3, r7, #15
 802f0be:	2201      	movs	r2, #1
 802f0c0:	4619      	mov	r1, r3
 802f0c2:	6878      	ldr	r0, [r7, #4]
 802f0c4:	f001 fa0f 	bl	80304e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 802f0c8:	e01c      	b.n	802f104 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 802f0ca:	6839      	ldr	r1, [r7, #0]
 802f0cc:	6878      	ldr	r0, [r7, #4]
 802f0ce:	f001 f999 	bl	8030404 <USBD_CtlError>
        ret = USBD_FAIL;
 802f0d2:	2303      	movs	r3, #3
 802f0d4:	75fb      	strb	r3, [r7, #23]
      break;
 802f0d6:	e015      	b.n	802f104 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802f0d8:	687b      	ldr	r3, [r7, #4]
 802f0da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f0de:	2b03      	cmp	r3, #3
 802f0e0:	d00f      	beq.n	802f102 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 802f0e2:	6839      	ldr	r1, [r7, #0]
 802f0e4:	6878      	ldr	r0, [r7, #4]
 802f0e6:	f001 f98d 	bl	8030404 <USBD_CtlError>
        ret = USBD_FAIL;
 802f0ea:	2303      	movs	r3, #3
 802f0ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 802f0ee:	e008      	b.n	802f102 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 802f0f0:	6839      	ldr	r1, [r7, #0]
 802f0f2:	6878      	ldr	r0, [r7, #4]
 802f0f4:	f001 f986 	bl	8030404 <USBD_CtlError>
      ret = USBD_FAIL;
 802f0f8:	2303      	movs	r3, #3
 802f0fa:	75fb      	strb	r3, [r7, #23]
      break;
 802f0fc:	e002      	b.n	802f104 <USBD_CDC_Setup+0x15c>
      break;
 802f0fe:	bf00      	nop
 802f100:	e008      	b.n	802f114 <USBD_CDC_Setup+0x16c>
      break;
 802f102:	bf00      	nop
    }
    break;
 802f104:	e006      	b.n	802f114 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 802f106:	6839      	ldr	r1, [r7, #0]
 802f108:	6878      	ldr	r0, [r7, #4]
 802f10a:	f001 f97b 	bl	8030404 <USBD_CtlError>
    ret = USBD_FAIL;
 802f10e:	2303      	movs	r3, #3
 802f110:	75fb      	strb	r3, [r7, #23]
    break;
 802f112:	bf00      	nop
  }

  return (uint8_t)ret;
 802f114:	7dfb      	ldrb	r3, [r7, #23]
}
 802f116:	4618      	mov	r0, r3
 802f118:	3718      	adds	r7, #24
 802f11a:	46bd      	mov	sp, r7
 802f11c:	bd80      	pop	{r7, pc}
 802f11e:	bf00      	nop

0802f120 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802f120:	b580      	push	{r7, lr}
 802f122:	b084      	sub	sp, #16
 802f124:	af00      	add	r7, sp, #0
 802f126:	6078      	str	r0, [r7, #4]
 802f128:	460b      	mov	r3, r1
 802f12a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 802f12c:	687b      	ldr	r3, [r7, #4]
 802f12e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802f132:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 802f134:	687b      	ldr	r3, [r7, #4]
 802f136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f13a:	2b00      	cmp	r3, #0
 802f13c:	d101      	bne.n	802f142 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802f13e:	2303      	movs	r3, #3
 802f140:	e049      	b.n	802f1d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802f142:	687b      	ldr	r3, [r7, #4]
 802f144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 802f14a:	78fa      	ldrb	r2, [r7, #3]
 802f14c:	6879      	ldr	r1, [r7, #4]
 802f14e:	4613      	mov	r3, r2
 802f150:	009b      	lsls	r3, r3, #2
 802f152:	4413      	add	r3, r2
 802f154:	009b      	lsls	r3, r3, #2
 802f156:	440b      	add	r3, r1
 802f158:	3318      	adds	r3, #24
 802f15a:	681b      	ldr	r3, [r3, #0]
 802f15c:	2b00      	cmp	r3, #0
 802f15e:	d029      	beq.n	802f1b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 802f160:	78fa      	ldrb	r2, [r7, #3]
 802f162:	6879      	ldr	r1, [r7, #4]
 802f164:	4613      	mov	r3, r2
 802f166:	009b      	lsls	r3, r3, #2
 802f168:	4413      	add	r3, r2
 802f16a:	009b      	lsls	r3, r3, #2
 802f16c:	440b      	add	r3, r1
 802f16e:	3318      	adds	r3, #24
 802f170:	681a      	ldr	r2, [r3, #0]
 802f172:	78f9      	ldrb	r1, [r7, #3]
 802f174:	68f8      	ldr	r0, [r7, #12]
 802f176:	460b      	mov	r3, r1
 802f178:	00db      	lsls	r3, r3, #3
 802f17a:	1a5b      	subs	r3, r3, r1
 802f17c:	009b      	lsls	r3, r3, #2
 802f17e:	4403      	add	r3, r0
 802f180:	3344      	adds	r3, #68	; 0x44
 802f182:	681b      	ldr	r3, [r3, #0]
 802f184:	fbb2 f1f3 	udiv	r1, r2, r3
 802f188:	fb03 f301 	mul.w	r3, r3, r1
 802f18c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 802f18e:	2b00      	cmp	r3, #0
 802f190:	d110      	bne.n	802f1b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 802f192:	78fa      	ldrb	r2, [r7, #3]
 802f194:	6879      	ldr	r1, [r7, #4]
 802f196:	4613      	mov	r3, r2
 802f198:	009b      	lsls	r3, r3, #2
 802f19a:	4413      	add	r3, r2
 802f19c:	009b      	lsls	r3, r3, #2
 802f19e:	440b      	add	r3, r1
 802f1a0:	3318      	adds	r3, #24
 802f1a2:	2200      	movs	r2, #0
 802f1a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802f1a6:	78f9      	ldrb	r1, [r7, #3]
 802f1a8:	2300      	movs	r3, #0
 802f1aa:	2200      	movs	r2, #0
 802f1ac:	6878      	ldr	r0, [r7, #4]
 802f1ae:	f005 f954 	bl	803445a <USBD_LL_Transmit>
 802f1b2:	e00f      	b.n	802f1d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 802f1b4:	68bb      	ldr	r3, [r7, #8]
 802f1b6:	2200      	movs	r2, #0
 802f1b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802f1bc:	687b      	ldr	r3, [r7, #4]
 802f1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f1c2:	691b      	ldr	r3, [r3, #16]
 802f1c4:	68ba      	ldr	r2, [r7, #8]
 802f1c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 802f1ca:	68ba      	ldr	r2, [r7, #8]
 802f1cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802f1d0:	78fa      	ldrb	r2, [r7, #3]
 802f1d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 802f1d4:	2300      	movs	r3, #0
}
 802f1d6:	4618      	mov	r0, r3
 802f1d8:	3710      	adds	r7, #16
 802f1da:	46bd      	mov	sp, r7
 802f1dc:	bd80      	pop	{r7, pc}

0802f1de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802f1de:	b580      	push	{r7, lr}
 802f1e0:	b084      	sub	sp, #16
 802f1e2:	af00      	add	r7, sp, #0
 802f1e4:	6078      	str	r0, [r7, #4]
 802f1e6:	460b      	mov	r3, r1
 802f1e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802f1ea:	687b      	ldr	r3, [r7, #4]
 802f1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f1f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 802f1f2:	687b      	ldr	r3, [r7, #4]
 802f1f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f1f8:	2b00      	cmp	r3, #0
 802f1fa:	d101      	bne.n	802f200 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802f1fc:	2303      	movs	r3, #3
 802f1fe:	e015      	b.n	802f22c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802f200:	78fb      	ldrb	r3, [r7, #3]
 802f202:	4619      	mov	r1, r3
 802f204:	6878      	ldr	r0, [r7, #4]
 802f206:	f005 f96a 	bl	80344de <USBD_LL_GetRxDataSize>
 802f20a:	4602      	mov	r2, r0
 802f20c:	68fb      	ldr	r3, [r7, #12]
 802f20e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802f212:	687b      	ldr	r3, [r7, #4]
 802f214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f218:	68db      	ldr	r3, [r3, #12]
 802f21a:	68fa      	ldr	r2, [r7, #12]
 802f21c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 802f220:	68fa      	ldr	r2, [r7, #12]
 802f222:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802f226:	4611      	mov	r1, r2
 802f228:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 802f22a:	2300      	movs	r3, #0
}
 802f22c:	4618      	mov	r0, r3
 802f22e:	3710      	adds	r7, #16
 802f230:	46bd      	mov	sp, r7
 802f232:	bd80      	pop	{r7, pc}

0802f234 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802f234:	b580      	push	{r7, lr}
 802f236:	b084      	sub	sp, #16
 802f238:	af00      	add	r7, sp, #0
 802f23a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802f23c:	687b      	ldr	r3, [r7, #4]
 802f23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f242:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802f244:	687b      	ldr	r3, [r7, #4]
 802f246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f24a:	2b00      	cmp	r3, #0
 802f24c:	d015      	beq.n	802f27a <USBD_CDC_EP0_RxReady+0x46>
 802f24e:	68fb      	ldr	r3, [r7, #12]
 802f250:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 802f254:	2bff      	cmp	r3, #255	; 0xff
 802f256:	d010      	beq.n	802f27a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802f258:	687b      	ldr	r3, [r7, #4]
 802f25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f25e:	689b      	ldr	r3, [r3, #8]
 802f260:	68fa      	ldr	r2, [r7, #12]
 802f262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 802f266:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 802f268:	68fa      	ldr	r2, [r7, #12]
 802f26a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802f26e:	b292      	uxth	r2, r2
 802f270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802f272:	68fb      	ldr	r3, [r7, #12]
 802f274:	22ff      	movs	r2, #255	; 0xff
 802f276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 802f27a:	2300      	movs	r3, #0
}
 802f27c:	4618      	mov	r0, r3
 802f27e:	3710      	adds	r7, #16
 802f280:	46bd      	mov	sp, r7
 802f282:	bd80      	pop	{r7, pc}

0802f284 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802f284:	b480      	push	{r7}
 802f286:	b083      	sub	sp, #12
 802f288:	af00      	add	r7, sp, #0
 802f28a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 802f28c:	687b      	ldr	r3, [r7, #4]
 802f28e:	2243      	movs	r2, #67	; 0x43
 802f290:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 802f292:	4b03      	ldr	r3, [pc, #12]	; (802f2a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 802f294:	4618      	mov	r0, r3
 802f296:	370c      	adds	r7, #12
 802f298:	46bd      	mov	sp, r7
 802f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f29e:	4770      	bx	lr
 802f2a0:	20000094 	.word	0x20000094

0802f2a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802f2a4:	b480      	push	{r7}
 802f2a6:	b083      	sub	sp, #12
 802f2a8:	af00      	add	r7, sp, #0
 802f2aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 802f2ac:	687b      	ldr	r3, [r7, #4]
 802f2ae:	2243      	movs	r2, #67	; 0x43
 802f2b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 802f2b2:	4b03      	ldr	r3, [pc, #12]	; (802f2c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 802f2b4:	4618      	mov	r0, r3
 802f2b6:	370c      	adds	r7, #12
 802f2b8:	46bd      	mov	sp, r7
 802f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2be:	4770      	bx	lr
 802f2c0:	20000050 	.word	0x20000050

0802f2c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 802f2c4:	b480      	push	{r7}
 802f2c6:	b083      	sub	sp, #12
 802f2c8:	af00      	add	r7, sp, #0
 802f2ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 802f2cc:	687b      	ldr	r3, [r7, #4]
 802f2ce:	2243      	movs	r2, #67	; 0x43
 802f2d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 802f2d2:	4b03      	ldr	r3, [pc, #12]	; (802f2e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 802f2d4:	4618      	mov	r0, r3
 802f2d6:	370c      	adds	r7, #12
 802f2d8:	46bd      	mov	sp, r7
 802f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2de:	4770      	bx	lr
 802f2e0:	200000d8 	.word	0x200000d8

0802f2e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802f2e4:	b480      	push	{r7}
 802f2e6:	b083      	sub	sp, #12
 802f2e8:	af00      	add	r7, sp, #0
 802f2ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 802f2ec:	687b      	ldr	r3, [r7, #4]
 802f2ee:	220a      	movs	r2, #10
 802f2f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802f2f2:	4b03      	ldr	r3, [pc, #12]	; (802f300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 802f2f4:	4618      	mov	r0, r3
 802f2f6:	370c      	adds	r7, #12
 802f2f8:	46bd      	mov	sp, r7
 802f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2fe:	4770      	bx	lr
 802f300:	2000000c 	.word	0x2000000c

0802f304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 802f304:	b480      	push	{r7}
 802f306:	b083      	sub	sp, #12
 802f308:	af00      	add	r7, sp, #0
 802f30a:	6078      	str	r0, [r7, #4]
 802f30c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802f30e:	683b      	ldr	r3, [r7, #0]
 802f310:	2b00      	cmp	r3, #0
 802f312:	d101      	bne.n	802f318 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 802f314:	2303      	movs	r3, #3
 802f316:	e004      	b.n	802f322 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 802f318:	687b      	ldr	r3, [r7, #4]
 802f31a:	683a      	ldr	r2, [r7, #0]
 802f31c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 802f320:	2300      	movs	r3, #0
}
 802f322:	4618      	mov	r0, r3
 802f324:	370c      	adds	r7, #12
 802f326:	46bd      	mov	sp, r7
 802f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f32c:	4770      	bx	lr

0802f32e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 802f32e:	b480      	push	{r7}
 802f330:	b087      	sub	sp, #28
 802f332:	af00      	add	r7, sp, #0
 802f334:	60f8      	str	r0, [r7, #12]
 802f336:	60b9      	str	r1, [r7, #8]
 802f338:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802f33a:	68fb      	ldr	r3, [r7, #12]
 802f33c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f340:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 802f342:	697b      	ldr	r3, [r7, #20]
 802f344:	68ba      	ldr	r2, [r7, #8]
 802f346:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 802f34a:	697b      	ldr	r3, [r7, #20]
 802f34c:	687a      	ldr	r2, [r7, #4]
 802f34e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802f352:	2300      	movs	r3, #0
}
 802f354:	4618      	mov	r0, r3
 802f356:	371c      	adds	r7, #28
 802f358:	46bd      	mov	sp, r7
 802f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f35e:	4770      	bx	lr

0802f360 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 802f360:	b480      	push	{r7}
 802f362:	b085      	sub	sp, #20
 802f364:	af00      	add	r7, sp, #0
 802f366:	6078      	str	r0, [r7, #4]
 802f368:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802f36a:	687b      	ldr	r3, [r7, #4]
 802f36c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f370:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 802f372:	68fb      	ldr	r3, [r7, #12]
 802f374:	683a      	ldr	r2, [r7, #0]
 802f376:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 802f37a:	2300      	movs	r3, #0
}
 802f37c:	4618      	mov	r0, r3
 802f37e:	3714      	adds	r7, #20
 802f380:	46bd      	mov	sp, r7
 802f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f386:	4770      	bx	lr

0802f388 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802f388:	b580      	push	{r7, lr}
 802f38a:	b084      	sub	sp, #16
 802f38c:	af00      	add	r7, sp, #0
 802f38e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802f390:	687b      	ldr	r3, [r7, #4]
 802f392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f396:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 802f398:	687b      	ldr	r3, [r7, #4]
 802f39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f39e:	2b00      	cmp	r3, #0
 802f3a0:	d101      	bne.n	802f3a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 802f3a2:	2303      	movs	r3, #3
 802f3a4:	e016      	b.n	802f3d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f3a6:	687b      	ldr	r3, [r7, #4]
 802f3a8:	7c1b      	ldrb	r3, [r3, #16]
 802f3aa:	2b00      	cmp	r3, #0
 802f3ac:	d109      	bne.n	802f3c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802f3ae:	68fb      	ldr	r3, [r7, #12]
 802f3b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f3b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f3b8:	2101      	movs	r1, #1
 802f3ba:	6878      	ldr	r0, [r7, #4]
 802f3bc:	f005 f86e 	bl	803449c <USBD_LL_PrepareReceive>
 802f3c0:	e007      	b.n	802f3d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802f3c2:	68fb      	ldr	r3, [r7, #12]
 802f3c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f3c8:	2340      	movs	r3, #64	; 0x40
 802f3ca:	2101      	movs	r1, #1
 802f3cc:	6878      	ldr	r0, [r7, #4]
 802f3ce:	f005 f865 	bl	803449c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802f3d2:	2300      	movs	r3, #0
}
 802f3d4:	4618      	mov	r0, r3
 802f3d6:	3710      	adds	r7, #16
 802f3d8:	46bd      	mov	sp, r7
 802f3da:	bd80      	pop	{r7, pc}

0802f3dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802f3dc:	b580      	push	{r7, lr}
 802f3de:	b086      	sub	sp, #24
 802f3e0:	af00      	add	r7, sp, #0
 802f3e2:	60f8      	str	r0, [r7, #12]
 802f3e4:	60b9      	str	r1, [r7, #8]
 802f3e6:	4613      	mov	r3, r2
 802f3e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802f3ea:	68fb      	ldr	r3, [r7, #12]
 802f3ec:	2b00      	cmp	r3, #0
 802f3ee:	d101      	bne.n	802f3f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 802f3f0:	2303      	movs	r3, #3
 802f3f2:	e025      	b.n	802f440 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 802f3f4:	68fb      	ldr	r3, [r7, #12]
 802f3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f3fa:	2b00      	cmp	r3, #0
 802f3fc:	d003      	beq.n	802f406 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 802f3fe:	68fb      	ldr	r3, [r7, #12]
 802f400:	2200      	movs	r2, #0
 802f402:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 802f406:	68fb      	ldr	r3, [r7, #12]
 802f408:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 802f40c:	2b00      	cmp	r3, #0
 802f40e:	d003      	beq.n	802f418 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 802f410:	68fb      	ldr	r3, [r7, #12]
 802f412:	2200      	movs	r2, #0
 802f414:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802f418:	68bb      	ldr	r3, [r7, #8]
 802f41a:	2b00      	cmp	r3, #0
 802f41c:	d003      	beq.n	802f426 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 802f41e:	68fb      	ldr	r3, [r7, #12]
 802f420:	68ba      	ldr	r2, [r7, #8]
 802f422:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f426:	68fb      	ldr	r3, [r7, #12]
 802f428:	2201      	movs	r2, #1
 802f42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802f42e:	68fb      	ldr	r3, [r7, #12]
 802f430:	79fa      	ldrb	r2, [r7, #7]
 802f432:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802f434:	68f8      	ldr	r0, [r7, #12]
 802f436:	f004 fedb 	bl	80341f0 <USBD_LL_Init>
 802f43a:	4603      	mov	r3, r0
 802f43c:	75fb      	strb	r3, [r7, #23]

  return ret;
 802f43e:	7dfb      	ldrb	r3, [r7, #23]
}
 802f440:	4618      	mov	r0, r3
 802f442:	3718      	adds	r7, #24
 802f444:	46bd      	mov	sp, r7
 802f446:	bd80      	pop	{r7, pc}

0802f448 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802f448:	b580      	push	{r7, lr}
 802f44a:	b084      	sub	sp, #16
 802f44c:	af00      	add	r7, sp, #0
 802f44e:	6078      	str	r0, [r7, #4]
 802f450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802f452:	2300      	movs	r3, #0
 802f454:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802f456:	683b      	ldr	r3, [r7, #0]
 802f458:	2b00      	cmp	r3, #0
 802f45a:	d101      	bne.n	802f460 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 802f45c:	2303      	movs	r3, #3
 802f45e:	e010      	b.n	802f482 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 802f460:	687b      	ldr	r3, [r7, #4]
 802f462:	683a      	ldr	r2, [r7, #0]
 802f464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 802f468:	687b      	ldr	r3, [r7, #4]
 802f46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f470:	f107 020e 	add.w	r2, r7, #14
 802f474:	4610      	mov	r0, r2
 802f476:	4798      	blx	r3
 802f478:	4602      	mov	r2, r0
 802f47a:	687b      	ldr	r3, [r7, #4]
 802f47c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 802f480:	2300      	movs	r3, #0
}
 802f482:	4618      	mov	r0, r3
 802f484:	3710      	adds	r7, #16
 802f486:	46bd      	mov	sp, r7
 802f488:	bd80      	pop	{r7, pc}

0802f48a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802f48a:	b580      	push	{r7, lr}
 802f48c:	b082      	sub	sp, #8
 802f48e:	af00      	add	r7, sp, #0
 802f490:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802f492:	6878      	ldr	r0, [r7, #4]
 802f494:	f004 fef8 	bl	8034288 <USBD_LL_Start>
 802f498:	4603      	mov	r3, r0
}
 802f49a:	4618      	mov	r0, r3
 802f49c:	3708      	adds	r7, #8
 802f49e:	46bd      	mov	sp, r7
 802f4a0:	bd80      	pop	{r7, pc}

0802f4a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 802f4a2:	b480      	push	{r7}
 802f4a4:	b083      	sub	sp, #12
 802f4a6:	af00      	add	r7, sp, #0
 802f4a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f4aa:	2300      	movs	r3, #0
}
 802f4ac:	4618      	mov	r0, r3
 802f4ae:	370c      	adds	r7, #12
 802f4b0:	46bd      	mov	sp, r7
 802f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f4b6:	4770      	bx	lr

0802f4b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f4b8:	b580      	push	{r7, lr}
 802f4ba:	b084      	sub	sp, #16
 802f4bc:	af00      	add	r7, sp, #0
 802f4be:	6078      	str	r0, [r7, #4]
 802f4c0:	460b      	mov	r3, r1
 802f4c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 802f4c4:	2303      	movs	r3, #3
 802f4c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 802f4c8:	687b      	ldr	r3, [r7, #4]
 802f4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f4ce:	2b00      	cmp	r3, #0
 802f4d0:	d009      	beq.n	802f4e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 802f4d2:	687b      	ldr	r3, [r7, #4]
 802f4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f4d8:	681b      	ldr	r3, [r3, #0]
 802f4da:	78fa      	ldrb	r2, [r7, #3]
 802f4dc:	4611      	mov	r1, r2
 802f4de:	6878      	ldr	r0, [r7, #4]
 802f4e0:	4798      	blx	r3
 802f4e2:	4603      	mov	r3, r0
 802f4e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 802f4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 802f4e8:	4618      	mov	r0, r3
 802f4ea:	3710      	adds	r7, #16
 802f4ec:	46bd      	mov	sp, r7
 802f4ee:	bd80      	pop	{r7, pc}

0802f4f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f4f0:	b580      	push	{r7, lr}
 802f4f2:	b082      	sub	sp, #8
 802f4f4:	af00      	add	r7, sp, #0
 802f4f6:	6078      	str	r0, [r7, #4]
 802f4f8:	460b      	mov	r3, r1
 802f4fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 802f4fc:	687b      	ldr	r3, [r7, #4]
 802f4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f502:	2b00      	cmp	r3, #0
 802f504:	d007      	beq.n	802f516 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 802f506:	687b      	ldr	r3, [r7, #4]
 802f508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f50c:	685b      	ldr	r3, [r3, #4]
 802f50e:	78fa      	ldrb	r2, [r7, #3]
 802f510:	4611      	mov	r1, r2
 802f512:	6878      	ldr	r0, [r7, #4]
 802f514:	4798      	blx	r3
  }

  return USBD_OK;
 802f516:	2300      	movs	r3, #0
}
 802f518:	4618      	mov	r0, r3
 802f51a:	3708      	adds	r7, #8
 802f51c:	46bd      	mov	sp, r7
 802f51e:	bd80      	pop	{r7, pc}

0802f520 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802f520:	b580      	push	{r7, lr}
 802f522:	b084      	sub	sp, #16
 802f524:	af00      	add	r7, sp, #0
 802f526:	6078      	str	r0, [r7, #4]
 802f528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802f52a:	687b      	ldr	r3, [r7, #4]
 802f52c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f530:	6839      	ldr	r1, [r7, #0]
 802f532:	4618      	mov	r0, r3
 802f534:	f000 ff2c 	bl	8030390 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802f538:	687b      	ldr	r3, [r7, #4]
 802f53a:	2201      	movs	r2, #1
 802f53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802f540:	687b      	ldr	r3, [r7, #4]
 802f542:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802f546:	461a      	mov	r2, r3
 802f548:	687b      	ldr	r3, [r7, #4]
 802f54a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802f54e:	687b      	ldr	r3, [r7, #4]
 802f550:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f554:	f003 031f 	and.w	r3, r3, #31
 802f558:	2b01      	cmp	r3, #1
 802f55a:	d00e      	beq.n	802f57a <USBD_LL_SetupStage+0x5a>
 802f55c:	2b01      	cmp	r3, #1
 802f55e:	d302      	bcc.n	802f566 <USBD_LL_SetupStage+0x46>
 802f560:	2b02      	cmp	r3, #2
 802f562:	d014      	beq.n	802f58e <USBD_LL_SetupStage+0x6e>
 802f564:	e01d      	b.n	802f5a2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802f566:	687b      	ldr	r3, [r7, #4]
 802f568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f56c:	4619      	mov	r1, r3
 802f56e:	6878      	ldr	r0, [r7, #4]
 802f570:	f000 fa18 	bl	802f9a4 <USBD_StdDevReq>
 802f574:	4603      	mov	r3, r0
 802f576:	73fb      	strb	r3, [r7, #15]
      break;
 802f578:	e020      	b.n	802f5bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 802f57a:	687b      	ldr	r3, [r7, #4]
 802f57c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f580:	4619      	mov	r1, r3
 802f582:	6878      	ldr	r0, [r7, #4]
 802f584:	f000 fa7c 	bl	802fa80 <USBD_StdItfReq>
 802f588:	4603      	mov	r3, r0
 802f58a:	73fb      	strb	r3, [r7, #15]
      break;
 802f58c:	e016      	b.n	802f5bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802f58e:	687b      	ldr	r3, [r7, #4]
 802f590:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f594:	4619      	mov	r1, r3
 802f596:	6878      	ldr	r0, [r7, #4]
 802f598:	f000 fab8 	bl	802fb0c <USBD_StdEPReq>
 802f59c:	4603      	mov	r3, r0
 802f59e:	73fb      	strb	r3, [r7, #15]
      break;
 802f5a0:	e00c      	b.n	802f5bc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802f5a2:	687b      	ldr	r3, [r7, #4]
 802f5a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f5a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802f5ac:	b2db      	uxtb	r3, r3
 802f5ae:	4619      	mov	r1, r3
 802f5b0:	6878      	ldr	r0, [r7, #4]
 802f5b2:	f004 fec9 	bl	8034348 <USBD_LL_StallEP>
 802f5b6:	4603      	mov	r3, r0
 802f5b8:	73fb      	strb	r3, [r7, #15]
      break;
 802f5ba:	bf00      	nop
  }

  return ret;
 802f5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 802f5be:	4618      	mov	r0, r3
 802f5c0:	3710      	adds	r7, #16
 802f5c2:	46bd      	mov	sp, r7
 802f5c4:	bd80      	pop	{r7, pc}

0802f5c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802f5c6:	b580      	push	{r7, lr}
 802f5c8:	b086      	sub	sp, #24
 802f5ca:	af00      	add	r7, sp, #0
 802f5cc:	60f8      	str	r0, [r7, #12]
 802f5ce:	460b      	mov	r3, r1
 802f5d0:	607a      	str	r2, [r7, #4]
 802f5d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 802f5d4:	7afb      	ldrb	r3, [r7, #11]
 802f5d6:	2b00      	cmp	r3, #0
 802f5d8:	d137      	bne.n	802f64a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 802f5da:	68fb      	ldr	r3, [r7, #12]
 802f5dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802f5e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802f5e2:	68fb      	ldr	r3, [r7, #12]
 802f5e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f5e8:	2b03      	cmp	r3, #3
 802f5ea:	d14a      	bne.n	802f682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 802f5ec:	693b      	ldr	r3, [r7, #16]
 802f5ee:	689a      	ldr	r2, [r3, #8]
 802f5f0:	693b      	ldr	r3, [r7, #16]
 802f5f2:	68db      	ldr	r3, [r3, #12]
 802f5f4:	429a      	cmp	r2, r3
 802f5f6:	d913      	bls.n	802f620 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802f5f8:	693b      	ldr	r3, [r7, #16]
 802f5fa:	689a      	ldr	r2, [r3, #8]
 802f5fc:	693b      	ldr	r3, [r7, #16]
 802f5fe:	68db      	ldr	r3, [r3, #12]
 802f600:	1ad2      	subs	r2, r2, r3
 802f602:	693b      	ldr	r3, [r7, #16]
 802f604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802f606:	693b      	ldr	r3, [r7, #16]
 802f608:	68da      	ldr	r2, [r3, #12]
 802f60a:	693b      	ldr	r3, [r7, #16]
 802f60c:	689b      	ldr	r3, [r3, #8]
 802f60e:	4293      	cmp	r3, r2
 802f610:	bf28      	it	cs
 802f612:	4613      	movcs	r3, r2
 802f614:	461a      	mov	r2, r3
 802f616:	6879      	ldr	r1, [r7, #4]
 802f618:	68f8      	ldr	r0, [r7, #12]
 802f61a:	f000 ffad 	bl	8030578 <USBD_CtlContinueRx>
 802f61e:	e030      	b.n	802f682 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 802f620:	68fb      	ldr	r3, [r7, #12]
 802f622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f626:	691b      	ldr	r3, [r3, #16]
 802f628:	2b00      	cmp	r3, #0
 802f62a:	d00a      	beq.n	802f642 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 802f62c:	68fb      	ldr	r3, [r7, #12]
 802f62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 802f632:	2b03      	cmp	r3, #3
 802f634:	d105      	bne.n	802f642 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 802f636:	68fb      	ldr	r3, [r7, #12]
 802f638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f63c:	691b      	ldr	r3, [r3, #16]
 802f63e:	68f8      	ldr	r0, [r7, #12]
 802f640:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 802f642:	68f8      	ldr	r0, [r7, #12]
 802f644:	f000 ffa9 	bl	803059a <USBD_CtlSendStatus>
 802f648:	e01b      	b.n	802f682 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 802f64a:	68fb      	ldr	r3, [r7, #12]
 802f64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f650:	699b      	ldr	r3, [r3, #24]
 802f652:	2b00      	cmp	r3, #0
 802f654:	d013      	beq.n	802f67e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802f656:	68fb      	ldr	r3, [r7, #12]
 802f658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 802f65c:	2b03      	cmp	r3, #3
 802f65e:	d10e      	bne.n	802f67e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 802f660:	68fb      	ldr	r3, [r7, #12]
 802f662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f666:	699b      	ldr	r3, [r3, #24]
 802f668:	7afa      	ldrb	r2, [r7, #11]
 802f66a:	4611      	mov	r1, r2
 802f66c:	68f8      	ldr	r0, [r7, #12]
 802f66e:	4798      	blx	r3
 802f670:	4603      	mov	r3, r0
 802f672:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 802f674:	7dfb      	ldrb	r3, [r7, #23]
 802f676:	2b00      	cmp	r3, #0
 802f678:	d003      	beq.n	802f682 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 802f67a:	7dfb      	ldrb	r3, [r7, #23]
 802f67c:	e002      	b.n	802f684 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802f67e:	2303      	movs	r3, #3
 802f680:	e000      	b.n	802f684 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 802f682:	2300      	movs	r3, #0
}
 802f684:	4618      	mov	r0, r3
 802f686:	3718      	adds	r7, #24
 802f688:	46bd      	mov	sp, r7
 802f68a:	bd80      	pop	{r7, pc}

0802f68c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802f68c:	b580      	push	{r7, lr}
 802f68e:	b086      	sub	sp, #24
 802f690:	af00      	add	r7, sp, #0
 802f692:	60f8      	str	r0, [r7, #12]
 802f694:	460b      	mov	r3, r1
 802f696:	607a      	str	r2, [r7, #4]
 802f698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 802f69a:	7afb      	ldrb	r3, [r7, #11]
 802f69c:	2b00      	cmp	r3, #0
 802f69e:	d16a      	bne.n	802f776 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 802f6a0:	68fb      	ldr	r3, [r7, #12]
 802f6a2:	3314      	adds	r3, #20
 802f6a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802f6a6:	68fb      	ldr	r3, [r7, #12]
 802f6a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f6ac:	2b02      	cmp	r3, #2
 802f6ae:	d155      	bne.n	802f75c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 802f6b0:	693b      	ldr	r3, [r7, #16]
 802f6b2:	689a      	ldr	r2, [r3, #8]
 802f6b4:	693b      	ldr	r3, [r7, #16]
 802f6b6:	68db      	ldr	r3, [r3, #12]
 802f6b8:	429a      	cmp	r2, r3
 802f6ba:	d914      	bls.n	802f6e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802f6bc:	693b      	ldr	r3, [r7, #16]
 802f6be:	689a      	ldr	r2, [r3, #8]
 802f6c0:	693b      	ldr	r3, [r7, #16]
 802f6c2:	68db      	ldr	r3, [r3, #12]
 802f6c4:	1ad2      	subs	r2, r2, r3
 802f6c6:	693b      	ldr	r3, [r7, #16]
 802f6c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802f6ca:	693b      	ldr	r3, [r7, #16]
 802f6cc:	689b      	ldr	r3, [r3, #8]
 802f6ce:	461a      	mov	r2, r3
 802f6d0:	6879      	ldr	r1, [r7, #4]
 802f6d2:	68f8      	ldr	r0, [r7, #12]
 802f6d4:	f000 ff22 	bl	803051c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f6d8:	2300      	movs	r3, #0
 802f6da:	2200      	movs	r2, #0
 802f6dc:	2100      	movs	r1, #0
 802f6de:	68f8      	ldr	r0, [r7, #12]
 802f6e0:	f004 fedc 	bl	803449c <USBD_LL_PrepareReceive>
 802f6e4:	e03a      	b.n	802f75c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802f6e6:	693b      	ldr	r3, [r7, #16]
 802f6e8:	68da      	ldr	r2, [r3, #12]
 802f6ea:	693b      	ldr	r3, [r7, #16]
 802f6ec:	689b      	ldr	r3, [r3, #8]
 802f6ee:	429a      	cmp	r2, r3
 802f6f0:	d11c      	bne.n	802f72c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802f6f2:	693b      	ldr	r3, [r7, #16]
 802f6f4:	685a      	ldr	r2, [r3, #4]
 802f6f6:	693b      	ldr	r3, [r7, #16]
 802f6f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802f6fa:	429a      	cmp	r2, r3
 802f6fc:	d316      	bcc.n	802f72c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802f6fe:	693b      	ldr	r3, [r7, #16]
 802f700:	685a      	ldr	r2, [r3, #4]
 802f702:	68fb      	ldr	r3, [r7, #12]
 802f704:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802f708:	429a      	cmp	r2, r3
 802f70a:	d20f      	bcs.n	802f72c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802f70c:	2200      	movs	r2, #0
 802f70e:	2100      	movs	r1, #0
 802f710:	68f8      	ldr	r0, [r7, #12]
 802f712:	f000 ff03 	bl	803051c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802f716:	68fb      	ldr	r3, [r7, #12]
 802f718:	2200      	movs	r2, #0
 802f71a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f71e:	2300      	movs	r3, #0
 802f720:	2200      	movs	r2, #0
 802f722:	2100      	movs	r1, #0
 802f724:	68f8      	ldr	r0, [r7, #12]
 802f726:	f004 feb9 	bl	803449c <USBD_LL_PrepareReceive>
 802f72a:	e017      	b.n	802f75c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802f72c:	68fb      	ldr	r3, [r7, #12]
 802f72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f732:	68db      	ldr	r3, [r3, #12]
 802f734:	2b00      	cmp	r3, #0
 802f736:	d00a      	beq.n	802f74e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 802f738:	68fb      	ldr	r3, [r7, #12]
 802f73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802f73e:	2b03      	cmp	r3, #3
 802f740:	d105      	bne.n	802f74e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 802f742:	68fb      	ldr	r3, [r7, #12]
 802f744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f748:	68db      	ldr	r3, [r3, #12]
 802f74a:	68f8      	ldr	r0, [r7, #12]
 802f74c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802f74e:	2180      	movs	r1, #128	; 0x80
 802f750:	68f8      	ldr	r0, [r7, #12]
 802f752:	f004 fdf9 	bl	8034348 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802f756:	68f8      	ldr	r0, [r7, #12]
 802f758:	f000 ff32 	bl	80305c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 802f75c:	68fb      	ldr	r3, [r7, #12]
 802f75e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802f762:	2b01      	cmp	r3, #1
 802f764:	d123      	bne.n	802f7ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 802f766:	68f8      	ldr	r0, [r7, #12]
 802f768:	f7ff fe9b 	bl	802f4a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802f76c:	68fb      	ldr	r3, [r7, #12]
 802f76e:	2200      	movs	r2, #0
 802f770:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802f774:	e01b      	b.n	802f7ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 802f776:	68fb      	ldr	r3, [r7, #12]
 802f778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f77c:	695b      	ldr	r3, [r3, #20]
 802f77e:	2b00      	cmp	r3, #0
 802f780:	d013      	beq.n	802f7aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802f782:	68fb      	ldr	r3, [r7, #12]
 802f784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 802f788:	2b03      	cmp	r3, #3
 802f78a:	d10e      	bne.n	802f7aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 802f78c:	68fb      	ldr	r3, [r7, #12]
 802f78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f792:	695b      	ldr	r3, [r3, #20]
 802f794:	7afa      	ldrb	r2, [r7, #11]
 802f796:	4611      	mov	r1, r2
 802f798:	68f8      	ldr	r0, [r7, #12]
 802f79a:	4798      	blx	r3
 802f79c:	4603      	mov	r3, r0
 802f79e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 802f7a0:	7dfb      	ldrb	r3, [r7, #23]
 802f7a2:	2b00      	cmp	r3, #0
 802f7a4:	d003      	beq.n	802f7ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 802f7a6:	7dfb      	ldrb	r3, [r7, #23]
 802f7a8:	e002      	b.n	802f7b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802f7aa:	2303      	movs	r3, #3
 802f7ac:	e000      	b.n	802f7b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 802f7ae:	2300      	movs	r3, #0
}
 802f7b0:	4618      	mov	r0, r3
 802f7b2:	3718      	adds	r7, #24
 802f7b4:	46bd      	mov	sp, r7
 802f7b6:	bd80      	pop	{r7, pc}

0802f7b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802f7b8:	b580      	push	{r7, lr}
 802f7ba:	b082      	sub	sp, #8
 802f7bc:	af00      	add	r7, sp, #0
 802f7be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f7c0:	687b      	ldr	r3, [r7, #4]
 802f7c2:	2201      	movs	r2, #1
 802f7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802f7c8:	687b      	ldr	r3, [r7, #4]
 802f7ca:	2200      	movs	r2, #0
 802f7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802f7d0:	687b      	ldr	r3, [r7, #4]
 802f7d2:	2200      	movs	r2, #0
 802f7d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802f7d6:	687b      	ldr	r3, [r7, #4]
 802f7d8:	2200      	movs	r2, #0
 802f7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 802f7de:	687b      	ldr	r3, [r7, #4]
 802f7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802f7e4:	2b00      	cmp	r3, #0
 802f7e6:	d009      	beq.n	802f7fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802f7e8:	687b      	ldr	r3, [r7, #4]
 802f7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f7ee:	685b      	ldr	r3, [r3, #4]
 802f7f0:	687a      	ldr	r2, [r7, #4]
 802f7f2:	6852      	ldr	r2, [r2, #4]
 802f7f4:	b2d2      	uxtb	r2, r2
 802f7f6:	4611      	mov	r1, r2
 802f7f8:	6878      	ldr	r0, [r7, #4]
 802f7fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f7fc:	2340      	movs	r3, #64	; 0x40
 802f7fe:	2200      	movs	r2, #0
 802f800:	2100      	movs	r1, #0
 802f802:	6878      	ldr	r0, [r7, #4]
 802f804:	f004 fd5b 	bl	80342be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802f808:	687b      	ldr	r3, [r7, #4]
 802f80a:	2201      	movs	r2, #1
 802f80c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802f810:	687b      	ldr	r3, [r7, #4]
 802f812:	2240      	movs	r2, #64	; 0x40
 802f814:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f818:	2340      	movs	r3, #64	; 0x40
 802f81a:	2200      	movs	r2, #0
 802f81c:	2180      	movs	r1, #128	; 0x80
 802f81e:	6878      	ldr	r0, [r7, #4]
 802f820:	f004 fd4d 	bl	80342be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802f824:	687b      	ldr	r3, [r7, #4]
 802f826:	2201      	movs	r2, #1
 802f828:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802f82a:	687b      	ldr	r3, [r7, #4]
 802f82c:	2240      	movs	r2, #64	; 0x40
 802f82e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 802f830:	2300      	movs	r3, #0
}
 802f832:	4618      	mov	r0, r3
 802f834:	3708      	adds	r7, #8
 802f836:	46bd      	mov	sp, r7
 802f838:	bd80      	pop	{r7, pc}

0802f83a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802f83a:	b480      	push	{r7}
 802f83c:	b083      	sub	sp, #12
 802f83e:	af00      	add	r7, sp, #0
 802f840:	6078      	str	r0, [r7, #4]
 802f842:	460b      	mov	r3, r1
 802f844:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802f846:	687b      	ldr	r3, [r7, #4]
 802f848:	78fa      	ldrb	r2, [r7, #3]
 802f84a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802f84c:	2300      	movs	r3, #0
}
 802f84e:	4618      	mov	r0, r3
 802f850:	370c      	adds	r7, #12
 802f852:	46bd      	mov	sp, r7
 802f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f858:	4770      	bx	lr

0802f85a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802f85a:	b480      	push	{r7}
 802f85c:	b083      	sub	sp, #12
 802f85e:	af00      	add	r7, sp, #0
 802f860:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802f862:	687b      	ldr	r3, [r7, #4]
 802f864:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 802f868:	687b      	ldr	r3, [r7, #4]
 802f86a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 802f86e:	687b      	ldr	r3, [r7, #4]
 802f870:	2204      	movs	r2, #4
 802f872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802f876:	2300      	movs	r3, #0
}
 802f878:	4618      	mov	r0, r3
 802f87a:	370c      	adds	r7, #12
 802f87c:	46bd      	mov	sp, r7
 802f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f882:	4770      	bx	lr

0802f884 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802f884:	b480      	push	{r7}
 802f886:	b083      	sub	sp, #12
 802f888:	af00      	add	r7, sp, #0
 802f88a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802f88c:	687b      	ldr	r3, [r7, #4]
 802f88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f892:	2b04      	cmp	r3, #4
 802f894:	d105      	bne.n	802f8a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 802f896:	687b      	ldr	r3, [r7, #4]
 802f898:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 802f89c:	687b      	ldr	r3, [r7, #4]
 802f89e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802f8a2:	2300      	movs	r3, #0
}
 802f8a4:	4618      	mov	r0, r3
 802f8a6:	370c      	adds	r7, #12
 802f8a8:	46bd      	mov	sp, r7
 802f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8ae:	4770      	bx	lr

0802f8b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802f8b0:	b580      	push	{r7, lr}
 802f8b2:	b082      	sub	sp, #8
 802f8b4:	af00      	add	r7, sp, #0
 802f8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f8b8:	687b      	ldr	r3, [r7, #4]
 802f8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f8be:	2b03      	cmp	r3, #3
 802f8c0:	d10b      	bne.n	802f8da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 802f8c2:	687b      	ldr	r3, [r7, #4]
 802f8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f8c8:	69db      	ldr	r3, [r3, #28]
 802f8ca:	2b00      	cmp	r3, #0
 802f8cc:	d005      	beq.n	802f8da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 802f8ce:	687b      	ldr	r3, [r7, #4]
 802f8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f8d4:	69db      	ldr	r3, [r3, #28]
 802f8d6:	6878      	ldr	r0, [r7, #4]
 802f8d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f8da:	2300      	movs	r3, #0
}
 802f8dc:	4618      	mov	r0, r3
 802f8de:	3708      	adds	r7, #8
 802f8e0:	46bd      	mov	sp, r7
 802f8e2:	bd80      	pop	{r7, pc}

0802f8e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802f8e4:	b480      	push	{r7}
 802f8e6:	b083      	sub	sp, #12
 802f8e8:	af00      	add	r7, sp, #0
 802f8ea:	6078      	str	r0, [r7, #4]
 802f8ec:	460b      	mov	r3, r1
 802f8ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 802f8f0:	2300      	movs	r3, #0
}
 802f8f2:	4618      	mov	r0, r3
 802f8f4:	370c      	adds	r7, #12
 802f8f6:	46bd      	mov	sp, r7
 802f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8fc:	4770      	bx	lr

0802f8fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802f8fe:	b480      	push	{r7}
 802f900:	b083      	sub	sp, #12
 802f902:	af00      	add	r7, sp, #0
 802f904:	6078      	str	r0, [r7, #4]
 802f906:	460b      	mov	r3, r1
 802f908:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 802f90a:	2300      	movs	r3, #0
}
 802f90c:	4618      	mov	r0, r3
 802f90e:	370c      	adds	r7, #12
 802f910:	46bd      	mov	sp, r7
 802f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f916:	4770      	bx	lr

0802f918 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 802f918:	b480      	push	{r7}
 802f91a:	b083      	sub	sp, #12
 802f91c:	af00      	add	r7, sp, #0
 802f91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f920:	2300      	movs	r3, #0
}
 802f922:	4618      	mov	r0, r3
 802f924:	370c      	adds	r7, #12
 802f926:	46bd      	mov	sp, r7
 802f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f92c:	4770      	bx	lr

0802f92e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802f92e:	b580      	push	{r7, lr}
 802f930:	b082      	sub	sp, #8
 802f932:	af00      	add	r7, sp, #0
 802f934:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f936:	687b      	ldr	r3, [r7, #4]
 802f938:	2201      	movs	r2, #1
 802f93a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 802f93e:	687b      	ldr	r3, [r7, #4]
 802f940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f944:	2b00      	cmp	r3, #0
 802f946:	d009      	beq.n	802f95c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802f948:	687b      	ldr	r3, [r7, #4]
 802f94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f94e:	685b      	ldr	r3, [r3, #4]
 802f950:	687a      	ldr	r2, [r7, #4]
 802f952:	6852      	ldr	r2, [r2, #4]
 802f954:	b2d2      	uxtb	r2, r2
 802f956:	4611      	mov	r1, r2
 802f958:	6878      	ldr	r0, [r7, #4]
 802f95a:	4798      	blx	r3
  }

  return USBD_OK;
 802f95c:	2300      	movs	r3, #0
}
 802f95e:	4618      	mov	r0, r3
 802f960:	3708      	adds	r7, #8
 802f962:	46bd      	mov	sp, r7
 802f964:	bd80      	pop	{r7, pc}

0802f966 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802f966:	b480      	push	{r7}
 802f968:	b087      	sub	sp, #28
 802f96a:	af00      	add	r7, sp, #0
 802f96c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802f96e:	687b      	ldr	r3, [r7, #4]
 802f970:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802f972:	697b      	ldr	r3, [r7, #20]
 802f974:	781b      	ldrb	r3, [r3, #0]
 802f976:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802f978:	697b      	ldr	r3, [r7, #20]
 802f97a:	3301      	adds	r3, #1
 802f97c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802f97e:	697b      	ldr	r3, [r7, #20]
 802f980:	781b      	ldrb	r3, [r3, #0]
 802f982:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802f984:	8a3b      	ldrh	r3, [r7, #16]
 802f986:	021b      	lsls	r3, r3, #8
 802f988:	b21a      	sxth	r2, r3
 802f98a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802f98e:	4313      	orrs	r3, r2
 802f990:	b21b      	sxth	r3, r3
 802f992:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802f994:	89fb      	ldrh	r3, [r7, #14]
}
 802f996:	4618      	mov	r0, r3
 802f998:	371c      	adds	r7, #28
 802f99a:	46bd      	mov	sp, r7
 802f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9a0:	4770      	bx	lr
	...

0802f9a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f9a4:	b580      	push	{r7, lr}
 802f9a6:	b084      	sub	sp, #16
 802f9a8:	af00      	add	r7, sp, #0
 802f9aa:	6078      	str	r0, [r7, #4]
 802f9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f9ae:	2300      	movs	r3, #0
 802f9b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f9b2:	683b      	ldr	r3, [r7, #0]
 802f9b4:	781b      	ldrb	r3, [r3, #0]
 802f9b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f9ba:	2b20      	cmp	r3, #32
 802f9bc:	d004      	beq.n	802f9c8 <USBD_StdDevReq+0x24>
 802f9be:	2b40      	cmp	r3, #64	; 0x40
 802f9c0:	d002      	beq.n	802f9c8 <USBD_StdDevReq+0x24>
 802f9c2:	2b00      	cmp	r3, #0
 802f9c4:	d00a      	beq.n	802f9dc <USBD_StdDevReq+0x38>
 802f9c6:	e050      	b.n	802fa6a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802f9c8:	687b      	ldr	r3, [r7, #4]
 802f9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f9ce:	689b      	ldr	r3, [r3, #8]
 802f9d0:	6839      	ldr	r1, [r7, #0]
 802f9d2:	6878      	ldr	r0, [r7, #4]
 802f9d4:	4798      	blx	r3
 802f9d6:	4603      	mov	r3, r0
 802f9d8:	73fb      	strb	r3, [r7, #15]
    break;
 802f9da:	e04b      	b.n	802fa74 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 802f9dc:	683b      	ldr	r3, [r7, #0]
 802f9de:	785b      	ldrb	r3, [r3, #1]
 802f9e0:	2b09      	cmp	r3, #9
 802f9e2:	d83c      	bhi.n	802fa5e <USBD_StdDevReq+0xba>
 802f9e4:	a201      	add	r2, pc, #4	; (adr r2, 802f9ec <USBD_StdDevReq+0x48>)
 802f9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f9ea:	bf00      	nop
 802f9ec:	0802fa41 	.word	0x0802fa41
 802f9f0:	0802fa55 	.word	0x0802fa55
 802f9f4:	0802fa5f 	.word	0x0802fa5f
 802f9f8:	0802fa4b 	.word	0x0802fa4b
 802f9fc:	0802fa5f 	.word	0x0802fa5f
 802fa00:	0802fa1f 	.word	0x0802fa1f
 802fa04:	0802fa15 	.word	0x0802fa15
 802fa08:	0802fa5f 	.word	0x0802fa5f
 802fa0c:	0802fa37 	.word	0x0802fa37
 802fa10:	0802fa29 	.word	0x0802fa29
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 802fa14:	6839      	ldr	r1, [r7, #0]
 802fa16:	6878      	ldr	r0, [r7, #4]
 802fa18:	f000 f9ce 	bl	802fdb8 <USBD_GetDescriptor>
      break;
 802fa1c:	e024      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 802fa1e:	6839      	ldr	r1, [r7, #0]
 802fa20:	6878      	ldr	r0, [r7, #4]
 802fa22:	f000 fb33 	bl	803008c <USBD_SetAddress>
      break;
 802fa26:	e01f      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 802fa28:	6839      	ldr	r1, [r7, #0]
 802fa2a:	6878      	ldr	r0, [r7, #4]
 802fa2c:	f000 fb70 	bl	8030110 <USBD_SetConfig>
 802fa30:	4603      	mov	r3, r0
 802fa32:	73fb      	strb	r3, [r7, #15]
      break;
 802fa34:	e018      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 802fa36:	6839      	ldr	r1, [r7, #0]
 802fa38:	6878      	ldr	r0, [r7, #4]
 802fa3a:	f000 fc0d 	bl	8030258 <USBD_GetConfig>
      break;
 802fa3e:	e013      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 802fa40:	6839      	ldr	r1, [r7, #0]
 802fa42:	6878      	ldr	r0, [r7, #4]
 802fa44:	f000 fc3c 	bl	80302c0 <USBD_GetStatus>
      break;
 802fa48:	e00e      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 802fa4a:	6839      	ldr	r1, [r7, #0]
 802fa4c:	6878      	ldr	r0, [r7, #4]
 802fa4e:	f000 fc6a 	bl	8030326 <USBD_SetFeature>
      break;
 802fa52:	e009      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 802fa54:	6839      	ldr	r1, [r7, #0]
 802fa56:	6878      	ldr	r0, [r7, #4]
 802fa58:	f000 fc79 	bl	803034e <USBD_ClrFeature>
      break;
 802fa5c:	e004      	b.n	802fa68 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 802fa5e:	6839      	ldr	r1, [r7, #0]
 802fa60:	6878      	ldr	r0, [r7, #4]
 802fa62:	f000 fccf 	bl	8030404 <USBD_CtlError>
      break;
 802fa66:	bf00      	nop
    }
    break;
 802fa68:	e004      	b.n	802fa74 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 802fa6a:	6839      	ldr	r1, [r7, #0]
 802fa6c:	6878      	ldr	r0, [r7, #4]
 802fa6e:	f000 fcc9 	bl	8030404 <USBD_CtlError>
    break;
 802fa72:	bf00      	nop
  }

  return ret;
 802fa74:	7bfb      	ldrb	r3, [r7, #15]
}
 802fa76:	4618      	mov	r0, r3
 802fa78:	3710      	adds	r7, #16
 802fa7a:	46bd      	mov	sp, r7
 802fa7c:	bd80      	pop	{r7, pc}
 802fa7e:	bf00      	nop

0802fa80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fa80:	b580      	push	{r7, lr}
 802fa82:	b084      	sub	sp, #16
 802fa84:	af00      	add	r7, sp, #0
 802fa86:	6078      	str	r0, [r7, #4]
 802fa88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802fa8a:	2300      	movs	r3, #0
 802fa8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802fa8e:	683b      	ldr	r3, [r7, #0]
 802fa90:	781b      	ldrb	r3, [r3, #0]
 802fa92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802fa96:	2b20      	cmp	r3, #32
 802fa98:	d003      	beq.n	802faa2 <USBD_StdItfReq+0x22>
 802fa9a:	2b40      	cmp	r3, #64	; 0x40
 802fa9c:	d001      	beq.n	802faa2 <USBD_StdItfReq+0x22>
 802fa9e:	2b00      	cmp	r3, #0
 802faa0:	d12a      	bne.n	802faf8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 802faa2:	687b      	ldr	r3, [r7, #4]
 802faa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802faa8:	3b01      	subs	r3, #1
 802faaa:	2b02      	cmp	r3, #2
 802faac:	d81d      	bhi.n	802faea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802faae:	683b      	ldr	r3, [r7, #0]
 802fab0:	889b      	ldrh	r3, [r3, #4]
 802fab2:	b2db      	uxtb	r3, r3
 802fab4:	2b01      	cmp	r3, #1
 802fab6:	d813      	bhi.n	802fae0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802fab8:	687b      	ldr	r3, [r7, #4]
 802faba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fabe:	689b      	ldr	r3, [r3, #8]
 802fac0:	6839      	ldr	r1, [r7, #0]
 802fac2:	6878      	ldr	r0, [r7, #4]
 802fac4:	4798      	blx	r3
 802fac6:	4603      	mov	r3, r0
 802fac8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 802faca:	683b      	ldr	r3, [r7, #0]
 802facc:	88db      	ldrh	r3, [r3, #6]
 802face:	2b00      	cmp	r3, #0
 802fad0:	d110      	bne.n	802faf4 <USBD_StdItfReq+0x74>
 802fad2:	7bfb      	ldrb	r3, [r7, #15]
 802fad4:	2b00      	cmp	r3, #0
 802fad6:	d10d      	bne.n	802faf4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 802fad8:	6878      	ldr	r0, [r7, #4]
 802fada:	f000 fd5e 	bl	803059a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 802fade:	e009      	b.n	802faf4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 802fae0:	6839      	ldr	r1, [r7, #0]
 802fae2:	6878      	ldr	r0, [r7, #4]
 802fae4:	f000 fc8e 	bl	8030404 <USBD_CtlError>
      break;
 802fae8:	e004      	b.n	802faf4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 802faea:	6839      	ldr	r1, [r7, #0]
 802faec:	6878      	ldr	r0, [r7, #4]
 802faee:	f000 fc89 	bl	8030404 <USBD_CtlError>
      break;
 802faf2:	e000      	b.n	802faf6 <USBD_StdItfReq+0x76>
      break;
 802faf4:	bf00      	nop
    }
    break;
 802faf6:	e004      	b.n	802fb02 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 802faf8:	6839      	ldr	r1, [r7, #0]
 802fafa:	6878      	ldr	r0, [r7, #4]
 802fafc:	f000 fc82 	bl	8030404 <USBD_CtlError>
    break;
 802fb00:	bf00      	nop
  }

  return ret;
 802fb02:	7bfb      	ldrb	r3, [r7, #15]
}
 802fb04:	4618      	mov	r0, r3
 802fb06:	3710      	adds	r7, #16
 802fb08:	46bd      	mov	sp, r7
 802fb0a:	bd80      	pop	{r7, pc}

0802fb0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fb0c:	b580      	push	{r7, lr}
 802fb0e:	b084      	sub	sp, #16
 802fb10:	af00      	add	r7, sp, #0
 802fb12:	6078      	str	r0, [r7, #4]
 802fb14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 802fb16:	2300      	movs	r3, #0
 802fb18:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 802fb1a:	683b      	ldr	r3, [r7, #0]
 802fb1c:	889b      	ldrh	r3, [r3, #4]
 802fb1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802fb20:	683b      	ldr	r3, [r7, #0]
 802fb22:	781b      	ldrb	r3, [r3, #0]
 802fb24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802fb28:	2b20      	cmp	r3, #32
 802fb2a:	d004      	beq.n	802fb36 <USBD_StdEPReq+0x2a>
 802fb2c:	2b40      	cmp	r3, #64	; 0x40
 802fb2e:	d002      	beq.n	802fb36 <USBD_StdEPReq+0x2a>
 802fb30:	2b00      	cmp	r3, #0
 802fb32:	d00a      	beq.n	802fb4a <USBD_StdEPReq+0x3e>
 802fb34:	e135      	b.n	802fda2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802fb36:	687b      	ldr	r3, [r7, #4]
 802fb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fb3c:	689b      	ldr	r3, [r3, #8]
 802fb3e:	6839      	ldr	r1, [r7, #0]
 802fb40:	6878      	ldr	r0, [r7, #4]
 802fb42:	4798      	blx	r3
 802fb44:	4603      	mov	r3, r0
 802fb46:	73fb      	strb	r3, [r7, #15]
    break;
 802fb48:	e130      	b.n	802fdac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 802fb4a:	683b      	ldr	r3, [r7, #0]
 802fb4c:	785b      	ldrb	r3, [r3, #1]
 802fb4e:	2b01      	cmp	r3, #1
 802fb50:	d03e      	beq.n	802fbd0 <USBD_StdEPReq+0xc4>
 802fb52:	2b03      	cmp	r3, #3
 802fb54:	d002      	beq.n	802fb5c <USBD_StdEPReq+0x50>
 802fb56:	2b00      	cmp	r3, #0
 802fb58:	d077      	beq.n	802fc4a <USBD_StdEPReq+0x13e>
 802fb5a:	e11c      	b.n	802fd96 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 802fb5c:	687b      	ldr	r3, [r7, #4]
 802fb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb62:	2b02      	cmp	r3, #2
 802fb64:	d002      	beq.n	802fb6c <USBD_StdEPReq+0x60>
 802fb66:	2b03      	cmp	r3, #3
 802fb68:	d015      	beq.n	802fb96 <USBD_StdEPReq+0x8a>
 802fb6a:	e02b      	b.n	802fbc4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fb6c:	7bbb      	ldrb	r3, [r7, #14]
 802fb6e:	2b00      	cmp	r3, #0
 802fb70:	d00c      	beq.n	802fb8c <USBD_StdEPReq+0x80>
 802fb72:	7bbb      	ldrb	r3, [r7, #14]
 802fb74:	2b80      	cmp	r3, #128	; 0x80
 802fb76:	d009      	beq.n	802fb8c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 802fb78:	7bbb      	ldrb	r3, [r7, #14]
 802fb7a:	4619      	mov	r1, r3
 802fb7c:	6878      	ldr	r0, [r7, #4]
 802fb7e:	f004 fbe3 	bl	8034348 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802fb82:	2180      	movs	r1, #128	; 0x80
 802fb84:	6878      	ldr	r0, [r7, #4]
 802fb86:	f004 fbdf 	bl	8034348 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 802fb8a:	e020      	b.n	802fbce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 802fb8c:	6839      	ldr	r1, [r7, #0]
 802fb8e:	6878      	ldr	r0, [r7, #4]
 802fb90:	f000 fc38 	bl	8030404 <USBD_CtlError>
        break;
 802fb94:	e01b      	b.n	802fbce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 802fb96:	683b      	ldr	r3, [r7, #0]
 802fb98:	885b      	ldrh	r3, [r3, #2]
 802fb9a:	2b00      	cmp	r3, #0
 802fb9c:	d10e      	bne.n	802fbbc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802fb9e:	7bbb      	ldrb	r3, [r7, #14]
 802fba0:	2b00      	cmp	r3, #0
 802fba2:	d00b      	beq.n	802fbbc <USBD_StdEPReq+0xb0>
 802fba4:	7bbb      	ldrb	r3, [r7, #14]
 802fba6:	2b80      	cmp	r3, #128	; 0x80
 802fba8:	d008      	beq.n	802fbbc <USBD_StdEPReq+0xb0>
 802fbaa:	683b      	ldr	r3, [r7, #0]
 802fbac:	88db      	ldrh	r3, [r3, #6]
 802fbae:	2b00      	cmp	r3, #0
 802fbb0:	d104      	bne.n	802fbbc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 802fbb2:	7bbb      	ldrb	r3, [r7, #14]
 802fbb4:	4619      	mov	r1, r3
 802fbb6:	6878      	ldr	r0, [r7, #4]
 802fbb8:	f004 fbc6 	bl	8034348 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 802fbbc:	6878      	ldr	r0, [r7, #4]
 802fbbe:	f000 fcec 	bl	803059a <USBD_CtlSendStatus>

        break;
 802fbc2:	e004      	b.n	802fbce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 802fbc4:	6839      	ldr	r1, [r7, #0]
 802fbc6:	6878      	ldr	r0, [r7, #4]
 802fbc8:	f000 fc1c 	bl	8030404 <USBD_CtlError>
        break;
 802fbcc:	bf00      	nop
      }
      break;
 802fbce:	e0e7      	b.n	802fda0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 802fbd0:	687b      	ldr	r3, [r7, #4]
 802fbd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fbd6:	2b02      	cmp	r3, #2
 802fbd8:	d002      	beq.n	802fbe0 <USBD_StdEPReq+0xd4>
 802fbda:	2b03      	cmp	r3, #3
 802fbdc:	d015      	beq.n	802fc0a <USBD_StdEPReq+0xfe>
 802fbde:	e02d      	b.n	802fc3c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fbe0:	7bbb      	ldrb	r3, [r7, #14]
 802fbe2:	2b00      	cmp	r3, #0
 802fbe4:	d00c      	beq.n	802fc00 <USBD_StdEPReq+0xf4>
 802fbe6:	7bbb      	ldrb	r3, [r7, #14]
 802fbe8:	2b80      	cmp	r3, #128	; 0x80
 802fbea:	d009      	beq.n	802fc00 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 802fbec:	7bbb      	ldrb	r3, [r7, #14]
 802fbee:	4619      	mov	r1, r3
 802fbf0:	6878      	ldr	r0, [r7, #4]
 802fbf2:	f004 fba9 	bl	8034348 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802fbf6:	2180      	movs	r1, #128	; 0x80
 802fbf8:	6878      	ldr	r0, [r7, #4]
 802fbfa:	f004 fba5 	bl	8034348 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 802fbfe:	e023      	b.n	802fc48 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 802fc00:	6839      	ldr	r1, [r7, #0]
 802fc02:	6878      	ldr	r0, [r7, #4]
 802fc04:	f000 fbfe 	bl	8030404 <USBD_CtlError>
        break;
 802fc08:	e01e      	b.n	802fc48 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 802fc0a:	683b      	ldr	r3, [r7, #0]
 802fc0c:	885b      	ldrh	r3, [r3, #2]
 802fc0e:	2b00      	cmp	r3, #0
 802fc10:	d119      	bne.n	802fc46 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 802fc12:	7bbb      	ldrb	r3, [r7, #14]
 802fc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802fc18:	2b00      	cmp	r3, #0
 802fc1a:	d004      	beq.n	802fc26 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802fc1c:	7bbb      	ldrb	r3, [r7, #14]
 802fc1e:	4619      	mov	r1, r3
 802fc20:	6878      	ldr	r0, [r7, #4]
 802fc22:	f004 fbb0 	bl	8034386 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 802fc26:	6878      	ldr	r0, [r7, #4]
 802fc28:	f000 fcb7 	bl	803059a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802fc2c:	687b      	ldr	r3, [r7, #4]
 802fc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fc32:	689b      	ldr	r3, [r3, #8]
 802fc34:	6839      	ldr	r1, [r7, #0]
 802fc36:	6878      	ldr	r0, [r7, #4]
 802fc38:	4798      	blx	r3
        }
        break;
 802fc3a:	e004      	b.n	802fc46 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 802fc3c:	6839      	ldr	r1, [r7, #0]
 802fc3e:	6878      	ldr	r0, [r7, #4]
 802fc40:	f000 fbe0 	bl	8030404 <USBD_CtlError>
        break;
 802fc44:	e000      	b.n	802fc48 <USBD_StdEPReq+0x13c>
        break;
 802fc46:	bf00      	nop
      }
      break;
 802fc48:	e0aa      	b.n	802fda0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 802fc4a:	687b      	ldr	r3, [r7, #4]
 802fc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc50:	2b02      	cmp	r3, #2
 802fc52:	d002      	beq.n	802fc5a <USBD_StdEPReq+0x14e>
 802fc54:	2b03      	cmp	r3, #3
 802fc56:	d032      	beq.n	802fcbe <USBD_StdEPReq+0x1b2>
 802fc58:	e097      	b.n	802fd8a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fc5a:	7bbb      	ldrb	r3, [r7, #14]
 802fc5c:	2b00      	cmp	r3, #0
 802fc5e:	d007      	beq.n	802fc70 <USBD_StdEPReq+0x164>
 802fc60:	7bbb      	ldrb	r3, [r7, #14]
 802fc62:	2b80      	cmp	r3, #128	; 0x80
 802fc64:	d004      	beq.n	802fc70 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 802fc66:	6839      	ldr	r1, [r7, #0]
 802fc68:	6878      	ldr	r0, [r7, #4]
 802fc6a:	f000 fbcb 	bl	8030404 <USBD_CtlError>
          break;
 802fc6e:	e091      	b.n	802fd94 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fc70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fc74:	2b00      	cmp	r3, #0
 802fc76:	da0b      	bge.n	802fc90 <USBD_StdEPReq+0x184>
 802fc78:	7bbb      	ldrb	r3, [r7, #14]
 802fc7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fc7e:	4613      	mov	r3, r2
 802fc80:	009b      	lsls	r3, r3, #2
 802fc82:	4413      	add	r3, r2
 802fc84:	009b      	lsls	r3, r3, #2
 802fc86:	3310      	adds	r3, #16
 802fc88:	687a      	ldr	r2, [r7, #4]
 802fc8a:	4413      	add	r3, r2
 802fc8c:	3304      	adds	r3, #4
 802fc8e:	e00b      	b.n	802fca8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 802fc90:	7bbb      	ldrb	r3, [r7, #14]
 802fc92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fc96:	4613      	mov	r3, r2
 802fc98:	009b      	lsls	r3, r3, #2
 802fc9a:	4413      	add	r3, r2
 802fc9c:	009b      	lsls	r3, r3, #2
 802fc9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fca2:	687a      	ldr	r2, [r7, #4]
 802fca4:	4413      	add	r3, r2
 802fca6:	3304      	adds	r3, #4
 802fca8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 802fcaa:	68bb      	ldr	r3, [r7, #8]
 802fcac:	2200      	movs	r2, #0
 802fcae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fcb0:	68bb      	ldr	r3, [r7, #8]
 802fcb2:	2202      	movs	r2, #2
 802fcb4:	4619      	mov	r1, r3
 802fcb6:	6878      	ldr	r0, [r7, #4]
 802fcb8:	f000 fc15 	bl	80304e6 <USBD_CtlSendData>
        break;
 802fcbc:	e06a      	b.n	802fd94 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 802fcbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fcc2:	2b00      	cmp	r3, #0
 802fcc4:	da11      	bge.n	802fcea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802fcc6:	7bbb      	ldrb	r3, [r7, #14]
 802fcc8:	f003 020f 	and.w	r2, r3, #15
 802fccc:	6879      	ldr	r1, [r7, #4]
 802fcce:	4613      	mov	r3, r2
 802fcd0:	009b      	lsls	r3, r3, #2
 802fcd2:	4413      	add	r3, r2
 802fcd4:	009b      	lsls	r3, r3, #2
 802fcd6:	440b      	add	r3, r1
 802fcd8:	3324      	adds	r3, #36	; 0x24
 802fcda:	881b      	ldrh	r3, [r3, #0]
 802fcdc:	2b00      	cmp	r3, #0
 802fcde:	d117      	bne.n	802fd10 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 802fce0:	6839      	ldr	r1, [r7, #0]
 802fce2:	6878      	ldr	r0, [r7, #4]
 802fce4:	f000 fb8e 	bl	8030404 <USBD_CtlError>
            break;
 802fce8:	e054      	b.n	802fd94 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802fcea:	7bbb      	ldrb	r3, [r7, #14]
 802fcec:	f003 020f 	and.w	r2, r3, #15
 802fcf0:	6879      	ldr	r1, [r7, #4]
 802fcf2:	4613      	mov	r3, r2
 802fcf4:	009b      	lsls	r3, r3, #2
 802fcf6:	4413      	add	r3, r2
 802fcf8:	009b      	lsls	r3, r3, #2
 802fcfa:	440b      	add	r3, r1
 802fcfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802fd00:	881b      	ldrh	r3, [r3, #0]
 802fd02:	2b00      	cmp	r3, #0
 802fd04:	d104      	bne.n	802fd10 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 802fd06:	6839      	ldr	r1, [r7, #0]
 802fd08:	6878      	ldr	r0, [r7, #4]
 802fd0a:	f000 fb7b 	bl	8030404 <USBD_CtlError>
            break;
 802fd0e:	e041      	b.n	802fd94 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fd14:	2b00      	cmp	r3, #0
 802fd16:	da0b      	bge.n	802fd30 <USBD_StdEPReq+0x224>
 802fd18:	7bbb      	ldrb	r3, [r7, #14]
 802fd1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fd1e:	4613      	mov	r3, r2
 802fd20:	009b      	lsls	r3, r3, #2
 802fd22:	4413      	add	r3, r2
 802fd24:	009b      	lsls	r3, r3, #2
 802fd26:	3310      	adds	r3, #16
 802fd28:	687a      	ldr	r2, [r7, #4]
 802fd2a:	4413      	add	r3, r2
 802fd2c:	3304      	adds	r3, #4
 802fd2e:	e00b      	b.n	802fd48 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 802fd30:	7bbb      	ldrb	r3, [r7, #14]
 802fd32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd36:	4613      	mov	r3, r2
 802fd38:	009b      	lsls	r3, r3, #2
 802fd3a:	4413      	add	r3, r2
 802fd3c:	009b      	lsls	r3, r3, #2
 802fd3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fd42:	687a      	ldr	r2, [r7, #4]
 802fd44:	4413      	add	r3, r2
 802fd46:	3304      	adds	r3, #4
 802fd48:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802fd4a:	7bbb      	ldrb	r3, [r7, #14]
 802fd4c:	2b00      	cmp	r3, #0
 802fd4e:	d002      	beq.n	802fd56 <USBD_StdEPReq+0x24a>
 802fd50:	7bbb      	ldrb	r3, [r7, #14]
 802fd52:	2b80      	cmp	r3, #128	; 0x80
 802fd54:	d103      	bne.n	802fd5e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 802fd56:	68bb      	ldr	r3, [r7, #8]
 802fd58:	2200      	movs	r2, #0
 802fd5a:	601a      	str	r2, [r3, #0]
 802fd5c:	e00e      	b.n	802fd7c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802fd5e:	7bbb      	ldrb	r3, [r7, #14]
 802fd60:	4619      	mov	r1, r3
 802fd62:	6878      	ldr	r0, [r7, #4]
 802fd64:	f004 fb2e 	bl	80343c4 <USBD_LL_IsStallEP>
 802fd68:	4603      	mov	r3, r0
 802fd6a:	2b00      	cmp	r3, #0
 802fd6c:	d003      	beq.n	802fd76 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 802fd6e:	68bb      	ldr	r3, [r7, #8]
 802fd70:	2201      	movs	r2, #1
 802fd72:	601a      	str	r2, [r3, #0]
 802fd74:	e002      	b.n	802fd7c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 802fd76:	68bb      	ldr	r3, [r7, #8]
 802fd78:	2200      	movs	r2, #0
 802fd7a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fd7c:	68bb      	ldr	r3, [r7, #8]
 802fd7e:	2202      	movs	r2, #2
 802fd80:	4619      	mov	r1, r3
 802fd82:	6878      	ldr	r0, [r7, #4]
 802fd84:	f000 fbaf 	bl	80304e6 <USBD_CtlSendData>
          break;
 802fd88:	e004      	b.n	802fd94 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 802fd8a:	6839      	ldr	r1, [r7, #0]
 802fd8c:	6878      	ldr	r0, [r7, #4]
 802fd8e:	f000 fb39 	bl	8030404 <USBD_CtlError>
        break;
 802fd92:	bf00      	nop
      }
      break;
 802fd94:	e004      	b.n	802fda0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 802fd96:	6839      	ldr	r1, [r7, #0]
 802fd98:	6878      	ldr	r0, [r7, #4]
 802fd9a:	f000 fb33 	bl	8030404 <USBD_CtlError>
      break;
 802fd9e:	bf00      	nop
    }
    break;
 802fda0:	e004      	b.n	802fdac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 802fda2:	6839      	ldr	r1, [r7, #0]
 802fda4:	6878      	ldr	r0, [r7, #4]
 802fda6:	f000 fb2d 	bl	8030404 <USBD_CtlError>
    break;
 802fdaa:	bf00      	nop
  }

  return ret;
 802fdac:	7bfb      	ldrb	r3, [r7, #15]
}
 802fdae:	4618      	mov	r0, r3
 802fdb0:	3710      	adds	r7, #16
 802fdb2:	46bd      	mov	sp, r7
 802fdb4:	bd80      	pop	{r7, pc}
	...

0802fdb8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fdb8:	b580      	push	{r7, lr}
 802fdba:	b084      	sub	sp, #16
 802fdbc:	af00      	add	r7, sp, #0
 802fdbe:	6078      	str	r0, [r7, #4]
 802fdc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802fdc2:	2300      	movs	r3, #0
 802fdc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802fdc6:	2300      	movs	r3, #0
 802fdc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802fdca:	2300      	movs	r3, #0
 802fdcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802fdce:	683b      	ldr	r3, [r7, #0]
 802fdd0:	885b      	ldrh	r3, [r3, #2]
 802fdd2:	0a1b      	lsrs	r3, r3, #8
 802fdd4:	b29b      	uxth	r3, r3
 802fdd6:	3b01      	subs	r3, #1
 802fdd8:	2b06      	cmp	r3, #6
 802fdda:	f200 8128 	bhi.w	803002e <USBD_GetDescriptor+0x276>
 802fdde:	a201      	add	r2, pc, #4	; (adr r2, 802fde4 <USBD_GetDescriptor+0x2c>)
 802fde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fde4:	0802fe01 	.word	0x0802fe01
 802fde8:	0802fe19 	.word	0x0802fe19
 802fdec:	0802fe59 	.word	0x0802fe59
 802fdf0:	0803002f 	.word	0x0803002f
 802fdf4:	0803002f 	.word	0x0803002f
 802fdf8:	0802ffcf 	.word	0x0802ffcf
 802fdfc:	0802fffb 	.word	0x0802fffb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802fe00:	687b      	ldr	r3, [r7, #4]
 802fe02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe06:	681b      	ldr	r3, [r3, #0]
 802fe08:	687a      	ldr	r2, [r7, #4]
 802fe0a:	7c12      	ldrb	r2, [r2, #16]
 802fe0c:	f107 0108 	add.w	r1, r7, #8
 802fe10:	4610      	mov	r0, r2
 802fe12:	4798      	blx	r3
 802fe14:	60f8      	str	r0, [r7, #12]
    break;
 802fe16:	e112      	b.n	803003e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802fe18:	687b      	ldr	r3, [r7, #4]
 802fe1a:	7c1b      	ldrb	r3, [r3, #16]
 802fe1c:	2b00      	cmp	r3, #0
 802fe1e:	d10d      	bne.n	802fe3c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802fe20:	687b      	ldr	r3, [r7, #4]
 802fe22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fe28:	f107 0208 	add.w	r2, r7, #8
 802fe2c:	4610      	mov	r0, r2
 802fe2e:	4798      	blx	r3
 802fe30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe32:	68fb      	ldr	r3, [r7, #12]
 802fe34:	3301      	adds	r3, #1
 802fe36:	2202      	movs	r2, #2
 802fe38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 802fe3a:	e100      	b.n	803003e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802fe3c:	687b      	ldr	r3, [r7, #4]
 802fe3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fe44:	f107 0208 	add.w	r2, r7, #8
 802fe48:	4610      	mov	r0, r2
 802fe4a:	4798      	blx	r3
 802fe4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe4e:	68fb      	ldr	r3, [r7, #12]
 802fe50:	3301      	adds	r3, #1
 802fe52:	2202      	movs	r2, #2
 802fe54:	701a      	strb	r2, [r3, #0]
    break;
 802fe56:	e0f2      	b.n	803003e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 802fe58:	683b      	ldr	r3, [r7, #0]
 802fe5a:	885b      	ldrh	r3, [r3, #2]
 802fe5c:	b2db      	uxtb	r3, r3
 802fe5e:	2b05      	cmp	r3, #5
 802fe60:	f200 80ac 	bhi.w	802ffbc <USBD_GetDescriptor+0x204>
 802fe64:	a201      	add	r2, pc, #4	; (adr r2, 802fe6c <USBD_GetDescriptor+0xb4>)
 802fe66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe6a:	bf00      	nop
 802fe6c:	0802fe85 	.word	0x0802fe85
 802fe70:	0802feb9 	.word	0x0802feb9
 802fe74:	0802feed 	.word	0x0802feed
 802fe78:	0802ff21 	.word	0x0802ff21
 802fe7c:	0802ff55 	.word	0x0802ff55
 802fe80:	0802ff89 	.word	0x0802ff89
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802fe84:	687b      	ldr	r3, [r7, #4]
 802fe86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe8a:	685b      	ldr	r3, [r3, #4]
 802fe8c:	2b00      	cmp	r3, #0
 802fe8e:	d00b      	beq.n	802fea8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802fe90:	687b      	ldr	r3, [r7, #4]
 802fe92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe96:	685b      	ldr	r3, [r3, #4]
 802fe98:	687a      	ldr	r2, [r7, #4]
 802fe9a:	7c12      	ldrb	r2, [r2, #16]
 802fe9c:	f107 0108 	add.w	r1, r7, #8
 802fea0:	4610      	mov	r0, r2
 802fea2:	4798      	blx	r3
 802fea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802fea6:	e091      	b.n	802ffcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 802fea8:	6839      	ldr	r1, [r7, #0]
 802feaa:	6878      	ldr	r0, [r7, #4]
 802feac:	f000 faaa 	bl	8030404 <USBD_CtlError>
        err++;
 802feb0:	7afb      	ldrb	r3, [r7, #11]
 802feb2:	3301      	adds	r3, #1
 802feb4:	72fb      	strb	r3, [r7, #11]
      break;
 802feb6:	e089      	b.n	802ffcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802feb8:	687b      	ldr	r3, [r7, #4]
 802feba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802febe:	689b      	ldr	r3, [r3, #8]
 802fec0:	2b00      	cmp	r3, #0
 802fec2:	d00b      	beq.n	802fedc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802fec4:	687b      	ldr	r3, [r7, #4]
 802fec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802feca:	689b      	ldr	r3, [r3, #8]
 802fecc:	687a      	ldr	r2, [r7, #4]
 802fece:	7c12      	ldrb	r2, [r2, #16]
 802fed0:	f107 0108 	add.w	r1, r7, #8
 802fed4:	4610      	mov	r0, r2
 802fed6:	4798      	blx	r3
 802fed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802feda:	e077      	b.n	802ffcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 802fedc:	6839      	ldr	r1, [r7, #0]
 802fede:	6878      	ldr	r0, [r7, #4]
 802fee0:	f000 fa90 	bl	8030404 <USBD_CtlError>
        err++;
 802fee4:	7afb      	ldrb	r3, [r7, #11]
 802fee6:	3301      	adds	r3, #1
 802fee8:	72fb      	strb	r3, [r7, #11]
      break;
 802feea:	e06f      	b.n	802ffcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802feec:	687b      	ldr	r3, [r7, #4]
 802feee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fef2:	68db      	ldr	r3, [r3, #12]
 802fef4:	2b00      	cmp	r3, #0
 802fef6:	d00b      	beq.n	802ff10 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802fef8:	687b      	ldr	r3, [r7, #4]
 802fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fefe:	68db      	ldr	r3, [r3, #12]
 802ff00:	687a      	ldr	r2, [r7, #4]
 802ff02:	7c12      	ldrb	r2, [r2, #16]
 802ff04:	f107 0108 	add.w	r1, r7, #8
 802ff08:	4610      	mov	r0, r2
 802ff0a:	4798      	blx	r3
 802ff0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802ff0e:	e05d      	b.n	802ffcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 802ff10:	6839      	ldr	r1, [r7, #0]
 802ff12:	6878      	ldr	r0, [r7, #4]
 802ff14:	f000 fa76 	bl	8030404 <USBD_CtlError>
        err++;
 802ff18:	7afb      	ldrb	r3, [r7, #11]
 802ff1a:	3301      	adds	r3, #1
 802ff1c:	72fb      	strb	r3, [r7, #11]
      break;
 802ff1e:	e055      	b.n	802ffcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802ff20:	687b      	ldr	r3, [r7, #4]
 802ff22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff26:	691b      	ldr	r3, [r3, #16]
 802ff28:	2b00      	cmp	r3, #0
 802ff2a:	d00b      	beq.n	802ff44 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802ff2c:	687b      	ldr	r3, [r7, #4]
 802ff2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff32:	691b      	ldr	r3, [r3, #16]
 802ff34:	687a      	ldr	r2, [r7, #4]
 802ff36:	7c12      	ldrb	r2, [r2, #16]
 802ff38:	f107 0108 	add.w	r1, r7, #8
 802ff3c:	4610      	mov	r0, r2
 802ff3e:	4798      	blx	r3
 802ff40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802ff42:	e043      	b.n	802ffcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 802ff44:	6839      	ldr	r1, [r7, #0]
 802ff46:	6878      	ldr	r0, [r7, #4]
 802ff48:	f000 fa5c 	bl	8030404 <USBD_CtlError>
        err++;
 802ff4c:	7afb      	ldrb	r3, [r7, #11]
 802ff4e:	3301      	adds	r3, #1
 802ff50:	72fb      	strb	r3, [r7, #11]
      break;
 802ff52:	e03b      	b.n	802ffcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802ff54:	687b      	ldr	r3, [r7, #4]
 802ff56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff5a:	695b      	ldr	r3, [r3, #20]
 802ff5c:	2b00      	cmp	r3, #0
 802ff5e:	d00b      	beq.n	802ff78 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802ff60:	687b      	ldr	r3, [r7, #4]
 802ff62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff66:	695b      	ldr	r3, [r3, #20]
 802ff68:	687a      	ldr	r2, [r7, #4]
 802ff6a:	7c12      	ldrb	r2, [r2, #16]
 802ff6c:	f107 0108 	add.w	r1, r7, #8
 802ff70:	4610      	mov	r0, r2
 802ff72:	4798      	blx	r3
 802ff74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802ff76:	e029      	b.n	802ffcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 802ff78:	6839      	ldr	r1, [r7, #0]
 802ff7a:	6878      	ldr	r0, [r7, #4]
 802ff7c:	f000 fa42 	bl	8030404 <USBD_CtlError>
        err++;
 802ff80:	7afb      	ldrb	r3, [r7, #11]
 802ff82:	3301      	adds	r3, #1
 802ff84:	72fb      	strb	r3, [r7, #11]
      break;
 802ff86:	e021      	b.n	802ffcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802ff88:	687b      	ldr	r3, [r7, #4]
 802ff8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff8e:	699b      	ldr	r3, [r3, #24]
 802ff90:	2b00      	cmp	r3, #0
 802ff92:	d00b      	beq.n	802ffac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802ff94:	687b      	ldr	r3, [r7, #4]
 802ff96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff9a:	699b      	ldr	r3, [r3, #24]
 802ff9c:	687a      	ldr	r2, [r7, #4]
 802ff9e:	7c12      	ldrb	r2, [r2, #16]
 802ffa0:	f107 0108 	add.w	r1, r7, #8
 802ffa4:	4610      	mov	r0, r2
 802ffa6:	4798      	blx	r3
 802ffa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802ffaa:	e00f      	b.n	802ffcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 802ffac:	6839      	ldr	r1, [r7, #0]
 802ffae:	6878      	ldr	r0, [r7, #4]
 802ffb0:	f000 fa28 	bl	8030404 <USBD_CtlError>
        err++;
 802ffb4:	7afb      	ldrb	r3, [r7, #11]
 802ffb6:	3301      	adds	r3, #1
 802ffb8:	72fb      	strb	r3, [r7, #11]
      break;
 802ffba:	e007      	b.n	802ffcc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 802ffbc:	6839      	ldr	r1, [r7, #0]
 802ffbe:	6878      	ldr	r0, [r7, #4]
 802ffc0:	f000 fa20 	bl	8030404 <USBD_CtlError>
      err++;
 802ffc4:	7afb      	ldrb	r3, [r7, #11]
 802ffc6:	3301      	adds	r3, #1
 802ffc8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 802ffca:	bf00      	nop
    }
    break;
 802ffcc:	e037      	b.n	803003e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ffce:	687b      	ldr	r3, [r7, #4]
 802ffd0:	7c1b      	ldrb	r3, [r3, #16]
 802ffd2:	2b00      	cmp	r3, #0
 802ffd4:	d109      	bne.n	802ffea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 802ffd6:	687b      	ldr	r3, [r7, #4]
 802ffd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ffdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ffde:	f107 0208 	add.w	r2, r7, #8
 802ffe2:	4610      	mov	r0, r2
 802ffe4:	4798      	blx	r3
 802ffe6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 802ffe8:	e029      	b.n	803003e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 802ffea:	6839      	ldr	r1, [r7, #0]
 802ffec:	6878      	ldr	r0, [r7, #4]
 802ffee:	f000 fa09 	bl	8030404 <USBD_CtlError>
      err++;
 802fff2:	7afb      	ldrb	r3, [r7, #11]
 802fff4:	3301      	adds	r3, #1
 802fff6:	72fb      	strb	r3, [r7, #11]
    break;
 802fff8:	e021      	b.n	803003e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802fffa:	687b      	ldr	r3, [r7, #4]
 802fffc:	7c1b      	ldrb	r3, [r3, #16]
 802fffe:	2b00      	cmp	r3, #0
 8030000:	d10d      	bne.n	803001e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8030002:	687b      	ldr	r3, [r7, #4]
 8030004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8030008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803000a:	f107 0208 	add.w	r2, r7, #8
 803000e:	4610      	mov	r0, r2
 8030010:	4798      	blx	r3
 8030012:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8030014:	68fb      	ldr	r3, [r7, #12]
 8030016:	3301      	adds	r3, #1
 8030018:	2207      	movs	r2, #7
 803001a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 803001c:	e00f      	b.n	803003e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 803001e:	6839      	ldr	r1, [r7, #0]
 8030020:	6878      	ldr	r0, [r7, #4]
 8030022:	f000 f9ef 	bl	8030404 <USBD_CtlError>
      err++;
 8030026:	7afb      	ldrb	r3, [r7, #11]
 8030028:	3301      	adds	r3, #1
 803002a:	72fb      	strb	r3, [r7, #11]
    break;
 803002c:	e007      	b.n	803003e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 803002e:	6839      	ldr	r1, [r7, #0]
 8030030:	6878      	ldr	r0, [r7, #4]
 8030032:	f000 f9e7 	bl	8030404 <USBD_CtlError>
    err++;
 8030036:	7afb      	ldrb	r3, [r7, #11]
 8030038:	3301      	adds	r3, #1
 803003a:	72fb      	strb	r3, [r7, #11]
    break;
 803003c:	bf00      	nop
  }

  if (err != 0U)
 803003e:	7afb      	ldrb	r3, [r7, #11]
 8030040:	2b00      	cmp	r3, #0
 8030042:	d11e      	bne.n	8030082 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8030044:	683b      	ldr	r3, [r7, #0]
 8030046:	88db      	ldrh	r3, [r3, #6]
 8030048:	2b00      	cmp	r3, #0
 803004a:	d016      	beq.n	803007a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 803004c:	893b      	ldrh	r3, [r7, #8]
 803004e:	2b00      	cmp	r3, #0
 8030050:	d00e      	beq.n	8030070 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8030052:	683b      	ldr	r3, [r7, #0]
 8030054:	88da      	ldrh	r2, [r3, #6]
 8030056:	893b      	ldrh	r3, [r7, #8]
 8030058:	4293      	cmp	r3, r2
 803005a:	bf28      	it	cs
 803005c:	4613      	movcs	r3, r2
 803005e:	b29b      	uxth	r3, r3
 8030060:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8030062:	893b      	ldrh	r3, [r7, #8]
 8030064:	461a      	mov	r2, r3
 8030066:	68f9      	ldr	r1, [r7, #12]
 8030068:	6878      	ldr	r0, [r7, #4]
 803006a:	f000 fa3c 	bl	80304e6 <USBD_CtlSendData>
 803006e:	e009      	b.n	8030084 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8030070:	6839      	ldr	r1, [r7, #0]
 8030072:	6878      	ldr	r0, [r7, #4]
 8030074:	f000 f9c6 	bl	8030404 <USBD_CtlError>
 8030078:	e004      	b.n	8030084 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 803007a:	6878      	ldr	r0, [r7, #4]
 803007c:	f000 fa8d 	bl	803059a <USBD_CtlSendStatus>
 8030080:	e000      	b.n	8030084 <USBD_GetDescriptor+0x2cc>
    return;
 8030082:	bf00      	nop
    }
  }
}
 8030084:	3710      	adds	r7, #16
 8030086:	46bd      	mov	sp, r7
 8030088:	bd80      	pop	{r7, pc}
 803008a:	bf00      	nop

0803008c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803008c:	b580      	push	{r7, lr}
 803008e:	b084      	sub	sp, #16
 8030090:	af00      	add	r7, sp, #0
 8030092:	6078      	str	r0, [r7, #4]
 8030094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8030096:	683b      	ldr	r3, [r7, #0]
 8030098:	889b      	ldrh	r3, [r3, #4]
 803009a:	2b00      	cmp	r3, #0
 803009c:	d130      	bne.n	8030100 <USBD_SetAddress+0x74>
 803009e:	683b      	ldr	r3, [r7, #0]
 80300a0:	88db      	ldrh	r3, [r3, #6]
 80300a2:	2b00      	cmp	r3, #0
 80300a4:	d12c      	bne.n	8030100 <USBD_SetAddress+0x74>
 80300a6:	683b      	ldr	r3, [r7, #0]
 80300a8:	885b      	ldrh	r3, [r3, #2]
 80300aa:	2b7f      	cmp	r3, #127	; 0x7f
 80300ac:	d828      	bhi.n	8030100 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80300ae:	683b      	ldr	r3, [r7, #0]
 80300b0:	885b      	ldrh	r3, [r3, #2]
 80300b2:	b2db      	uxtb	r3, r3
 80300b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80300b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300ba:	687b      	ldr	r3, [r7, #4]
 80300bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80300c0:	2b03      	cmp	r3, #3
 80300c2:	d104      	bne.n	80300ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80300c4:	6839      	ldr	r1, [r7, #0]
 80300c6:	6878      	ldr	r0, [r7, #4]
 80300c8:	f000 f99c 	bl	8030404 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300cc:	e01c      	b.n	8030108 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80300ce:	687b      	ldr	r3, [r7, #4]
 80300d0:	7bfa      	ldrb	r2, [r7, #15]
 80300d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80300d6:	7bfb      	ldrb	r3, [r7, #15]
 80300d8:	4619      	mov	r1, r3
 80300da:	6878      	ldr	r0, [r7, #4]
 80300dc:	f004 f99e 	bl	803441c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80300e0:	6878      	ldr	r0, [r7, #4]
 80300e2:	f000 fa5a 	bl	803059a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80300e6:	7bfb      	ldrb	r3, [r7, #15]
 80300e8:	2b00      	cmp	r3, #0
 80300ea:	d004      	beq.n	80300f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80300ec:	687b      	ldr	r3, [r7, #4]
 80300ee:	2202      	movs	r2, #2
 80300f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300f4:	e008      	b.n	8030108 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80300f6:	687b      	ldr	r3, [r7, #4]
 80300f8:	2201      	movs	r2, #1
 80300fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300fe:	e003      	b.n	8030108 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8030100:	6839      	ldr	r1, [r7, #0]
 8030102:	6878      	ldr	r0, [r7, #4]
 8030104:	f000 f97e 	bl	8030404 <USBD_CtlError>
  }
}
 8030108:	bf00      	nop
 803010a:	3710      	adds	r7, #16
 803010c:	46bd      	mov	sp, r7
 803010e:	bd80      	pop	{r7, pc}

08030110 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030110:	b580      	push	{r7, lr}
 8030112:	b084      	sub	sp, #16
 8030114:	af00      	add	r7, sp, #0
 8030116:	6078      	str	r0, [r7, #4]
 8030118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803011a:	2300      	movs	r3, #0
 803011c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803011e:	683b      	ldr	r3, [r7, #0]
 8030120:	885b      	ldrh	r3, [r3, #2]
 8030122:	b2da      	uxtb	r2, r3
 8030124:	4b4b      	ldr	r3, [pc, #300]	; (8030254 <USBD_SetConfig+0x144>)
 8030126:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8030128:	4b4a      	ldr	r3, [pc, #296]	; (8030254 <USBD_SetConfig+0x144>)
 803012a:	781b      	ldrb	r3, [r3, #0]
 803012c:	2b01      	cmp	r3, #1
 803012e:	d905      	bls.n	803013c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8030130:	6839      	ldr	r1, [r7, #0]
 8030132:	6878      	ldr	r0, [r7, #4]
 8030134:	f000 f966 	bl	8030404 <USBD_CtlError>
    return USBD_FAIL;
 8030138:	2303      	movs	r3, #3
 803013a:	e087      	b.n	803024c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 803013c:	687b      	ldr	r3, [r7, #4]
 803013e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030142:	2b02      	cmp	r3, #2
 8030144:	d002      	beq.n	803014c <USBD_SetConfig+0x3c>
 8030146:	2b03      	cmp	r3, #3
 8030148:	d025      	beq.n	8030196 <USBD_SetConfig+0x86>
 803014a:	e071      	b.n	8030230 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 803014c:	4b41      	ldr	r3, [pc, #260]	; (8030254 <USBD_SetConfig+0x144>)
 803014e:	781b      	ldrb	r3, [r3, #0]
 8030150:	2b00      	cmp	r3, #0
 8030152:	d01c      	beq.n	803018e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8030154:	4b3f      	ldr	r3, [pc, #252]	; (8030254 <USBD_SetConfig+0x144>)
 8030156:	781b      	ldrb	r3, [r3, #0]
 8030158:	461a      	mov	r2, r3
 803015a:	687b      	ldr	r3, [r7, #4]
 803015c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 803015e:	4b3d      	ldr	r3, [pc, #244]	; (8030254 <USBD_SetConfig+0x144>)
 8030160:	781b      	ldrb	r3, [r3, #0]
 8030162:	4619      	mov	r1, r3
 8030164:	6878      	ldr	r0, [r7, #4]
 8030166:	f7ff f9a7 	bl	802f4b8 <USBD_SetClassConfig>
 803016a:	4603      	mov	r3, r0
 803016c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 803016e:	7bfb      	ldrb	r3, [r7, #15]
 8030170:	2b00      	cmp	r3, #0
 8030172:	d004      	beq.n	803017e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8030174:	6839      	ldr	r1, [r7, #0]
 8030176:	6878      	ldr	r0, [r7, #4]
 8030178:	f000 f944 	bl	8030404 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 803017c:	e065      	b.n	803024a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 803017e:	6878      	ldr	r0, [r7, #4]
 8030180:	f000 fa0b 	bl	803059a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8030184:	687b      	ldr	r3, [r7, #4]
 8030186:	2203      	movs	r2, #3
 8030188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 803018c:	e05d      	b.n	803024a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 803018e:	6878      	ldr	r0, [r7, #4]
 8030190:	f000 fa03 	bl	803059a <USBD_CtlSendStatus>
    break;
 8030194:	e059      	b.n	803024a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8030196:	4b2f      	ldr	r3, [pc, #188]	; (8030254 <USBD_SetConfig+0x144>)
 8030198:	781b      	ldrb	r3, [r3, #0]
 803019a:	2b00      	cmp	r3, #0
 803019c:	d112      	bne.n	80301c4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 803019e:	687b      	ldr	r3, [r7, #4]
 80301a0:	2202      	movs	r2, #2
 80301a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80301a6:	4b2b      	ldr	r3, [pc, #172]	; (8030254 <USBD_SetConfig+0x144>)
 80301a8:	781b      	ldrb	r3, [r3, #0]
 80301aa:	461a      	mov	r2, r3
 80301ac:	687b      	ldr	r3, [r7, #4]
 80301ae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80301b0:	4b28      	ldr	r3, [pc, #160]	; (8030254 <USBD_SetConfig+0x144>)
 80301b2:	781b      	ldrb	r3, [r3, #0]
 80301b4:	4619      	mov	r1, r3
 80301b6:	6878      	ldr	r0, [r7, #4]
 80301b8:	f7ff f99a 	bl	802f4f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80301bc:	6878      	ldr	r0, [r7, #4]
 80301be:	f000 f9ec 	bl	803059a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80301c2:	e042      	b.n	803024a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80301c4:	4b23      	ldr	r3, [pc, #140]	; (8030254 <USBD_SetConfig+0x144>)
 80301c6:	781b      	ldrb	r3, [r3, #0]
 80301c8:	461a      	mov	r2, r3
 80301ca:	687b      	ldr	r3, [r7, #4]
 80301cc:	685b      	ldr	r3, [r3, #4]
 80301ce:	429a      	cmp	r2, r3
 80301d0:	d02a      	beq.n	8030228 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80301d2:	687b      	ldr	r3, [r7, #4]
 80301d4:	685b      	ldr	r3, [r3, #4]
 80301d6:	b2db      	uxtb	r3, r3
 80301d8:	4619      	mov	r1, r3
 80301da:	6878      	ldr	r0, [r7, #4]
 80301dc:	f7ff f988 	bl	802f4f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80301e0:	4b1c      	ldr	r3, [pc, #112]	; (8030254 <USBD_SetConfig+0x144>)
 80301e2:	781b      	ldrb	r3, [r3, #0]
 80301e4:	461a      	mov	r2, r3
 80301e6:	687b      	ldr	r3, [r7, #4]
 80301e8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80301ea:	4b1a      	ldr	r3, [pc, #104]	; (8030254 <USBD_SetConfig+0x144>)
 80301ec:	781b      	ldrb	r3, [r3, #0]
 80301ee:	4619      	mov	r1, r3
 80301f0:	6878      	ldr	r0, [r7, #4]
 80301f2:	f7ff f961 	bl	802f4b8 <USBD_SetClassConfig>
 80301f6:	4603      	mov	r3, r0
 80301f8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80301fa:	7bfb      	ldrb	r3, [r7, #15]
 80301fc:	2b00      	cmp	r3, #0
 80301fe:	d00f      	beq.n	8030220 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8030200:	6839      	ldr	r1, [r7, #0]
 8030202:	6878      	ldr	r0, [r7, #4]
 8030204:	f000 f8fe 	bl	8030404 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8030208:	687b      	ldr	r3, [r7, #4]
 803020a:	685b      	ldr	r3, [r3, #4]
 803020c:	b2db      	uxtb	r3, r3
 803020e:	4619      	mov	r1, r3
 8030210:	6878      	ldr	r0, [r7, #4]
 8030212:	f7ff f96d 	bl	802f4f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8030216:	687b      	ldr	r3, [r7, #4]
 8030218:	2202      	movs	r2, #2
 803021a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 803021e:	e014      	b.n	803024a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8030220:	6878      	ldr	r0, [r7, #4]
 8030222:	f000 f9ba 	bl	803059a <USBD_CtlSendStatus>
    break;
 8030226:	e010      	b.n	803024a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8030228:	6878      	ldr	r0, [r7, #4]
 803022a:	f000 f9b6 	bl	803059a <USBD_CtlSendStatus>
    break;
 803022e:	e00c      	b.n	803024a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8030230:	6839      	ldr	r1, [r7, #0]
 8030232:	6878      	ldr	r0, [r7, #4]
 8030234:	f000 f8e6 	bl	8030404 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8030238:	4b06      	ldr	r3, [pc, #24]	; (8030254 <USBD_SetConfig+0x144>)
 803023a:	781b      	ldrb	r3, [r3, #0]
 803023c:	4619      	mov	r1, r3
 803023e:	6878      	ldr	r0, [r7, #4]
 8030240:	f7ff f956 	bl	802f4f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8030244:	2303      	movs	r3, #3
 8030246:	73fb      	strb	r3, [r7, #15]
    break;
 8030248:	bf00      	nop
  }

  return ret;
 803024a:	7bfb      	ldrb	r3, [r7, #15]
}
 803024c:	4618      	mov	r0, r3
 803024e:	3710      	adds	r7, #16
 8030250:	46bd      	mov	sp, r7
 8030252:	bd80      	pop	{r7, pc}
 8030254:	200013a8 	.word	0x200013a8

08030258 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030258:	b580      	push	{r7, lr}
 803025a:	b082      	sub	sp, #8
 803025c:	af00      	add	r7, sp, #0
 803025e:	6078      	str	r0, [r7, #4]
 8030260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8030262:	683b      	ldr	r3, [r7, #0]
 8030264:	88db      	ldrh	r3, [r3, #6]
 8030266:	2b01      	cmp	r3, #1
 8030268:	d004      	beq.n	8030274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803026a:	6839      	ldr	r1, [r7, #0]
 803026c:	6878      	ldr	r0, [r7, #4]
 803026e:	f000 f8c9 	bl	8030404 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8030272:	e021      	b.n	80302b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8030274:	687b      	ldr	r3, [r7, #4]
 8030276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803027a:	2b01      	cmp	r3, #1
 803027c:	db17      	blt.n	80302ae <USBD_GetConfig+0x56>
 803027e:	2b02      	cmp	r3, #2
 8030280:	dd02      	ble.n	8030288 <USBD_GetConfig+0x30>
 8030282:	2b03      	cmp	r3, #3
 8030284:	d00b      	beq.n	803029e <USBD_GetConfig+0x46>
 8030286:	e012      	b.n	80302ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8030288:	687b      	ldr	r3, [r7, #4]
 803028a:	2200      	movs	r2, #0
 803028c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803028e:	687b      	ldr	r3, [r7, #4]
 8030290:	3308      	adds	r3, #8
 8030292:	2201      	movs	r2, #1
 8030294:	4619      	mov	r1, r3
 8030296:	6878      	ldr	r0, [r7, #4]
 8030298:	f000 f925 	bl	80304e6 <USBD_CtlSendData>
      break;
 803029c:	e00c      	b.n	80302b8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803029e:	687b      	ldr	r3, [r7, #4]
 80302a0:	3304      	adds	r3, #4
 80302a2:	2201      	movs	r2, #1
 80302a4:	4619      	mov	r1, r3
 80302a6:	6878      	ldr	r0, [r7, #4]
 80302a8:	f000 f91d 	bl	80304e6 <USBD_CtlSendData>
      break;
 80302ac:	e004      	b.n	80302b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80302ae:	6839      	ldr	r1, [r7, #0]
 80302b0:	6878      	ldr	r0, [r7, #4]
 80302b2:	f000 f8a7 	bl	8030404 <USBD_CtlError>
      break;
 80302b6:	bf00      	nop
}
 80302b8:	bf00      	nop
 80302ba:	3708      	adds	r7, #8
 80302bc:	46bd      	mov	sp, r7
 80302be:	bd80      	pop	{r7, pc}

080302c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80302c0:	b580      	push	{r7, lr}
 80302c2:	b082      	sub	sp, #8
 80302c4:	af00      	add	r7, sp, #0
 80302c6:	6078      	str	r0, [r7, #4]
 80302c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80302ca:	687b      	ldr	r3, [r7, #4]
 80302cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80302d0:	3b01      	subs	r3, #1
 80302d2:	2b02      	cmp	r3, #2
 80302d4:	d81e      	bhi.n	8030314 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80302d6:	683b      	ldr	r3, [r7, #0]
 80302d8:	88db      	ldrh	r3, [r3, #6]
 80302da:	2b02      	cmp	r3, #2
 80302dc:	d004      	beq.n	80302e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80302de:	6839      	ldr	r1, [r7, #0]
 80302e0:	6878      	ldr	r0, [r7, #4]
 80302e2:	f000 f88f 	bl	8030404 <USBD_CtlError>
      break;
 80302e6:	e01a      	b.n	803031e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80302e8:	687b      	ldr	r3, [r7, #4]
 80302ea:	2201      	movs	r2, #1
 80302ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80302ee:	687b      	ldr	r3, [r7, #4]
 80302f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80302f4:	2b00      	cmp	r3, #0
 80302f6:	d005      	beq.n	8030304 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80302f8:	687b      	ldr	r3, [r7, #4]
 80302fa:	68db      	ldr	r3, [r3, #12]
 80302fc:	f043 0202 	orr.w	r2, r3, #2
 8030300:	687b      	ldr	r3, [r7, #4]
 8030302:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8030304:	687b      	ldr	r3, [r7, #4]
 8030306:	330c      	adds	r3, #12
 8030308:	2202      	movs	r2, #2
 803030a:	4619      	mov	r1, r3
 803030c:	6878      	ldr	r0, [r7, #4]
 803030e:	f000 f8ea 	bl	80304e6 <USBD_CtlSendData>
    break;
 8030312:	e004      	b.n	803031e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8030314:	6839      	ldr	r1, [r7, #0]
 8030316:	6878      	ldr	r0, [r7, #4]
 8030318:	f000 f874 	bl	8030404 <USBD_CtlError>
    break;
 803031c:	bf00      	nop
  }
}
 803031e:	bf00      	nop
 8030320:	3708      	adds	r7, #8
 8030322:	46bd      	mov	sp, r7
 8030324:	bd80      	pop	{r7, pc}

08030326 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030326:	b580      	push	{r7, lr}
 8030328:	b082      	sub	sp, #8
 803032a:	af00      	add	r7, sp, #0
 803032c:	6078      	str	r0, [r7, #4]
 803032e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8030330:	683b      	ldr	r3, [r7, #0]
 8030332:	885b      	ldrh	r3, [r3, #2]
 8030334:	2b01      	cmp	r3, #1
 8030336:	d106      	bne.n	8030346 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8030338:	687b      	ldr	r3, [r7, #4]
 803033a:	2201      	movs	r2, #1
 803033c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8030340:	6878      	ldr	r0, [r7, #4]
 8030342:	f000 f92a 	bl	803059a <USBD_CtlSendStatus>
  }
}
 8030346:	bf00      	nop
 8030348:	3708      	adds	r7, #8
 803034a:	46bd      	mov	sp, r7
 803034c:	bd80      	pop	{r7, pc}

0803034e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803034e:	b580      	push	{r7, lr}
 8030350:	b082      	sub	sp, #8
 8030352:	af00      	add	r7, sp, #0
 8030354:	6078      	str	r0, [r7, #4]
 8030356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8030358:	687b      	ldr	r3, [r7, #4]
 803035a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803035e:	3b01      	subs	r3, #1
 8030360:	2b02      	cmp	r3, #2
 8030362:	d80b      	bhi.n	803037c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8030364:	683b      	ldr	r3, [r7, #0]
 8030366:	885b      	ldrh	r3, [r3, #2]
 8030368:	2b01      	cmp	r3, #1
 803036a:	d10c      	bne.n	8030386 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 803036c:	687b      	ldr	r3, [r7, #4]
 803036e:	2200      	movs	r2, #0
 8030370:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8030374:	6878      	ldr	r0, [r7, #4]
 8030376:	f000 f910 	bl	803059a <USBD_CtlSendStatus>
      }
      break;
 803037a:	e004      	b.n	8030386 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 803037c:	6839      	ldr	r1, [r7, #0]
 803037e:	6878      	ldr	r0, [r7, #4]
 8030380:	f000 f840 	bl	8030404 <USBD_CtlError>
      break;
 8030384:	e000      	b.n	8030388 <USBD_ClrFeature+0x3a>
      break;
 8030386:	bf00      	nop
  }
}
 8030388:	bf00      	nop
 803038a:	3708      	adds	r7, #8
 803038c:	46bd      	mov	sp, r7
 803038e:	bd80      	pop	{r7, pc}

08030390 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8030390:	b580      	push	{r7, lr}
 8030392:	b084      	sub	sp, #16
 8030394:	af00      	add	r7, sp, #0
 8030396:	6078      	str	r0, [r7, #4]
 8030398:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803039a:	683b      	ldr	r3, [r7, #0]
 803039c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803039e:	68fb      	ldr	r3, [r7, #12]
 80303a0:	781a      	ldrb	r2, [r3, #0]
 80303a2:	687b      	ldr	r3, [r7, #4]
 80303a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80303a6:	68fb      	ldr	r3, [r7, #12]
 80303a8:	3301      	adds	r3, #1
 80303aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80303ac:	68fb      	ldr	r3, [r7, #12]
 80303ae:	781a      	ldrb	r2, [r3, #0]
 80303b0:	687b      	ldr	r3, [r7, #4]
 80303b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80303b4:	68fb      	ldr	r3, [r7, #12]
 80303b6:	3301      	adds	r3, #1
 80303b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80303ba:	68f8      	ldr	r0, [r7, #12]
 80303bc:	f7ff fad3 	bl	802f966 <SWAPBYTE>
 80303c0:	4603      	mov	r3, r0
 80303c2:	461a      	mov	r2, r3
 80303c4:	687b      	ldr	r3, [r7, #4]
 80303c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80303c8:	68fb      	ldr	r3, [r7, #12]
 80303ca:	3301      	adds	r3, #1
 80303cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80303ce:	68fb      	ldr	r3, [r7, #12]
 80303d0:	3301      	adds	r3, #1
 80303d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80303d4:	68f8      	ldr	r0, [r7, #12]
 80303d6:	f7ff fac6 	bl	802f966 <SWAPBYTE>
 80303da:	4603      	mov	r3, r0
 80303dc:	461a      	mov	r2, r3
 80303de:	687b      	ldr	r3, [r7, #4]
 80303e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80303e2:	68fb      	ldr	r3, [r7, #12]
 80303e4:	3301      	adds	r3, #1
 80303e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80303e8:	68fb      	ldr	r3, [r7, #12]
 80303ea:	3301      	adds	r3, #1
 80303ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80303ee:	68f8      	ldr	r0, [r7, #12]
 80303f0:	f7ff fab9 	bl	802f966 <SWAPBYTE>
 80303f4:	4603      	mov	r3, r0
 80303f6:	461a      	mov	r2, r3
 80303f8:	687b      	ldr	r3, [r7, #4]
 80303fa:	80da      	strh	r2, [r3, #6]
}
 80303fc:	bf00      	nop
 80303fe:	3710      	adds	r7, #16
 8030400:	46bd      	mov	sp, r7
 8030402:	bd80      	pop	{r7, pc}

08030404 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030404:	b580      	push	{r7, lr}
 8030406:	b082      	sub	sp, #8
 8030408:	af00      	add	r7, sp, #0
 803040a:	6078      	str	r0, [r7, #4]
 803040c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803040e:	2180      	movs	r1, #128	; 0x80
 8030410:	6878      	ldr	r0, [r7, #4]
 8030412:	f003 ff99 	bl	8034348 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8030416:	2100      	movs	r1, #0
 8030418:	6878      	ldr	r0, [r7, #4]
 803041a:	f003 ff95 	bl	8034348 <USBD_LL_StallEP>
}
 803041e:	bf00      	nop
 8030420:	3708      	adds	r7, #8
 8030422:	46bd      	mov	sp, r7
 8030424:	bd80      	pop	{r7, pc}

08030426 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8030426:	b580      	push	{r7, lr}
 8030428:	b086      	sub	sp, #24
 803042a:	af00      	add	r7, sp, #0
 803042c:	60f8      	str	r0, [r7, #12]
 803042e:	60b9      	str	r1, [r7, #8]
 8030430:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8030432:	2300      	movs	r3, #0
 8030434:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8030436:	68fb      	ldr	r3, [r7, #12]
 8030438:	2b00      	cmp	r3, #0
 803043a:	d036      	beq.n	80304aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803043c:	68fb      	ldr	r3, [r7, #12]
 803043e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8030440:	6938      	ldr	r0, [r7, #16]
 8030442:	f000 f836 	bl	80304b2 <USBD_GetLen>
 8030446:	4603      	mov	r3, r0
 8030448:	3301      	adds	r3, #1
 803044a:	b29b      	uxth	r3, r3
 803044c:	005b      	lsls	r3, r3, #1
 803044e:	b29a      	uxth	r2, r3
 8030450:	687b      	ldr	r3, [r7, #4]
 8030452:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8030454:	7dfb      	ldrb	r3, [r7, #23]
 8030456:	68ba      	ldr	r2, [r7, #8]
 8030458:	4413      	add	r3, r2
 803045a:	687a      	ldr	r2, [r7, #4]
 803045c:	7812      	ldrb	r2, [r2, #0]
 803045e:	701a      	strb	r2, [r3, #0]
  idx++;
 8030460:	7dfb      	ldrb	r3, [r7, #23]
 8030462:	3301      	adds	r3, #1
 8030464:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8030466:	7dfb      	ldrb	r3, [r7, #23]
 8030468:	68ba      	ldr	r2, [r7, #8]
 803046a:	4413      	add	r3, r2
 803046c:	2203      	movs	r2, #3
 803046e:	701a      	strb	r2, [r3, #0]
  idx++;
 8030470:	7dfb      	ldrb	r3, [r7, #23]
 8030472:	3301      	adds	r3, #1
 8030474:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8030476:	e013      	b.n	80304a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8030478:	7dfb      	ldrb	r3, [r7, #23]
 803047a:	68ba      	ldr	r2, [r7, #8]
 803047c:	4413      	add	r3, r2
 803047e:	693a      	ldr	r2, [r7, #16]
 8030480:	7812      	ldrb	r2, [r2, #0]
 8030482:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8030484:	693b      	ldr	r3, [r7, #16]
 8030486:	3301      	adds	r3, #1
 8030488:	613b      	str	r3, [r7, #16]
    idx++;
 803048a:	7dfb      	ldrb	r3, [r7, #23]
 803048c:	3301      	adds	r3, #1
 803048e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8030490:	7dfb      	ldrb	r3, [r7, #23]
 8030492:	68ba      	ldr	r2, [r7, #8]
 8030494:	4413      	add	r3, r2
 8030496:	2200      	movs	r2, #0
 8030498:	701a      	strb	r2, [r3, #0]
    idx++;
 803049a:	7dfb      	ldrb	r3, [r7, #23]
 803049c:	3301      	adds	r3, #1
 803049e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80304a0:	693b      	ldr	r3, [r7, #16]
 80304a2:	781b      	ldrb	r3, [r3, #0]
 80304a4:	2b00      	cmp	r3, #0
 80304a6:	d1e7      	bne.n	8030478 <USBD_GetString+0x52>
 80304a8:	e000      	b.n	80304ac <USBD_GetString+0x86>
    return;
 80304aa:	bf00      	nop
  }
}
 80304ac:	3718      	adds	r7, #24
 80304ae:	46bd      	mov	sp, r7
 80304b0:	bd80      	pop	{r7, pc}

080304b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80304b2:	b480      	push	{r7}
 80304b4:	b085      	sub	sp, #20
 80304b6:	af00      	add	r7, sp, #0
 80304b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80304ba:	2300      	movs	r3, #0
 80304bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80304be:	687b      	ldr	r3, [r7, #4]
 80304c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80304c2:	e005      	b.n	80304d0 <USBD_GetLen+0x1e>
  {
    len++;
 80304c4:	7bfb      	ldrb	r3, [r7, #15]
 80304c6:	3301      	adds	r3, #1
 80304c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80304ca:	68bb      	ldr	r3, [r7, #8]
 80304cc:	3301      	adds	r3, #1
 80304ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80304d0:	68bb      	ldr	r3, [r7, #8]
 80304d2:	781b      	ldrb	r3, [r3, #0]
 80304d4:	2b00      	cmp	r3, #0
 80304d6:	d1f5      	bne.n	80304c4 <USBD_GetLen+0x12>
  }

  return len;
 80304d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80304da:	4618      	mov	r0, r3
 80304dc:	3714      	adds	r7, #20
 80304de:	46bd      	mov	sp, r7
 80304e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304e4:	4770      	bx	lr

080304e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80304e6:	b580      	push	{r7, lr}
 80304e8:	b084      	sub	sp, #16
 80304ea:	af00      	add	r7, sp, #0
 80304ec:	60f8      	str	r0, [r7, #12]
 80304ee:	60b9      	str	r1, [r7, #8]
 80304f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80304f2:	68fb      	ldr	r3, [r7, #12]
 80304f4:	2202      	movs	r2, #2
 80304f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80304fa:	68fb      	ldr	r3, [r7, #12]
 80304fc:	687a      	ldr	r2, [r7, #4]
 80304fe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8030500:	68fb      	ldr	r3, [r7, #12]
 8030502:	687a      	ldr	r2, [r7, #4]
 8030504:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8030506:	687b      	ldr	r3, [r7, #4]
 8030508:	68ba      	ldr	r2, [r7, #8]
 803050a:	2100      	movs	r1, #0
 803050c:	68f8      	ldr	r0, [r7, #12]
 803050e:	f003 ffa4 	bl	803445a <USBD_LL_Transmit>

  return USBD_OK;
 8030512:	2300      	movs	r3, #0
}
 8030514:	4618      	mov	r0, r3
 8030516:	3710      	adds	r7, #16
 8030518:	46bd      	mov	sp, r7
 803051a:	bd80      	pop	{r7, pc}

0803051c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803051c:	b580      	push	{r7, lr}
 803051e:	b084      	sub	sp, #16
 8030520:	af00      	add	r7, sp, #0
 8030522:	60f8      	str	r0, [r7, #12]
 8030524:	60b9      	str	r1, [r7, #8]
 8030526:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8030528:	687b      	ldr	r3, [r7, #4]
 803052a:	68ba      	ldr	r2, [r7, #8]
 803052c:	2100      	movs	r1, #0
 803052e:	68f8      	ldr	r0, [r7, #12]
 8030530:	f003 ff93 	bl	803445a <USBD_LL_Transmit>

  return USBD_OK;
 8030534:	2300      	movs	r3, #0
}
 8030536:	4618      	mov	r0, r3
 8030538:	3710      	adds	r7, #16
 803053a:	46bd      	mov	sp, r7
 803053c:	bd80      	pop	{r7, pc}

0803053e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803053e:	b580      	push	{r7, lr}
 8030540:	b084      	sub	sp, #16
 8030542:	af00      	add	r7, sp, #0
 8030544:	60f8      	str	r0, [r7, #12]
 8030546:	60b9      	str	r1, [r7, #8]
 8030548:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803054a:	68fb      	ldr	r3, [r7, #12]
 803054c:	2203      	movs	r2, #3
 803054e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8030552:	68fb      	ldr	r3, [r7, #12]
 8030554:	687a      	ldr	r2, [r7, #4]
 8030556:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 803055a:	68fb      	ldr	r3, [r7, #12]
 803055c:	687a      	ldr	r2, [r7, #4]
 803055e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8030562:	687b      	ldr	r3, [r7, #4]
 8030564:	68ba      	ldr	r2, [r7, #8]
 8030566:	2100      	movs	r1, #0
 8030568:	68f8      	ldr	r0, [r7, #12]
 803056a:	f003 ff97 	bl	803449c <USBD_LL_PrepareReceive>

  return USBD_OK;
 803056e:	2300      	movs	r3, #0
}
 8030570:	4618      	mov	r0, r3
 8030572:	3710      	adds	r7, #16
 8030574:	46bd      	mov	sp, r7
 8030576:	bd80      	pop	{r7, pc}

08030578 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8030578:	b580      	push	{r7, lr}
 803057a:	b084      	sub	sp, #16
 803057c:	af00      	add	r7, sp, #0
 803057e:	60f8      	str	r0, [r7, #12]
 8030580:	60b9      	str	r1, [r7, #8]
 8030582:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8030584:	687b      	ldr	r3, [r7, #4]
 8030586:	68ba      	ldr	r2, [r7, #8]
 8030588:	2100      	movs	r1, #0
 803058a:	68f8      	ldr	r0, [r7, #12]
 803058c:	f003 ff86 	bl	803449c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030590:	2300      	movs	r3, #0
}
 8030592:	4618      	mov	r0, r3
 8030594:	3710      	adds	r7, #16
 8030596:	46bd      	mov	sp, r7
 8030598:	bd80      	pop	{r7, pc}

0803059a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803059a:	b580      	push	{r7, lr}
 803059c:	b082      	sub	sp, #8
 803059e:	af00      	add	r7, sp, #0
 80305a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80305a2:	687b      	ldr	r3, [r7, #4]
 80305a4:	2204      	movs	r2, #4
 80305a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80305aa:	2300      	movs	r3, #0
 80305ac:	2200      	movs	r2, #0
 80305ae:	2100      	movs	r1, #0
 80305b0:	6878      	ldr	r0, [r7, #4]
 80305b2:	f003 ff52 	bl	803445a <USBD_LL_Transmit>

  return USBD_OK;
 80305b6:	2300      	movs	r3, #0
}
 80305b8:	4618      	mov	r0, r3
 80305ba:	3708      	adds	r7, #8
 80305bc:	46bd      	mov	sp, r7
 80305be:	bd80      	pop	{r7, pc}

080305c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80305c0:	b580      	push	{r7, lr}
 80305c2:	b082      	sub	sp, #8
 80305c4:	af00      	add	r7, sp, #0
 80305c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80305c8:	687b      	ldr	r3, [r7, #4]
 80305ca:	2205      	movs	r2, #5
 80305cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80305d0:	2300      	movs	r3, #0
 80305d2:	2200      	movs	r2, #0
 80305d4:	2100      	movs	r1, #0
 80305d6:	6878      	ldr	r0, [r7, #4]
 80305d8:	f003 ff60 	bl	803449c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80305dc:	2300      	movs	r3, #0
}
 80305de:	4618      	mov	r0, r3
 80305e0:	3708      	adds	r7, #8
 80305e2:	46bd      	mov	sp, r7
 80305e4:	bd80      	pop	{r7, pc}

080305e6 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80305e6:	b590      	push	{r4, r7, lr}
 80305e8:	b089      	sub	sp, #36	; 0x24
 80305ea:	af04      	add	r7, sp, #16
 80305ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80305ee:	687b      	ldr	r3, [r7, #4]
 80305f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80305f4:	7919      	ldrb	r1, [r3, #4]
 80305f6:	2350      	movs	r3, #80	; 0x50
 80305f8:	2206      	movs	r2, #6
 80305fa:	6878      	ldr	r0, [r7, #4]
 80305fc:	f001 fe28 	bl	8032250 <USBH_FindInterface>
 8030600:	4603      	mov	r3, r0
 8030602:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8030604:	7bfb      	ldrb	r3, [r7, #15]
 8030606:	2bff      	cmp	r3, #255	; 0xff
 8030608:	d002      	beq.n	8030610 <USBH_MSC_InterfaceInit+0x2a>
 803060a:	7bfb      	ldrb	r3, [r7, #15]
 803060c:	2b01      	cmp	r3, #1
 803060e:	d901      	bls.n	8030614 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8030610:	2302      	movs	r3, #2
 8030612:	e0ef      	b.n	80307f4 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8030614:	7bfb      	ldrb	r3, [r7, #15]
 8030616:	4619      	mov	r1, r3
 8030618:	6878      	ldr	r0, [r7, #4]
 803061a:	f001 fdb1 	bl	8032180 <USBH_SelectInterface>
 803061e:	4603      	mov	r3, r0
 8030620:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8030622:	7bbb      	ldrb	r3, [r7, #14]
 8030624:	2b00      	cmp	r3, #0
 8030626:	d001      	beq.n	803062c <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8030628:	2302      	movs	r3, #2
 803062a:	e0e3      	b.n	80307f4 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 803062c:	687b      	ldr	r3, [r7, #4]
 803062e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8030632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8030636:	f004 fafb 	bl	8034c30 <malloc>
 803063a:	4603      	mov	r3, r0
 803063c:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 803063e:	687b      	ldr	r3, [r7, #4]
 8030640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8030644:	69db      	ldr	r3, [r3, #28]
 8030646:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8030648:	68bb      	ldr	r3, [r7, #8]
 803064a:	2b00      	cmp	r3, #0
 803064c:	d101      	bne.n	8030652 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 803064e:	2302      	movs	r3, #2
 8030650:	e0d0      	b.n	80307f4 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8030652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8030656:	2100      	movs	r1, #0
 8030658:	68b8      	ldr	r0, [r7, #8]
 803065a:	f004 fb04 	bl	8034c66 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 803065e:	7bfb      	ldrb	r3, [r7, #15]
 8030660:	687a      	ldr	r2, [r7, #4]
 8030662:	211a      	movs	r1, #26
 8030664:	fb01 f303 	mul.w	r3, r1, r3
 8030668:	4413      	add	r3, r2
 803066a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 803066e:	781b      	ldrb	r3, [r3, #0]
 8030670:	b25b      	sxtb	r3, r3
 8030672:	2b00      	cmp	r3, #0
 8030674:	da16      	bge.n	80306a4 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8030676:	7bfb      	ldrb	r3, [r7, #15]
 8030678:	687a      	ldr	r2, [r7, #4]
 803067a:	211a      	movs	r1, #26
 803067c:	fb01 f303 	mul.w	r3, r1, r3
 8030680:	4413      	add	r3, r2
 8030682:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8030686:	781a      	ldrb	r2, [r3, #0]
 8030688:	68bb      	ldr	r3, [r7, #8]
 803068a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 803068c:	7bfb      	ldrb	r3, [r7, #15]
 803068e:	687a      	ldr	r2, [r7, #4]
 8030690:	211a      	movs	r1, #26
 8030692:	fb01 f303 	mul.w	r3, r1, r3
 8030696:	4413      	add	r3, r2
 8030698:	f503 7354 	add.w	r3, r3, #848	; 0x350
 803069c:	881a      	ldrh	r2, [r3, #0]
 803069e:	68bb      	ldr	r3, [r7, #8]
 80306a0:	815a      	strh	r2, [r3, #10]
 80306a2:	e015      	b.n	80306d0 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80306a4:	7bfb      	ldrb	r3, [r7, #15]
 80306a6:	687a      	ldr	r2, [r7, #4]
 80306a8:	211a      	movs	r1, #26
 80306aa:	fb01 f303 	mul.w	r3, r1, r3
 80306ae:	4413      	add	r3, r2
 80306b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80306b4:	781a      	ldrb	r2, [r3, #0]
 80306b6:	68bb      	ldr	r3, [r7, #8]
 80306b8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80306ba:	7bfb      	ldrb	r3, [r7, #15]
 80306bc:	687a      	ldr	r2, [r7, #4]
 80306be:	211a      	movs	r1, #26
 80306c0:	fb01 f303 	mul.w	r3, r1, r3
 80306c4:	4413      	add	r3, r2
 80306c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80306ca:	881a      	ldrh	r2, [r3, #0]
 80306cc:	68bb      	ldr	r3, [r7, #8]
 80306ce:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80306d0:	7bfb      	ldrb	r3, [r7, #15]
 80306d2:	687a      	ldr	r2, [r7, #4]
 80306d4:	211a      	movs	r1, #26
 80306d6:	fb01 f303 	mul.w	r3, r1, r3
 80306da:	4413      	add	r3, r2
 80306dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80306e0:	781b      	ldrb	r3, [r3, #0]
 80306e2:	b25b      	sxtb	r3, r3
 80306e4:	2b00      	cmp	r3, #0
 80306e6:	da16      	bge.n	8030716 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80306e8:	7bfb      	ldrb	r3, [r7, #15]
 80306ea:	687a      	ldr	r2, [r7, #4]
 80306ec:	211a      	movs	r1, #26
 80306ee:	fb01 f303 	mul.w	r3, r1, r3
 80306f2:	4413      	add	r3, r2
 80306f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80306f8:	781a      	ldrb	r2, [r3, #0]
 80306fa:	68bb      	ldr	r3, [r7, #8]
 80306fc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80306fe:	7bfb      	ldrb	r3, [r7, #15]
 8030700:	687a      	ldr	r2, [r7, #4]
 8030702:	211a      	movs	r1, #26
 8030704:	fb01 f303 	mul.w	r3, r1, r3
 8030708:	4413      	add	r3, r2
 803070a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 803070e:	881a      	ldrh	r2, [r3, #0]
 8030710:	68bb      	ldr	r3, [r7, #8]
 8030712:	815a      	strh	r2, [r3, #10]
 8030714:	e015      	b.n	8030742 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8030716:	7bfb      	ldrb	r3, [r7, #15]
 8030718:	687a      	ldr	r2, [r7, #4]
 803071a:	211a      	movs	r1, #26
 803071c:	fb01 f303 	mul.w	r3, r1, r3
 8030720:	4413      	add	r3, r2
 8030722:	f203 3356 	addw	r3, r3, #854	; 0x356
 8030726:	781a      	ldrb	r2, [r3, #0]
 8030728:	68bb      	ldr	r3, [r7, #8]
 803072a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 803072c:	7bfb      	ldrb	r3, [r7, #15]
 803072e:	687a      	ldr	r2, [r7, #4]
 8030730:	211a      	movs	r1, #26
 8030732:	fb01 f303 	mul.w	r3, r1, r3
 8030736:	4413      	add	r3, r2
 8030738:	f503 7356 	add.w	r3, r3, #856	; 0x358
 803073c:	881a      	ldrh	r2, [r3, #0]
 803073e:	68bb      	ldr	r3, [r7, #8]
 8030740:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8030742:	68bb      	ldr	r3, [r7, #8]
 8030744:	2200      	movs	r2, #0
 8030746:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8030748:	68bb      	ldr	r3, [r7, #8]
 803074a:	2200      	movs	r2, #0
 803074c:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 803074e:	68bb      	ldr	r3, [r7, #8]
 8030750:	2200      	movs	r2, #0
 8030752:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8030754:	68bb      	ldr	r3, [r7, #8]
 8030756:	799b      	ldrb	r3, [r3, #6]
 8030758:	4619      	mov	r1, r3
 803075a:	6878      	ldr	r0, [r7, #4]
 803075c:	f003 f911 	bl	8033982 <USBH_AllocPipe>
 8030760:	4603      	mov	r3, r0
 8030762:	461a      	mov	r2, r3
 8030764:	68bb      	ldr	r3, [r7, #8]
 8030766:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8030768:	68bb      	ldr	r3, [r7, #8]
 803076a:	79db      	ldrb	r3, [r3, #7]
 803076c:	4619      	mov	r1, r3
 803076e:	6878      	ldr	r0, [r7, #4]
 8030770:	f003 f907 	bl	8033982 <USBH_AllocPipe>
 8030774:	4603      	mov	r3, r0
 8030776:	461a      	mov	r2, r3
 8030778:	68bb      	ldr	r3, [r7, #8]
 803077a:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 803077c:	6878      	ldr	r0, [r7, #4]
 803077e:	f000 fee1 	bl	8031544 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8030782:	68bb      	ldr	r3, [r7, #8]
 8030784:	7959      	ldrb	r1, [r3, #5]
 8030786:	68bb      	ldr	r3, [r7, #8]
 8030788:	7998      	ldrb	r0, [r3, #6]
 803078a:	687b      	ldr	r3, [r7, #4]
 803078c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8030790:	687b      	ldr	r3, [r7, #4]
 8030792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8030796:	68ba      	ldr	r2, [r7, #8]
 8030798:	8912      	ldrh	r2, [r2, #8]
 803079a:	9202      	str	r2, [sp, #8]
 803079c:	2202      	movs	r2, #2
 803079e:	9201      	str	r2, [sp, #4]
 80307a0:	9300      	str	r3, [sp, #0]
 80307a2:	4623      	mov	r3, r4
 80307a4:	4602      	mov	r2, r0
 80307a6:	6878      	ldr	r0, [r7, #4]
 80307a8:	f003 f8bc 	bl	8033924 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80307ac:	68bb      	ldr	r3, [r7, #8]
 80307ae:	7919      	ldrb	r1, [r3, #4]
 80307b0:	68bb      	ldr	r3, [r7, #8]
 80307b2:	79d8      	ldrb	r0, [r3, #7]
 80307b4:	687b      	ldr	r3, [r7, #4]
 80307b6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80307ba:	687b      	ldr	r3, [r7, #4]
 80307bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80307c0:	68ba      	ldr	r2, [r7, #8]
 80307c2:	8952      	ldrh	r2, [r2, #10]
 80307c4:	9202      	str	r2, [sp, #8]
 80307c6:	2202      	movs	r2, #2
 80307c8:	9201      	str	r2, [sp, #4]
 80307ca:	9300      	str	r3, [sp, #0]
 80307cc:	4623      	mov	r3, r4
 80307ce:	4602      	mov	r2, r0
 80307d0:	6878      	ldr	r0, [r7, #4]
 80307d2:	f003 f8a7 	bl	8033924 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80307d6:	68bb      	ldr	r3, [r7, #8]
 80307d8:	791b      	ldrb	r3, [r3, #4]
 80307da:	2200      	movs	r2, #0
 80307dc:	4619      	mov	r1, r3
 80307de:	6878      	ldr	r0, [r7, #4]
 80307e0:	f004 f942 	bl	8034a68 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80307e4:	68bb      	ldr	r3, [r7, #8]
 80307e6:	795b      	ldrb	r3, [r3, #5]
 80307e8:	2200      	movs	r2, #0
 80307ea:	4619      	mov	r1, r3
 80307ec:	6878      	ldr	r0, [r7, #4]
 80307ee:	f004 f93b 	bl	8034a68 <USBH_LL_SetToggle>

  return USBH_OK;
 80307f2:	2300      	movs	r3, #0
}
 80307f4:	4618      	mov	r0, r3
 80307f6:	3714      	adds	r7, #20
 80307f8:	46bd      	mov	sp, r7
 80307fa:	bd90      	pop	{r4, r7, pc}

080307fc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80307fc:	b580      	push	{r7, lr}
 80307fe:	b084      	sub	sp, #16
 8030800:	af00      	add	r7, sp, #0
 8030802:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8030804:	687b      	ldr	r3, [r7, #4]
 8030806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803080a:	69db      	ldr	r3, [r3, #28]
 803080c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 803080e:	68fb      	ldr	r3, [r7, #12]
 8030810:	795b      	ldrb	r3, [r3, #5]
 8030812:	2b00      	cmp	r3, #0
 8030814:	d00e      	beq.n	8030834 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8030816:	68fb      	ldr	r3, [r7, #12]
 8030818:	795b      	ldrb	r3, [r3, #5]
 803081a:	4619      	mov	r1, r3
 803081c:	6878      	ldr	r0, [r7, #4]
 803081e:	f003 f8a0 	bl	8033962 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8030822:	68fb      	ldr	r3, [r7, #12]
 8030824:	795b      	ldrb	r3, [r3, #5]
 8030826:	4619      	mov	r1, r3
 8030828:	6878      	ldr	r0, [r7, #4]
 803082a:	f003 f8cb 	bl	80339c4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 803082e:	68fb      	ldr	r3, [r7, #12]
 8030830:	2200      	movs	r2, #0
 8030832:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8030834:	68fb      	ldr	r3, [r7, #12]
 8030836:	791b      	ldrb	r3, [r3, #4]
 8030838:	2b00      	cmp	r3, #0
 803083a:	d00e      	beq.n	803085a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 803083c:	68fb      	ldr	r3, [r7, #12]
 803083e:	791b      	ldrb	r3, [r3, #4]
 8030840:	4619      	mov	r1, r3
 8030842:	6878      	ldr	r0, [r7, #4]
 8030844:	f003 f88d 	bl	8033962 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8030848:	68fb      	ldr	r3, [r7, #12]
 803084a:	791b      	ldrb	r3, [r3, #4]
 803084c:	4619      	mov	r1, r3
 803084e:	6878      	ldr	r0, [r7, #4]
 8030850:	f003 f8b8 	bl	80339c4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8030854:	68fb      	ldr	r3, [r7, #12]
 8030856:	2200      	movs	r2, #0
 8030858:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 803085a:	687b      	ldr	r3, [r7, #4]
 803085c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8030860:	69db      	ldr	r3, [r3, #28]
 8030862:	2b00      	cmp	r3, #0
 8030864:	d00b      	beq.n	803087e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8030866:	687b      	ldr	r3, [r7, #4]
 8030868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803086c:	69db      	ldr	r3, [r3, #28]
 803086e:	4618      	mov	r0, r3
 8030870:	f004 f9e6 	bl	8034c40 <free>
    phost->pActiveClass->pData = 0U;
 8030874:	687b      	ldr	r3, [r7, #4]
 8030876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803087a:	2200      	movs	r2, #0
 803087c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 803087e:	2300      	movs	r3, #0
}
 8030880:	4618      	mov	r0, r3
 8030882:	3710      	adds	r7, #16
 8030884:	46bd      	mov	sp, r7
 8030886:	bd80      	pop	{r7, pc}

08030888 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8030888:	b580      	push	{r7, lr}
 803088a:	b084      	sub	sp, #16
 803088c:	af00      	add	r7, sp, #0
 803088e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8030890:	687b      	ldr	r3, [r7, #4]
 8030892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8030896:	69db      	ldr	r3, [r3, #28]
 8030898:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 803089a:	2301      	movs	r3, #1
 803089c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 803089e:	68bb      	ldr	r3, [r7, #8]
 80308a0:	7b9b      	ldrb	r3, [r3, #14]
 80308a2:	2b02      	cmp	r3, #2
 80308a4:	d004      	beq.n	80308b0 <USBH_MSC_ClassRequest+0x28>
 80308a6:	2b03      	cmp	r3, #3
 80308a8:	d047      	beq.n	803093a <USBH_MSC_ClassRequest+0xb2>
 80308aa:	2b00      	cmp	r3, #0
 80308ac:	d000      	beq.n	80308b0 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80308ae:	e053      	b.n	8030958 <USBH_MSC_ClassRequest+0xd0>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80308b0:	68bb      	ldr	r3, [r7, #8]
 80308b2:	4619      	mov	r1, r3
 80308b4:	6878      	ldr	r0, [r7, #4]
 80308b6:	f000 fe26 	bl	8031506 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80308ba:	4603      	mov	r3, r0
 80308bc:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80308be:	7bfb      	ldrb	r3, [r7, #15]
 80308c0:	2b03      	cmp	r3, #3
 80308c2:	d104      	bne.n	80308ce <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80308c4:	68bb      	ldr	r3, [r7, #8]
 80308c6:	2200      	movs	r2, #0
 80308c8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80308ca:	2300      	movs	r3, #0
 80308cc:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80308ce:	7bfb      	ldrb	r3, [r7, #15]
 80308d0:	2b00      	cmp	r3, #0
 80308d2:	d13e      	bne.n	8030952 <USBH_MSC_ClassRequest+0xca>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80308d4:	68bb      	ldr	r3, [r7, #8]
 80308d6:	781b      	ldrb	r3, [r3, #0]
 80308d8:	2b02      	cmp	r3, #2
 80308da:	d804      	bhi.n	80308e6 <USBH_MSC_ClassRequest+0x5e>
 80308dc:	68bb      	ldr	r3, [r7, #8]
 80308de:	781b      	ldrb	r3, [r3, #0]
 80308e0:	3301      	adds	r3, #1
 80308e2:	b2da      	uxtb	r2, r3
 80308e4:	e000      	b.n	80308e8 <USBH_MSC_ClassRequest+0x60>
 80308e6:	2202      	movs	r2, #2
 80308e8:	68bb      	ldr	r3, [r7, #8]
 80308ea:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 80308ec:	68bb      	ldr	r3, [r7, #8]
 80308ee:	781b      	ldrb	r3, [r3, #0]
 80308f0:	4619      	mov	r1, r3
 80308f2:	481c      	ldr	r0, [pc, #112]	; (8030964 <USBH_MSC_ClassRequest+0xdc>)
 80308f4:	f004 fec4 	bl	8035680 <iprintf>
 80308f8:	200a      	movs	r0, #10
 80308fa:	f004 fed9 	bl	80356b0 <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80308fe:	2300      	movs	r3, #0
 8030900:	73bb      	strb	r3, [r7, #14]
 8030902:	e014      	b.n	803092e <USBH_MSC_ClassRequest+0xa6>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8030904:	7bbb      	ldrb	r3, [r7, #14]
 8030906:	68ba      	ldr	r2, [r7, #8]
 8030908:	2134      	movs	r1, #52	; 0x34
 803090a:	fb01 f303 	mul.w	r3, r1, r3
 803090e:	4413      	add	r3, r2
 8030910:	3392      	adds	r3, #146	; 0x92
 8030912:	2202      	movs	r2, #2
 8030914:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8030916:	7bbb      	ldrb	r3, [r7, #14]
 8030918:	68ba      	ldr	r2, [r7, #8]
 803091a:	2134      	movs	r1, #52	; 0x34
 803091c:	fb01 f303 	mul.w	r3, r1, r3
 8030920:	4413      	add	r3, r2
 8030922:	33c1      	adds	r3, #193	; 0xc1
 8030924:	2200      	movs	r2, #0
 8030926:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8030928:	7bbb      	ldrb	r3, [r7, #14]
 803092a:	3301      	adds	r3, #1
 803092c:	73bb      	strb	r3, [r7, #14]
 803092e:	68bb      	ldr	r3, [r7, #8]
 8030930:	781b      	ldrb	r3, [r3, #0]
 8030932:	7bba      	ldrb	r2, [r7, #14]
 8030934:	429a      	cmp	r2, r3
 8030936:	d3e5      	bcc.n	8030904 <USBH_MSC_ClassRequest+0x7c>
      break;
 8030938:	e00b      	b.n	8030952 <USBH_MSC_ClassRequest+0xca>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 803093a:	2100      	movs	r1, #0
 803093c:	6878      	ldr	r0, [r7, #4]
 803093e:	f002 fbb0 	bl	80330a2 <USBH_ClrFeature>
 8030942:	4603      	mov	r3, r0
 8030944:	2b00      	cmp	r3, #0
 8030946:	d106      	bne.n	8030956 <USBH_MSC_ClassRequest+0xce>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8030948:	68bb      	ldr	r3, [r7, #8]
 803094a:	7bda      	ldrb	r2, [r3, #15]
 803094c:	68bb      	ldr	r3, [r7, #8]
 803094e:	739a      	strb	r2, [r3, #14]
      break;
 8030950:	e001      	b.n	8030956 <USBH_MSC_ClassRequest+0xce>
      break;
 8030952:	bf00      	nop
 8030954:	e000      	b.n	8030958 <USBH_MSC_ClassRequest+0xd0>
      break;
 8030956:	bf00      	nop
  }

  return status;
 8030958:	7bfb      	ldrb	r3, [r7, #15]
}
 803095a:	4618      	mov	r0, r3
 803095c:	3710      	adds	r7, #16
 803095e:	46bd      	mov	sp, r7
 8030960:	bd80      	pop	{r7, pc}
 8030962:	bf00      	nop
 8030964:	080378ac 	.word	0x080378ac

08030968 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8030968:	b580      	push	{r7, lr}
 803096a:	b086      	sub	sp, #24
 803096c:	af00      	add	r7, sp, #0
 803096e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8030970:	687b      	ldr	r3, [r7, #4]
 8030972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8030976:	69db      	ldr	r3, [r3, #28]
 8030978:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 803097a:	2301      	movs	r3, #1
 803097c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 803097e:	2301      	movs	r3, #1
 8030980:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8030982:	2301      	movs	r3, #1
 8030984:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8030986:	693b      	ldr	r3, [r7, #16]
 8030988:	7b1b      	ldrb	r3, [r3, #12]
 803098a:	2b00      	cmp	r3, #0
 803098c:	d003      	beq.n	8030996 <USBH_MSC_Process+0x2e>
 803098e:	2b01      	cmp	r3, #1
 8030990:	f000 8355 	beq.w	803103e <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8030994:	e356      	b.n	8031044 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8030996:	693b      	ldr	r3, [r7, #16]
 8030998:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 803099c:	693b      	ldr	r3, [r7, #16]
 803099e:	781b      	ldrb	r3, [r3, #0]
 80309a0:	b29b      	uxth	r3, r3
 80309a2:	429a      	cmp	r2, r3
 80309a4:	f080 8333 	bcs.w	803100e <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80309a8:	693b      	ldr	r3, [r7, #16]
 80309aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80309ae:	4619      	mov	r1, r3
 80309b0:	693a      	ldr	r2, [r7, #16]
 80309b2:	2334      	movs	r3, #52	; 0x34
 80309b4:	fb03 f301 	mul.w	r3, r3, r1
 80309b8:	4413      	add	r3, r2
 80309ba:	3391      	adds	r3, #145	; 0x91
 80309bc:	2201      	movs	r2, #1
 80309be:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80309c0:	693b      	ldr	r3, [r7, #16]
 80309c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80309c6:	4619      	mov	r1, r3
 80309c8:	693a      	ldr	r2, [r7, #16]
 80309ca:	2334      	movs	r3, #52	; 0x34
 80309cc:	fb03 f301 	mul.w	r3, r3, r1
 80309d0:	4413      	add	r3, r2
 80309d2:	3390      	adds	r3, #144	; 0x90
 80309d4:	781b      	ldrb	r3, [r3, #0]
 80309d6:	2b08      	cmp	r3, #8
 80309d8:	f200 8327 	bhi.w	803102a <USBH_MSC_Process+0x6c2>
 80309dc:	a201      	add	r2, pc, #4	; (adr r2, 80309e4 <USBH_MSC_Process+0x7c>)
 80309de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80309e2:	bf00      	nop
 80309e4:	08030a09 	.word	0x08030a09
 80309e8:	0803102b 	.word	0x0803102b
 80309ec:	08030b51 	.word	0x08030b51
 80309f0:	08030d05 	.word	0x08030d05
 80309f4:	08030a43 	.word	0x08030a43
 80309f8:	08030e71 	.word	0x08030e71
 80309fc:	0803102b 	.word	0x0803102b
 8030a00:	0803102b 	.word	0x0803102b
 8030a04:	08030ffd 	.word	0x08030ffd
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8030a08:	693b      	ldr	r3, [r7, #16]
 8030a0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030a0e:	4619      	mov	r1, r3
 8030a10:	48b6      	ldr	r0, [pc, #728]	; (8030cec <USBH_MSC_Process+0x384>)
 8030a12:	f004 fe35 	bl	8035680 <iprintf>
 8030a16:	200a      	movs	r0, #10
 8030a18:	f004 fe4a 	bl	80356b0 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8030a1c:	693b      	ldr	r3, [r7, #16]
 8030a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030a22:	4619      	mov	r1, r3
 8030a24:	693a      	ldr	r2, [r7, #16]
 8030a26:	2334      	movs	r3, #52	; 0x34
 8030a28:	fb03 f301 	mul.w	r3, r3, r1
 8030a2c:	4413      	add	r3, r2
 8030a2e:	3390      	adds	r3, #144	; 0x90
 8030a30:	2204      	movs	r2, #4
 8030a32:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8030a34:	687b      	ldr	r3, [r7, #4]
 8030a36:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8030a3a:	693b      	ldr	r3, [r7, #16]
 8030a3c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8030a40:	e2fc      	b.n	803103c <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8030a42:	693b      	ldr	r3, [r7, #16]
 8030a44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030a48:	b2d9      	uxtb	r1, r3
 8030a4a:	693b      	ldr	r3, [r7, #16]
 8030a4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030a50:	461a      	mov	r2, r3
 8030a52:	2334      	movs	r3, #52	; 0x34
 8030a54:	fb03 f302 	mul.w	r3, r3, r2
 8030a58:	3398      	adds	r3, #152	; 0x98
 8030a5a:	693a      	ldr	r2, [r7, #16]
 8030a5c:	4413      	add	r3, r2
 8030a5e:	3307      	adds	r3, #7
 8030a60:	461a      	mov	r2, r3
 8030a62:	6878      	ldr	r0, [r7, #4]
 8030a64:	f001 f890 	bl	8031b88 <USBH_MSC_SCSI_Inquiry>
 8030a68:	4603      	mov	r3, r0
 8030a6a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8030a6c:	7bfb      	ldrb	r3, [r7, #15]
 8030a6e:	2b00      	cmp	r3, #0
 8030a70:	d141      	bne.n	8030af6 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8030a72:	693b      	ldr	r3, [r7, #16]
 8030a74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030a78:	461a      	mov	r2, r3
 8030a7a:	2334      	movs	r3, #52	; 0x34
 8030a7c:	fb03 f302 	mul.w	r3, r3, r2
 8030a80:	3398      	adds	r3, #152	; 0x98
 8030a82:	693a      	ldr	r2, [r7, #16]
 8030a84:	4413      	add	r3, r2
 8030a86:	330a      	adds	r3, #10
 8030a88:	4619      	mov	r1, r3
 8030a8a:	4899      	ldr	r0, [pc, #612]	; (8030cf0 <USBH_MSC_Process+0x388>)
 8030a8c:	f004 fdf8 	bl	8035680 <iprintf>
 8030a90:	200a      	movs	r0, #10
 8030a92:	f004 fe0d 	bl	80356b0 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8030a96:	693b      	ldr	r3, [r7, #16]
 8030a98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030a9c:	461a      	mov	r2, r3
 8030a9e:	2334      	movs	r3, #52	; 0x34
 8030aa0:	fb03 f302 	mul.w	r3, r3, r2
 8030aa4:	33a0      	adds	r3, #160	; 0xa0
 8030aa6:	693a      	ldr	r2, [r7, #16]
 8030aa8:	4413      	add	r3, r2
 8030aaa:	330b      	adds	r3, #11
 8030aac:	4619      	mov	r1, r3
 8030aae:	4891      	ldr	r0, [pc, #580]	; (8030cf4 <USBH_MSC_Process+0x38c>)
 8030ab0:	f004 fde6 	bl	8035680 <iprintf>
 8030ab4:	200a      	movs	r0, #10
 8030ab6:	f004 fdfb 	bl	80356b0 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8030aba:	693b      	ldr	r3, [r7, #16]
 8030abc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030ac0:	461a      	mov	r2, r3
 8030ac2:	2334      	movs	r3, #52	; 0x34
 8030ac4:	fb03 f302 	mul.w	r3, r3, r2
 8030ac8:	33b0      	adds	r3, #176	; 0xb0
 8030aca:	693a      	ldr	r2, [r7, #16]
 8030acc:	4413      	add	r3, r2
 8030ace:	330c      	adds	r3, #12
 8030ad0:	4619      	mov	r1, r3
 8030ad2:	4889      	ldr	r0, [pc, #548]	; (8030cf8 <USBH_MSC_Process+0x390>)
 8030ad4:	f004 fdd4 	bl	8035680 <iprintf>
 8030ad8:	200a      	movs	r0, #10
 8030ada:	f004 fde9 	bl	80356b0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8030ade:	693b      	ldr	r3, [r7, #16]
 8030ae0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030ae4:	4619      	mov	r1, r3
 8030ae6:	693a      	ldr	r2, [r7, #16]
 8030ae8:	2334      	movs	r3, #52	; 0x34
 8030aea:	fb03 f301 	mul.w	r3, r3, r1
 8030aee:	4413      	add	r3, r2
 8030af0:	3390      	adds	r3, #144	; 0x90
 8030af2:	2202      	movs	r2, #2
 8030af4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8030af6:	7bfb      	ldrb	r3, [r7, #15]
 8030af8:	2b02      	cmp	r3, #2
 8030afa:	d10c      	bne.n	8030b16 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8030afc:	693b      	ldr	r3, [r7, #16]
 8030afe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030b02:	4619      	mov	r1, r3
 8030b04:	693a      	ldr	r2, [r7, #16]
 8030b06:	2334      	movs	r3, #52	; 0x34
 8030b08:	fb03 f301 	mul.w	r3, r3, r1
 8030b0c:	4413      	add	r3, r2
 8030b0e:	3390      	adds	r3, #144	; 0x90
 8030b10:	2205      	movs	r2, #5
 8030b12:	701a      	strb	r2, [r3, #0]
            break;
 8030b14:	e28b      	b.n	803102e <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8030b16:	7bfb      	ldrb	r3, [r7, #15]
 8030b18:	2b04      	cmp	r3, #4
 8030b1a:	f040 8288 	bne.w	803102e <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8030b1e:	693b      	ldr	r3, [r7, #16]
 8030b20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030b24:	4619      	mov	r1, r3
 8030b26:	693a      	ldr	r2, [r7, #16]
 8030b28:	2334      	movs	r3, #52	; 0x34
 8030b2a:	fb03 f301 	mul.w	r3, r3, r1
 8030b2e:	4413      	add	r3, r2
 8030b30:	3390      	adds	r3, #144	; 0x90
 8030b32:	2201      	movs	r2, #1
 8030b34:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8030b36:	693b      	ldr	r3, [r7, #16]
 8030b38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030b3c:	4619      	mov	r1, r3
 8030b3e:	693a      	ldr	r2, [r7, #16]
 8030b40:	2334      	movs	r3, #52	; 0x34
 8030b42:	fb03 f301 	mul.w	r3, r3, r1
 8030b46:	4413      	add	r3, r2
 8030b48:	3391      	adds	r3, #145	; 0x91
 8030b4a:	2202      	movs	r2, #2
 8030b4c:	701a      	strb	r2, [r3, #0]
            break;
 8030b4e:	e26e      	b.n	803102e <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8030b50:	693b      	ldr	r3, [r7, #16]
 8030b52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030b56:	b2db      	uxtb	r3, r3
 8030b58:	4619      	mov	r1, r3
 8030b5a:	6878      	ldr	r0, [r7, #4]
 8030b5c:	f000 ff56 	bl	8031a0c <USBH_MSC_SCSI_TestUnitReady>
 8030b60:	4603      	mov	r3, r0
 8030b62:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8030b64:	7bbb      	ldrb	r3, [r7, #14]
 8030b66:	2b00      	cmp	r3, #0
 8030b68:	d14f      	bne.n	8030c0a <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8030b6a:	693b      	ldr	r3, [r7, #16]
 8030b6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030b70:	4619      	mov	r1, r3
 8030b72:	693a      	ldr	r2, [r7, #16]
 8030b74:	2334      	movs	r3, #52	; 0x34
 8030b76:	fb03 f301 	mul.w	r3, r3, r1
 8030b7a:	4413      	add	r3, r2
 8030b7c:	3392      	adds	r3, #146	; 0x92
 8030b7e:	781b      	ldrb	r3, [r3, #0]
 8030b80:	2b00      	cmp	r3, #0
 8030b82:	d012      	beq.n	8030baa <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8030b84:	693b      	ldr	r3, [r7, #16]
 8030b86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030b8a:	4619      	mov	r1, r3
 8030b8c:	693a      	ldr	r2, [r7, #16]
 8030b8e:	2334      	movs	r3, #52	; 0x34
 8030b90:	fb03 f301 	mul.w	r3, r3, r1
 8030b94:	4413      	add	r3, r2
 8030b96:	33c1      	adds	r3, #193	; 0xc1
 8030b98:	2201      	movs	r2, #1
 8030b9a:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8030b9c:	4857      	ldr	r0, [pc, #348]	; (8030cfc <USBH_MSC_Process+0x394>)
 8030b9e:	f004 fd6f 	bl	8035680 <iprintf>
 8030ba2:	200a      	movs	r0, #10
 8030ba4:	f004 fd84 	bl	80356b0 <putchar>
 8030ba8:	e00b      	b.n	8030bc2 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8030baa:	693b      	ldr	r3, [r7, #16]
 8030bac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030bb0:	4619      	mov	r1, r3
 8030bb2:	693a      	ldr	r2, [r7, #16]
 8030bb4:	2334      	movs	r3, #52	; 0x34
 8030bb6:	fb03 f301 	mul.w	r3, r3, r1
 8030bba:	4413      	add	r3, r2
 8030bbc:	33c1      	adds	r3, #193	; 0xc1
 8030bbe:	2200      	movs	r2, #0
 8030bc0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8030bc2:	693b      	ldr	r3, [r7, #16]
 8030bc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030bc8:	4619      	mov	r1, r3
 8030bca:	693a      	ldr	r2, [r7, #16]
 8030bcc:	2334      	movs	r3, #52	; 0x34
 8030bce:	fb03 f301 	mul.w	r3, r3, r1
 8030bd2:	4413      	add	r3, r2
 8030bd4:	3390      	adds	r3, #144	; 0x90
 8030bd6:	2203      	movs	r2, #3
 8030bd8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8030bda:	693b      	ldr	r3, [r7, #16]
 8030bdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030be0:	4619      	mov	r1, r3
 8030be2:	693a      	ldr	r2, [r7, #16]
 8030be4:	2334      	movs	r3, #52	; 0x34
 8030be6:	fb03 f301 	mul.w	r3, r3, r1
 8030bea:	4413      	add	r3, r2
 8030bec:	3391      	adds	r3, #145	; 0x91
 8030bee:	2200      	movs	r2, #0
 8030bf0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8030bf2:	693b      	ldr	r3, [r7, #16]
 8030bf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030bf8:	4619      	mov	r1, r3
 8030bfa:	693a      	ldr	r2, [r7, #16]
 8030bfc:	2334      	movs	r3, #52	; 0x34
 8030bfe:	fb03 f301 	mul.w	r3, r3, r1
 8030c02:	4413      	add	r3, r2
 8030c04:	3392      	adds	r3, #146	; 0x92
 8030c06:	2200      	movs	r2, #0
 8030c08:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8030c0a:	7bbb      	ldrb	r3, [r7, #14]
 8030c0c:	2b02      	cmp	r3, #2
 8030c0e:	d150      	bne.n	8030cb2 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8030c10:	693b      	ldr	r3, [r7, #16]
 8030c12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030c16:	4619      	mov	r1, r3
 8030c18:	693a      	ldr	r2, [r7, #16]
 8030c1a:	2334      	movs	r3, #52	; 0x34
 8030c1c:	fb03 f301 	mul.w	r3, r3, r1
 8030c20:	4413      	add	r3, r2
 8030c22:	3392      	adds	r3, #146	; 0x92
 8030c24:	781b      	ldrb	r3, [r3, #0]
 8030c26:	2b02      	cmp	r3, #2
 8030c28:	d012      	beq.n	8030c50 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8030c2a:	693b      	ldr	r3, [r7, #16]
 8030c2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030c30:	4619      	mov	r1, r3
 8030c32:	693a      	ldr	r2, [r7, #16]
 8030c34:	2334      	movs	r3, #52	; 0x34
 8030c36:	fb03 f301 	mul.w	r3, r3, r1
 8030c3a:	4413      	add	r3, r2
 8030c3c:	33c1      	adds	r3, #193	; 0xc1
 8030c3e:	2201      	movs	r2, #1
 8030c40:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8030c42:	482f      	ldr	r0, [pc, #188]	; (8030d00 <USBH_MSC_Process+0x398>)
 8030c44:	f004 fd1c 	bl	8035680 <iprintf>
 8030c48:	200a      	movs	r0, #10
 8030c4a:	f004 fd31 	bl	80356b0 <putchar>
 8030c4e:	e00b      	b.n	8030c68 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8030c50:	693b      	ldr	r3, [r7, #16]
 8030c52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030c56:	4619      	mov	r1, r3
 8030c58:	693a      	ldr	r2, [r7, #16]
 8030c5a:	2334      	movs	r3, #52	; 0x34
 8030c5c:	fb03 f301 	mul.w	r3, r3, r1
 8030c60:	4413      	add	r3, r2
 8030c62:	33c1      	adds	r3, #193	; 0xc1
 8030c64:	2200      	movs	r2, #0
 8030c66:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8030c68:	693b      	ldr	r3, [r7, #16]
 8030c6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030c6e:	4619      	mov	r1, r3
 8030c70:	693a      	ldr	r2, [r7, #16]
 8030c72:	2334      	movs	r3, #52	; 0x34
 8030c74:	fb03 f301 	mul.w	r3, r3, r1
 8030c78:	4413      	add	r3, r2
 8030c7a:	3390      	adds	r3, #144	; 0x90
 8030c7c:	2205      	movs	r2, #5
 8030c7e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8030c80:	693b      	ldr	r3, [r7, #16]
 8030c82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030c86:	4619      	mov	r1, r3
 8030c88:	693a      	ldr	r2, [r7, #16]
 8030c8a:	2334      	movs	r3, #52	; 0x34
 8030c8c:	fb03 f301 	mul.w	r3, r3, r1
 8030c90:	4413      	add	r3, r2
 8030c92:	3391      	adds	r3, #145	; 0x91
 8030c94:	2201      	movs	r2, #1
 8030c96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8030c98:	693b      	ldr	r3, [r7, #16]
 8030c9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030c9e:	4619      	mov	r1, r3
 8030ca0:	693a      	ldr	r2, [r7, #16]
 8030ca2:	2334      	movs	r3, #52	; 0x34
 8030ca4:	fb03 f301 	mul.w	r3, r3, r1
 8030ca8:	4413      	add	r3, r2
 8030caa:	3392      	adds	r3, #146	; 0x92
 8030cac:	2202      	movs	r2, #2
 8030cae:	701a      	strb	r2, [r3, #0]
            break;
 8030cb0:	e1bf      	b.n	8031032 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8030cb2:	7bbb      	ldrb	r3, [r7, #14]
 8030cb4:	2b04      	cmp	r3, #4
 8030cb6:	f040 81bc 	bne.w	8031032 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8030cba:	693b      	ldr	r3, [r7, #16]
 8030cbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030cc0:	4619      	mov	r1, r3
 8030cc2:	693a      	ldr	r2, [r7, #16]
 8030cc4:	2334      	movs	r3, #52	; 0x34
 8030cc6:	fb03 f301 	mul.w	r3, r3, r1
 8030cca:	4413      	add	r3, r2
 8030ccc:	3390      	adds	r3, #144	; 0x90
 8030cce:	2201      	movs	r2, #1
 8030cd0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8030cd2:	693b      	ldr	r3, [r7, #16]
 8030cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030cd8:	4619      	mov	r1, r3
 8030cda:	693a      	ldr	r2, [r7, #16]
 8030cdc:	2334      	movs	r3, #52	; 0x34
 8030cde:	fb03 f301 	mul.w	r3, r3, r1
 8030ce2:	4413      	add	r3, r2
 8030ce4:	3391      	adds	r3, #145	; 0x91
 8030ce6:	2202      	movs	r2, #2
 8030ce8:	701a      	strb	r2, [r3, #0]
            break;
 8030cea:	e1a2      	b.n	8031032 <USBH_MSC_Process+0x6ca>
 8030cec:	080378c8 	.word	0x080378c8
 8030cf0:	080378d4 	.word	0x080378d4
 8030cf4:	080378ec 	.word	0x080378ec
 8030cf8:	08037904 	.word	0x08037904
 8030cfc:	0803791c 	.word	0x0803791c
 8030d00:	08037930 	.word	0x08037930
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8030d04:	693b      	ldr	r3, [r7, #16]
 8030d06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030d0a:	b2d9      	uxtb	r1, r3
 8030d0c:	693b      	ldr	r3, [r7, #16]
 8030d0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030d12:	461a      	mov	r2, r3
 8030d14:	2334      	movs	r3, #52	; 0x34
 8030d16:	fb03 f302 	mul.w	r3, r3, r2
 8030d1a:	3390      	adds	r3, #144	; 0x90
 8030d1c:	693a      	ldr	r2, [r7, #16]
 8030d1e:	4413      	add	r3, r2
 8030d20:	3304      	adds	r3, #4
 8030d22:	461a      	mov	r2, r3
 8030d24:	6878      	ldr	r0, [r7, #4]
 8030d26:	f000 feb4 	bl	8031a92 <USBH_MSC_SCSI_ReadCapacity>
 8030d2a:	4603      	mov	r3, r0
 8030d2c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8030d2e:	7bfb      	ldrb	r3, [r7, #15]
 8030d30:	2b00      	cmp	r3, #0
 8030d32:	d170      	bne.n	8030e16 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8030d34:	693b      	ldr	r3, [r7, #16]
 8030d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030d3a:	4619      	mov	r1, r3
 8030d3c:	693a      	ldr	r2, [r7, #16]
 8030d3e:	2334      	movs	r3, #52	; 0x34
 8030d40:	fb03 f301 	mul.w	r3, r3, r1
 8030d44:	4413      	add	r3, r2
 8030d46:	33c1      	adds	r3, #193	; 0xc1
 8030d48:	781b      	ldrb	r3, [r3, #0]
 8030d4a:	2b01      	cmp	r3, #1
 8030d4c:	d142      	bne.n	8030dd4 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 8030d4e:	693b      	ldr	r3, [r7, #16]
 8030d50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030d54:	4619      	mov	r1, r3
 8030d56:	693a      	ldr	r2, [r7, #16]
 8030d58:	2334      	movs	r3, #52	; 0x34
 8030d5a:	fb03 f301 	mul.w	r3, r3, r1
 8030d5e:	4413      	add	r3, r2
 8030d60:	3394      	adds	r3, #148	; 0x94
 8030d62:	681b      	ldr	r3, [r3, #0]
 8030d64:	693a      	ldr	r2, [r7, #16]
 8030d66:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8030d6a:	4610      	mov	r0, r2
 8030d6c:	6939      	ldr	r1, [r7, #16]
 8030d6e:	2234      	movs	r2, #52	; 0x34
 8030d70:	fb02 f200 	mul.w	r2, r2, r0
 8030d74:	440a      	add	r2, r1
 8030d76:	3298      	adds	r2, #152	; 0x98
 8030d78:	8812      	ldrh	r2, [r2, #0]
 8030d7a:	fb02 f303 	mul.w	r3, r2, r3
 8030d7e:	4619      	mov	r1, r3
 8030d80:	48b3      	ldr	r0, [pc, #716]	; (8031050 <USBH_MSC_Process+0x6e8>)
 8030d82:	f004 fc7d 	bl	8035680 <iprintf>
 8030d86:	200a      	movs	r0, #10
 8030d88:	f004 fc92 	bl	80356b0 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8030d8c:	693b      	ldr	r3, [r7, #16]
 8030d8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030d92:	4619      	mov	r1, r3
 8030d94:	693a      	ldr	r2, [r7, #16]
 8030d96:	2334      	movs	r3, #52	; 0x34
 8030d98:	fb03 f301 	mul.w	r3, r3, r1
 8030d9c:	4413      	add	r3, r2
 8030d9e:	3394      	adds	r3, #148	; 0x94
 8030da0:	681b      	ldr	r3, [r3, #0]
 8030da2:	4619      	mov	r1, r3
 8030da4:	48ab      	ldr	r0, [pc, #684]	; (8031054 <USBH_MSC_Process+0x6ec>)
 8030da6:	f004 fc6b 	bl	8035680 <iprintf>
 8030daa:	200a      	movs	r0, #10
 8030dac:	f004 fc80 	bl	80356b0 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8030db0:	693b      	ldr	r3, [r7, #16]
 8030db2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030db6:	4619      	mov	r1, r3
 8030db8:	693a      	ldr	r2, [r7, #16]
 8030dba:	2334      	movs	r3, #52	; 0x34
 8030dbc:	fb03 f301 	mul.w	r3, r3, r1
 8030dc0:	4413      	add	r3, r2
 8030dc2:	3398      	adds	r3, #152	; 0x98
 8030dc4:	881b      	ldrh	r3, [r3, #0]
 8030dc6:	4619      	mov	r1, r3
 8030dc8:	48a3      	ldr	r0, [pc, #652]	; (8031058 <USBH_MSC_Process+0x6f0>)
 8030dca:	f004 fc59 	bl	8035680 <iprintf>
 8030dce:	200a      	movs	r0, #10
 8030dd0:	f004 fc6e 	bl	80356b0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8030dd4:	693b      	ldr	r3, [r7, #16]
 8030dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030dda:	4619      	mov	r1, r3
 8030ddc:	693a      	ldr	r2, [r7, #16]
 8030dde:	2334      	movs	r3, #52	; 0x34
 8030de0:	fb03 f301 	mul.w	r3, r3, r1
 8030de4:	4413      	add	r3, r2
 8030de6:	3390      	adds	r3, #144	; 0x90
 8030de8:	2201      	movs	r2, #1
 8030dea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8030dec:	693b      	ldr	r3, [r7, #16]
 8030dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030df2:	4619      	mov	r1, r3
 8030df4:	693a      	ldr	r2, [r7, #16]
 8030df6:	2334      	movs	r3, #52	; 0x34
 8030df8:	fb03 f301 	mul.w	r3, r3, r1
 8030dfc:	4413      	add	r3, r2
 8030dfe:	3391      	adds	r3, #145	; 0x91
 8030e00:	2200      	movs	r2, #0
 8030e02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8030e04:	693b      	ldr	r3, [r7, #16]
 8030e06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030e0a:	3301      	adds	r3, #1
 8030e0c:	b29a      	uxth	r2, r3
 8030e0e:	693b      	ldr	r3, [r7, #16]
 8030e10:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8030e14:	e10f      	b.n	8031036 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 8030e16:	7bfb      	ldrb	r3, [r7, #15]
 8030e18:	2b02      	cmp	r3, #2
 8030e1a:	d10c      	bne.n	8030e36 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8030e1c:	693b      	ldr	r3, [r7, #16]
 8030e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030e22:	4619      	mov	r1, r3
 8030e24:	693a      	ldr	r2, [r7, #16]
 8030e26:	2334      	movs	r3, #52	; 0x34
 8030e28:	fb03 f301 	mul.w	r3, r3, r1
 8030e2c:	4413      	add	r3, r2
 8030e2e:	3390      	adds	r3, #144	; 0x90
 8030e30:	2205      	movs	r2, #5
 8030e32:	701a      	strb	r2, [r3, #0]
            break;
 8030e34:	e0ff      	b.n	8031036 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8030e36:	7bfb      	ldrb	r3, [r7, #15]
 8030e38:	2b04      	cmp	r3, #4
 8030e3a:	f040 80fc 	bne.w	8031036 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8030e3e:	693b      	ldr	r3, [r7, #16]
 8030e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030e44:	4619      	mov	r1, r3
 8030e46:	693a      	ldr	r2, [r7, #16]
 8030e48:	2334      	movs	r3, #52	; 0x34
 8030e4a:	fb03 f301 	mul.w	r3, r3, r1
 8030e4e:	4413      	add	r3, r2
 8030e50:	3390      	adds	r3, #144	; 0x90
 8030e52:	2201      	movs	r2, #1
 8030e54:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8030e56:	693b      	ldr	r3, [r7, #16]
 8030e58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030e5c:	4619      	mov	r1, r3
 8030e5e:	693a      	ldr	r2, [r7, #16]
 8030e60:	2334      	movs	r3, #52	; 0x34
 8030e62:	fb03 f301 	mul.w	r3, r3, r1
 8030e66:	4413      	add	r3, r2
 8030e68:	3391      	adds	r3, #145	; 0x91
 8030e6a:	2202      	movs	r2, #2
 8030e6c:	701a      	strb	r2, [r3, #0]
            break;
 8030e6e:	e0e2      	b.n	8031036 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8030e70:	693b      	ldr	r3, [r7, #16]
 8030e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030e76:	b2d9      	uxtb	r1, r3
 8030e78:	693b      	ldr	r3, [r7, #16]
 8030e7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030e7e:	461a      	mov	r2, r3
 8030e80:	2334      	movs	r3, #52	; 0x34
 8030e82:	fb03 f302 	mul.w	r3, r3, r2
 8030e86:	3398      	adds	r3, #152	; 0x98
 8030e88:	693a      	ldr	r2, [r7, #16]
 8030e8a:	4413      	add	r3, r2
 8030e8c:	3304      	adds	r3, #4
 8030e8e:	461a      	mov	r2, r3
 8030e90:	6878      	ldr	r0, [r7, #4]
 8030e92:	f000 ff1e 	bl	8031cd2 <USBH_MSC_SCSI_RequestSense>
 8030e96:	4603      	mov	r3, r0
 8030e98:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8030e9a:	7bfb      	ldrb	r3, [r7, #15]
 8030e9c:	2b00      	cmp	r3, #0
 8030e9e:	d17b      	bne.n	8030f98 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8030ea0:	693b      	ldr	r3, [r7, #16]
 8030ea2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030ea6:	4619      	mov	r1, r3
 8030ea8:	693a      	ldr	r2, [r7, #16]
 8030eaa:	2334      	movs	r3, #52	; 0x34
 8030eac:	fb03 f301 	mul.w	r3, r3, r1
 8030eb0:	4413      	add	r3, r2
 8030eb2:	339c      	adds	r3, #156	; 0x9c
 8030eb4:	781b      	ldrb	r3, [r3, #0]
 8030eb6:	2b06      	cmp	r3, #6
 8030eb8:	d00c      	beq.n	8030ed4 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8030eba:	693b      	ldr	r3, [r7, #16]
 8030ebc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030ec0:	4619      	mov	r1, r3
 8030ec2:	693a      	ldr	r2, [r7, #16]
 8030ec4:	2334      	movs	r3, #52	; 0x34
 8030ec6:	fb03 f301 	mul.w	r3, r3, r1
 8030eca:	4413      	add	r3, r2
 8030ecc:	339c      	adds	r3, #156	; 0x9c
 8030ece:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8030ed0:	2b02      	cmp	r3, #2
 8030ed2:	d117      	bne.n	8030f04 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8030ed4:	687b      	ldr	r3, [r7, #4]
 8030ed6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8030eda:	693b      	ldr	r3, [r7, #16]
 8030edc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8030ee0:	1ad3      	subs	r3, r2, r3
 8030ee2:	f242 720f 	movw	r2, #9999	; 0x270f
 8030ee6:	4293      	cmp	r3, r2
 8030ee8:	d80c      	bhi.n	8030f04 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8030eea:	693b      	ldr	r3, [r7, #16]
 8030eec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030ef0:	4619      	mov	r1, r3
 8030ef2:	693a      	ldr	r2, [r7, #16]
 8030ef4:	2334      	movs	r3, #52	; 0x34
 8030ef6:	fb03 f301 	mul.w	r3, r3, r1
 8030efa:	4413      	add	r3, r2
 8030efc:	3390      	adds	r3, #144	; 0x90
 8030efe:	2202      	movs	r2, #2
 8030f00:	701a      	strb	r2, [r3, #0]
                  break;
 8030f02:	e09b      	b.n	803103c <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8030f04:	693b      	ldr	r3, [r7, #16]
 8030f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030f0a:	4619      	mov	r1, r3
 8030f0c:	693a      	ldr	r2, [r7, #16]
 8030f0e:	2334      	movs	r3, #52	; 0x34
 8030f10:	fb03 f301 	mul.w	r3, r3, r1
 8030f14:	4413      	add	r3, r2
 8030f16:	339c      	adds	r3, #156	; 0x9c
 8030f18:	781b      	ldrb	r3, [r3, #0]
 8030f1a:	4619      	mov	r1, r3
 8030f1c:	484f      	ldr	r0, [pc, #316]	; (803105c <USBH_MSC_Process+0x6f4>)
 8030f1e:	f004 fbaf 	bl	8035680 <iprintf>
 8030f22:	200a      	movs	r0, #10
 8030f24:	f004 fbc4 	bl	80356b0 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8030f28:	693b      	ldr	r3, [r7, #16]
 8030f2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030f2e:	4619      	mov	r1, r3
 8030f30:	693a      	ldr	r2, [r7, #16]
 8030f32:	2334      	movs	r3, #52	; 0x34
 8030f34:	fb03 f301 	mul.w	r3, r3, r1
 8030f38:	4413      	add	r3, r2
 8030f3a:	339d      	adds	r3, #157	; 0x9d
 8030f3c:	781b      	ldrb	r3, [r3, #0]
 8030f3e:	4619      	mov	r1, r3
 8030f40:	4847      	ldr	r0, [pc, #284]	; (8031060 <USBH_MSC_Process+0x6f8>)
 8030f42:	f004 fb9d 	bl	8035680 <iprintf>
 8030f46:	200a      	movs	r0, #10
 8030f48:	f004 fbb2 	bl	80356b0 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8030f4c:	693b      	ldr	r3, [r7, #16]
 8030f4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030f52:	4619      	mov	r1, r3
 8030f54:	693a      	ldr	r2, [r7, #16]
 8030f56:	2334      	movs	r3, #52	; 0x34
 8030f58:	fb03 f301 	mul.w	r3, r3, r1
 8030f5c:	4413      	add	r3, r2
 8030f5e:	339e      	adds	r3, #158	; 0x9e
 8030f60:	781b      	ldrb	r3, [r3, #0]
 8030f62:	4619      	mov	r1, r3
 8030f64:	483f      	ldr	r0, [pc, #252]	; (8031064 <USBH_MSC_Process+0x6fc>)
 8030f66:	f004 fb8b 	bl	8035680 <iprintf>
 8030f6a:	200a      	movs	r0, #10
 8030f6c:	f004 fba0 	bl	80356b0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8030f70:	693b      	ldr	r3, [r7, #16]
 8030f72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030f76:	4619      	mov	r1, r3
 8030f78:	693a      	ldr	r2, [r7, #16]
 8030f7a:	2334      	movs	r3, #52	; 0x34
 8030f7c:	fb03 f301 	mul.w	r3, r3, r1
 8030f80:	4413      	add	r3, r2
 8030f82:	3390      	adds	r3, #144	; 0x90
 8030f84:	2201      	movs	r2, #1
 8030f86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8030f88:	693b      	ldr	r3, [r7, #16]
 8030f8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030f8e:	3301      	adds	r3, #1
 8030f90:	b29a      	uxth	r2, r3
 8030f92:	693b      	ldr	r3, [r7, #16]
 8030f94:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8030f98:	7bfb      	ldrb	r3, [r7, #15]
 8030f9a:	2b02      	cmp	r3, #2
 8030f9c:	d112      	bne.n	8030fc4 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 8030f9e:	4832      	ldr	r0, [pc, #200]	; (8031068 <USBH_MSC_Process+0x700>)
 8030fa0:	f004 fb6e 	bl	8035680 <iprintf>
 8030fa4:	200a      	movs	r0, #10
 8030fa6:	f004 fb83 	bl	80356b0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8030faa:	693b      	ldr	r3, [r7, #16]
 8030fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030fb0:	4619      	mov	r1, r3
 8030fb2:	693a      	ldr	r2, [r7, #16]
 8030fb4:	2334      	movs	r3, #52	; 0x34
 8030fb6:	fb03 f301 	mul.w	r3, r3, r1
 8030fba:	4413      	add	r3, r2
 8030fbc:	3390      	adds	r3, #144	; 0x90
 8030fbe:	2208      	movs	r2, #8
 8030fc0:	701a      	strb	r2, [r3, #0]
            break;
 8030fc2:	e03a      	b.n	803103a <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8030fc4:	7bfb      	ldrb	r3, [r7, #15]
 8030fc6:	2b04      	cmp	r3, #4
 8030fc8:	d137      	bne.n	803103a <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8030fca:	693b      	ldr	r3, [r7, #16]
 8030fcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030fd0:	4619      	mov	r1, r3
 8030fd2:	693a      	ldr	r2, [r7, #16]
 8030fd4:	2334      	movs	r3, #52	; 0x34
 8030fd6:	fb03 f301 	mul.w	r3, r3, r1
 8030fda:	4413      	add	r3, r2
 8030fdc:	3390      	adds	r3, #144	; 0x90
 8030fde:	2201      	movs	r2, #1
 8030fe0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8030fe2:	693b      	ldr	r3, [r7, #16]
 8030fe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8030fe8:	4619      	mov	r1, r3
 8030fea:	693a      	ldr	r2, [r7, #16]
 8030fec:	2334      	movs	r3, #52	; 0x34
 8030fee:	fb03 f301 	mul.w	r3, r3, r1
 8030ff2:	4413      	add	r3, r2
 8030ff4:	3391      	adds	r3, #145	; 0x91
 8030ff6:	2202      	movs	r2, #2
 8030ff8:	701a      	strb	r2, [r3, #0]
            break;
 8030ffa:	e01e      	b.n	803103a <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 8030ffc:	693b      	ldr	r3, [r7, #16]
 8030ffe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8031002:	3301      	adds	r3, #1
 8031004:	b29a      	uxth	r2, r3
 8031006:	693b      	ldr	r3, [r7, #16]
 8031008:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 803100c:	e016      	b.n	803103c <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 803100e:	693b      	ldr	r3, [r7, #16]
 8031010:	2200      	movs	r2, #0
 8031012:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8031016:	693b      	ldr	r3, [r7, #16]
 8031018:	2201      	movs	r2, #1
 803101a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 803101c:	687b      	ldr	r3, [r7, #4]
 803101e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8031022:	2102      	movs	r1, #2
 8031024:	6878      	ldr	r0, [r7, #4]
 8031026:	4798      	blx	r3
      break;
 8031028:	e00c      	b.n	8031044 <USBH_MSC_Process+0x6dc>
            break;
 803102a:	bf00      	nop
 803102c:	e00a      	b.n	8031044 <USBH_MSC_Process+0x6dc>
            break;
 803102e:	bf00      	nop
 8031030:	e008      	b.n	8031044 <USBH_MSC_Process+0x6dc>
            break;
 8031032:	bf00      	nop
 8031034:	e006      	b.n	8031044 <USBH_MSC_Process+0x6dc>
            break;
 8031036:	bf00      	nop
 8031038:	e004      	b.n	8031044 <USBH_MSC_Process+0x6dc>
            break;
 803103a:	bf00      	nop
      break;
 803103c:	e002      	b.n	8031044 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 803103e:	2300      	movs	r3, #0
 8031040:	75fb      	strb	r3, [r7, #23]
      break;
 8031042:	bf00      	nop
  }
  return error;
 8031044:	7dfb      	ldrb	r3, [r7, #23]
}
 8031046:	4618      	mov	r0, r3
 8031048:	3718      	adds	r7, #24
 803104a:	46bd      	mov	sp, r7
 803104c:	bd80      	pop	{r7, pc}
 803104e:	bf00      	nop
 8031050:	08037948 	.word	0x08037948
 8031054:	08037968 	.word	0x08037968
 8031058:	0803797c 	.word	0x0803797c
 803105c:	08037990 	.word	0x08037990
 8031060:	080379a0 	.word	0x080379a0
 8031064:	080379bc 	.word	0x080379bc
 8031068:	08037930 	.word	0x08037930

0803106c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 803106c:	b480      	push	{r7}
 803106e:	b083      	sub	sp, #12
 8031070:	af00      	add	r7, sp, #0
 8031072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8031074:	2300      	movs	r3, #0
}
 8031076:	4618      	mov	r0, r3
 8031078:	370c      	adds	r7, #12
 803107a:	46bd      	mov	sp, r7
 803107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031080:	4770      	bx	lr
	...

08031084 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8031084:	b580      	push	{r7, lr}
 8031086:	b088      	sub	sp, #32
 8031088:	af02      	add	r7, sp, #8
 803108a:	6078      	str	r0, [r7, #4]
 803108c:	460b      	mov	r3, r1
 803108e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031090:	687b      	ldr	r3, [r7, #4]
 8031092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031096:	69db      	ldr	r3, [r3, #28]
 8031098:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 803109a:	2301      	movs	r3, #1
 803109c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 803109e:	2301      	movs	r3, #1
 80310a0:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80310a2:	78fb      	ldrb	r3, [r7, #3]
 80310a4:	693a      	ldr	r2, [r7, #16]
 80310a6:	2134      	movs	r1, #52	; 0x34
 80310a8:	fb01 f303 	mul.w	r3, r1, r3
 80310ac:	4413      	add	r3, r2
 80310ae:	3390      	adds	r3, #144	; 0x90
 80310b0:	781b      	ldrb	r3, [r3, #0]
 80310b2:	2b06      	cmp	r3, #6
 80310b4:	d004      	beq.n	80310c0 <USBH_MSC_RdWrProcess+0x3c>
 80310b6:	2b07      	cmp	r3, #7
 80310b8:	d038      	beq.n	803112c <USBH_MSC_RdWrProcess+0xa8>
 80310ba:	2b05      	cmp	r3, #5
 80310bc:	d06b      	beq.n	8031196 <USBH_MSC_RdWrProcess+0x112>
#endif
#endif
      break;

    default:
      break;
 80310be:	e0db      	b.n	8031278 <USBH_MSC_RdWrProcess+0x1f4>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80310c0:	78f9      	ldrb	r1, [r7, #3]
 80310c2:	2300      	movs	r3, #0
 80310c4:	9300      	str	r3, [sp, #0]
 80310c6:	2300      	movs	r3, #0
 80310c8:	2200      	movs	r2, #0
 80310ca:	6878      	ldr	r0, [r7, #4]
 80310cc:	f000 fee5 	bl	8031e9a <USBH_MSC_SCSI_Read>
 80310d0:	4603      	mov	r3, r0
 80310d2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80310d4:	7bfb      	ldrb	r3, [r7, #15]
 80310d6:	2b00      	cmp	r3, #0
 80310d8:	d10b      	bne.n	80310f2 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80310da:	78fb      	ldrb	r3, [r7, #3]
 80310dc:	693a      	ldr	r2, [r7, #16]
 80310de:	2134      	movs	r1, #52	; 0x34
 80310e0:	fb01 f303 	mul.w	r3, r1, r3
 80310e4:	4413      	add	r3, r2
 80310e6:	3390      	adds	r3, #144	; 0x90
 80310e8:	2201      	movs	r2, #1
 80310ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80310ec:	2300      	movs	r3, #0
 80310ee:	75fb      	strb	r3, [r7, #23]
      break;
 80310f0:	e0bd      	b.n	803126e <USBH_MSC_RdWrProcess+0x1ea>
      else if (scsi_status == USBH_FAIL)
 80310f2:	7bfb      	ldrb	r3, [r7, #15]
 80310f4:	2b02      	cmp	r3, #2
 80310f6:	d109      	bne.n	803110c <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80310f8:	78fb      	ldrb	r3, [r7, #3]
 80310fa:	693a      	ldr	r2, [r7, #16]
 80310fc:	2134      	movs	r1, #52	; 0x34
 80310fe:	fb01 f303 	mul.w	r3, r1, r3
 8031102:	4413      	add	r3, r2
 8031104:	3390      	adds	r3, #144	; 0x90
 8031106:	2205      	movs	r2, #5
 8031108:	701a      	strb	r2, [r3, #0]
      break;
 803110a:	e0b0      	b.n	803126e <USBH_MSC_RdWrProcess+0x1ea>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 803110c:	7bfb      	ldrb	r3, [r7, #15]
 803110e:	2b04      	cmp	r3, #4
 8031110:	f040 80ad 	bne.w	803126e <USBH_MSC_RdWrProcess+0x1ea>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8031114:	78fb      	ldrb	r3, [r7, #3]
 8031116:	693a      	ldr	r2, [r7, #16]
 8031118:	2134      	movs	r1, #52	; 0x34
 803111a:	fb01 f303 	mul.w	r3, r1, r3
 803111e:	4413      	add	r3, r2
 8031120:	3390      	adds	r3, #144	; 0x90
 8031122:	2208      	movs	r2, #8
 8031124:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8031126:	2302      	movs	r3, #2
 8031128:	75fb      	strb	r3, [r7, #23]
      break;
 803112a:	e0a0      	b.n	803126e <USBH_MSC_RdWrProcess+0x1ea>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 803112c:	78f9      	ldrb	r1, [r7, #3]
 803112e:	2300      	movs	r3, #0
 8031130:	9300      	str	r3, [sp, #0]
 8031132:	2300      	movs	r3, #0
 8031134:	2200      	movs	r2, #0
 8031136:	6878      	ldr	r0, [r7, #4]
 8031138:	f000 fe44 	bl	8031dc4 <USBH_MSC_SCSI_Write>
 803113c:	4603      	mov	r3, r0
 803113e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8031140:	7bfb      	ldrb	r3, [r7, #15]
 8031142:	2b00      	cmp	r3, #0
 8031144:	d10b      	bne.n	803115e <USBH_MSC_RdWrProcess+0xda>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8031146:	78fb      	ldrb	r3, [r7, #3]
 8031148:	693a      	ldr	r2, [r7, #16]
 803114a:	2134      	movs	r1, #52	; 0x34
 803114c:	fb01 f303 	mul.w	r3, r1, r3
 8031150:	4413      	add	r3, r2
 8031152:	3390      	adds	r3, #144	; 0x90
 8031154:	2201      	movs	r2, #1
 8031156:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8031158:	2300      	movs	r3, #0
 803115a:	75fb      	strb	r3, [r7, #23]
      break;
 803115c:	e089      	b.n	8031272 <USBH_MSC_RdWrProcess+0x1ee>
      else if (scsi_status == USBH_FAIL)
 803115e:	7bfb      	ldrb	r3, [r7, #15]
 8031160:	2b02      	cmp	r3, #2
 8031162:	d109      	bne.n	8031178 <USBH_MSC_RdWrProcess+0xf4>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8031164:	78fb      	ldrb	r3, [r7, #3]
 8031166:	693a      	ldr	r2, [r7, #16]
 8031168:	2134      	movs	r1, #52	; 0x34
 803116a:	fb01 f303 	mul.w	r3, r1, r3
 803116e:	4413      	add	r3, r2
 8031170:	3390      	adds	r3, #144	; 0x90
 8031172:	2205      	movs	r2, #5
 8031174:	701a      	strb	r2, [r3, #0]
      break;
 8031176:	e07c      	b.n	8031272 <USBH_MSC_RdWrProcess+0x1ee>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8031178:	7bfb      	ldrb	r3, [r7, #15]
 803117a:	2b04      	cmp	r3, #4
 803117c:	d179      	bne.n	8031272 <USBH_MSC_RdWrProcess+0x1ee>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 803117e:	78fb      	ldrb	r3, [r7, #3]
 8031180:	693a      	ldr	r2, [r7, #16]
 8031182:	2134      	movs	r1, #52	; 0x34
 8031184:	fb01 f303 	mul.w	r3, r1, r3
 8031188:	4413      	add	r3, r2
 803118a:	3390      	adds	r3, #144	; 0x90
 803118c:	2208      	movs	r2, #8
 803118e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8031190:	2302      	movs	r3, #2
 8031192:	75fb      	strb	r3, [r7, #23]
      break;
 8031194:	e06d      	b.n	8031272 <USBH_MSC_RdWrProcess+0x1ee>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8031196:	78fb      	ldrb	r3, [r7, #3]
 8031198:	2234      	movs	r2, #52	; 0x34
 803119a:	fb02 f303 	mul.w	r3, r2, r3
 803119e:	3398      	adds	r3, #152	; 0x98
 80311a0:	693a      	ldr	r2, [r7, #16]
 80311a2:	4413      	add	r3, r2
 80311a4:	1d1a      	adds	r2, r3, #4
 80311a6:	78fb      	ldrb	r3, [r7, #3]
 80311a8:	4619      	mov	r1, r3
 80311aa:	6878      	ldr	r0, [r7, #4]
 80311ac:	f000 fd91 	bl	8031cd2 <USBH_MSC_SCSI_RequestSense>
 80311b0:	4603      	mov	r3, r0
 80311b2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80311b4:	7bfb      	ldrb	r3, [r7, #15]
 80311b6:	2b00      	cmp	r3, #0
 80311b8:	d140      	bne.n	803123c <USBH_MSC_RdWrProcess+0x1b8>
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 80311ba:	78fb      	ldrb	r3, [r7, #3]
 80311bc:	693a      	ldr	r2, [r7, #16]
 80311be:	2134      	movs	r1, #52	; 0x34
 80311c0:	fb01 f303 	mul.w	r3, r1, r3
 80311c4:	4413      	add	r3, r2
 80311c6:	339c      	adds	r3, #156	; 0x9c
 80311c8:	781b      	ldrb	r3, [r3, #0]
 80311ca:	4619      	mov	r1, r3
 80311cc:	482d      	ldr	r0, [pc, #180]	; (8031284 <USBH_MSC_RdWrProcess+0x200>)
 80311ce:	f004 fa57 	bl	8035680 <iprintf>
 80311d2:	200a      	movs	r0, #10
 80311d4:	f004 fa6c 	bl	80356b0 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 80311d8:	78fb      	ldrb	r3, [r7, #3]
 80311da:	693a      	ldr	r2, [r7, #16]
 80311dc:	2134      	movs	r1, #52	; 0x34
 80311de:	fb01 f303 	mul.w	r3, r1, r3
 80311e2:	4413      	add	r3, r2
 80311e4:	339d      	adds	r3, #157	; 0x9d
 80311e6:	781b      	ldrb	r3, [r3, #0]
 80311e8:	4619      	mov	r1, r3
 80311ea:	4827      	ldr	r0, [pc, #156]	; (8031288 <USBH_MSC_RdWrProcess+0x204>)
 80311ec:	f004 fa48 	bl	8035680 <iprintf>
 80311f0:	200a      	movs	r0, #10
 80311f2:	f004 fa5d 	bl	80356b0 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 80311f6:	78fb      	ldrb	r3, [r7, #3]
 80311f8:	693a      	ldr	r2, [r7, #16]
 80311fa:	2134      	movs	r1, #52	; 0x34
 80311fc:	fb01 f303 	mul.w	r3, r1, r3
 8031200:	4413      	add	r3, r2
 8031202:	339e      	adds	r3, #158	; 0x9e
 8031204:	781b      	ldrb	r3, [r3, #0]
 8031206:	4619      	mov	r1, r3
 8031208:	4820      	ldr	r0, [pc, #128]	; (803128c <USBH_MSC_RdWrProcess+0x208>)
 803120a:	f004 fa39 	bl	8035680 <iprintf>
 803120e:	200a      	movs	r0, #10
 8031210:	f004 fa4e 	bl	80356b0 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8031214:	78fb      	ldrb	r3, [r7, #3]
 8031216:	693a      	ldr	r2, [r7, #16]
 8031218:	2134      	movs	r1, #52	; 0x34
 803121a:	fb01 f303 	mul.w	r3, r1, r3
 803121e:	4413      	add	r3, r2
 8031220:	3390      	adds	r3, #144	; 0x90
 8031222:	2201      	movs	r2, #1
 8031224:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8031226:	78fb      	ldrb	r3, [r7, #3]
 8031228:	693a      	ldr	r2, [r7, #16]
 803122a:	2134      	movs	r1, #52	; 0x34
 803122c:	fb01 f303 	mul.w	r3, r1, r3
 8031230:	4413      	add	r3, r2
 8031232:	3391      	adds	r3, #145	; 0x91
 8031234:	2202      	movs	r2, #2
 8031236:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8031238:	2302      	movs	r3, #2
 803123a:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 803123c:	7bfb      	ldrb	r3, [r7, #15]
 803123e:	2b02      	cmp	r3, #2
 8031240:	d106      	bne.n	8031250 <USBH_MSC_RdWrProcess+0x1cc>
        USBH_UsrLog("MSC Device NOT ready");
 8031242:	4813      	ldr	r0, [pc, #76]	; (8031290 <USBH_MSC_RdWrProcess+0x20c>)
 8031244:	f004 fa1c 	bl	8035680 <iprintf>
 8031248:	200a      	movs	r0, #10
 803124a:	f004 fa31 	bl	80356b0 <putchar>
      break;
 803124e:	e012      	b.n	8031276 <USBH_MSC_RdWrProcess+0x1f2>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8031250:	7bfb      	ldrb	r3, [r7, #15]
 8031252:	2b04      	cmp	r3, #4
 8031254:	d10f      	bne.n	8031276 <USBH_MSC_RdWrProcess+0x1f2>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8031256:	78fb      	ldrb	r3, [r7, #3]
 8031258:	693a      	ldr	r2, [r7, #16]
 803125a:	2134      	movs	r1, #52	; 0x34
 803125c:	fb01 f303 	mul.w	r3, r1, r3
 8031260:	4413      	add	r3, r2
 8031262:	3390      	adds	r3, #144	; 0x90
 8031264:	2208      	movs	r2, #8
 8031266:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8031268:	2302      	movs	r3, #2
 803126a:	75fb      	strb	r3, [r7, #23]
      break;
 803126c:	e003      	b.n	8031276 <USBH_MSC_RdWrProcess+0x1f2>
      break;
 803126e:	bf00      	nop
 8031270:	e002      	b.n	8031278 <USBH_MSC_RdWrProcess+0x1f4>
      break;
 8031272:	bf00      	nop
 8031274:	e000      	b.n	8031278 <USBH_MSC_RdWrProcess+0x1f4>
      break;
 8031276:	bf00      	nop

  }
  return error;
 8031278:	7dfb      	ldrb	r3, [r7, #23]
}
 803127a:	4618      	mov	r0, r3
 803127c:	3718      	adds	r7, #24
 803127e:	46bd      	mov	sp, r7
 8031280:	bd80      	pop	{r7, pc}
 8031282:	bf00      	nop
 8031284:	08037990 	.word	0x08037990
 8031288:	080379a0 	.word	0x080379a0
 803128c:	080379bc 	.word	0x080379bc
 8031290:	08037930 	.word	0x08037930

08031294 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8031294:	b480      	push	{r7}
 8031296:	b085      	sub	sp, #20
 8031298:	af00      	add	r7, sp, #0
 803129a:	6078      	str	r0, [r7, #4]
 803129c:	460b      	mov	r3, r1
 803129e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80312a0:	687b      	ldr	r3, [r7, #4]
 80312a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80312a6:	69db      	ldr	r3, [r3, #28]
 80312a8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80312aa:	687b      	ldr	r3, [r7, #4]
 80312ac:	781b      	ldrb	r3, [r3, #0]
 80312ae:	b2db      	uxtb	r3, r3
 80312b0:	2b0b      	cmp	r3, #11
 80312b2:	d10c      	bne.n	80312ce <USBH_MSC_UnitIsReady+0x3a>
 80312b4:	78fb      	ldrb	r3, [r7, #3]
 80312b6:	68ba      	ldr	r2, [r7, #8]
 80312b8:	2134      	movs	r1, #52	; 0x34
 80312ba:	fb01 f303 	mul.w	r3, r1, r3
 80312be:	4413      	add	r3, r2
 80312c0:	3391      	adds	r3, #145	; 0x91
 80312c2:	781b      	ldrb	r3, [r3, #0]
 80312c4:	2b00      	cmp	r3, #0
 80312c6:	d102      	bne.n	80312ce <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80312c8:	2301      	movs	r3, #1
 80312ca:	73fb      	strb	r3, [r7, #15]
 80312cc:	e001      	b.n	80312d2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80312ce:	2300      	movs	r3, #0
 80312d0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80312d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80312d4:	4618      	mov	r0, r3
 80312d6:	3714      	adds	r7, #20
 80312d8:	46bd      	mov	sp, r7
 80312da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80312de:	4770      	bx	lr

080312e0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80312e0:	b580      	push	{r7, lr}
 80312e2:	b086      	sub	sp, #24
 80312e4:	af00      	add	r7, sp, #0
 80312e6:	60f8      	str	r0, [r7, #12]
 80312e8:	460b      	mov	r3, r1
 80312ea:	607a      	str	r2, [r7, #4]
 80312ec:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80312ee:	68fb      	ldr	r3, [r7, #12]
 80312f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80312f4:	69db      	ldr	r3, [r3, #28]
 80312f6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80312f8:	68fb      	ldr	r3, [r7, #12]
 80312fa:	781b      	ldrb	r3, [r3, #0]
 80312fc:	b2db      	uxtb	r3, r3
 80312fe:	2b0b      	cmp	r3, #11
 8031300:	d10d      	bne.n	803131e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8031302:	7afb      	ldrb	r3, [r7, #11]
 8031304:	2234      	movs	r2, #52	; 0x34
 8031306:	fb02 f303 	mul.w	r3, r2, r3
 803130a:	3390      	adds	r3, #144	; 0x90
 803130c:	697a      	ldr	r2, [r7, #20]
 803130e:	4413      	add	r3, r2
 8031310:	2234      	movs	r2, #52	; 0x34
 8031312:	4619      	mov	r1, r3
 8031314:	6878      	ldr	r0, [r7, #4]
 8031316:	f003 fc9b 	bl	8034c50 <memcpy>
    return USBH_OK;
 803131a:	2300      	movs	r3, #0
 803131c:	e000      	b.n	8031320 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 803131e:	2302      	movs	r3, #2
  }
}
 8031320:	4618      	mov	r0, r3
 8031322:	3718      	adds	r7, #24
 8031324:	46bd      	mov	sp, r7
 8031326:	bd80      	pop	{r7, pc}

08031328 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8031328:	b580      	push	{r7, lr}
 803132a:	b088      	sub	sp, #32
 803132c:	af02      	add	r7, sp, #8
 803132e:	60f8      	str	r0, [r7, #12]
 8031330:	607a      	str	r2, [r7, #4]
 8031332:	603b      	str	r3, [r7, #0]
 8031334:	460b      	mov	r3, r1
 8031336:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031338:	68fb      	ldr	r3, [r7, #12]
 803133a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803133e:	69db      	ldr	r3, [r3, #28]
 8031340:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8031342:	68fb      	ldr	r3, [r7, #12]
 8031344:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8031348:	b2db      	uxtb	r3, r3
 803134a:	2b00      	cmp	r3, #0
 803134c:	d00e      	beq.n	803136c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 803134e:	68fb      	ldr	r3, [r7, #12]
 8031350:	781b      	ldrb	r3, [r3, #0]
 8031352:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8031354:	2b0b      	cmp	r3, #11
 8031356:	d109      	bne.n	803136c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8031358:	7afb      	ldrb	r3, [r7, #11]
 803135a:	697a      	ldr	r2, [r7, #20]
 803135c:	2134      	movs	r1, #52	; 0x34
 803135e:	fb01 f303 	mul.w	r3, r1, r3
 8031362:	4413      	add	r3, r2
 8031364:	3390      	adds	r3, #144	; 0x90
 8031366:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8031368:	2b01      	cmp	r3, #1
 803136a:	d001      	beq.n	8031370 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 803136c:	2302      	movs	r3, #2
 803136e:	e040      	b.n	80313f2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8031370:	697b      	ldr	r3, [r7, #20]
 8031372:	2206      	movs	r2, #6
 8031374:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8031376:	7afb      	ldrb	r3, [r7, #11]
 8031378:	697a      	ldr	r2, [r7, #20]
 803137a:	2134      	movs	r1, #52	; 0x34
 803137c:	fb01 f303 	mul.w	r3, r1, r3
 8031380:	4413      	add	r3, r2
 8031382:	3390      	adds	r3, #144	; 0x90
 8031384:	2206      	movs	r2, #6
 8031386:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8031388:	7afb      	ldrb	r3, [r7, #11]
 803138a:	b29a      	uxth	r2, r3
 803138c:	697b      	ldr	r3, [r7, #20]
 803138e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8031392:	7af9      	ldrb	r1, [r7, #11]
 8031394:	6a3b      	ldr	r3, [r7, #32]
 8031396:	9300      	str	r3, [sp, #0]
 8031398:	683b      	ldr	r3, [r7, #0]
 803139a:	687a      	ldr	r2, [r7, #4]
 803139c:	68f8      	ldr	r0, [r7, #12]
 803139e:	f000 fd7c 	bl	8031e9a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80313a2:	68fb      	ldr	r3, [r7, #12]
 80313a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80313a8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80313aa:	e016      	b.n	80313da <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80313ac:	68fb      	ldr	r3, [r7, #12]
 80313ae:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80313b2:	693b      	ldr	r3, [r7, #16]
 80313b4:	1ad2      	subs	r2, r2, r3
 80313b6:	6a3b      	ldr	r3, [r7, #32]
 80313b8:	f242 7110 	movw	r1, #10000	; 0x2710
 80313bc:	fb01 f303 	mul.w	r3, r1, r3
 80313c0:	429a      	cmp	r2, r3
 80313c2:	d805      	bhi.n	80313d0 <USBH_MSC_Read+0xa8>
 80313c4:	68fb      	ldr	r3, [r7, #12]
 80313c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80313ca:	b2db      	uxtb	r3, r3
 80313cc:	2b00      	cmp	r3, #0
 80313ce:	d104      	bne.n	80313da <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80313d0:	697b      	ldr	r3, [r7, #20]
 80313d2:	2201      	movs	r2, #1
 80313d4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80313d6:	2302      	movs	r3, #2
 80313d8:	e00b      	b.n	80313f2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80313da:	7afb      	ldrb	r3, [r7, #11]
 80313dc:	4619      	mov	r1, r3
 80313de:	68f8      	ldr	r0, [r7, #12]
 80313e0:	f7ff fe50 	bl	8031084 <USBH_MSC_RdWrProcess>
 80313e4:	4603      	mov	r3, r0
 80313e6:	2b01      	cmp	r3, #1
 80313e8:	d0e0      	beq.n	80313ac <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80313ea:	697b      	ldr	r3, [r7, #20]
 80313ec:	2201      	movs	r2, #1
 80313ee:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80313f0:	2300      	movs	r3, #0
}
 80313f2:	4618      	mov	r0, r3
 80313f4:	3718      	adds	r7, #24
 80313f6:	46bd      	mov	sp, r7
 80313f8:	bd80      	pop	{r7, pc}

080313fa <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80313fa:	b580      	push	{r7, lr}
 80313fc:	b088      	sub	sp, #32
 80313fe:	af02      	add	r7, sp, #8
 8031400:	60f8      	str	r0, [r7, #12]
 8031402:	607a      	str	r2, [r7, #4]
 8031404:	603b      	str	r3, [r7, #0]
 8031406:	460b      	mov	r3, r1
 8031408:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 803140a:	68fb      	ldr	r3, [r7, #12]
 803140c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031410:	69db      	ldr	r3, [r3, #28]
 8031412:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8031414:	68fb      	ldr	r3, [r7, #12]
 8031416:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 803141a:	b2db      	uxtb	r3, r3
 803141c:	2b00      	cmp	r3, #0
 803141e:	d00e      	beq.n	803143e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8031420:	68fb      	ldr	r3, [r7, #12]
 8031422:	781b      	ldrb	r3, [r3, #0]
 8031424:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8031426:	2b0b      	cmp	r3, #11
 8031428:	d109      	bne.n	803143e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 803142a:	7afb      	ldrb	r3, [r7, #11]
 803142c:	697a      	ldr	r2, [r7, #20]
 803142e:	2134      	movs	r1, #52	; 0x34
 8031430:	fb01 f303 	mul.w	r3, r1, r3
 8031434:	4413      	add	r3, r2
 8031436:	3390      	adds	r3, #144	; 0x90
 8031438:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 803143a:	2b01      	cmp	r3, #1
 803143c:	d001      	beq.n	8031442 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 803143e:	2302      	movs	r3, #2
 8031440:	e040      	b.n	80314c4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8031442:	697b      	ldr	r3, [r7, #20]
 8031444:	2207      	movs	r2, #7
 8031446:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8031448:	7afb      	ldrb	r3, [r7, #11]
 803144a:	697a      	ldr	r2, [r7, #20]
 803144c:	2134      	movs	r1, #52	; 0x34
 803144e:	fb01 f303 	mul.w	r3, r1, r3
 8031452:	4413      	add	r3, r2
 8031454:	3390      	adds	r3, #144	; 0x90
 8031456:	2207      	movs	r2, #7
 8031458:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 803145a:	7afb      	ldrb	r3, [r7, #11]
 803145c:	b29a      	uxth	r2, r3
 803145e:	697b      	ldr	r3, [r7, #20]
 8031460:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8031464:	7af9      	ldrb	r1, [r7, #11]
 8031466:	6a3b      	ldr	r3, [r7, #32]
 8031468:	9300      	str	r3, [sp, #0]
 803146a:	683b      	ldr	r3, [r7, #0]
 803146c:	687a      	ldr	r2, [r7, #4]
 803146e:	68f8      	ldr	r0, [r7, #12]
 8031470:	f000 fca8 	bl	8031dc4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8031474:	68fb      	ldr	r3, [r7, #12]
 8031476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 803147a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 803147c:	e016      	b.n	80314ac <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 803147e:	68fb      	ldr	r3, [r7, #12]
 8031480:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8031484:	693b      	ldr	r3, [r7, #16]
 8031486:	1ad2      	subs	r2, r2, r3
 8031488:	6a3b      	ldr	r3, [r7, #32]
 803148a:	f242 7110 	movw	r1, #10000	; 0x2710
 803148e:	fb01 f303 	mul.w	r3, r1, r3
 8031492:	429a      	cmp	r2, r3
 8031494:	d805      	bhi.n	80314a2 <USBH_MSC_Write+0xa8>
 8031496:	68fb      	ldr	r3, [r7, #12]
 8031498:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 803149c:	b2db      	uxtb	r3, r3
 803149e:	2b00      	cmp	r3, #0
 80314a0:	d104      	bne.n	80314ac <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80314a2:	697b      	ldr	r3, [r7, #20]
 80314a4:	2201      	movs	r2, #1
 80314a6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80314a8:	2302      	movs	r3, #2
 80314aa:	e00b      	b.n	80314c4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80314ac:	7afb      	ldrb	r3, [r7, #11]
 80314ae:	4619      	mov	r1, r3
 80314b0:	68f8      	ldr	r0, [r7, #12]
 80314b2:	f7ff fde7 	bl	8031084 <USBH_MSC_RdWrProcess>
 80314b6:	4603      	mov	r3, r0
 80314b8:	2b01      	cmp	r3, #1
 80314ba:	d0e0      	beq.n	803147e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80314bc:	697b      	ldr	r3, [r7, #20]
 80314be:	2201      	movs	r2, #1
 80314c0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80314c2:	2300      	movs	r3, #0
}
 80314c4:	4618      	mov	r0, r3
 80314c6:	3718      	adds	r7, #24
 80314c8:	46bd      	mov	sp, r7
 80314ca:	bd80      	pop	{r7, pc}

080314cc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80314cc:	b580      	push	{r7, lr}
 80314ce:	b082      	sub	sp, #8
 80314d0:	af00      	add	r7, sp, #0
 80314d2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80314d4:	687b      	ldr	r3, [r7, #4]
 80314d6:	2221      	movs	r2, #33	; 0x21
 80314d8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	22ff      	movs	r2, #255	; 0xff
 80314de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80314e0:	687b      	ldr	r3, [r7, #4]
 80314e2:	2200      	movs	r2, #0
 80314e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80314e6:	687b      	ldr	r3, [r7, #4]
 80314e8:	2200      	movs	r2, #0
 80314ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80314ec:	687b      	ldr	r3, [r7, #4]
 80314ee:	2200      	movs	r2, #0
 80314f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80314f2:	2200      	movs	r2, #0
 80314f4:	2100      	movs	r1, #0
 80314f6:	6878      	ldr	r0, [r7, #4]
 80314f8:	f001 ffb3 	bl	8033462 <USBH_CtlReq>
 80314fc:	4603      	mov	r3, r0
}
 80314fe:	4618      	mov	r0, r3
 8031500:	3708      	adds	r7, #8
 8031502:	46bd      	mov	sp, r7
 8031504:	bd80      	pop	{r7, pc}

08031506 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8031506:	b580      	push	{r7, lr}
 8031508:	b082      	sub	sp, #8
 803150a:	af00      	add	r7, sp, #0
 803150c:	6078      	str	r0, [r7, #4]
 803150e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8031510:	687b      	ldr	r3, [r7, #4]
 8031512:	22a1      	movs	r2, #161	; 0xa1
 8031514:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8031516:	687b      	ldr	r3, [r7, #4]
 8031518:	22fe      	movs	r2, #254	; 0xfe
 803151a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 803151c:	687b      	ldr	r3, [r7, #4]
 803151e:	2200      	movs	r2, #0
 8031520:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8031522:	687b      	ldr	r3, [r7, #4]
 8031524:	2200      	movs	r2, #0
 8031526:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8031528:	687b      	ldr	r3, [r7, #4]
 803152a:	2201      	movs	r2, #1
 803152c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 803152e:	2201      	movs	r2, #1
 8031530:	6839      	ldr	r1, [r7, #0]
 8031532:	6878      	ldr	r0, [r7, #4]
 8031534:	f001 ff95 	bl	8033462 <USBH_CtlReq>
 8031538:	4603      	mov	r3, r0
}
 803153a:	4618      	mov	r0, r3
 803153c:	3708      	adds	r7, #8
 803153e:	46bd      	mov	sp, r7
 8031540:	bd80      	pop	{r7, pc}
	...

08031544 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8031544:	b480      	push	{r7}
 8031546:	b085      	sub	sp, #20
 8031548:	af00      	add	r7, sp, #0
 803154a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 803154c:	687b      	ldr	r3, [r7, #4]
 803154e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031552:	69db      	ldr	r3, [r3, #28]
 8031554:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8031556:	68fb      	ldr	r3, [r7, #12]
 8031558:	4a09      	ldr	r2, [pc, #36]	; (8031580 <USBH_MSC_BOT_Init+0x3c>)
 803155a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 803155c:	68fb      	ldr	r3, [r7, #12]
 803155e:	4a09      	ldr	r2, [pc, #36]	; (8031584 <USBH_MSC_BOT_Init+0x40>)
 8031560:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031562:	68fb      	ldr	r3, [r7, #12]
 8031564:	2201      	movs	r2, #1
 8031566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 803156a:	68fb      	ldr	r3, [r7, #12]
 803156c:	2201      	movs	r2, #1
 803156e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8031572:	2300      	movs	r3, #0
}
 8031574:	4618      	mov	r0, r3
 8031576:	3714      	adds	r7, #20
 8031578:	46bd      	mov	sp, r7
 803157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803157e:	4770      	bx	lr
 8031580:	43425355 	.word	0x43425355
 8031584:	20304050 	.word	0x20304050

08031588 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8031588:	b580      	push	{r7, lr}
 803158a:	b088      	sub	sp, #32
 803158c:	af02      	add	r7, sp, #8
 803158e:	6078      	str	r0, [r7, #4]
 8031590:	460b      	mov	r3, r1
 8031592:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8031594:	2301      	movs	r3, #1
 8031596:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8031598:	2301      	movs	r3, #1
 803159a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 803159c:	2301      	movs	r3, #1
 803159e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80315a0:	2300      	movs	r3, #0
 80315a2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80315a4:	687b      	ldr	r3, [r7, #4]
 80315a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80315aa:	69db      	ldr	r3, [r3, #28]
 80315ac:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80315ae:	2300      	movs	r3, #0
 80315b0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80315b2:	693b      	ldr	r3, [r7, #16]
 80315b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80315b8:	3b01      	subs	r3, #1
 80315ba:	2b0a      	cmp	r3, #10
 80315bc:	f200 81a1 	bhi.w	8031902 <USBH_MSC_BOT_Process+0x37a>
 80315c0:	a201      	add	r2, pc, #4	; (adr r2, 80315c8 <USBH_MSC_BOT_Process+0x40>)
 80315c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80315c6:	bf00      	nop
 80315c8:	080315f5 	.word	0x080315f5
 80315cc:	0803161f 	.word	0x0803161f
 80315d0:	08031689 	.word	0x08031689
 80315d4:	080316a7 	.word	0x080316a7
 80315d8:	0803172b 	.word	0x0803172b
 80315dc:	0803174f 	.word	0x0803174f
 80315e0:	080317e9 	.word	0x080317e9
 80315e4:	08031805 	.word	0x08031805
 80315e8:	08031857 	.word	0x08031857
 80315ec:	08031887 	.word	0x08031887
 80315f0:	080318e9 	.word	0x080318e9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80315f4:	693b      	ldr	r3, [r7, #16]
 80315f6:	78fa      	ldrb	r2, [r7, #3]
 80315f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80315fc:	693b      	ldr	r3, [r7, #16]
 80315fe:	2202      	movs	r2, #2
 8031600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8031604:	693b      	ldr	r3, [r7, #16]
 8031606:	f103 0154 	add.w	r1, r3, #84	; 0x54
 803160a:	693b      	ldr	r3, [r7, #16]
 803160c:	795a      	ldrb	r2, [r3, #5]
 803160e:	2301      	movs	r3, #1
 8031610:	9300      	str	r3, [sp, #0]
 8031612:	4613      	mov	r3, r2
 8031614:	221f      	movs	r2, #31
 8031616:	6878      	ldr	r0, [r7, #4]
 8031618:	f002 f941 	bl	803389e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 803161c:	e180      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 803161e:	693b      	ldr	r3, [r7, #16]
 8031620:	795b      	ldrb	r3, [r3, #5]
 8031622:	4619      	mov	r1, r3
 8031624:	6878      	ldr	r0, [r7, #4]
 8031626:	f003 f9f5 	bl	8034a14 <USBH_LL_GetURBState>
 803162a:	4603      	mov	r3, r0
 803162c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 803162e:	7d3b      	ldrb	r3, [r7, #20]
 8031630:	2b01      	cmp	r3, #1
 8031632:	d118      	bne.n	8031666 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8031634:	693b      	ldr	r3, [r7, #16]
 8031636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031638:	2b00      	cmp	r3, #0
 803163a:	d00f      	beq.n	803165c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 803163c:	693b      	ldr	r3, [r7, #16]
 803163e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8031642:	b25b      	sxtb	r3, r3
 8031644:	2b00      	cmp	r3, #0
 8031646:	da04      	bge.n	8031652 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8031648:	693b      	ldr	r3, [r7, #16]
 803164a:	2203      	movs	r2, #3
 803164c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8031650:	e159      	b.n	8031906 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8031652:	693b      	ldr	r3, [r7, #16]
 8031654:	2205      	movs	r2, #5
 8031656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 803165a:	e154      	b.n	8031906 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 803165c:	693b      	ldr	r3, [r7, #16]
 803165e:	2207      	movs	r2, #7
 8031660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031664:	e14f      	b.n	8031906 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8031666:	7d3b      	ldrb	r3, [r7, #20]
 8031668:	2b02      	cmp	r3, #2
 803166a:	d104      	bne.n	8031676 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 803166c:	693b      	ldr	r3, [r7, #16]
 803166e:	2201      	movs	r2, #1
 8031670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031674:	e147      	b.n	8031906 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8031676:	7d3b      	ldrb	r3, [r7, #20]
 8031678:	2b05      	cmp	r3, #5
 803167a:	f040 8144 	bne.w	8031906 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 803167e:	693b      	ldr	r3, [r7, #16]
 8031680:	220a      	movs	r2, #10
 8031682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031686:	e13e      	b.n	8031906 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8031688:	693b      	ldr	r3, [r7, #16]
 803168a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 803168e:	693b      	ldr	r3, [r7, #16]
 8031690:	895a      	ldrh	r2, [r3, #10]
 8031692:	693b      	ldr	r3, [r7, #16]
 8031694:	791b      	ldrb	r3, [r3, #4]
 8031696:	6878      	ldr	r0, [r7, #4]
 8031698:	f002 f926 	bl	80338e8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 803169c:	693b      	ldr	r3, [r7, #16]
 803169e:	2204      	movs	r2, #4
 80316a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80316a4:	e13c      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80316a6:	693b      	ldr	r3, [r7, #16]
 80316a8:	791b      	ldrb	r3, [r3, #4]
 80316aa:	4619      	mov	r1, r3
 80316ac:	6878      	ldr	r0, [r7, #4]
 80316ae:	f003 f9b1 	bl	8034a14 <USBH_LL_GetURBState>
 80316b2:	4603      	mov	r3, r0
 80316b4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80316b6:	7d3b      	ldrb	r3, [r7, #20]
 80316b8:	2b01      	cmp	r3, #1
 80316ba:	d12d      	bne.n	8031718 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80316bc:	693b      	ldr	r3, [r7, #16]
 80316be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80316c0:	693a      	ldr	r2, [r7, #16]
 80316c2:	8952      	ldrh	r2, [r2, #10]
 80316c4:	4293      	cmp	r3, r2
 80316c6:	d910      	bls.n	80316ea <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80316c8:	693b      	ldr	r3, [r7, #16]
 80316ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80316ce:	693a      	ldr	r2, [r7, #16]
 80316d0:	8952      	ldrh	r2, [r2, #10]
 80316d2:	441a      	add	r2, r3
 80316d4:	693b      	ldr	r3, [r7, #16]
 80316d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80316da:	693b      	ldr	r3, [r7, #16]
 80316dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80316de:	693a      	ldr	r2, [r7, #16]
 80316e0:	8952      	ldrh	r2, [r2, #10]
 80316e2:	1a9a      	subs	r2, r3, r2
 80316e4:	693b      	ldr	r3, [r7, #16]
 80316e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80316e8:	e002      	b.n	80316f0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80316ea:	693b      	ldr	r3, [r7, #16]
 80316ec:	2200      	movs	r2, #0
 80316ee:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80316f0:	693b      	ldr	r3, [r7, #16]
 80316f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80316f4:	2b00      	cmp	r3, #0
 80316f6:	d00a      	beq.n	803170e <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80316f8:	693b      	ldr	r3, [r7, #16]
 80316fa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80316fe:	693b      	ldr	r3, [r7, #16]
 8031700:	895a      	ldrh	r2, [r3, #10]
 8031702:	693b      	ldr	r3, [r7, #16]
 8031704:	791b      	ldrb	r3, [r3, #4]
 8031706:	6878      	ldr	r0, [r7, #4]
 8031708:	f002 f8ee 	bl	80338e8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 803170c:	e0fd      	b.n	803190a <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 803170e:	693b      	ldr	r3, [r7, #16]
 8031710:	2207      	movs	r2, #7
 8031712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031716:	e0f8      	b.n	803190a <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8031718:	7d3b      	ldrb	r3, [r7, #20]
 803171a:	2b05      	cmp	r3, #5
 803171c:	f040 80f5 	bne.w	803190a <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8031720:	693b      	ldr	r3, [r7, #16]
 8031722:	2209      	movs	r2, #9
 8031724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031728:	e0ef      	b.n	803190a <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 803172a:	693b      	ldr	r3, [r7, #16]
 803172c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8031730:	693b      	ldr	r3, [r7, #16]
 8031732:	891a      	ldrh	r2, [r3, #8]
 8031734:	693b      	ldr	r3, [r7, #16]
 8031736:	7958      	ldrb	r0, [r3, #5]
 8031738:	2301      	movs	r3, #1
 803173a:	9300      	str	r3, [sp, #0]
 803173c:	4603      	mov	r3, r0
 803173e:	6878      	ldr	r0, [r7, #4]
 8031740:	f002 f8ad 	bl	803389e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8031744:	693b      	ldr	r3, [r7, #16]
 8031746:	2206      	movs	r2, #6
 8031748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 803174c:	e0e8      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 803174e:	693b      	ldr	r3, [r7, #16]
 8031750:	795b      	ldrb	r3, [r3, #5]
 8031752:	4619      	mov	r1, r3
 8031754:	6878      	ldr	r0, [r7, #4]
 8031756:	f003 f95d 	bl	8034a14 <USBH_LL_GetURBState>
 803175a:	4603      	mov	r3, r0
 803175c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 803175e:	7d3b      	ldrb	r3, [r7, #20]
 8031760:	2b01      	cmp	r3, #1
 8031762:	d130      	bne.n	80317c6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8031764:	693b      	ldr	r3, [r7, #16]
 8031766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031768:	693a      	ldr	r2, [r7, #16]
 803176a:	8912      	ldrh	r2, [r2, #8]
 803176c:	4293      	cmp	r3, r2
 803176e:	d910      	bls.n	8031792 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8031770:	693b      	ldr	r3, [r7, #16]
 8031772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031776:	693a      	ldr	r2, [r7, #16]
 8031778:	8912      	ldrh	r2, [r2, #8]
 803177a:	441a      	add	r2, r3
 803177c:	693b      	ldr	r3, [r7, #16]
 803177e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8031782:	693b      	ldr	r3, [r7, #16]
 8031784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031786:	693a      	ldr	r2, [r7, #16]
 8031788:	8912      	ldrh	r2, [r2, #8]
 803178a:	1a9a      	subs	r2, r3, r2
 803178c:	693b      	ldr	r3, [r7, #16]
 803178e:	65da      	str	r2, [r3, #92]	; 0x5c
 8031790:	e002      	b.n	8031798 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8031792:	693b      	ldr	r3, [r7, #16]
 8031794:	2200      	movs	r2, #0
 8031796:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8031798:	693b      	ldr	r3, [r7, #16]
 803179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803179c:	2b00      	cmp	r3, #0
 803179e:	d00d      	beq.n	80317bc <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80317a0:	693b      	ldr	r3, [r7, #16]
 80317a2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80317a6:	693b      	ldr	r3, [r7, #16]
 80317a8:	891a      	ldrh	r2, [r3, #8]
 80317aa:	693b      	ldr	r3, [r7, #16]
 80317ac:	7958      	ldrb	r0, [r3, #5]
 80317ae:	2301      	movs	r3, #1
 80317b0:	9300      	str	r3, [sp, #0]
 80317b2:	4603      	mov	r3, r0
 80317b4:	6878      	ldr	r0, [r7, #4]
 80317b6:	f002 f872 	bl	803389e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80317ba:	e0a8      	b.n	803190e <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80317bc:	693b      	ldr	r3, [r7, #16]
 80317be:	2207      	movs	r2, #7
 80317c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80317c4:	e0a3      	b.n	803190e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 80317c6:	7d3b      	ldrb	r3, [r7, #20]
 80317c8:	2b02      	cmp	r3, #2
 80317ca:	d104      	bne.n	80317d6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80317cc:	693b      	ldr	r3, [r7, #16]
 80317ce:	2205      	movs	r2, #5
 80317d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80317d4:	e09b      	b.n	803190e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 80317d6:	7d3b      	ldrb	r3, [r7, #20]
 80317d8:	2b05      	cmp	r3, #5
 80317da:	f040 8098 	bne.w	803190e <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80317de:	693b      	ldr	r3, [r7, #16]
 80317e0:	220a      	movs	r2, #10
 80317e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80317e6:	e092      	b.n	803190e <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80317e8:	693b      	ldr	r3, [r7, #16]
 80317ea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80317ee:	693b      	ldr	r3, [r7, #16]
 80317f0:	791b      	ldrb	r3, [r3, #4]
 80317f2:	220d      	movs	r2, #13
 80317f4:	6878      	ldr	r0, [r7, #4]
 80317f6:	f002 f877 	bl	80338e8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80317fa:	693b      	ldr	r3, [r7, #16]
 80317fc:	2208      	movs	r2, #8
 80317fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031802:	e08d      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8031804:	693b      	ldr	r3, [r7, #16]
 8031806:	791b      	ldrb	r3, [r3, #4]
 8031808:	4619      	mov	r1, r3
 803180a:	6878      	ldr	r0, [r7, #4]
 803180c:	f003 f902 	bl	8034a14 <USBH_LL_GetURBState>
 8031810:	4603      	mov	r3, r0
 8031812:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8031814:	7d3b      	ldrb	r3, [r7, #20]
 8031816:	2b01      	cmp	r3, #1
 8031818:	d115      	bne.n	8031846 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 803181a:	693b      	ldr	r3, [r7, #16]
 803181c:	2201      	movs	r2, #1
 803181e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8031822:	693b      	ldr	r3, [r7, #16]
 8031824:	2201      	movs	r2, #1
 8031826:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 803182a:	6878      	ldr	r0, [r7, #4]
 803182c:	f000 f8aa 	bl	8031984 <USBH_MSC_DecodeCSW>
 8031830:	4603      	mov	r3, r0
 8031832:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8031834:	7d7b      	ldrb	r3, [r7, #21]
 8031836:	2b00      	cmp	r3, #0
 8031838:	d102      	bne.n	8031840 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 803183a:	2300      	movs	r3, #0
 803183c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 803183e:	e068      	b.n	8031912 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8031840:	2302      	movs	r3, #2
 8031842:	75fb      	strb	r3, [r7, #23]
      break;
 8031844:	e065      	b.n	8031912 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8031846:	7d3b      	ldrb	r3, [r7, #20]
 8031848:	2b05      	cmp	r3, #5
 803184a:	d162      	bne.n	8031912 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 803184c:	693b      	ldr	r3, [r7, #16]
 803184e:	2209      	movs	r2, #9
 8031850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031854:	e05d      	b.n	8031912 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8031856:	78fb      	ldrb	r3, [r7, #3]
 8031858:	2200      	movs	r2, #0
 803185a:	4619      	mov	r1, r3
 803185c:	6878      	ldr	r0, [r7, #4]
 803185e:	f000 f865 	bl	803192c <USBH_MSC_BOT_Abort>
 8031862:	4603      	mov	r3, r0
 8031864:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8031866:	7dbb      	ldrb	r3, [r7, #22]
 8031868:	2b00      	cmp	r3, #0
 803186a:	d104      	bne.n	8031876 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 803186c:	693b      	ldr	r3, [r7, #16]
 803186e:	2207      	movs	r2, #7
 8031870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8031874:	e04f      	b.n	8031916 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8031876:	7dbb      	ldrb	r3, [r7, #22]
 8031878:	2b04      	cmp	r3, #4
 803187a:	d14c      	bne.n	8031916 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 803187c:	693b      	ldr	r3, [r7, #16]
 803187e:	220b      	movs	r2, #11
 8031880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8031884:	e047      	b.n	8031916 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8031886:	78fb      	ldrb	r3, [r7, #3]
 8031888:	2201      	movs	r2, #1
 803188a:	4619      	mov	r1, r3
 803188c:	6878      	ldr	r0, [r7, #4]
 803188e:	f000 f84d 	bl	803192c <USBH_MSC_BOT_Abort>
 8031892:	4603      	mov	r3, r0
 8031894:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8031896:	7dbb      	ldrb	r3, [r7, #22]
 8031898:	2b00      	cmp	r3, #0
 803189a:	d11d      	bne.n	80318d8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 803189c:	693b      	ldr	r3, [r7, #16]
 803189e:	795b      	ldrb	r3, [r3, #5]
 80318a0:	4619      	mov	r1, r3
 80318a2:	6878      	ldr	r0, [r7, #4]
 80318a4:	f003 f913 	bl	8034ace <USBH_LL_GetToggle>
 80318a8:	4603      	mov	r3, r0
 80318aa:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80318ac:	693b      	ldr	r3, [r7, #16]
 80318ae:	7959      	ldrb	r1, [r3, #5]
 80318b0:	7bfb      	ldrb	r3, [r7, #15]
 80318b2:	f1c3 0301 	rsb	r3, r3, #1
 80318b6:	b2db      	uxtb	r3, r3
 80318b8:	461a      	mov	r2, r3
 80318ba:	6878      	ldr	r0, [r7, #4]
 80318bc:	f003 f8d4 	bl	8034a68 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80318c0:	693b      	ldr	r3, [r7, #16]
 80318c2:	791b      	ldrb	r3, [r3, #4]
 80318c4:	2200      	movs	r2, #0
 80318c6:	4619      	mov	r1, r3
 80318c8:	6878      	ldr	r0, [r7, #4]
 80318ca:	f003 f8cd 	bl	8034a68 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80318ce:	693b      	ldr	r3, [r7, #16]
 80318d0:	2209      	movs	r2, #9
 80318d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80318d6:	e020      	b.n	803191a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 80318d8:	7dbb      	ldrb	r3, [r7, #22]
 80318da:	2b04      	cmp	r3, #4
 80318dc:	d11d      	bne.n	803191a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80318de:	693b      	ldr	r3, [r7, #16]
 80318e0:	220b      	movs	r2, #11
 80318e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80318e6:	e018      	b.n	803191a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80318e8:	6878      	ldr	r0, [r7, #4]
 80318ea:	f7ff fdef 	bl	80314cc <USBH_MSC_BOT_REQ_Reset>
 80318ee:	4603      	mov	r3, r0
 80318f0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80318f2:	7dfb      	ldrb	r3, [r7, #23]
 80318f4:	2b00      	cmp	r3, #0
 80318f6:	d112      	bne.n	803191e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80318f8:	693b      	ldr	r3, [r7, #16]
 80318fa:	2201      	movs	r2, #1
 80318fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8031900:	e00d      	b.n	803191e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8031902:	bf00      	nop
 8031904:	e00c      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 8031906:	bf00      	nop
 8031908:	e00a      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 803190a:	bf00      	nop
 803190c:	e008      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 803190e:	bf00      	nop
 8031910:	e006      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 8031912:	bf00      	nop
 8031914:	e004      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 8031916:	bf00      	nop
 8031918:	e002      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 803191a:	bf00      	nop
 803191c:	e000      	b.n	8031920 <USBH_MSC_BOT_Process+0x398>
      break;
 803191e:	bf00      	nop
  }
  return status;
 8031920:	7dfb      	ldrb	r3, [r7, #23]
}
 8031922:	4618      	mov	r0, r3
 8031924:	3718      	adds	r7, #24
 8031926:	46bd      	mov	sp, r7
 8031928:	bd80      	pop	{r7, pc}
 803192a:	bf00      	nop

0803192c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 803192c:	b580      	push	{r7, lr}
 803192e:	b084      	sub	sp, #16
 8031930:	af00      	add	r7, sp, #0
 8031932:	6078      	str	r0, [r7, #4]
 8031934:	460b      	mov	r3, r1
 8031936:	70fb      	strb	r3, [r7, #3]
 8031938:	4613      	mov	r3, r2
 803193a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 803193c:	2302      	movs	r3, #2
 803193e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031940:	687b      	ldr	r3, [r7, #4]
 8031942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031946:	69db      	ldr	r3, [r3, #28]
 8031948:	60bb      	str	r3, [r7, #8]

  switch (dir)
 803194a:	78bb      	ldrb	r3, [r7, #2]
 803194c:	2b00      	cmp	r3, #0
 803194e:	d002      	beq.n	8031956 <USBH_MSC_BOT_Abort+0x2a>
 8031950:	2b01      	cmp	r3, #1
 8031952:	d009      	beq.n	8031968 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8031954:	e011      	b.n	803197a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8031956:	68bb      	ldr	r3, [r7, #8]
 8031958:	79db      	ldrb	r3, [r3, #7]
 803195a:	4619      	mov	r1, r3
 803195c:	6878      	ldr	r0, [r7, #4]
 803195e:	f001 fba0 	bl	80330a2 <USBH_ClrFeature>
 8031962:	4603      	mov	r3, r0
 8031964:	73fb      	strb	r3, [r7, #15]
      break;
 8031966:	e008      	b.n	803197a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8031968:	68bb      	ldr	r3, [r7, #8]
 803196a:	799b      	ldrb	r3, [r3, #6]
 803196c:	4619      	mov	r1, r3
 803196e:	6878      	ldr	r0, [r7, #4]
 8031970:	f001 fb97 	bl	80330a2 <USBH_ClrFeature>
 8031974:	4603      	mov	r3, r0
 8031976:	73fb      	strb	r3, [r7, #15]
      break;
 8031978:	bf00      	nop
  }
  return status;
 803197a:	7bfb      	ldrb	r3, [r7, #15]
}
 803197c:	4618      	mov	r0, r3
 803197e:	3710      	adds	r7, #16
 8031980:	46bd      	mov	sp, r7
 8031982:	bd80      	pop	{r7, pc}

08031984 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8031984:	b580      	push	{r7, lr}
 8031986:	b084      	sub	sp, #16
 8031988:	af00      	add	r7, sp, #0
 803198a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 803198c:	687b      	ldr	r3, [r7, #4]
 803198e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031992:	69db      	ldr	r3, [r3, #28]
 8031994:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8031996:	2301      	movs	r3, #1
 8031998:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 803199a:	68bb      	ldr	r3, [r7, #8]
 803199c:	791b      	ldrb	r3, [r3, #4]
 803199e:	4619      	mov	r1, r3
 80319a0:	6878      	ldr	r0, [r7, #4]
 80319a2:	f002 ffa5 	bl	80348f0 <USBH_LL_GetLastXferSize>
 80319a6:	4603      	mov	r3, r0
 80319a8:	2b0d      	cmp	r3, #13
 80319aa:	d002      	beq.n	80319b2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80319ac:	2302      	movs	r3, #2
 80319ae:	73fb      	strb	r3, [r7, #15]
 80319b0:	e024      	b.n	80319fc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80319b2:	68bb      	ldr	r3, [r7, #8]
 80319b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80319b6:	4a14      	ldr	r2, [pc, #80]	; (8031a08 <USBH_MSC_DecodeCSW+0x84>)
 80319b8:	4293      	cmp	r3, r2
 80319ba:	d11d      	bne.n	80319f8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80319bc:	68bb      	ldr	r3, [r7, #8]
 80319be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80319c0:	68bb      	ldr	r3, [r7, #8]
 80319c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80319c4:	429a      	cmp	r2, r3
 80319c6:	d119      	bne.n	80319fc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80319c8:	68bb      	ldr	r3, [r7, #8]
 80319ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80319ce:	2b00      	cmp	r3, #0
 80319d0:	d102      	bne.n	80319d8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80319d2:	2300      	movs	r3, #0
 80319d4:	73fb      	strb	r3, [r7, #15]
 80319d6:	e011      	b.n	80319fc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80319d8:	68bb      	ldr	r3, [r7, #8]
 80319da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80319de:	2b01      	cmp	r3, #1
 80319e0:	d102      	bne.n	80319e8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80319e2:	2301      	movs	r3, #1
 80319e4:	73fb      	strb	r3, [r7, #15]
 80319e6:	e009      	b.n	80319fc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80319e8:	68bb      	ldr	r3, [r7, #8]
 80319ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80319ee:	2b02      	cmp	r3, #2
 80319f0:	d104      	bne.n	80319fc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80319f2:	2302      	movs	r3, #2
 80319f4:	73fb      	strb	r3, [r7, #15]
 80319f6:	e001      	b.n	80319fc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80319f8:	2302      	movs	r3, #2
 80319fa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80319fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80319fe:	4618      	mov	r0, r3
 8031a00:	3710      	adds	r7, #16
 8031a02:	46bd      	mov	sp, r7
 8031a04:	bd80      	pop	{r7, pc}
 8031a06:	bf00      	nop
 8031a08:	53425355 	.word	0x53425355

08031a0c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8031a0c:	b580      	push	{r7, lr}
 8031a0e:	b084      	sub	sp, #16
 8031a10:	af00      	add	r7, sp, #0
 8031a12:	6078      	str	r0, [r7, #4]
 8031a14:	460b      	mov	r3, r1
 8031a16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8031a18:	2302      	movs	r3, #2
 8031a1a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031a1c:	687b      	ldr	r3, [r7, #4]
 8031a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031a22:	69db      	ldr	r3, [r3, #28]
 8031a24:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8031a26:	68bb      	ldr	r3, [r7, #8]
 8031a28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8031a2c:	2b01      	cmp	r3, #1
 8031a2e:	d002      	beq.n	8031a36 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8031a30:	2b02      	cmp	r3, #2
 8031a32:	d021      	beq.n	8031a78 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8031a34:	e028      	b.n	8031a88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8031a36:	68bb      	ldr	r3, [r7, #8]
 8031a38:	2200      	movs	r2, #0
 8031a3a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8031a3c:	68bb      	ldr	r3, [r7, #8]
 8031a3e:	2200      	movs	r2, #0
 8031a40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8031a44:	68bb      	ldr	r3, [r7, #8]
 8031a46:	220a      	movs	r2, #10
 8031a48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8031a4c:	68bb      	ldr	r3, [r7, #8]
 8031a4e:	3363      	adds	r3, #99	; 0x63
 8031a50:	2210      	movs	r2, #16
 8031a52:	2100      	movs	r1, #0
 8031a54:	4618      	mov	r0, r3
 8031a56:	f003 f906 	bl	8034c66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8031a5a:	68bb      	ldr	r3, [r7, #8]
 8031a5c:	2200      	movs	r2, #0
 8031a5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031a62:	68bb      	ldr	r3, [r7, #8]
 8031a64:	2201      	movs	r2, #1
 8031a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8031a6a:	68bb      	ldr	r3, [r7, #8]
 8031a6c:	2202      	movs	r2, #2
 8031a6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8031a72:	2301      	movs	r3, #1
 8031a74:	73fb      	strb	r3, [r7, #15]
      break;
 8031a76:	e007      	b.n	8031a88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8031a78:	78fb      	ldrb	r3, [r7, #3]
 8031a7a:	4619      	mov	r1, r3
 8031a7c:	6878      	ldr	r0, [r7, #4]
 8031a7e:	f7ff fd83 	bl	8031588 <USBH_MSC_BOT_Process>
 8031a82:	4603      	mov	r3, r0
 8031a84:	73fb      	strb	r3, [r7, #15]
      break;
 8031a86:	bf00      	nop
  }

  return error;
 8031a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8031a8a:	4618      	mov	r0, r3
 8031a8c:	3710      	adds	r7, #16
 8031a8e:	46bd      	mov	sp, r7
 8031a90:	bd80      	pop	{r7, pc}

08031a92 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8031a92:	b580      	push	{r7, lr}
 8031a94:	b086      	sub	sp, #24
 8031a96:	af00      	add	r7, sp, #0
 8031a98:	60f8      	str	r0, [r7, #12]
 8031a9a:	460b      	mov	r3, r1
 8031a9c:	607a      	str	r2, [r7, #4]
 8031a9e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8031aa0:	2301      	movs	r3, #1
 8031aa2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031aa4:	68fb      	ldr	r3, [r7, #12]
 8031aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031aaa:	69db      	ldr	r3, [r3, #28]
 8031aac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8031aae:	693b      	ldr	r3, [r7, #16]
 8031ab0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8031ab4:	2b01      	cmp	r3, #1
 8031ab6:	d002      	beq.n	8031abe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8031ab8:	2b02      	cmp	r3, #2
 8031aba:	d027      	beq.n	8031b0c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8031abc:	e05f      	b.n	8031b7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8031abe:	693b      	ldr	r3, [r7, #16]
 8031ac0:	2208      	movs	r2, #8
 8031ac2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8031ac4:	693b      	ldr	r3, [r7, #16]
 8031ac6:	2280      	movs	r2, #128	; 0x80
 8031ac8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8031acc:	693b      	ldr	r3, [r7, #16]
 8031ace:	220a      	movs	r2, #10
 8031ad0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8031ad4:	693b      	ldr	r3, [r7, #16]
 8031ad6:	3363      	adds	r3, #99	; 0x63
 8031ad8:	2210      	movs	r2, #16
 8031ada:	2100      	movs	r1, #0
 8031adc:	4618      	mov	r0, r3
 8031ade:	f003 f8c2 	bl	8034c66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8031ae2:	693b      	ldr	r3, [r7, #16]
 8031ae4:	2225      	movs	r2, #37	; 0x25
 8031ae6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031aea:	693b      	ldr	r3, [r7, #16]
 8031aec:	2201      	movs	r2, #1
 8031aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8031af2:	693b      	ldr	r3, [r7, #16]
 8031af4:	2202      	movs	r2, #2
 8031af6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8031afa:	693b      	ldr	r3, [r7, #16]
 8031afc:	f103 0210 	add.w	r2, r3, #16
 8031b00:	693b      	ldr	r3, [r7, #16]
 8031b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8031b06:	2301      	movs	r3, #1
 8031b08:	75fb      	strb	r3, [r7, #23]
      break;
 8031b0a:	e038      	b.n	8031b7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8031b0c:	7afb      	ldrb	r3, [r7, #11]
 8031b0e:	4619      	mov	r1, r3
 8031b10:	68f8      	ldr	r0, [r7, #12]
 8031b12:	f7ff fd39 	bl	8031588 <USBH_MSC_BOT_Process>
 8031b16:	4603      	mov	r3, r0
 8031b18:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8031b1a:	7dfb      	ldrb	r3, [r7, #23]
 8031b1c:	2b00      	cmp	r3, #0
 8031b1e:	d12d      	bne.n	8031b7c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8031b20:	693b      	ldr	r3, [r7, #16]
 8031b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031b26:	3303      	adds	r3, #3
 8031b28:	781b      	ldrb	r3, [r3, #0]
 8031b2a:	461a      	mov	r2, r3
 8031b2c:	693b      	ldr	r3, [r7, #16]
 8031b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031b32:	3302      	adds	r3, #2
 8031b34:	781b      	ldrb	r3, [r3, #0]
 8031b36:	021b      	lsls	r3, r3, #8
 8031b38:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8031b3a:	693b      	ldr	r3, [r7, #16]
 8031b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031b40:	3301      	adds	r3, #1
 8031b42:	781b      	ldrb	r3, [r3, #0]
 8031b44:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8031b46:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8031b48:	693b      	ldr	r3, [r7, #16]
 8031b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031b4e:	781b      	ldrb	r3, [r3, #0]
 8031b50:	061b      	lsls	r3, r3, #24
 8031b52:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8031b54:	687b      	ldr	r3, [r7, #4]
 8031b56:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8031b58:	693b      	ldr	r3, [r7, #16]
 8031b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031b5e:	3307      	adds	r3, #7
 8031b60:	781b      	ldrb	r3, [r3, #0]
 8031b62:	b29a      	uxth	r2, r3
 8031b64:	693b      	ldr	r3, [r7, #16]
 8031b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031b6a:	3306      	adds	r3, #6
 8031b6c:	781b      	ldrb	r3, [r3, #0]
 8031b6e:	b29b      	uxth	r3, r3
 8031b70:	021b      	lsls	r3, r3, #8
 8031b72:	b29b      	uxth	r3, r3
 8031b74:	4313      	orrs	r3, r2
 8031b76:	b29a      	uxth	r2, r3
 8031b78:	687b      	ldr	r3, [r7, #4]
 8031b7a:	809a      	strh	r2, [r3, #4]
      break;
 8031b7c:	bf00      	nop
  }

  return error;
 8031b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8031b80:	4618      	mov	r0, r3
 8031b82:	3718      	adds	r7, #24
 8031b84:	46bd      	mov	sp, r7
 8031b86:	bd80      	pop	{r7, pc}

08031b88 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8031b88:	b580      	push	{r7, lr}
 8031b8a:	b086      	sub	sp, #24
 8031b8c:	af00      	add	r7, sp, #0
 8031b8e:	60f8      	str	r0, [r7, #12]
 8031b90:	460b      	mov	r3, r1
 8031b92:	607a      	str	r2, [r7, #4]
 8031b94:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8031b96:	2302      	movs	r3, #2
 8031b98:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031b9a:	68fb      	ldr	r3, [r7, #12]
 8031b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031ba0:	69db      	ldr	r3, [r3, #28]
 8031ba2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8031ba4:	693b      	ldr	r3, [r7, #16]
 8031ba6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8031baa:	2b01      	cmp	r3, #1
 8031bac:	d002      	beq.n	8031bb4 <USBH_MSC_SCSI_Inquiry+0x2c>
 8031bae:	2b02      	cmp	r3, #2
 8031bb0:	d03d      	beq.n	8031c2e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8031bb2:	e089      	b.n	8031cc8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8031bb4:	693b      	ldr	r3, [r7, #16]
 8031bb6:	2224      	movs	r2, #36	; 0x24
 8031bb8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8031bba:	693b      	ldr	r3, [r7, #16]
 8031bbc:	2280      	movs	r2, #128	; 0x80
 8031bbe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8031bc2:	693b      	ldr	r3, [r7, #16]
 8031bc4:	220a      	movs	r2, #10
 8031bc6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8031bca:	693b      	ldr	r3, [r7, #16]
 8031bcc:	3363      	adds	r3, #99	; 0x63
 8031bce:	220a      	movs	r2, #10
 8031bd0:	2100      	movs	r1, #0
 8031bd2:	4618      	mov	r0, r3
 8031bd4:	f003 f847 	bl	8034c66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8031bd8:	693b      	ldr	r3, [r7, #16]
 8031bda:	2212      	movs	r2, #18
 8031bdc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8031be0:	7afb      	ldrb	r3, [r7, #11]
 8031be2:	015b      	lsls	r3, r3, #5
 8031be4:	b2da      	uxtb	r2, r3
 8031be6:	693b      	ldr	r3, [r7, #16]
 8031be8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8031bec:	693b      	ldr	r3, [r7, #16]
 8031bee:	2200      	movs	r2, #0
 8031bf0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8031bf4:	693b      	ldr	r3, [r7, #16]
 8031bf6:	2200      	movs	r2, #0
 8031bf8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8031bfc:	693b      	ldr	r3, [r7, #16]
 8031bfe:	2224      	movs	r2, #36	; 0x24
 8031c00:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8031c04:	693b      	ldr	r3, [r7, #16]
 8031c06:	2200      	movs	r2, #0
 8031c08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031c0c:	693b      	ldr	r3, [r7, #16]
 8031c0e:	2201      	movs	r2, #1
 8031c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8031c14:	693b      	ldr	r3, [r7, #16]
 8031c16:	2202      	movs	r2, #2
 8031c18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8031c1c:	693b      	ldr	r3, [r7, #16]
 8031c1e:	f103 0210 	add.w	r2, r3, #16
 8031c22:	693b      	ldr	r3, [r7, #16]
 8031c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8031c28:	2301      	movs	r3, #1
 8031c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8031c2c:	e04c      	b.n	8031cc8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8031c2e:	7afb      	ldrb	r3, [r7, #11]
 8031c30:	4619      	mov	r1, r3
 8031c32:	68f8      	ldr	r0, [r7, #12]
 8031c34:	f7ff fca8 	bl	8031588 <USBH_MSC_BOT_Process>
 8031c38:	4603      	mov	r3, r0
 8031c3a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8031c3c:	7dfb      	ldrb	r3, [r7, #23]
 8031c3e:	2b00      	cmp	r3, #0
 8031c40:	d141      	bne.n	8031cc6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8031c42:	2222      	movs	r2, #34	; 0x22
 8031c44:	2100      	movs	r1, #0
 8031c46:	6878      	ldr	r0, [r7, #4]
 8031c48:	f003 f80d 	bl	8034c66 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8031c4c:	693b      	ldr	r3, [r7, #16]
 8031c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031c52:	781b      	ldrb	r3, [r3, #0]
 8031c54:	f003 031f 	and.w	r3, r3, #31
 8031c58:	b2da      	uxtb	r2, r3
 8031c5a:	687b      	ldr	r3, [r7, #4]
 8031c5c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8031c5e:	693b      	ldr	r3, [r7, #16]
 8031c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031c64:	781b      	ldrb	r3, [r3, #0]
 8031c66:	095b      	lsrs	r3, r3, #5
 8031c68:	b2da      	uxtb	r2, r3
 8031c6a:	687b      	ldr	r3, [r7, #4]
 8031c6c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8031c6e:	693b      	ldr	r3, [r7, #16]
 8031c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031c74:	3301      	adds	r3, #1
 8031c76:	781b      	ldrb	r3, [r3, #0]
 8031c78:	b25b      	sxtb	r3, r3
 8031c7a:	2b00      	cmp	r3, #0
 8031c7c:	da03      	bge.n	8031c86 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8031c7e:	687b      	ldr	r3, [r7, #4]
 8031c80:	2201      	movs	r2, #1
 8031c82:	709a      	strb	r2, [r3, #2]
 8031c84:	e002      	b.n	8031c8c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8031c86:	687b      	ldr	r3, [r7, #4]
 8031c88:	2200      	movs	r2, #0
 8031c8a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8031c8c:	687b      	ldr	r3, [r7, #4]
 8031c8e:	1cd8      	adds	r0, r3, #3
 8031c90:	693b      	ldr	r3, [r7, #16]
 8031c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031c96:	3308      	adds	r3, #8
 8031c98:	2208      	movs	r2, #8
 8031c9a:	4619      	mov	r1, r3
 8031c9c:	f002 ffd8 	bl	8034c50 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8031ca0:	687b      	ldr	r3, [r7, #4]
 8031ca2:	f103 000c 	add.w	r0, r3, #12
 8031ca6:	693b      	ldr	r3, [r7, #16]
 8031ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031cac:	3310      	adds	r3, #16
 8031cae:	2210      	movs	r2, #16
 8031cb0:	4619      	mov	r1, r3
 8031cb2:	f002 ffcd 	bl	8034c50 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8031cb6:	687b      	ldr	r3, [r7, #4]
 8031cb8:	331d      	adds	r3, #29
 8031cba:	693a      	ldr	r2, [r7, #16]
 8031cbc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8031cc0:	3220      	adds	r2, #32
 8031cc2:	6812      	ldr	r2, [r2, #0]
 8031cc4:	601a      	str	r2, [r3, #0]
      break;
 8031cc6:	bf00      	nop
  }

  return error;
 8031cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8031cca:	4618      	mov	r0, r3
 8031ccc:	3718      	adds	r7, #24
 8031cce:	46bd      	mov	sp, r7
 8031cd0:	bd80      	pop	{r7, pc}

08031cd2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8031cd2:	b580      	push	{r7, lr}
 8031cd4:	b086      	sub	sp, #24
 8031cd6:	af00      	add	r7, sp, #0
 8031cd8:	60f8      	str	r0, [r7, #12]
 8031cda:	460b      	mov	r3, r1
 8031cdc:	607a      	str	r2, [r7, #4]
 8031cde:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8031ce0:	2302      	movs	r3, #2
 8031ce2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031ce4:	68fb      	ldr	r3, [r7, #12]
 8031ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031cea:	69db      	ldr	r3, [r3, #28]
 8031cec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8031cee:	693b      	ldr	r3, [r7, #16]
 8031cf0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8031cf4:	2b01      	cmp	r3, #1
 8031cf6:	d002      	beq.n	8031cfe <USBH_MSC_SCSI_RequestSense+0x2c>
 8031cf8:	2b02      	cmp	r3, #2
 8031cfa:	d03d      	beq.n	8031d78 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8031cfc:	e05d      	b.n	8031dba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8031cfe:	693b      	ldr	r3, [r7, #16]
 8031d00:	220e      	movs	r2, #14
 8031d02:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8031d04:	693b      	ldr	r3, [r7, #16]
 8031d06:	2280      	movs	r2, #128	; 0x80
 8031d08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8031d0c:	693b      	ldr	r3, [r7, #16]
 8031d0e:	220a      	movs	r2, #10
 8031d10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8031d14:	693b      	ldr	r3, [r7, #16]
 8031d16:	3363      	adds	r3, #99	; 0x63
 8031d18:	2210      	movs	r2, #16
 8031d1a:	2100      	movs	r1, #0
 8031d1c:	4618      	mov	r0, r3
 8031d1e:	f002 ffa2 	bl	8034c66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8031d22:	693b      	ldr	r3, [r7, #16]
 8031d24:	2203      	movs	r2, #3
 8031d26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8031d2a:	7afb      	ldrb	r3, [r7, #11]
 8031d2c:	015b      	lsls	r3, r3, #5
 8031d2e:	b2da      	uxtb	r2, r3
 8031d30:	693b      	ldr	r3, [r7, #16]
 8031d32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8031d36:	693b      	ldr	r3, [r7, #16]
 8031d38:	2200      	movs	r2, #0
 8031d3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8031d3e:	693b      	ldr	r3, [r7, #16]
 8031d40:	2200      	movs	r2, #0
 8031d42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8031d46:	693b      	ldr	r3, [r7, #16]
 8031d48:	220e      	movs	r2, #14
 8031d4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8031d4e:	693b      	ldr	r3, [r7, #16]
 8031d50:	2200      	movs	r2, #0
 8031d52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031d56:	693b      	ldr	r3, [r7, #16]
 8031d58:	2201      	movs	r2, #1
 8031d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8031d5e:	693b      	ldr	r3, [r7, #16]
 8031d60:	2202      	movs	r2, #2
 8031d62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8031d66:	693b      	ldr	r3, [r7, #16]
 8031d68:	f103 0210 	add.w	r2, r3, #16
 8031d6c:	693b      	ldr	r3, [r7, #16]
 8031d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8031d72:	2301      	movs	r3, #1
 8031d74:	75fb      	strb	r3, [r7, #23]
      break;
 8031d76:	e020      	b.n	8031dba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8031d78:	7afb      	ldrb	r3, [r7, #11]
 8031d7a:	4619      	mov	r1, r3
 8031d7c:	68f8      	ldr	r0, [r7, #12]
 8031d7e:	f7ff fc03 	bl	8031588 <USBH_MSC_BOT_Process>
 8031d82:	4603      	mov	r3, r0
 8031d84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8031d86:	7dfb      	ldrb	r3, [r7, #23]
 8031d88:	2b00      	cmp	r3, #0
 8031d8a:	d115      	bne.n	8031db8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8031d8c:	693b      	ldr	r3, [r7, #16]
 8031d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031d92:	3302      	adds	r3, #2
 8031d94:	781b      	ldrb	r3, [r3, #0]
 8031d96:	f003 030f 	and.w	r3, r3, #15
 8031d9a:	b2da      	uxtb	r2, r3
 8031d9c:	687b      	ldr	r3, [r7, #4]
 8031d9e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8031da0:	693b      	ldr	r3, [r7, #16]
 8031da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031da6:	7b1a      	ldrb	r2, [r3, #12]
 8031da8:	687b      	ldr	r3, [r7, #4]
 8031daa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8031dac:	693b      	ldr	r3, [r7, #16]
 8031dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8031db2:	7b5a      	ldrb	r2, [r3, #13]
 8031db4:	687b      	ldr	r3, [r7, #4]
 8031db6:	709a      	strb	r2, [r3, #2]
      break;
 8031db8:	bf00      	nop
  }

  return error;
 8031dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8031dbc:	4618      	mov	r0, r3
 8031dbe:	3718      	adds	r7, #24
 8031dc0:	46bd      	mov	sp, r7
 8031dc2:	bd80      	pop	{r7, pc}

08031dc4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8031dc4:	b580      	push	{r7, lr}
 8031dc6:	b086      	sub	sp, #24
 8031dc8:	af00      	add	r7, sp, #0
 8031dca:	60f8      	str	r0, [r7, #12]
 8031dcc:	607a      	str	r2, [r7, #4]
 8031dce:	603b      	str	r3, [r7, #0]
 8031dd0:	460b      	mov	r3, r1
 8031dd2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8031dd4:	2302      	movs	r3, #2
 8031dd6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031dd8:	68fb      	ldr	r3, [r7, #12]
 8031dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031dde:	69db      	ldr	r3, [r3, #28]
 8031de0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8031de2:	693b      	ldr	r3, [r7, #16]
 8031de4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8031de8:	2b01      	cmp	r3, #1
 8031dea:	d002      	beq.n	8031df2 <USBH_MSC_SCSI_Write+0x2e>
 8031dec:	2b02      	cmp	r3, #2
 8031dee:	d047      	beq.n	8031e80 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8031df0:	e04e      	b.n	8031e90 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8031df2:	693b      	ldr	r3, [r7, #16]
 8031df4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8031df8:	461a      	mov	r2, r3
 8031dfa:	6a3b      	ldr	r3, [r7, #32]
 8031dfc:	fb03 f202 	mul.w	r2, r3, r2
 8031e00:	693b      	ldr	r3, [r7, #16]
 8031e02:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8031e04:	693b      	ldr	r3, [r7, #16]
 8031e06:	2200      	movs	r2, #0
 8031e08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8031e0c:	693b      	ldr	r3, [r7, #16]
 8031e0e:	220a      	movs	r2, #10
 8031e10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8031e14:	693b      	ldr	r3, [r7, #16]
 8031e16:	3363      	adds	r3, #99	; 0x63
 8031e18:	2210      	movs	r2, #16
 8031e1a:	2100      	movs	r1, #0
 8031e1c:	4618      	mov	r0, r3
 8031e1e:	f002 ff22 	bl	8034c66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8031e22:	693b      	ldr	r3, [r7, #16]
 8031e24:	222a      	movs	r2, #42	; 0x2a
 8031e26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8031e2a:	79fa      	ldrb	r2, [r7, #7]
 8031e2c:	693b      	ldr	r3, [r7, #16]
 8031e2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8031e32:	79ba      	ldrb	r2, [r7, #6]
 8031e34:	693b      	ldr	r3, [r7, #16]
 8031e36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8031e3a:	797a      	ldrb	r2, [r7, #5]
 8031e3c:	693b      	ldr	r3, [r7, #16]
 8031e3e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8031e42:	1d3b      	adds	r3, r7, #4
 8031e44:	781a      	ldrb	r2, [r3, #0]
 8031e46:	693b      	ldr	r3, [r7, #16]
 8031e48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8031e4c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8031e50:	693b      	ldr	r3, [r7, #16]
 8031e52:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8031e56:	f107 0320 	add.w	r3, r7, #32
 8031e5a:	781a      	ldrb	r2, [r3, #0]
 8031e5c:	693b      	ldr	r3, [r7, #16]
 8031e5e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031e62:	693b      	ldr	r3, [r7, #16]
 8031e64:	2201      	movs	r2, #1
 8031e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8031e6a:	693b      	ldr	r3, [r7, #16]
 8031e6c:	2202      	movs	r2, #2
 8031e6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8031e72:	693b      	ldr	r3, [r7, #16]
 8031e74:	683a      	ldr	r2, [r7, #0]
 8031e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8031e7a:	2301      	movs	r3, #1
 8031e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8031e7e:	e007      	b.n	8031e90 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8031e80:	7afb      	ldrb	r3, [r7, #11]
 8031e82:	4619      	mov	r1, r3
 8031e84:	68f8      	ldr	r0, [r7, #12]
 8031e86:	f7ff fb7f 	bl	8031588 <USBH_MSC_BOT_Process>
 8031e8a:	4603      	mov	r3, r0
 8031e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8031e8e:	bf00      	nop
  }

  return error;
 8031e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8031e92:	4618      	mov	r0, r3
 8031e94:	3718      	adds	r7, #24
 8031e96:	46bd      	mov	sp, r7
 8031e98:	bd80      	pop	{r7, pc}

08031e9a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8031e9a:	b580      	push	{r7, lr}
 8031e9c:	b086      	sub	sp, #24
 8031e9e:	af00      	add	r7, sp, #0
 8031ea0:	60f8      	str	r0, [r7, #12]
 8031ea2:	607a      	str	r2, [r7, #4]
 8031ea4:	603b      	str	r3, [r7, #0]
 8031ea6:	460b      	mov	r3, r1
 8031ea8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8031eaa:	2302      	movs	r3, #2
 8031eac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8031eae:	68fb      	ldr	r3, [r7, #12]
 8031eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8031eb4:	69db      	ldr	r3, [r3, #28]
 8031eb6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8031eb8:	693b      	ldr	r3, [r7, #16]
 8031eba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8031ebe:	2b01      	cmp	r3, #1
 8031ec0:	d002      	beq.n	8031ec8 <USBH_MSC_SCSI_Read+0x2e>
 8031ec2:	2b02      	cmp	r3, #2
 8031ec4:	d047      	beq.n	8031f56 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8031ec6:	e04e      	b.n	8031f66 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8031ec8:	693b      	ldr	r3, [r7, #16]
 8031eca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8031ece:	461a      	mov	r2, r3
 8031ed0:	6a3b      	ldr	r3, [r7, #32]
 8031ed2:	fb03 f202 	mul.w	r2, r3, r2
 8031ed6:	693b      	ldr	r3, [r7, #16]
 8031ed8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8031eda:	693b      	ldr	r3, [r7, #16]
 8031edc:	2280      	movs	r2, #128	; 0x80
 8031ede:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8031ee2:	693b      	ldr	r3, [r7, #16]
 8031ee4:	220a      	movs	r2, #10
 8031ee6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8031eea:	693b      	ldr	r3, [r7, #16]
 8031eec:	3363      	adds	r3, #99	; 0x63
 8031eee:	2210      	movs	r2, #16
 8031ef0:	2100      	movs	r1, #0
 8031ef2:	4618      	mov	r0, r3
 8031ef4:	f002 feb7 	bl	8034c66 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8031ef8:	693b      	ldr	r3, [r7, #16]
 8031efa:	2228      	movs	r2, #40	; 0x28
 8031efc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8031f00:	79fa      	ldrb	r2, [r7, #7]
 8031f02:	693b      	ldr	r3, [r7, #16]
 8031f04:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8031f08:	79ba      	ldrb	r2, [r7, #6]
 8031f0a:	693b      	ldr	r3, [r7, #16]
 8031f0c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8031f10:	797a      	ldrb	r2, [r7, #5]
 8031f12:	693b      	ldr	r3, [r7, #16]
 8031f14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8031f18:	1d3b      	adds	r3, r7, #4
 8031f1a:	781a      	ldrb	r2, [r3, #0]
 8031f1c:	693b      	ldr	r3, [r7, #16]
 8031f1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8031f22:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8031f26:	693b      	ldr	r3, [r7, #16]
 8031f28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8031f2c:	f107 0320 	add.w	r3, r7, #32
 8031f30:	781a      	ldrb	r2, [r3, #0]
 8031f32:	693b      	ldr	r3, [r7, #16]
 8031f34:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8031f38:	693b      	ldr	r3, [r7, #16]
 8031f3a:	2201      	movs	r2, #1
 8031f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8031f40:	693b      	ldr	r3, [r7, #16]
 8031f42:	2202      	movs	r2, #2
 8031f44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8031f48:	693b      	ldr	r3, [r7, #16]
 8031f4a:	683a      	ldr	r2, [r7, #0]
 8031f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8031f50:	2301      	movs	r3, #1
 8031f52:	75fb      	strb	r3, [r7, #23]
      break;
 8031f54:	e007      	b.n	8031f66 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8031f56:	7afb      	ldrb	r3, [r7, #11]
 8031f58:	4619      	mov	r1, r3
 8031f5a:	68f8      	ldr	r0, [r7, #12]
 8031f5c:	f7ff fb14 	bl	8031588 <USBH_MSC_BOT_Process>
 8031f60:	4603      	mov	r3, r0
 8031f62:	75fb      	strb	r3, [r7, #23]
      break;
 8031f64:	bf00      	nop
  }

  return error;
 8031f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8031f68:	4618      	mov	r0, r3
 8031f6a:	3718      	adds	r7, #24
 8031f6c:	46bd      	mov	sp, r7
 8031f6e:	bd80      	pop	{r7, pc}

08031f70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8031f70:	b580      	push	{r7, lr}
 8031f72:	b084      	sub	sp, #16
 8031f74:	af00      	add	r7, sp, #0
 8031f76:	60f8      	str	r0, [r7, #12]
 8031f78:	60b9      	str	r1, [r7, #8]
 8031f7a:	4613      	mov	r3, r2
 8031f7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8031f7e:	68fb      	ldr	r3, [r7, #12]
 8031f80:	2b00      	cmp	r3, #0
 8031f82:	d10a      	bne.n	8031f9a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8031f84:	481c      	ldr	r0, [pc, #112]	; (8031ff8 <USBH_Init+0x88>)
 8031f86:	f003 fb7b 	bl	8035680 <iprintf>
 8031f8a:	481c      	ldr	r0, [pc, #112]	; (8031ffc <USBH_Init+0x8c>)
 8031f8c:	f003 fb78 	bl	8035680 <iprintf>
 8031f90:	200a      	movs	r0, #10
 8031f92:	f003 fb8d 	bl	80356b0 <putchar>
    return USBH_FAIL;
 8031f96:	2302      	movs	r3, #2
 8031f98:	e029      	b.n	8031fee <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 8031f9a:	68fb      	ldr	r3, [r7, #12]
 8031f9c:	79fa      	ldrb	r2, [r7, #7]
 8031f9e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8031fa2:	68fb      	ldr	r3, [r7, #12]
 8031fa4:	2200      	movs	r2, #0
 8031fa6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8031faa:	68fb      	ldr	r3, [r7, #12]
 8031fac:	2200      	movs	r2, #0
 8031fae:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8031fb2:	68f8      	ldr	r0, [r7, #12]
 8031fb4:	f000 f850 	bl	8032058 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8031fb8:	68fb      	ldr	r3, [r7, #12]
 8031fba:	2200      	movs	r2, #0
 8031fbc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8031fc0:	68fb      	ldr	r3, [r7, #12]
 8031fc2:	2200      	movs	r2, #0
 8031fc4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8031fc8:	68fb      	ldr	r3, [r7, #12]
 8031fca:	2200      	movs	r2, #0
 8031fcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8031fd0:	68fb      	ldr	r3, [r7, #12]
 8031fd2:	2200      	movs	r2, #0
 8031fd4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8031fd8:	68bb      	ldr	r3, [r7, #8]
 8031fda:	2b00      	cmp	r3, #0
 8031fdc:	d003      	beq.n	8031fe6 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8031fde:	68fb      	ldr	r3, [r7, #12]
 8031fe0:	68ba      	ldr	r2, [r7, #8]
 8031fe2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8031fe6:	68f8      	ldr	r0, [r7, #12]
 8031fe8:	f002 fbc6 	bl	8034778 <USBH_LL_Init>

  return USBH_OK;
 8031fec:	2300      	movs	r3, #0
}
 8031fee:	4618      	mov	r0, r3
 8031ff0:	3710      	adds	r7, #16
 8031ff2:	46bd      	mov	sp, r7
 8031ff4:	bd80      	pop	{r7, pc}
 8031ff6:	bf00      	nop
 8031ff8:	080379e0 	.word	0x080379e0
 8031ffc:	080379e8 	.word	0x080379e8

08032000 <USBH_DeInit>:
  *         De-Initialize the Host portion of the driver.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_DeInit(USBH_HandleTypeDef *phost)
{
 8032000:	b580      	push	{r7, lr}
 8032002:	b082      	sub	sp, #8
 8032004:	af00      	add	r7, sp, #0
 8032006:	6078      	str	r0, [r7, #4]
  DeInitStateMachine(phost);
 8032008:	6878      	ldr	r0, [r7, #4]
 803200a:	f000 f825 	bl	8032058 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 803200e:	687b      	ldr	r3, [r7, #4]
 8032010:	2200      	movs	r2, #0
 8032012:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8032016:	687b      	ldr	r3, [r7, #4]
 8032018:	2200      	movs	r2, #0
 803201a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 803201e:	687b      	ldr	r3, [r7, #4]
 8032020:	2200      	movs	r2, #0
 8032022:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8032026:	687b      	ldr	r3, [r7, #4]
 8032028:	2200      	movs	r2, #0
 803202a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  phost->device.RstCnt = 0U;
 803202e:	687b      	ldr	r3, [r7, #4]
 8032030:	2200      	movs	r2, #0
 8032032:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8032036:	687b      	ldr	r3, [r7, #4]
 8032038:	2200      	movs	r2, #0
 803203a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if (phost->pData != NULL)
 803203e:	687b      	ldr	r3, [r7, #4]
 8032040:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8032044:	2b00      	cmp	r3, #0
 8032046:	d002      	beq.n	803204e <USBH_DeInit+0x4e>
  {
    USBH_LL_Stop(phost);
 8032048:	6878      	ldr	r0, [r7, #4]
 803204a:	f002 fbf6 	bl	803483a <USBH_LL_Stop>
  }

  return USBH_OK;
 803204e:	2300      	movs	r3, #0
}
 8032050:	4618      	mov	r0, r3
 8032052:	3708      	adds	r7, #8
 8032054:	46bd      	mov	sp, r7
 8032056:	bd80      	pop	{r7, pc}

08032058 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8032058:	b480      	push	{r7}
 803205a:	b085      	sub	sp, #20
 803205c:	af00      	add	r7, sp, #0
 803205e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8032060:	2300      	movs	r3, #0
 8032062:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8032064:	2300      	movs	r3, #0
 8032066:	60fb      	str	r3, [r7, #12]
 8032068:	e009      	b.n	803207e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 803206a:	687a      	ldr	r2, [r7, #4]
 803206c:	68fb      	ldr	r3, [r7, #12]
 803206e:	33e0      	adds	r3, #224	; 0xe0
 8032070:	009b      	lsls	r3, r3, #2
 8032072:	4413      	add	r3, r2
 8032074:	2200      	movs	r2, #0
 8032076:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8032078:	68fb      	ldr	r3, [r7, #12]
 803207a:	3301      	adds	r3, #1
 803207c:	60fb      	str	r3, [r7, #12]
 803207e:	68fb      	ldr	r3, [r7, #12]
 8032080:	2b0e      	cmp	r3, #14
 8032082:	d9f2      	bls.n	803206a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8032084:	2300      	movs	r3, #0
 8032086:	60fb      	str	r3, [r7, #12]
 8032088:	e009      	b.n	803209e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 803208a:	687a      	ldr	r2, [r7, #4]
 803208c:	68fb      	ldr	r3, [r7, #12]
 803208e:	4413      	add	r3, r2
 8032090:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8032094:	2200      	movs	r2, #0
 8032096:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8032098:	68fb      	ldr	r3, [r7, #12]
 803209a:	3301      	adds	r3, #1
 803209c:	60fb      	str	r3, [r7, #12]
 803209e:	68fb      	ldr	r3, [r7, #12]
 80320a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80320a4:	d3f1      	bcc.n	803208a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80320a6:	687b      	ldr	r3, [r7, #4]
 80320a8:	2200      	movs	r2, #0
 80320aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80320ac:	687b      	ldr	r3, [r7, #4]
 80320ae:	2200      	movs	r2, #0
 80320b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80320b2:	687b      	ldr	r3, [r7, #4]
 80320b4:	2201      	movs	r2, #1
 80320b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80320b8:	687b      	ldr	r3, [r7, #4]
 80320ba:	2200      	movs	r2, #0
 80320bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80320c0:	687b      	ldr	r3, [r7, #4]
 80320c2:	2201      	movs	r2, #1
 80320c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80320c6:	687b      	ldr	r3, [r7, #4]
 80320c8:	2240      	movs	r2, #64	; 0x40
 80320ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80320cc:	687b      	ldr	r3, [r7, #4]
 80320ce:	2200      	movs	r2, #0
 80320d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80320d2:	687b      	ldr	r3, [r7, #4]
 80320d4:	2200      	movs	r2, #0
 80320d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80320da:	687b      	ldr	r3, [r7, #4]
 80320dc:	2201      	movs	r2, #1
 80320de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80320e2:	687b      	ldr	r3, [r7, #4]
 80320e4:	2200      	movs	r2, #0
 80320e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80320ea:	687b      	ldr	r3, [r7, #4]
 80320ec:	2200      	movs	r2, #0
 80320ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80320f2:	2300      	movs	r3, #0
}
 80320f4:	4618      	mov	r0, r3
 80320f6:	3714      	adds	r7, #20
 80320f8:	46bd      	mov	sp, r7
 80320fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80320fe:	4770      	bx	lr

08032100 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8032100:	b580      	push	{r7, lr}
 8032102:	b084      	sub	sp, #16
 8032104:	af00      	add	r7, sp, #0
 8032106:	6078      	str	r0, [r7, #4]
 8032108:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 803210a:	2300      	movs	r3, #0
 803210c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 803210e:	683b      	ldr	r3, [r7, #0]
 8032110:	2b00      	cmp	r3, #0
 8032112:	d01f      	beq.n	8032154 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8032114:	687b      	ldr	r3, [r7, #4]
 8032116:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 803211a:	2b00      	cmp	r3, #0
 803211c:	d10e      	bne.n	803213c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 803211e:	687b      	ldr	r3, [r7, #4]
 8032120:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8032124:	1c59      	adds	r1, r3, #1
 8032126:	687a      	ldr	r2, [r7, #4]
 8032128:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 803212c:	687a      	ldr	r2, [r7, #4]
 803212e:	33de      	adds	r3, #222	; 0xde
 8032130:	6839      	ldr	r1, [r7, #0]
 8032132:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8032136:	2300      	movs	r3, #0
 8032138:	73fb      	strb	r3, [r7, #15]
 803213a:	e016      	b.n	803216a <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 803213c:	480d      	ldr	r0, [pc, #52]	; (8032174 <USBH_RegisterClass+0x74>)
 803213e:	f003 fa9f 	bl	8035680 <iprintf>
 8032142:	480d      	ldr	r0, [pc, #52]	; (8032178 <USBH_RegisterClass+0x78>)
 8032144:	f003 fa9c 	bl	8035680 <iprintf>
 8032148:	200a      	movs	r0, #10
 803214a:	f003 fab1 	bl	80356b0 <putchar>
      status = USBH_FAIL;
 803214e:	2302      	movs	r3, #2
 8032150:	73fb      	strb	r3, [r7, #15]
 8032152:	e00a      	b.n	803216a <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8032154:	4807      	ldr	r0, [pc, #28]	; (8032174 <USBH_RegisterClass+0x74>)
 8032156:	f003 fa93 	bl	8035680 <iprintf>
 803215a:	4808      	ldr	r0, [pc, #32]	; (803217c <USBH_RegisterClass+0x7c>)
 803215c:	f003 fa90 	bl	8035680 <iprintf>
 8032160:	200a      	movs	r0, #10
 8032162:	f003 faa5 	bl	80356b0 <putchar>
    status = USBH_FAIL;
 8032166:	2302      	movs	r3, #2
 8032168:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 803216a:	7bfb      	ldrb	r3, [r7, #15]
}
 803216c:	4618      	mov	r0, r3
 803216e:	3710      	adds	r7, #16
 8032170:	46bd      	mov	sp, r7
 8032172:	bd80      	pop	{r7, pc}
 8032174:	080379e0 	.word	0x080379e0
 8032178:	080379fc 	.word	0x080379fc
 803217c:	08037a18 	.word	0x08037a18

08032180 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8032180:	b580      	push	{r7, lr}
 8032182:	b084      	sub	sp, #16
 8032184:	af00      	add	r7, sp, #0
 8032186:	6078      	str	r0, [r7, #4]
 8032188:	460b      	mov	r3, r1
 803218a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 803218c:	2300      	movs	r3, #0
 803218e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8032190:	687b      	ldr	r3, [r7, #4]
 8032192:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8032196:	78fa      	ldrb	r2, [r7, #3]
 8032198:	429a      	cmp	r2, r3
 803219a:	d23c      	bcs.n	8032216 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 803219c:	687b      	ldr	r3, [r7, #4]
 803219e:	78fa      	ldrb	r2, [r7, #3]
 80321a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 80321a4:	78fb      	ldrb	r3, [r7, #3]
 80321a6:	4619      	mov	r1, r3
 80321a8:	4823      	ldr	r0, [pc, #140]	; (8032238 <USBH_SelectInterface+0xb8>)
 80321aa:	f003 fa69 	bl	8035680 <iprintf>
 80321ae:	200a      	movs	r0, #10
 80321b0:	f003 fa7e 	bl	80356b0 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 80321b4:	78fb      	ldrb	r3, [r7, #3]
 80321b6:	687a      	ldr	r2, [r7, #4]
 80321b8:	211a      	movs	r1, #26
 80321ba:	fb01 f303 	mul.w	r3, r1, r3
 80321be:	4413      	add	r3, r2
 80321c0:	f203 3347 	addw	r3, r3, #839	; 0x347
 80321c4:	781b      	ldrb	r3, [r3, #0]
 80321c6:	4619      	mov	r1, r3
 80321c8:	481c      	ldr	r0, [pc, #112]	; (803223c <USBH_SelectInterface+0xbc>)
 80321ca:	f003 fa59 	bl	8035680 <iprintf>
 80321ce:	200a      	movs	r0, #10
 80321d0:	f003 fa6e 	bl	80356b0 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 80321d4:	78fb      	ldrb	r3, [r7, #3]
 80321d6:	687a      	ldr	r2, [r7, #4]
 80321d8:	211a      	movs	r1, #26
 80321da:	fb01 f303 	mul.w	r3, r1, r3
 80321de:	4413      	add	r3, r2
 80321e0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80321e4:	781b      	ldrb	r3, [r3, #0]
 80321e6:	4619      	mov	r1, r3
 80321e8:	4815      	ldr	r0, [pc, #84]	; (8032240 <USBH_SelectInterface+0xc0>)
 80321ea:	f003 fa49 	bl	8035680 <iprintf>
 80321ee:	200a      	movs	r0, #10
 80321f0:	f003 fa5e 	bl	80356b0 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 80321f4:	78fb      	ldrb	r3, [r7, #3]
 80321f6:	687a      	ldr	r2, [r7, #4]
 80321f8:	211a      	movs	r1, #26
 80321fa:	fb01 f303 	mul.w	r3, r1, r3
 80321fe:	4413      	add	r3, r2
 8032200:	f203 3349 	addw	r3, r3, #841	; 0x349
 8032204:	781b      	ldrb	r3, [r3, #0]
 8032206:	4619      	mov	r1, r3
 8032208:	480e      	ldr	r0, [pc, #56]	; (8032244 <USBH_SelectInterface+0xc4>)
 803220a:	f003 fa39 	bl	8035680 <iprintf>
 803220e:	200a      	movs	r0, #10
 8032210:	f003 fa4e 	bl	80356b0 <putchar>
 8032214:	e00a      	b.n	803222c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8032216:	480c      	ldr	r0, [pc, #48]	; (8032248 <USBH_SelectInterface+0xc8>)
 8032218:	f003 fa32 	bl	8035680 <iprintf>
 803221c:	480b      	ldr	r0, [pc, #44]	; (803224c <USBH_SelectInterface+0xcc>)
 803221e:	f003 fa2f 	bl	8035680 <iprintf>
 8032222:	200a      	movs	r0, #10
 8032224:	f003 fa44 	bl	80356b0 <putchar>
    status = USBH_FAIL;
 8032228:	2302      	movs	r3, #2
 803222a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 803222c:	7bfb      	ldrb	r3, [r7, #15]
}
 803222e:	4618      	mov	r0, r3
 8032230:	3710      	adds	r7, #16
 8032232:	46bd      	mov	sp, r7
 8032234:	bd80      	pop	{r7, pc}
 8032236:	bf00      	nop
 8032238:	08037a30 	.word	0x08037a30
 803223c:	08037a50 	.word	0x08037a50
 8032240:	08037a60 	.word	0x08037a60
 8032244:	08037a70 	.word	0x08037a70
 8032248:	080379e0 	.word	0x080379e0
 803224c:	08037a80 	.word	0x08037a80

08032250 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8032250:	b480      	push	{r7}
 8032252:	b087      	sub	sp, #28
 8032254:	af00      	add	r7, sp, #0
 8032256:	6078      	str	r0, [r7, #4]
 8032258:	4608      	mov	r0, r1
 803225a:	4611      	mov	r1, r2
 803225c:	461a      	mov	r2, r3
 803225e:	4603      	mov	r3, r0
 8032260:	70fb      	strb	r3, [r7, #3]
 8032262:	460b      	mov	r3, r1
 8032264:	70bb      	strb	r3, [r7, #2]
 8032266:	4613      	mov	r3, r2
 8032268:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 803226a:	2300      	movs	r3, #0
 803226c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 803226e:	2300      	movs	r3, #0
 8032270:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8032272:	687b      	ldr	r3, [r7, #4]
 8032274:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8032278:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 803227a:	e025      	b.n	80322c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 803227c:	7dfb      	ldrb	r3, [r7, #23]
 803227e:	221a      	movs	r2, #26
 8032280:	fb02 f303 	mul.w	r3, r2, r3
 8032284:	3308      	adds	r3, #8
 8032286:	68fa      	ldr	r2, [r7, #12]
 8032288:	4413      	add	r3, r2
 803228a:	3302      	adds	r3, #2
 803228c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 803228e:	693b      	ldr	r3, [r7, #16]
 8032290:	795b      	ldrb	r3, [r3, #5]
 8032292:	78fa      	ldrb	r2, [r7, #3]
 8032294:	429a      	cmp	r2, r3
 8032296:	d002      	beq.n	803229e <USBH_FindInterface+0x4e>
 8032298:	78fb      	ldrb	r3, [r7, #3]
 803229a:	2bff      	cmp	r3, #255	; 0xff
 803229c:	d111      	bne.n	80322c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 803229e:	693b      	ldr	r3, [r7, #16]
 80322a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80322a2:	78ba      	ldrb	r2, [r7, #2]
 80322a4:	429a      	cmp	r2, r3
 80322a6:	d002      	beq.n	80322ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80322a8:	78bb      	ldrb	r3, [r7, #2]
 80322aa:	2bff      	cmp	r3, #255	; 0xff
 80322ac:	d109      	bne.n	80322c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80322ae:	693b      	ldr	r3, [r7, #16]
 80322b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80322b2:	787a      	ldrb	r2, [r7, #1]
 80322b4:	429a      	cmp	r2, r3
 80322b6:	d002      	beq.n	80322be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80322b8:	787b      	ldrb	r3, [r7, #1]
 80322ba:	2bff      	cmp	r3, #255	; 0xff
 80322bc:	d101      	bne.n	80322c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80322be:	7dfb      	ldrb	r3, [r7, #23]
 80322c0:	e006      	b.n	80322d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80322c2:	7dfb      	ldrb	r3, [r7, #23]
 80322c4:	3301      	adds	r3, #1
 80322c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80322c8:	7dfb      	ldrb	r3, [r7, #23]
 80322ca:	2b01      	cmp	r3, #1
 80322cc:	d9d6      	bls.n	803227c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80322ce:	23ff      	movs	r3, #255	; 0xff
}
 80322d0:	4618      	mov	r0, r3
 80322d2:	371c      	adds	r7, #28
 80322d4:	46bd      	mov	sp, r7
 80322d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80322da:	4770      	bx	lr

080322dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80322dc:	b580      	push	{r7, lr}
 80322de:	b082      	sub	sp, #8
 80322e0:	af00      	add	r7, sp, #0
 80322e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80322e4:	6878      	ldr	r0, [r7, #4]
 80322e6:	f002 fa8d 	bl	8034804 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80322ea:	2101      	movs	r1, #1
 80322ec:	6878      	ldr	r0, [r7, #4]
 80322ee:	f002 fba4 	bl	8034a3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80322f2:	2300      	movs	r3, #0
}
 80322f4:	4618      	mov	r0, r3
 80322f6:	3708      	adds	r7, #8
 80322f8:	46bd      	mov	sp, r7
 80322fa:	bd80      	pop	{r7, pc}

080322fc <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Stop(USBH_HandleTypeDef *phost)
{
 80322fc:	b580      	push	{r7, lr}
 80322fe:	b082      	sub	sp, #8
 8032300:	af00      	add	r7, sp, #0
 8032302:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  USBH_LL_DriverVBUS(phost, FALSE);
 8032304:	2100      	movs	r1, #0
 8032306:	6878      	ldr	r0, [r7, #4]
 8032308:	f002 fb97 	bl	8034a3a <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  USBH_LL_Stop(phost);
 803230c:	6878      	ldr	r0, [r7, #4]
 803230e:	f002 fa94 	bl	803483a <USBH_LL_Stop>

  /* Free Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8032312:	687b      	ldr	r3, [r7, #4]
 8032314:	791b      	ldrb	r3, [r3, #4]
 8032316:	4619      	mov	r1, r3
 8032318:	6878      	ldr	r0, [r7, #4]
 803231a:	f001 fb53 	bl	80339c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 803231e:	687b      	ldr	r3, [r7, #4]
 8032320:	795b      	ldrb	r3, [r3, #5]
 8032322:	4619      	mov	r1, r3
 8032324:	6878      	ldr	r0, [r7, #4]
 8032326:	f001 fb4d 	bl	80339c4 <USBH_FreePipe>

  return USBH_OK;
 803232a:	2300      	movs	r3, #0
}
 803232c:	4618      	mov	r0, r3
 803232e:	3708      	adds	r7, #8
 8032330:	46bd      	mov	sp, r7
 8032332:	bd80      	pop	{r7, pc}

08032334 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8032334:	b580      	push	{r7, lr}
 8032336:	b088      	sub	sp, #32
 8032338:	af04      	add	r7, sp, #16
 803233a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 803233c:	2302      	movs	r3, #2
 803233e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8032340:	2300      	movs	r3, #0
 8032342:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8032344:	687b      	ldr	r3, [r7, #4]
 8032346:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 803234a:	b2db      	uxtb	r3, r3
 803234c:	2b01      	cmp	r3, #1
 803234e:	d102      	bne.n	8032356 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8032350:	687b      	ldr	r3, [r7, #4]
 8032352:	2203      	movs	r2, #3
 8032354:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8032356:	687b      	ldr	r3, [r7, #4]
 8032358:	781b      	ldrb	r3, [r3, #0]
 803235a:	b2db      	uxtb	r3, r3
 803235c:	2b0b      	cmp	r3, #11
 803235e:	f200 822b 	bhi.w	80327b8 <USBH_Process+0x484>
 8032362:	a201      	add	r2, pc, #4	; (adr r2, 8032368 <USBH_Process+0x34>)
 8032364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032368:	08032399 	.word	0x08032399
 803236c:	080323d7 	.word	0x080323d7
 8032370:	08032457 	.word	0x08032457
 8032374:	08032747 	.word	0x08032747
 8032378:	080327b9 	.word	0x080327b9
 803237c:	080324fb 	.word	0x080324fb
 8032380:	080326c9 	.word	0x080326c9
 8032384:	08032549 	.word	0x08032549
 8032388:	08032569 	.word	0x08032569
 803238c:	08032595 	.word	0x08032595
 8032390:	080325cf 	.word	0x080325cf
 8032394:	0803272f 	.word	0x0803272f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8032398:	687b      	ldr	r3, [r7, #4]
 803239a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 803239e:	b2db      	uxtb	r3, r3
 80323a0:	2b00      	cmp	r3, #0
 80323a2:	f000 820b 	beq.w	80327bc <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 80323a6:	48b9      	ldr	r0, [pc, #740]	; (803268c <USBH_Process+0x358>)
 80323a8:	f003 f96a 	bl	8035680 <iprintf>
 80323ac:	200a      	movs	r0, #10
 80323ae:	f003 f97f 	bl	80356b0 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80323b2:	687b      	ldr	r3, [r7, #4]
 80323b4:	2201      	movs	r2, #1
 80323b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80323b8:	20c8      	movs	r0, #200	; 0xc8
 80323ba:	f002 fbbb 	bl	8034b34 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80323be:	6878      	ldr	r0, [r7, #4]
 80323c0:	f002 fa7b 	bl	80348ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80323c4:	687b      	ldr	r3, [r7, #4]
 80323c6:	2200      	movs	r2, #0
 80323c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80323cc:	687b      	ldr	r3, [r7, #4]
 80323ce:	2200      	movs	r2, #0
 80323d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80323d4:	e1f2      	b.n	80327bc <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80323d6:	687b      	ldr	r3, [r7, #4]
 80323d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80323dc:	2b01      	cmp	r3, #1
 80323de:	d10d      	bne.n	80323fc <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 80323e0:	48ab      	ldr	r0, [pc, #684]	; (8032690 <USBH_Process+0x35c>)
 80323e2:	f003 f94d 	bl	8035680 <iprintf>
 80323e6:	200a      	movs	r0, #10
 80323e8:	f003 f962 	bl	80356b0 <putchar>
        phost->device.RstCnt = 0U;
 80323ec:	687b      	ldr	r3, [r7, #4]
 80323ee:	2200      	movs	r2, #0
 80323f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80323f4:	687b      	ldr	r3, [r7, #4]
 80323f6:	2202      	movs	r2, #2
 80323f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80323fa:	e1ec      	b.n	80327d6 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80323fc:	687b      	ldr	r3, [r7, #4]
 80323fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8032402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8032406:	d91a      	bls.n	803243e <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8032408:	687b      	ldr	r3, [r7, #4]
 803240a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 803240e:	3301      	adds	r3, #1
 8032410:	b2da      	uxtb	r2, r3
 8032412:	687b      	ldr	r3, [r7, #4]
 8032414:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8032418:	687b      	ldr	r3, [r7, #4]
 803241a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 803241e:	2b03      	cmp	r3, #3
 8032420:	d909      	bls.n	8032436 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8032422:	489c      	ldr	r0, [pc, #624]	; (8032694 <USBH_Process+0x360>)
 8032424:	f003 f92c 	bl	8035680 <iprintf>
 8032428:	200a      	movs	r0, #10
 803242a:	f003 f941 	bl	80356b0 <putchar>
            phost->gState = HOST_ABORT_STATE;
 803242e:	687b      	ldr	r3, [r7, #4]
 8032430:	220d      	movs	r2, #13
 8032432:	701a      	strb	r2, [r3, #0]
      break;
 8032434:	e1cf      	b.n	80327d6 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 8032436:	687b      	ldr	r3, [r7, #4]
 8032438:	2200      	movs	r2, #0
 803243a:	701a      	strb	r2, [r3, #0]
      break;
 803243c:	e1cb      	b.n	80327d6 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 803243e:	687b      	ldr	r3, [r7, #4]
 8032440:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8032444:	f103 020a 	add.w	r2, r3, #10
 8032448:	687b      	ldr	r3, [r7, #4]
 803244a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 803244e:	200a      	movs	r0, #10
 8032450:	f002 fb70 	bl	8034b34 <USBH_Delay>
      break;
 8032454:	e1bf      	b.n	80327d6 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8032456:	687b      	ldr	r3, [r7, #4]
 8032458:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 803245c:	2b00      	cmp	r3, #0
 803245e:	d005      	beq.n	803246c <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8032460:	687b      	ldr	r3, [r7, #4]
 8032462:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8032466:	2104      	movs	r1, #4
 8032468:	6878      	ldr	r0, [r7, #4]
 803246a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 803246c:	2064      	movs	r0, #100	; 0x64
 803246e:	f002 fb61 	bl	8034b34 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8032472:	6878      	ldr	r0, [r7, #4]
 8032474:	f002 f9fc 	bl	8034870 <USBH_LL_GetSpeed>
 8032478:	4603      	mov	r3, r0
 803247a:	461a      	mov	r2, r3
 803247c:	687b      	ldr	r3, [r7, #4]
 803247e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8032482:	687b      	ldr	r3, [r7, #4]
 8032484:	2205      	movs	r2, #5
 8032486:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8032488:	2100      	movs	r1, #0
 803248a:	6878      	ldr	r0, [r7, #4]
 803248c:	f001 fa79 	bl	8033982 <USBH_AllocPipe>
 8032490:	4603      	mov	r3, r0
 8032492:	461a      	mov	r2, r3
 8032494:	687b      	ldr	r3, [r7, #4]
 8032496:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8032498:	2180      	movs	r1, #128	; 0x80
 803249a:	6878      	ldr	r0, [r7, #4]
 803249c:	f001 fa71 	bl	8033982 <USBH_AllocPipe>
 80324a0:	4603      	mov	r3, r0
 80324a2:	461a      	mov	r2, r3
 80324a4:	687b      	ldr	r3, [r7, #4]
 80324a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80324a8:	687b      	ldr	r3, [r7, #4]
 80324aa:	7919      	ldrb	r1, [r3, #4]
 80324ac:	687b      	ldr	r3, [r7, #4]
 80324ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80324b2:	687b      	ldr	r3, [r7, #4]
 80324b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80324b8:	687a      	ldr	r2, [r7, #4]
 80324ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80324bc:	b292      	uxth	r2, r2
 80324be:	9202      	str	r2, [sp, #8]
 80324c0:	2200      	movs	r2, #0
 80324c2:	9201      	str	r2, [sp, #4]
 80324c4:	9300      	str	r3, [sp, #0]
 80324c6:	4603      	mov	r3, r0
 80324c8:	2280      	movs	r2, #128	; 0x80
 80324ca:	6878      	ldr	r0, [r7, #4]
 80324cc:	f001 fa2a 	bl	8033924 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80324d0:	687b      	ldr	r3, [r7, #4]
 80324d2:	7959      	ldrb	r1, [r3, #5]
 80324d4:	687b      	ldr	r3, [r7, #4]
 80324d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80324da:	687b      	ldr	r3, [r7, #4]
 80324dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80324e0:	687a      	ldr	r2, [r7, #4]
 80324e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80324e4:	b292      	uxth	r2, r2
 80324e6:	9202      	str	r2, [sp, #8]
 80324e8:	2200      	movs	r2, #0
 80324ea:	9201      	str	r2, [sp, #4]
 80324ec:	9300      	str	r3, [sp, #0]
 80324ee:	4603      	mov	r3, r0
 80324f0:	2200      	movs	r2, #0
 80324f2:	6878      	ldr	r0, [r7, #4]
 80324f4:	f001 fa16 	bl	8033924 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80324f8:	e16d      	b.n	80327d6 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80324fa:	6878      	ldr	r0, [r7, #4]
 80324fc:	f000 f97a 	bl	80327f4 <USBH_HandleEnum>
 8032500:	4603      	mov	r3, r0
 8032502:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8032504:	7bbb      	ldrb	r3, [r7, #14]
 8032506:	b2db      	uxtb	r3, r3
 8032508:	2b00      	cmp	r3, #0
 803250a:	f040 8159 	bne.w	80327c0 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 803250e:	4862      	ldr	r0, [pc, #392]	; (8032698 <USBH_Process+0x364>)
 8032510:	f003 f8b6 	bl	8035680 <iprintf>
 8032514:	200a      	movs	r0, #10
 8032516:	f003 f8cb 	bl	80356b0 <putchar>

        phost->device.current_interface = 0U;
 803251a:	687b      	ldr	r3, [r7, #4]
 803251c:	2200      	movs	r2, #0
 803251e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8032522:	687b      	ldr	r3, [r7, #4]
 8032524:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8032528:	2b01      	cmp	r3, #1
 803252a:	d109      	bne.n	8032540 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 803252c:	485b      	ldr	r0, [pc, #364]	; (803269c <USBH_Process+0x368>)
 803252e:	f003 f8a7 	bl	8035680 <iprintf>
 8032532:	200a      	movs	r0, #10
 8032534:	f003 f8bc 	bl	80356b0 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8032538:	687b      	ldr	r3, [r7, #4]
 803253a:	2208      	movs	r2, #8
 803253c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 803253e:	e13f      	b.n	80327c0 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 8032540:	687b      	ldr	r3, [r7, #4]
 8032542:	2207      	movs	r2, #7
 8032544:	701a      	strb	r2, [r3, #0]
      break;
 8032546:	e13b      	b.n	80327c0 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8032548:	687b      	ldr	r3, [r7, #4]
 803254a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 803254e:	2b00      	cmp	r3, #0
 8032550:	f000 8138 	beq.w	80327c4 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8032554:	687b      	ldr	r3, [r7, #4]
 8032556:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 803255a:	2101      	movs	r1, #1
 803255c:	6878      	ldr	r0, [r7, #4]
 803255e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8032560:	687b      	ldr	r3, [r7, #4]
 8032562:	2208      	movs	r2, #8
 8032564:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8032566:	e12d      	b.n	80327c4 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8032568:	687b      	ldr	r3, [r7, #4]
 803256a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 803256e:	b29b      	uxth	r3, r3
 8032570:	4619      	mov	r1, r3
 8032572:	6878      	ldr	r0, [r7, #4]
 8032574:	f000 fd4e 	bl	8033014 <USBH_SetCfg>
 8032578:	4603      	mov	r3, r0
 803257a:	2b00      	cmp	r3, #0
 803257c:	f040 8124 	bne.w	80327c8 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8032580:	687b      	ldr	r3, [r7, #4]
 8032582:	2209      	movs	r2, #9
 8032584:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8032586:	4846      	ldr	r0, [pc, #280]	; (80326a0 <USBH_Process+0x36c>)
 8032588:	f003 f87a 	bl	8035680 <iprintf>
 803258c:	200a      	movs	r0, #10
 803258e:	f003 f88f 	bl	80356b0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8032592:	e119      	b.n	80327c8 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8032594:	687b      	ldr	r3, [r7, #4]
 8032596:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 803259a:	f003 0320 	and.w	r3, r3, #32
 803259e:	2b00      	cmp	r3, #0
 80325a0:	d011      	beq.n	80325c6 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80325a2:	2101      	movs	r1, #1
 80325a4:	6878      	ldr	r0, [r7, #4]
 80325a6:	f000 fd58 	bl	803305a <USBH_SetFeature>
 80325aa:	4603      	mov	r3, r0
 80325ac:	2b00      	cmp	r3, #0
 80325ae:	f040 810d 	bne.w	80327cc <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80325b2:	483c      	ldr	r0, [pc, #240]	; (80326a4 <USBH_Process+0x370>)
 80325b4:	f003 f864 	bl	8035680 <iprintf>
 80325b8:	200a      	movs	r0, #10
 80325ba:	f003 f879 	bl	80356b0 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80325be:	687b      	ldr	r3, [r7, #4]
 80325c0:	220a      	movs	r2, #10
 80325c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80325c4:	e102      	b.n	80327cc <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 80325c6:	687b      	ldr	r3, [r7, #4]
 80325c8:	220a      	movs	r2, #10
 80325ca:	701a      	strb	r2, [r3, #0]
      break;
 80325cc:	e0fe      	b.n	80327cc <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80325ce:	687b      	ldr	r3, [r7, #4]
 80325d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80325d4:	2b00      	cmp	r3, #0
 80325d6:	d106      	bne.n	80325e6 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 80325d8:	4833      	ldr	r0, [pc, #204]	; (80326a8 <USBH_Process+0x374>)
 80325da:	f003 f851 	bl	8035680 <iprintf>
 80325de:	200a      	movs	r0, #10
 80325e0:	f003 f866 	bl	80356b0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80325e4:	e0f7      	b.n	80327d6 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 80325e6:	687b      	ldr	r3, [r7, #4]
 80325e8:	2200      	movs	r2, #0
 80325ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80325ee:	2300      	movs	r3, #0
 80325f0:	73fb      	strb	r3, [r7, #15]
 80325f2:	e016      	b.n	8032622 <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80325f4:	7bfa      	ldrb	r2, [r7, #15]
 80325f6:	687b      	ldr	r3, [r7, #4]
 80325f8:	32de      	adds	r2, #222	; 0xde
 80325fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80325fe:	791a      	ldrb	r2, [r3, #4]
 8032600:	687b      	ldr	r3, [r7, #4]
 8032602:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8032606:	429a      	cmp	r2, r3
 8032608:	d108      	bne.n	803261c <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 803260a:	7bfa      	ldrb	r2, [r7, #15]
 803260c:	687b      	ldr	r3, [r7, #4]
 803260e:	32de      	adds	r2, #222	; 0xde
 8032610:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8032614:	687b      	ldr	r3, [r7, #4]
 8032616:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 803261a:	e005      	b.n	8032628 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 803261c:	7bfb      	ldrb	r3, [r7, #15]
 803261e:	3301      	adds	r3, #1
 8032620:	73fb      	strb	r3, [r7, #15]
 8032622:	7bfb      	ldrb	r3, [r7, #15]
 8032624:	2b00      	cmp	r3, #0
 8032626:	d0e5      	beq.n	80325f4 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 8032628:	687b      	ldr	r3, [r7, #4]
 803262a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803262e:	2b00      	cmp	r3, #0
 8032630:	d040      	beq.n	80326b4 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8032632:	687b      	ldr	r3, [r7, #4]
 8032634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8032638:	689b      	ldr	r3, [r3, #8]
 803263a:	6878      	ldr	r0, [r7, #4]
 803263c:	4798      	blx	r3
 803263e:	4603      	mov	r3, r0
 8032640:	2b00      	cmp	r3, #0
 8032642:	d114      	bne.n	803266e <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 8032644:	687b      	ldr	r3, [r7, #4]
 8032646:	2206      	movs	r2, #6
 8032648:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 803264a:	687b      	ldr	r3, [r7, #4]
 803264c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8032650:	681b      	ldr	r3, [r3, #0]
 8032652:	4619      	mov	r1, r3
 8032654:	4815      	ldr	r0, [pc, #84]	; (80326ac <USBH_Process+0x378>)
 8032656:	f003 f813 	bl	8035680 <iprintf>
 803265a:	200a      	movs	r0, #10
 803265c:	f003 f828 	bl	80356b0 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8032660:	687b      	ldr	r3, [r7, #4]
 8032662:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8032666:	2103      	movs	r1, #3
 8032668:	6878      	ldr	r0, [r7, #4]
 803266a:	4798      	blx	r3
      break;
 803266c:	e0b3      	b.n	80327d6 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 803266e:	687b      	ldr	r3, [r7, #4]
 8032670:	220d      	movs	r2, #13
 8032672:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8032674:	687b      	ldr	r3, [r7, #4]
 8032676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803267a:	681b      	ldr	r3, [r3, #0]
 803267c:	4619      	mov	r1, r3
 803267e:	480c      	ldr	r0, [pc, #48]	; (80326b0 <USBH_Process+0x37c>)
 8032680:	f002 fffe 	bl	8035680 <iprintf>
 8032684:	200a      	movs	r0, #10
 8032686:	f003 f813 	bl	80356b0 <putchar>
      break;
 803268a:	e0a4      	b.n	80327d6 <USBH_Process+0x4a2>
 803268c:	08037aa0 	.word	0x08037aa0
 8032690:	08037ab8 	.word	0x08037ab8
 8032694:	08037ad4 	.word	0x08037ad4
 8032698:	08037b00 	.word	0x08037b00
 803269c:	08037b14 	.word	0x08037b14
 80326a0:	08037b3c 	.word	0x08037b3c
 80326a4:	08037b58 	.word	0x08037b58
 80326a8:	08037b78 	.word	0x08037b78
 80326ac:	08037b98 	.word	0x08037b98
 80326b0:	08037bac 	.word	0x08037bac
          phost->gState = HOST_ABORT_STATE;
 80326b4:	687b      	ldr	r3, [r7, #4]
 80326b6:	220d      	movs	r2, #13
 80326b8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 80326ba:	4849      	ldr	r0, [pc, #292]	; (80327e0 <USBH_Process+0x4ac>)
 80326bc:	f002 ffe0 	bl	8035680 <iprintf>
 80326c0:	200a      	movs	r0, #10
 80326c2:	f002 fff5 	bl	80356b0 <putchar>
      break;
 80326c6:	e086      	b.n	80327d6 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80326c8:	687b      	ldr	r3, [r7, #4]
 80326ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80326ce:	2b00      	cmp	r3, #0
 80326d0:	d020      	beq.n	8032714 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 80326d2:	687b      	ldr	r3, [r7, #4]
 80326d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80326d8:	691b      	ldr	r3, [r3, #16]
 80326da:	6878      	ldr	r0, [r7, #4]
 80326dc:	4798      	blx	r3
 80326de:	4603      	mov	r3, r0
 80326e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80326e2:	7bbb      	ldrb	r3, [r7, #14]
 80326e4:	b2db      	uxtb	r3, r3
 80326e6:	2b00      	cmp	r3, #0
 80326e8:	d103      	bne.n	80326f2 <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 80326ea:	687b      	ldr	r3, [r7, #4]
 80326ec:	220b      	movs	r2, #11
 80326ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80326f0:	e06e      	b.n	80327d0 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 80326f2:	7bbb      	ldrb	r3, [r7, #14]
 80326f4:	b2db      	uxtb	r3, r3
 80326f6:	2b02      	cmp	r3, #2
 80326f8:	d16a      	bne.n	80327d0 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 80326fa:	687b      	ldr	r3, [r7, #4]
 80326fc:	220d      	movs	r2, #13
 80326fe:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8032700:	4838      	ldr	r0, [pc, #224]	; (80327e4 <USBH_Process+0x4b0>)
 8032702:	f002 ffbd 	bl	8035680 <iprintf>
 8032706:	4838      	ldr	r0, [pc, #224]	; (80327e8 <USBH_Process+0x4b4>)
 8032708:	f002 ffba 	bl	8035680 <iprintf>
 803270c:	200a      	movs	r0, #10
 803270e:	f002 ffcf 	bl	80356b0 <putchar>
      break;
 8032712:	e05d      	b.n	80327d0 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 8032714:	687b      	ldr	r3, [r7, #4]
 8032716:	220d      	movs	r2, #13
 8032718:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 803271a:	4832      	ldr	r0, [pc, #200]	; (80327e4 <USBH_Process+0x4b0>)
 803271c:	f002 ffb0 	bl	8035680 <iprintf>
 8032720:	4832      	ldr	r0, [pc, #200]	; (80327ec <USBH_Process+0x4b8>)
 8032722:	f002 ffad 	bl	8035680 <iprintf>
 8032726:	200a      	movs	r0, #10
 8032728:	f002 ffc2 	bl	80356b0 <putchar>
      break;
 803272c:	e050      	b.n	80327d0 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 803272e:	687b      	ldr	r3, [r7, #4]
 8032730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8032734:	2b00      	cmp	r3, #0
 8032736:	d04d      	beq.n	80327d4 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 8032738:	687b      	ldr	r3, [r7, #4]
 803273a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803273e:	695b      	ldr	r3, [r3, #20]
 8032740:	6878      	ldr	r0, [r7, #4]
 8032742:	4798      	blx	r3
      }
      break;
 8032744:	e046      	b.n	80327d4 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8032746:	687b      	ldr	r3, [r7, #4]
 8032748:	2200      	movs	r2, #0
 803274a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 803274e:	6878      	ldr	r0, [r7, #4]
 8032750:	f7ff fc82 	bl	8032058 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8032754:	687b      	ldr	r3, [r7, #4]
 8032756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 803275a:	2b00      	cmp	r3, #0
 803275c:	d009      	beq.n	8032772 <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 803275e:	687b      	ldr	r3, [r7, #4]
 8032760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8032764:	68db      	ldr	r3, [r3, #12]
 8032766:	6878      	ldr	r0, [r7, #4]
 8032768:	4798      	blx	r3
        phost->pActiveClass = NULL;
 803276a:	687b      	ldr	r3, [r7, #4]
 803276c:	2200      	movs	r2, #0
 803276e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8032772:	687b      	ldr	r3, [r7, #4]
 8032774:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8032778:	2b00      	cmp	r3, #0
 803277a:	d005      	beq.n	8032788 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 803277c:	687b      	ldr	r3, [r7, #4]
 803277e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8032782:	2105      	movs	r1, #5
 8032784:	6878      	ldr	r0, [r7, #4]
 8032786:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8032788:	4819      	ldr	r0, [pc, #100]	; (80327f0 <USBH_Process+0x4bc>)
 803278a:	f002 ff79 	bl	8035680 <iprintf>
 803278e:	200a      	movs	r0, #10
 8032790:	f002 ff8e 	bl	80356b0 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8032794:	687b      	ldr	r3, [r7, #4]
 8032796:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 803279a:	b2db      	uxtb	r3, r3
 803279c:	2b01      	cmp	r3, #1
 803279e:	d107      	bne.n	80327b0 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 80327a0:	687b      	ldr	r3, [r7, #4]
 80327a2:	2200      	movs	r2, #0
 80327a4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80327a8:	6878      	ldr	r0, [r7, #4]
 80327aa:	f7ff fd97 	bl	80322dc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80327ae:	e012      	b.n	80327d6 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 80327b0:	6878      	ldr	r0, [r7, #4]
 80327b2:	f002 f827 	bl	8034804 <USBH_LL_Start>
      break;
 80327b6:	e00e      	b.n	80327d6 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 80327b8:	bf00      	nop
 80327ba:	e00c      	b.n	80327d6 <USBH_Process+0x4a2>
      break;
 80327bc:	bf00      	nop
 80327be:	e00a      	b.n	80327d6 <USBH_Process+0x4a2>
      break;
 80327c0:	bf00      	nop
 80327c2:	e008      	b.n	80327d6 <USBH_Process+0x4a2>
    break;
 80327c4:	bf00      	nop
 80327c6:	e006      	b.n	80327d6 <USBH_Process+0x4a2>
      break;
 80327c8:	bf00      	nop
 80327ca:	e004      	b.n	80327d6 <USBH_Process+0x4a2>
      break;
 80327cc:	bf00      	nop
 80327ce:	e002      	b.n	80327d6 <USBH_Process+0x4a2>
      break;
 80327d0:	bf00      	nop
 80327d2:	e000      	b.n	80327d6 <USBH_Process+0x4a2>
      break;
 80327d4:	bf00      	nop
  }
  return USBH_OK;
 80327d6:	2300      	movs	r3, #0
}
 80327d8:	4618      	mov	r0, r3
 80327da:	3710      	adds	r7, #16
 80327dc:	46bd      	mov	sp, r7
 80327de:	bd80      	pop	{r7, pc}
 80327e0:	08037bcc 	.word	0x08037bcc
 80327e4:	080379e0 	.word	0x080379e0
 80327e8:	08037bf4 	.word	0x08037bf4
 80327ec:	08037c1c 	.word	0x08037c1c
 80327f0:	08037c34 	.word	0x08037c34

080327f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80327f4:	b580      	push	{r7, lr}
 80327f6:	b088      	sub	sp, #32
 80327f8:	af04      	add	r7, sp, #16
 80327fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80327fc:	2301      	movs	r3, #1
 80327fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8032800:	2301      	movs	r3, #1
 8032802:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8032804:	687b      	ldr	r3, [r7, #4]
 8032806:	785b      	ldrb	r3, [r3, #1]
 8032808:	2b07      	cmp	r3, #7
 803280a:	f200 8280 	bhi.w	8032d0e <USBH_HandleEnum+0x51a>
 803280e:	a201      	add	r2, pc, #4	; (adr r2, 8032814 <USBH_HandleEnum+0x20>)
 8032810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032814:	08032835 	.word	0x08032835
 8032818:	08032911 	.word	0x08032911
 803281c:	080329c1 	.word	0x080329c1
 8032820:	08032a81 	.word	0x08032a81
 8032824:	08032b09 	.word	0x08032b09
 8032828:	08032bbd 	.word	0x08032bbd
 803282c:	08032c31 	.word	0x08032c31
 8032830:	08032ca3 	.word	0x08032ca3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8032834:	2108      	movs	r1, #8
 8032836:	6878      	ldr	r0, [r7, #4]
 8032838:	f000 fb1c 	bl	8032e74 <USBH_Get_DevDesc>
 803283c:	4603      	mov	r3, r0
 803283e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8032840:	7bbb      	ldrb	r3, [r7, #14]
 8032842:	2b00      	cmp	r3, #0
 8032844:	d130      	bne.n	80328a8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8032846:	687b      	ldr	r3, [r7, #4]
 8032848:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 803284c:	687b      	ldr	r3, [r7, #4]
 803284e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8032850:	687b      	ldr	r3, [r7, #4]
 8032852:	2201      	movs	r2, #1
 8032854:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8032856:	687b      	ldr	r3, [r7, #4]
 8032858:	7919      	ldrb	r1, [r3, #4]
 803285a:	687b      	ldr	r3, [r7, #4]
 803285c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8032860:	687b      	ldr	r3, [r7, #4]
 8032862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8032866:	687a      	ldr	r2, [r7, #4]
 8032868:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 803286a:	b292      	uxth	r2, r2
 803286c:	9202      	str	r2, [sp, #8]
 803286e:	2200      	movs	r2, #0
 8032870:	9201      	str	r2, [sp, #4]
 8032872:	9300      	str	r3, [sp, #0]
 8032874:	4603      	mov	r3, r0
 8032876:	2280      	movs	r2, #128	; 0x80
 8032878:	6878      	ldr	r0, [r7, #4]
 803287a:	f001 f853 	bl	8033924 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 803287e:	687b      	ldr	r3, [r7, #4]
 8032880:	7959      	ldrb	r1, [r3, #5]
 8032882:	687b      	ldr	r3, [r7, #4]
 8032884:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8032888:	687b      	ldr	r3, [r7, #4]
 803288a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 803288e:	687a      	ldr	r2, [r7, #4]
 8032890:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8032892:	b292      	uxth	r2, r2
 8032894:	9202      	str	r2, [sp, #8]
 8032896:	2200      	movs	r2, #0
 8032898:	9201      	str	r2, [sp, #4]
 803289a:	9300      	str	r3, [sp, #0]
 803289c:	4603      	mov	r3, r0
 803289e:	2200      	movs	r2, #0
 80328a0:	6878      	ldr	r0, [r7, #4]
 80328a2:	f001 f83f 	bl	8033924 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80328a6:	e234      	b.n	8032d12 <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80328a8:	7bbb      	ldrb	r3, [r7, #14]
 80328aa:	2b03      	cmp	r3, #3
 80328ac:	f040 8231 	bne.w	8032d12 <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 80328b0:	48b9      	ldr	r0, [pc, #740]	; (8032b98 <USBH_HandleEnum+0x3a4>)
 80328b2:	f002 fee5 	bl	8035680 <iprintf>
 80328b6:	48b9      	ldr	r0, [pc, #740]	; (8032b9c <USBH_HandleEnum+0x3a8>)
 80328b8:	f002 fee2 	bl	8035680 <iprintf>
 80328bc:	200a      	movs	r0, #10
 80328be:	f002 fef7 	bl	80356b0 <putchar>
        phost->device.EnumCnt++;
 80328c2:	687b      	ldr	r3, [r7, #4]
 80328c4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80328c8:	3301      	adds	r3, #1
 80328ca:	b2da      	uxtb	r2, r3
 80328cc:	687b      	ldr	r3, [r7, #4]
 80328ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80328d2:	687b      	ldr	r3, [r7, #4]
 80328d4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80328d8:	2b03      	cmp	r3, #3
 80328da:	d909      	bls.n	80328f0 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80328dc:	48b0      	ldr	r0, [pc, #704]	; (8032ba0 <USBH_HandleEnum+0x3ac>)
 80328de:	f002 fecf 	bl	8035680 <iprintf>
 80328e2:	200a      	movs	r0, #10
 80328e4:	f002 fee4 	bl	80356b0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80328e8:	687b      	ldr	r3, [r7, #4]
 80328ea:	220d      	movs	r2, #13
 80328ec:	701a      	strb	r2, [r3, #0]
      break;
 80328ee:	e210      	b.n	8032d12 <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80328f0:	687b      	ldr	r3, [r7, #4]
 80328f2:	795b      	ldrb	r3, [r3, #5]
 80328f4:	4619      	mov	r1, r3
 80328f6:	6878      	ldr	r0, [r7, #4]
 80328f8:	f001 f864 	bl	80339c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80328fc:	687b      	ldr	r3, [r7, #4]
 80328fe:	791b      	ldrb	r3, [r3, #4]
 8032900:	4619      	mov	r1, r3
 8032902:	6878      	ldr	r0, [r7, #4]
 8032904:	f001 f85e 	bl	80339c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8032908:	687b      	ldr	r3, [r7, #4]
 803290a:	2200      	movs	r2, #0
 803290c:	701a      	strb	r2, [r3, #0]
      break;
 803290e:	e200      	b.n	8032d12 <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8032910:	2112      	movs	r1, #18
 8032912:	6878      	ldr	r0, [r7, #4]
 8032914:	f000 faae 	bl	8032e74 <USBH_Get_DevDesc>
 8032918:	4603      	mov	r3, r0
 803291a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 803291c:	7bbb      	ldrb	r3, [r7, #14]
 803291e:	2b00      	cmp	r3, #0
 8032920:	d117      	bne.n	8032952 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8032922:	687b      	ldr	r3, [r7, #4]
 8032924:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8032928:	4619      	mov	r1, r3
 803292a:	489e      	ldr	r0, [pc, #632]	; (8032ba4 <USBH_HandleEnum+0x3b0>)
 803292c:	f002 fea8 	bl	8035680 <iprintf>
 8032930:	200a      	movs	r0, #10
 8032932:	f002 febd 	bl	80356b0 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8032936:	687b      	ldr	r3, [r7, #4]
 8032938:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 803293c:	4619      	mov	r1, r3
 803293e:	489a      	ldr	r0, [pc, #616]	; (8032ba8 <USBH_HandleEnum+0x3b4>)
 8032940:	f002 fe9e 	bl	8035680 <iprintf>
 8032944:	200a      	movs	r0, #10
 8032946:	f002 feb3 	bl	80356b0 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 803294a:	687b      	ldr	r3, [r7, #4]
 803294c:	2202      	movs	r2, #2
 803294e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8032950:	e1e1      	b.n	8032d16 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032952:	7bbb      	ldrb	r3, [r7, #14]
 8032954:	2b03      	cmp	r3, #3
 8032956:	f040 81de 	bne.w	8032d16 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 803295a:	488f      	ldr	r0, [pc, #572]	; (8032b98 <USBH_HandleEnum+0x3a4>)
 803295c:	f002 fe90 	bl	8035680 <iprintf>
 8032960:	4892      	ldr	r0, [pc, #584]	; (8032bac <USBH_HandleEnum+0x3b8>)
 8032962:	f002 fe8d 	bl	8035680 <iprintf>
 8032966:	200a      	movs	r0, #10
 8032968:	f002 fea2 	bl	80356b0 <putchar>
        phost->device.EnumCnt++;
 803296c:	687b      	ldr	r3, [r7, #4]
 803296e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8032972:	3301      	adds	r3, #1
 8032974:	b2da      	uxtb	r2, r3
 8032976:	687b      	ldr	r3, [r7, #4]
 8032978:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 803297c:	687b      	ldr	r3, [r7, #4]
 803297e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8032982:	2b03      	cmp	r3, #3
 8032984:	d909      	bls.n	803299a <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8032986:	4886      	ldr	r0, [pc, #536]	; (8032ba0 <USBH_HandleEnum+0x3ac>)
 8032988:	f002 fe7a 	bl	8035680 <iprintf>
 803298c:	200a      	movs	r0, #10
 803298e:	f002 fe8f 	bl	80356b0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8032992:	687b      	ldr	r3, [r7, #4]
 8032994:	220d      	movs	r2, #13
 8032996:	701a      	strb	r2, [r3, #0]
      break;
 8032998:	e1bd      	b.n	8032d16 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 803299a:	687b      	ldr	r3, [r7, #4]
 803299c:	795b      	ldrb	r3, [r3, #5]
 803299e:	4619      	mov	r1, r3
 80329a0:	6878      	ldr	r0, [r7, #4]
 80329a2:	f001 f80f 	bl	80339c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80329a6:	687b      	ldr	r3, [r7, #4]
 80329a8:	791b      	ldrb	r3, [r3, #4]
 80329aa:	4619      	mov	r1, r3
 80329ac:	6878      	ldr	r0, [r7, #4]
 80329ae:	f001 f809 	bl	80339c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80329b2:	687b      	ldr	r3, [r7, #4]
 80329b4:	2200      	movs	r2, #0
 80329b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80329b8:	687b      	ldr	r3, [r7, #4]
 80329ba:	2200      	movs	r2, #0
 80329bc:	701a      	strb	r2, [r3, #0]
      break;
 80329be:	e1aa      	b.n	8032d16 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80329c0:	2101      	movs	r1, #1
 80329c2:	6878      	ldr	r0, [r7, #4]
 80329c4:	f000 fb02 	bl	8032fcc <USBH_SetAddress>
 80329c8:	4603      	mov	r3, r0
 80329ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80329cc:	7bbb      	ldrb	r3, [r7, #14]
 80329ce:	2b00      	cmp	r3, #0
 80329d0:	d13c      	bne.n	8032a4c <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 80329d2:	2002      	movs	r0, #2
 80329d4:	f002 f8ae 	bl	8034b34 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80329d8:	687b      	ldr	r3, [r7, #4]
 80329da:	2201      	movs	r2, #1
 80329dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80329e0:	687b      	ldr	r3, [r7, #4]
 80329e2:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 80329e6:	4619      	mov	r1, r3
 80329e8:	4871      	ldr	r0, [pc, #452]	; (8032bb0 <USBH_HandleEnum+0x3bc>)
 80329ea:	f002 fe49 	bl	8035680 <iprintf>
 80329ee:	200a      	movs	r0, #10
 80329f0:	f002 fe5e 	bl	80356b0 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80329f4:	687b      	ldr	r3, [r7, #4]
 80329f6:	2203      	movs	r2, #3
 80329f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80329fa:	687b      	ldr	r3, [r7, #4]
 80329fc:	7919      	ldrb	r1, [r3, #4]
 80329fe:	687b      	ldr	r3, [r7, #4]
 8032a00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8032a04:	687b      	ldr	r3, [r7, #4]
 8032a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8032a0a:	687a      	ldr	r2, [r7, #4]
 8032a0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8032a0e:	b292      	uxth	r2, r2
 8032a10:	9202      	str	r2, [sp, #8]
 8032a12:	2200      	movs	r2, #0
 8032a14:	9201      	str	r2, [sp, #4]
 8032a16:	9300      	str	r3, [sp, #0]
 8032a18:	4603      	mov	r3, r0
 8032a1a:	2280      	movs	r2, #128	; 0x80
 8032a1c:	6878      	ldr	r0, [r7, #4]
 8032a1e:	f000 ff81 	bl	8033924 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8032a22:	687b      	ldr	r3, [r7, #4]
 8032a24:	7959      	ldrb	r1, [r3, #5]
 8032a26:	687b      	ldr	r3, [r7, #4]
 8032a28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8032a2c:	687b      	ldr	r3, [r7, #4]
 8032a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8032a32:	687a      	ldr	r2, [r7, #4]
 8032a34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8032a36:	b292      	uxth	r2, r2
 8032a38:	9202      	str	r2, [sp, #8]
 8032a3a:	2200      	movs	r2, #0
 8032a3c:	9201      	str	r2, [sp, #4]
 8032a3e:	9300      	str	r3, [sp, #0]
 8032a40:	4603      	mov	r3, r0
 8032a42:	2200      	movs	r2, #0
 8032a44:	6878      	ldr	r0, [r7, #4]
 8032a46:	f000 ff6d 	bl	8033924 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8032a4a:	e166      	b.n	8032d1a <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032a4c:	7bbb      	ldrb	r3, [r7, #14]
 8032a4e:	2b03      	cmp	r3, #3
 8032a50:	f040 8163 	bne.w	8032d1a <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8032a54:	4850      	ldr	r0, [pc, #320]	; (8032b98 <USBH_HandleEnum+0x3a4>)
 8032a56:	f002 fe13 	bl	8035680 <iprintf>
 8032a5a:	4856      	ldr	r0, [pc, #344]	; (8032bb4 <USBH_HandleEnum+0x3c0>)
 8032a5c:	f002 fe10 	bl	8035680 <iprintf>
 8032a60:	200a      	movs	r0, #10
 8032a62:	f002 fe25 	bl	80356b0 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8032a66:	484e      	ldr	r0, [pc, #312]	; (8032ba0 <USBH_HandleEnum+0x3ac>)
 8032a68:	f002 fe0a 	bl	8035680 <iprintf>
 8032a6c:	200a      	movs	r0, #10
 8032a6e:	f002 fe1f 	bl	80356b0 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8032a72:	687b      	ldr	r3, [r7, #4]
 8032a74:	220d      	movs	r2, #13
 8032a76:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8032a78:	687b      	ldr	r3, [r7, #4]
 8032a7a:	2200      	movs	r2, #0
 8032a7c:	705a      	strb	r2, [r3, #1]
      break;
 8032a7e:	e14c      	b.n	8032d1a <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8032a80:	2109      	movs	r1, #9
 8032a82:	6878      	ldr	r0, [r7, #4]
 8032a84:	f000 fa1e 	bl	8032ec4 <USBH_Get_CfgDesc>
 8032a88:	4603      	mov	r3, r0
 8032a8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8032a8c:	7bbb      	ldrb	r3, [r7, #14]
 8032a8e:	2b00      	cmp	r3, #0
 8032a90:	d103      	bne.n	8032a9a <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8032a92:	687b      	ldr	r3, [r7, #4]
 8032a94:	2204      	movs	r2, #4
 8032a96:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8032a98:	e141      	b.n	8032d1e <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032a9a:	7bbb      	ldrb	r3, [r7, #14]
 8032a9c:	2b03      	cmp	r3, #3
 8032a9e:	f040 813e 	bne.w	8032d1e <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8032aa2:	483d      	ldr	r0, [pc, #244]	; (8032b98 <USBH_HandleEnum+0x3a4>)
 8032aa4:	f002 fdec 	bl	8035680 <iprintf>
 8032aa8:	4843      	ldr	r0, [pc, #268]	; (8032bb8 <USBH_HandleEnum+0x3c4>)
 8032aaa:	f002 fde9 	bl	8035680 <iprintf>
 8032aae:	200a      	movs	r0, #10
 8032ab0:	f002 fdfe 	bl	80356b0 <putchar>
        phost->device.EnumCnt++;
 8032ab4:	687b      	ldr	r3, [r7, #4]
 8032ab6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8032aba:	3301      	adds	r3, #1
 8032abc:	b2da      	uxtb	r2, r3
 8032abe:	687b      	ldr	r3, [r7, #4]
 8032ac0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8032ac4:	687b      	ldr	r3, [r7, #4]
 8032ac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8032aca:	2b03      	cmp	r3, #3
 8032acc:	d909      	bls.n	8032ae2 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8032ace:	4834      	ldr	r0, [pc, #208]	; (8032ba0 <USBH_HandleEnum+0x3ac>)
 8032ad0:	f002 fdd6 	bl	8035680 <iprintf>
 8032ad4:	200a      	movs	r0, #10
 8032ad6:	f002 fdeb 	bl	80356b0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8032ada:	687b      	ldr	r3, [r7, #4]
 8032adc:	220d      	movs	r2, #13
 8032ade:	701a      	strb	r2, [r3, #0]
      break;
 8032ae0:	e11d      	b.n	8032d1e <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8032ae2:	687b      	ldr	r3, [r7, #4]
 8032ae4:	795b      	ldrb	r3, [r3, #5]
 8032ae6:	4619      	mov	r1, r3
 8032ae8:	6878      	ldr	r0, [r7, #4]
 8032aea:	f000 ff6b 	bl	80339c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8032aee:	687b      	ldr	r3, [r7, #4]
 8032af0:	791b      	ldrb	r3, [r3, #4]
 8032af2:	4619      	mov	r1, r3
 8032af4:	6878      	ldr	r0, [r7, #4]
 8032af6:	f000 ff65 	bl	80339c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8032afa:	687b      	ldr	r3, [r7, #4]
 8032afc:	2200      	movs	r2, #0
 8032afe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8032b00:	687b      	ldr	r3, [r7, #4]
 8032b02:	2200      	movs	r2, #0
 8032b04:	701a      	strb	r2, [r3, #0]
      break;
 8032b06:	e10a      	b.n	8032d1e <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8032b08:	687b      	ldr	r3, [r7, #4]
 8032b0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8032b0e:	4619      	mov	r1, r3
 8032b10:	6878      	ldr	r0, [r7, #4]
 8032b12:	f000 f9d7 	bl	8032ec4 <USBH_Get_CfgDesc>
 8032b16:	4603      	mov	r3, r0
 8032b18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8032b1a:	7bbb      	ldrb	r3, [r7, #14]
 8032b1c:	2b00      	cmp	r3, #0
 8032b1e:	d103      	bne.n	8032b28 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8032b20:	687b      	ldr	r3, [r7, #4]
 8032b22:	2205      	movs	r2, #5
 8032b24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8032b26:	e0fc      	b.n	8032d22 <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032b28:	7bbb      	ldrb	r3, [r7, #14]
 8032b2a:	2b03      	cmp	r3, #3
 8032b2c:	f040 80f9 	bne.w	8032d22 <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8032b30:	4819      	ldr	r0, [pc, #100]	; (8032b98 <USBH_HandleEnum+0x3a4>)
 8032b32:	f002 fda5 	bl	8035680 <iprintf>
 8032b36:	4820      	ldr	r0, [pc, #128]	; (8032bb8 <USBH_HandleEnum+0x3c4>)
 8032b38:	f002 fda2 	bl	8035680 <iprintf>
 8032b3c:	200a      	movs	r0, #10
 8032b3e:	f002 fdb7 	bl	80356b0 <putchar>
        phost->device.EnumCnt++;
 8032b42:	687b      	ldr	r3, [r7, #4]
 8032b44:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8032b48:	3301      	adds	r3, #1
 8032b4a:	b2da      	uxtb	r2, r3
 8032b4c:	687b      	ldr	r3, [r7, #4]
 8032b4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8032b52:	687b      	ldr	r3, [r7, #4]
 8032b54:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8032b58:	2b03      	cmp	r3, #3
 8032b5a:	d909      	bls.n	8032b70 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8032b5c:	4810      	ldr	r0, [pc, #64]	; (8032ba0 <USBH_HandleEnum+0x3ac>)
 8032b5e:	f002 fd8f 	bl	8035680 <iprintf>
 8032b62:	200a      	movs	r0, #10
 8032b64:	f002 fda4 	bl	80356b0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8032b68:	687b      	ldr	r3, [r7, #4]
 8032b6a:	220d      	movs	r2, #13
 8032b6c:	701a      	strb	r2, [r3, #0]
      break;
 8032b6e:	e0d8      	b.n	8032d22 <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8032b70:	687b      	ldr	r3, [r7, #4]
 8032b72:	795b      	ldrb	r3, [r3, #5]
 8032b74:	4619      	mov	r1, r3
 8032b76:	6878      	ldr	r0, [r7, #4]
 8032b78:	f000 ff24 	bl	80339c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8032b7c:	687b      	ldr	r3, [r7, #4]
 8032b7e:	791b      	ldrb	r3, [r3, #4]
 8032b80:	4619      	mov	r1, r3
 8032b82:	6878      	ldr	r0, [r7, #4]
 8032b84:	f000 ff1e 	bl	80339c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8032b88:	687b      	ldr	r3, [r7, #4]
 8032b8a:	2200      	movs	r2, #0
 8032b8c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8032b8e:	687b      	ldr	r3, [r7, #4]
 8032b90:	2200      	movs	r2, #0
 8032b92:	701a      	strb	r2, [r3, #0]
      break;
 8032b94:	e0c5      	b.n	8032d22 <USBH_HandleEnum+0x52e>
 8032b96:	bf00      	nop
 8032b98:	080379e0 	.word	0x080379e0
 8032b9c:	08037c4c 	.word	0x08037c4c
 8032ba0:	08037c80 	.word	0x08037c80
 8032ba4:	08037cc0 	.word	0x08037cc0
 8032ba8:	08037ccc 	.word	0x08037ccc
 8032bac:	08037cd8 	.word	0x08037cd8
 8032bb0:	08037d14 	.word	0x08037d14
 8032bb4:	08037d2c 	.word	0x08037d2c
 8032bb8:	08037d60 	.word	0x08037d60

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8032bbc:	687b      	ldr	r3, [r7, #4]
 8032bbe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8032bc2:	2b00      	cmp	r3, #0
 8032bc4:	d02a      	beq.n	8032c1c <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8032bc6:	687b      	ldr	r3, [r7, #4]
 8032bc8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8032bcc:	687b      	ldr	r3, [r7, #4]
 8032bce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8032bd2:	23ff      	movs	r3, #255	; 0xff
 8032bd4:	6878      	ldr	r0, [r7, #4]
 8032bd6:	f000 f999 	bl	8032f0c <USBH_Get_StringDesc>
 8032bda:	4603      	mov	r3, r0
 8032bdc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8032bde:	7bbb      	ldrb	r3, [r7, #14]
 8032be0:	2b00      	cmp	r3, #0
 8032be2:	d10d      	bne.n	8032c00 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8032be4:	687b      	ldr	r3, [r7, #4]
 8032be6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8032bea:	4619      	mov	r1, r3
 8032bec:	4853      	ldr	r0, [pc, #332]	; (8032d3c <USBH_HandleEnum+0x548>)
 8032bee:	f002 fd47 	bl	8035680 <iprintf>
 8032bf2:	200a      	movs	r0, #10
 8032bf4:	f002 fd5c 	bl	80356b0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8032bf8:	687b      	ldr	r3, [r7, #4]
 8032bfa:	2206      	movs	r2, #6
 8032bfc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8032bfe:	e092      	b.n	8032d26 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032c00:	7bbb      	ldrb	r3, [r7, #14]
 8032c02:	2b03      	cmp	r3, #3
 8032c04:	f040 808f 	bne.w	8032d26 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 8032c08:	484d      	ldr	r0, [pc, #308]	; (8032d40 <USBH_HandleEnum+0x54c>)
 8032c0a:	f002 fd39 	bl	8035680 <iprintf>
 8032c0e:	200a      	movs	r0, #10
 8032c10:	f002 fd4e 	bl	80356b0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8032c14:	687b      	ldr	r3, [r7, #4]
 8032c16:	2206      	movs	r2, #6
 8032c18:	705a      	strb	r2, [r3, #1]
      break;
 8032c1a:	e084      	b.n	8032d26 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 8032c1c:	4848      	ldr	r0, [pc, #288]	; (8032d40 <USBH_HandleEnum+0x54c>)
 8032c1e:	f002 fd2f 	bl	8035680 <iprintf>
 8032c22:	200a      	movs	r0, #10
 8032c24:	f002 fd44 	bl	80356b0 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8032c28:	687b      	ldr	r3, [r7, #4]
 8032c2a:	2206      	movs	r2, #6
 8032c2c:	705a      	strb	r2, [r3, #1]
      break;
 8032c2e:	e07a      	b.n	8032d26 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8032c30:	687b      	ldr	r3, [r7, #4]
 8032c32:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8032c36:	2b00      	cmp	r3, #0
 8032c38:	d029      	beq.n	8032c8e <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8032c3a:	687b      	ldr	r3, [r7, #4]
 8032c3c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8032c40:	687b      	ldr	r3, [r7, #4]
 8032c42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8032c46:	23ff      	movs	r3, #255	; 0xff
 8032c48:	6878      	ldr	r0, [r7, #4]
 8032c4a:	f000 f95f 	bl	8032f0c <USBH_Get_StringDesc>
 8032c4e:	4603      	mov	r3, r0
 8032c50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8032c52:	7bbb      	ldrb	r3, [r7, #14]
 8032c54:	2b00      	cmp	r3, #0
 8032c56:	d10d      	bne.n	8032c74 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8032c58:	687b      	ldr	r3, [r7, #4]
 8032c5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8032c5e:	4619      	mov	r1, r3
 8032c60:	4838      	ldr	r0, [pc, #224]	; (8032d44 <USBH_HandleEnum+0x550>)
 8032c62:	f002 fd0d 	bl	8035680 <iprintf>
 8032c66:	200a      	movs	r0, #10
 8032c68:	f002 fd22 	bl	80356b0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8032c6c:	687b      	ldr	r3, [r7, #4]
 8032c6e:	2207      	movs	r2, #7
 8032c70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8032c72:	e05a      	b.n	8032d2a <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032c74:	7bbb      	ldrb	r3, [r7, #14]
 8032c76:	2b03      	cmp	r3, #3
 8032c78:	d157      	bne.n	8032d2a <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 8032c7a:	4833      	ldr	r0, [pc, #204]	; (8032d48 <USBH_HandleEnum+0x554>)
 8032c7c:	f002 fd00 	bl	8035680 <iprintf>
 8032c80:	200a      	movs	r0, #10
 8032c82:	f002 fd15 	bl	80356b0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8032c86:	687b      	ldr	r3, [r7, #4]
 8032c88:	2207      	movs	r2, #7
 8032c8a:	705a      	strb	r2, [r3, #1]
      break;
 8032c8c:	e04d      	b.n	8032d2a <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 8032c8e:	482e      	ldr	r0, [pc, #184]	; (8032d48 <USBH_HandleEnum+0x554>)
 8032c90:	f002 fcf6 	bl	8035680 <iprintf>
 8032c94:	200a      	movs	r0, #10
 8032c96:	f002 fd0b 	bl	80356b0 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8032c9a:	687b      	ldr	r3, [r7, #4]
 8032c9c:	2207      	movs	r2, #7
 8032c9e:	705a      	strb	r2, [r3, #1]
      break;
 8032ca0:	e043      	b.n	8032d2a <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8032ca2:	687b      	ldr	r3, [r7, #4]
 8032ca4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8032ca8:	2b00      	cmp	r3, #0
 8032caa:	d027      	beq.n	8032cfc <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8032cac:	687b      	ldr	r3, [r7, #4]
 8032cae:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8032cb2:	687b      	ldr	r3, [r7, #4]
 8032cb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8032cb8:	23ff      	movs	r3, #255	; 0xff
 8032cba:	6878      	ldr	r0, [r7, #4]
 8032cbc:	f000 f926 	bl	8032f0c <USBH_Get_StringDesc>
 8032cc0:	4603      	mov	r3, r0
 8032cc2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8032cc4:	7bbb      	ldrb	r3, [r7, #14]
 8032cc6:	2b00      	cmp	r3, #0
 8032cc8:	d10c      	bne.n	8032ce4 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8032cca:	687b      	ldr	r3, [r7, #4]
 8032ccc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8032cd0:	4619      	mov	r1, r3
 8032cd2:	481e      	ldr	r0, [pc, #120]	; (8032d4c <USBH_HandleEnum+0x558>)
 8032cd4:	f002 fcd4 	bl	8035680 <iprintf>
 8032cd8:	200a      	movs	r0, #10
 8032cda:	f002 fce9 	bl	80356b0 <putchar>
          Status = USBH_OK;
 8032cde:	2300      	movs	r3, #0
 8032ce0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8032ce2:	e024      	b.n	8032d2e <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8032ce4:	7bbb      	ldrb	r3, [r7, #14]
 8032ce6:	2b03      	cmp	r3, #3
 8032ce8:	d121      	bne.n	8032d2e <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 8032cea:	4819      	ldr	r0, [pc, #100]	; (8032d50 <USBH_HandleEnum+0x55c>)
 8032cec:	f002 fcc8 	bl	8035680 <iprintf>
 8032cf0:	200a      	movs	r0, #10
 8032cf2:	f002 fcdd 	bl	80356b0 <putchar>
          Status = USBH_OK;
 8032cf6:	2300      	movs	r3, #0
 8032cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8032cfa:	e018      	b.n	8032d2e <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 8032cfc:	4814      	ldr	r0, [pc, #80]	; (8032d50 <USBH_HandleEnum+0x55c>)
 8032cfe:	f002 fcbf 	bl	8035680 <iprintf>
 8032d02:	200a      	movs	r0, #10
 8032d04:	f002 fcd4 	bl	80356b0 <putchar>
        Status = USBH_OK;
 8032d08:	2300      	movs	r3, #0
 8032d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8032d0c:	e00f      	b.n	8032d2e <USBH_HandleEnum+0x53a>

    default:
      break;
 8032d0e:	bf00      	nop
 8032d10:	e00e      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d12:	bf00      	nop
 8032d14:	e00c      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d16:	bf00      	nop
 8032d18:	e00a      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d1a:	bf00      	nop
 8032d1c:	e008      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d1e:	bf00      	nop
 8032d20:	e006      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d22:	bf00      	nop
 8032d24:	e004      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d26:	bf00      	nop
 8032d28:	e002      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d2a:	bf00      	nop
 8032d2c:	e000      	b.n	8032d30 <USBH_HandleEnum+0x53c>
      break;
 8032d2e:	bf00      	nop
  }
  return Status;
 8032d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8032d32:	4618      	mov	r0, r3
 8032d34:	3710      	adds	r7, #16
 8032d36:	46bd      	mov	sp, r7
 8032d38:	bd80      	pop	{r7, pc}
 8032d3a:	bf00      	nop
 8032d3c:	08037da4 	.word	0x08037da4
 8032d40:	08037db8 	.word	0x08037db8
 8032d44:	08037dcc 	.word	0x08037dcc
 8032d48:	08037ddc 	.word	0x08037ddc
 8032d4c:	08037dec 	.word	0x08037dec
 8032d50:	08037e00 	.word	0x08037e00

08032d54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8032d54:	b480      	push	{r7}
 8032d56:	b083      	sub	sp, #12
 8032d58:	af00      	add	r7, sp, #0
 8032d5a:	6078      	str	r0, [r7, #4]
 8032d5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8032d5e:	687b      	ldr	r3, [r7, #4]
 8032d60:	683a      	ldr	r2, [r7, #0]
 8032d62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8032d66:	bf00      	nop
 8032d68:	370c      	adds	r7, #12
 8032d6a:	46bd      	mov	sp, r7
 8032d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d70:	4770      	bx	lr

08032d72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8032d72:	b580      	push	{r7, lr}
 8032d74:	b082      	sub	sp, #8
 8032d76:	af00      	add	r7, sp, #0
 8032d78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8032d7a:	687b      	ldr	r3, [r7, #4]
 8032d7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8032d80:	1c5a      	adds	r2, r3, #1
 8032d82:	687b      	ldr	r3, [r7, #4]
 8032d84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8032d88:	6878      	ldr	r0, [r7, #4]
 8032d8a:	f000 f804 	bl	8032d96 <USBH_HandleSof>
}
 8032d8e:	bf00      	nop
 8032d90:	3708      	adds	r7, #8
 8032d92:	46bd      	mov	sp, r7
 8032d94:	bd80      	pop	{r7, pc}

08032d96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8032d96:	b580      	push	{r7, lr}
 8032d98:	b082      	sub	sp, #8
 8032d9a:	af00      	add	r7, sp, #0
 8032d9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8032d9e:	687b      	ldr	r3, [r7, #4]
 8032da0:	781b      	ldrb	r3, [r3, #0]
 8032da2:	b2db      	uxtb	r3, r3
 8032da4:	2b0b      	cmp	r3, #11
 8032da6:	d10a      	bne.n	8032dbe <USBH_HandleSof+0x28>
 8032da8:	687b      	ldr	r3, [r7, #4]
 8032daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8032dae:	2b00      	cmp	r3, #0
 8032db0:	d005      	beq.n	8032dbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8032db2:	687b      	ldr	r3, [r7, #4]
 8032db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8032db8:	699b      	ldr	r3, [r3, #24]
 8032dba:	6878      	ldr	r0, [r7, #4]
 8032dbc:	4798      	blx	r3
  }
}
 8032dbe:	bf00      	nop
 8032dc0:	3708      	adds	r7, #8
 8032dc2:	46bd      	mov	sp, r7
 8032dc4:	bd80      	pop	{r7, pc}

08032dc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8032dc6:	b480      	push	{r7}
 8032dc8:	b083      	sub	sp, #12
 8032dca:	af00      	add	r7, sp, #0
 8032dcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8032dce:	687b      	ldr	r3, [r7, #4]
 8032dd0:	2201      	movs	r2, #1
 8032dd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8032dd6:	bf00      	nop
}
 8032dd8:	370c      	adds	r7, #12
 8032dda:	46bd      	mov	sp, r7
 8032ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032de0:	4770      	bx	lr

08032de2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8032de2:	b480      	push	{r7}
 8032de4:	b083      	sub	sp, #12
 8032de6:	af00      	add	r7, sp, #0
 8032de8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8032dea:	687b      	ldr	r3, [r7, #4]
 8032dec:	2200      	movs	r2, #0
 8032dee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8032df2:	bf00      	nop
}
 8032df4:	370c      	adds	r7, #12
 8032df6:	46bd      	mov	sp, r7
 8032df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032dfc:	4770      	bx	lr

08032dfe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8032dfe:	b480      	push	{r7}
 8032e00:	b083      	sub	sp, #12
 8032e02:	af00      	add	r7, sp, #0
 8032e04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8032e06:	687b      	ldr	r3, [r7, #4]
 8032e08:	2201      	movs	r2, #1
 8032e0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8032e0e:	687b      	ldr	r3, [r7, #4]
 8032e10:	2200      	movs	r2, #0
 8032e12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8032e16:	687b      	ldr	r3, [r7, #4]
 8032e18:	2200      	movs	r2, #0
 8032e1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8032e1e:	2300      	movs	r3, #0
}
 8032e20:	4618      	mov	r0, r3
 8032e22:	370c      	adds	r7, #12
 8032e24:	46bd      	mov	sp, r7
 8032e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e2a:	4770      	bx	lr

08032e2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8032e2c:	b580      	push	{r7, lr}
 8032e2e:	b082      	sub	sp, #8
 8032e30:	af00      	add	r7, sp, #0
 8032e32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8032e34:	687b      	ldr	r3, [r7, #4]
 8032e36:	2201      	movs	r2, #1
 8032e38:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8032e3c:	687b      	ldr	r3, [r7, #4]
 8032e3e:	2200      	movs	r2, #0
 8032e40:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8032e44:	687b      	ldr	r3, [r7, #4]
 8032e46:	2200      	movs	r2, #0
 8032e48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8032e4c:	6878      	ldr	r0, [r7, #4]
 8032e4e:	f001 fcf4 	bl	803483a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8032e52:	687b      	ldr	r3, [r7, #4]
 8032e54:	791b      	ldrb	r3, [r3, #4]
 8032e56:	4619      	mov	r1, r3
 8032e58:	6878      	ldr	r0, [r7, #4]
 8032e5a:	f000 fdb3 	bl	80339c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8032e5e:	687b      	ldr	r3, [r7, #4]
 8032e60:	795b      	ldrb	r3, [r3, #5]
 8032e62:	4619      	mov	r1, r3
 8032e64:	6878      	ldr	r0, [r7, #4]
 8032e66:	f000 fdad 	bl	80339c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8032e6a:	2300      	movs	r3, #0
}
 8032e6c:	4618      	mov	r0, r3
 8032e6e:	3708      	adds	r7, #8
 8032e70:	46bd      	mov	sp, r7
 8032e72:	bd80      	pop	{r7, pc}

08032e74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8032e74:	b580      	push	{r7, lr}
 8032e76:	b086      	sub	sp, #24
 8032e78:	af02      	add	r7, sp, #8
 8032e7a:	6078      	str	r0, [r7, #4]
 8032e7c:	460b      	mov	r3, r1
 8032e7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8032e80:	687b      	ldr	r3, [r7, #4]
 8032e82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8032e86:	78fb      	ldrb	r3, [r7, #3]
 8032e88:	b29b      	uxth	r3, r3
 8032e8a:	9300      	str	r3, [sp, #0]
 8032e8c:	4613      	mov	r3, r2
 8032e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8032e92:	2100      	movs	r1, #0
 8032e94:	6878      	ldr	r0, [r7, #4]
 8032e96:	f000 f864 	bl	8032f62 <USBH_GetDescriptor>
 8032e9a:	4603      	mov	r3, r0
 8032e9c:	73fb      	strb	r3, [r7, #15]
 8032e9e:	7bfb      	ldrb	r3, [r7, #15]
 8032ea0:	2b00      	cmp	r3, #0
 8032ea2:	d10a      	bne.n	8032eba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8032ea4:	687b      	ldr	r3, [r7, #4]
 8032ea6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8032eaa:	687b      	ldr	r3, [r7, #4]
 8032eac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8032eb0:	78fa      	ldrb	r2, [r7, #3]
 8032eb2:	b292      	uxth	r2, r2
 8032eb4:	4619      	mov	r1, r3
 8032eb6:	f000 f918 	bl	80330ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8032eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8032ebc:	4618      	mov	r0, r3
 8032ebe:	3710      	adds	r7, #16
 8032ec0:	46bd      	mov	sp, r7
 8032ec2:	bd80      	pop	{r7, pc}

08032ec4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8032ec4:	b580      	push	{r7, lr}
 8032ec6:	b086      	sub	sp, #24
 8032ec8:	af02      	add	r7, sp, #8
 8032eca:	6078      	str	r0, [r7, #4]
 8032ecc:	460b      	mov	r3, r1
 8032ece:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8032ed0:	687b      	ldr	r3, [r7, #4]
 8032ed2:	331c      	adds	r3, #28
 8032ed4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8032ed6:	887b      	ldrh	r3, [r7, #2]
 8032ed8:	9300      	str	r3, [sp, #0]
 8032eda:	68fb      	ldr	r3, [r7, #12]
 8032edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032ee0:	2100      	movs	r1, #0
 8032ee2:	6878      	ldr	r0, [r7, #4]
 8032ee4:	f000 f83d 	bl	8032f62 <USBH_GetDescriptor>
 8032ee8:	4603      	mov	r3, r0
 8032eea:	72fb      	strb	r3, [r7, #11]
 8032eec:	7afb      	ldrb	r3, [r7, #11]
 8032eee:	2b00      	cmp	r3, #0
 8032ef0:	d107      	bne.n	8032f02 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8032ef2:	687b      	ldr	r3, [r7, #4]
 8032ef4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8032ef8:	887a      	ldrh	r2, [r7, #2]
 8032efa:	68f9      	ldr	r1, [r7, #12]
 8032efc:	4618      	mov	r0, r3
 8032efe:	f000 f964 	bl	80331ca <USBH_ParseCfgDesc>
  }

  return status;
 8032f02:	7afb      	ldrb	r3, [r7, #11]
}
 8032f04:	4618      	mov	r0, r3
 8032f06:	3710      	adds	r7, #16
 8032f08:	46bd      	mov	sp, r7
 8032f0a:	bd80      	pop	{r7, pc}

08032f0c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8032f0c:	b580      	push	{r7, lr}
 8032f0e:	b088      	sub	sp, #32
 8032f10:	af02      	add	r7, sp, #8
 8032f12:	60f8      	str	r0, [r7, #12]
 8032f14:	607a      	str	r2, [r7, #4]
 8032f16:	461a      	mov	r2, r3
 8032f18:	460b      	mov	r3, r1
 8032f1a:	72fb      	strb	r3, [r7, #11]
 8032f1c:	4613      	mov	r3, r2
 8032f1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8032f20:	7afb      	ldrb	r3, [r7, #11]
 8032f22:	b29b      	uxth	r3, r3
 8032f24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8032f28:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8032f2a:	68fb      	ldr	r3, [r7, #12]
 8032f2c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8032f30:	893b      	ldrh	r3, [r7, #8]
 8032f32:	9300      	str	r3, [sp, #0]
 8032f34:	460b      	mov	r3, r1
 8032f36:	2100      	movs	r1, #0
 8032f38:	68f8      	ldr	r0, [r7, #12]
 8032f3a:	f000 f812 	bl	8032f62 <USBH_GetDescriptor>
 8032f3e:	4603      	mov	r3, r0
 8032f40:	75fb      	strb	r3, [r7, #23]
 8032f42:	7dfb      	ldrb	r3, [r7, #23]
 8032f44:	2b00      	cmp	r3, #0
 8032f46:	d107      	bne.n	8032f58 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8032f48:	68fb      	ldr	r3, [r7, #12]
 8032f4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8032f4e:	893a      	ldrh	r2, [r7, #8]
 8032f50:	6879      	ldr	r1, [r7, #4]
 8032f52:	4618      	mov	r0, r3
 8032f54:	f000 fa37 	bl	80333c6 <USBH_ParseStringDesc>
  }

  return status;
 8032f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8032f5a:	4618      	mov	r0, r3
 8032f5c:	3718      	adds	r7, #24
 8032f5e:	46bd      	mov	sp, r7
 8032f60:	bd80      	pop	{r7, pc}

08032f62 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8032f62:	b580      	push	{r7, lr}
 8032f64:	b084      	sub	sp, #16
 8032f66:	af00      	add	r7, sp, #0
 8032f68:	60f8      	str	r0, [r7, #12]
 8032f6a:	607b      	str	r3, [r7, #4]
 8032f6c:	460b      	mov	r3, r1
 8032f6e:	72fb      	strb	r3, [r7, #11]
 8032f70:	4613      	mov	r3, r2
 8032f72:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8032f74:	68fb      	ldr	r3, [r7, #12]
 8032f76:	789b      	ldrb	r3, [r3, #2]
 8032f78:	2b01      	cmp	r3, #1
 8032f7a:	d11c      	bne.n	8032fb6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8032f7c:	7afb      	ldrb	r3, [r7, #11]
 8032f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8032f82:	b2da      	uxtb	r2, r3
 8032f84:	68fb      	ldr	r3, [r7, #12]
 8032f86:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8032f88:	68fb      	ldr	r3, [r7, #12]
 8032f8a:	2206      	movs	r2, #6
 8032f8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8032f8e:	68fb      	ldr	r3, [r7, #12]
 8032f90:	893a      	ldrh	r2, [r7, #8]
 8032f92:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8032f94:	893b      	ldrh	r3, [r7, #8]
 8032f96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8032f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032f9e:	d104      	bne.n	8032faa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8032fa0:	68fb      	ldr	r3, [r7, #12]
 8032fa2:	f240 4209 	movw	r2, #1033	; 0x409
 8032fa6:	829a      	strh	r2, [r3, #20]
 8032fa8:	e002      	b.n	8032fb0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8032faa:	68fb      	ldr	r3, [r7, #12]
 8032fac:	2200      	movs	r2, #0
 8032fae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8032fb0:	68fb      	ldr	r3, [r7, #12]
 8032fb2:	8b3a      	ldrh	r2, [r7, #24]
 8032fb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8032fb6:	8b3b      	ldrh	r3, [r7, #24]
 8032fb8:	461a      	mov	r2, r3
 8032fba:	6879      	ldr	r1, [r7, #4]
 8032fbc:	68f8      	ldr	r0, [r7, #12]
 8032fbe:	f000 fa50 	bl	8033462 <USBH_CtlReq>
 8032fc2:	4603      	mov	r3, r0
}
 8032fc4:	4618      	mov	r0, r3
 8032fc6:	3710      	adds	r7, #16
 8032fc8:	46bd      	mov	sp, r7
 8032fca:	bd80      	pop	{r7, pc}

08032fcc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8032fcc:	b580      	push	{r7, lr}
 8032fce:	b082      	sub	sp, #8
 8032fd0:	af00      	add	r7, sp, #0
 8032fd2:	6078      	str	r0, [r7, #4]
 8032fd4:	460b      	mov	r3, r1
 8032fd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8032fd8:	687b      	ldr	r3, [r7, #4]
 8032fda:	789b      	ldrb	r3, [r3, #2]
 8032fdc:	2b01      	cmp	r3, #1
 8032fde:	d10f      	bne.n	8033000 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8032fe0:	687b      	ldr	r3, [r7, #4]
 8032fe2:	2200      	movs	r2, #0
 8032fe4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8032fe6:	687b      	ldr	r3, [r7, #4]
 8032fe8:	2205      	movs	r2, #5
 8032fea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8032fec:	78fb      	ldrb	r3, [r7, #3]
 8032fee:	b29a      	uxth	r2, r3
 8032ff0:	687b      	ldr	r3, [r7, #4]
 8032ff2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8032ff4:	687b      	ldr	r3, [r7, #4]
 8032ff6:	2200      	movs	r2, #0
 8032ff8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8032ffa:	687b      	ldr	r3, [r7, #4]
 8032ffc:	2200      	movs	r2, #0
 8032ffe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8033000:	2200      	movs	r2, #0
 8033002:	2100      	movs	r1, #0
 8033004:	6878      	ldr	r0, [r7, #4]
 8033006:	f000 fa2c 	bl	8033462 <USBH_CtlReq>
 803300a:	4603      	mov	r3, r0
}
 803300c:	4618      	mov	r0, r3
 803300e:	3708      	adds	r7, #8
 8033010:	46bd      	mov	sp, r7
 8033012:	bd80      	pop	{r7, pc}

08033014 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8033014:	b580      	push	{r7, lr}
 8033016:	b082      	sub	sp, #8
 8033018:	af00      	add	r7, sp, #0
 803301a:	6078      	str	r0, [r7, #4]
 803301c:	460b      	mov	r3, r1
 803301e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8033020:	687b      	ldr	r3, [r7, #4]
 8033022:	789b      	ldrb	r3, [r3, #2]
 8033024:	2b01      	cmp	r3, #1
 8033026:	d10e      	bne.n	8033046 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8033028:	687b      	ldr	r3, [r7, #4]
 803302a:	2200      	movs	r2, #0
 803302c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 803302e:	687b      	ldr	r3, [r7, #4]
 8033030:	2209      	movs	r2, #9
 8033032:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8033034:	687b      	ldr	r3, [r7, #4]
 8033036:	887a      	ldrh	r2, [r7, #2]
 8033038:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 803303a:	687b      	ldr	r3, [r7, #4]
 803303c:	2200      	movs	r2, #0
 803303e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8033040:	687b      	ldr	r3, [r7, #4]
 8033042:	2200      	movs	r2, #0
 8033044:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8033046:	2200      	movs	r2, #0
 8033048:	2100      	movs	r1, #0
 803304a:	6878      	ldr	r0, [r7, #4]
 803304c:	f000 fa09 	bl	8033462 <USBH_CtlReq>
 8033050:	4603      	mov	r3, r0
}
 8033052:	4618      	mov	r0, r3
 8033054:	3708      	adds	r7, #8
 8033056:	46bd      	mov	sp, r7
 8033058:	bd80      	pop	{r7, pc}

0803305a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 803305a:	b580      	push	{r7, lr}
 803305c:	b082      	sub	sp, #8
 803305e:	af00      	add	r7, sp, #0
 8033060:	6078      	str	r0, [r7, #4]
 8033062:	460b      	mov	r3, r1
 8033064:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8033066:	687b      	ldr	r3, [r7, #4]
 8033068:	789b      	ldrb	r3, [r3, #2]
 803306a:	2b01      	cmp	r3, #1
 803306c:	d10f      	bne.n	803308e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 803306e:	687b      	ldr	r3, [r7, #4]
 8033070:	2200      	movs	r2, #0
 8033072:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8033074:	687b      	ldr	r3, [r7, #4]
 8033076:	2203      	movs	r2, #3
 8033078:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 803307a:	78fb      	ldrb	r3, [r7, #3]
 803307c:	b29a      	uxth	r2, r3
 803307e:	687b      	ldr	r3, [r7, #4]
 8033080:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8033082:	687b      	ldr	r3, [r7, #4]
 8033084:	2200      	movs	r2, #0
 8033086:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8033088:	687b      	ldr	r3, [r7, #4]
 803308a:	2200      	movs	r2, #0
 803308c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 803308e:	2200      	movs	r2, #0
 8033090:	2100      	movs	r1, #0
 8033092:	6878      	ldr	r0, [r7, #4]
 8033094:	f000 f9e5 	bl	8033462 <USBH_CtlReq>
 8033098:	4603      	mov	r3, r0
}
 803309a:	4618      	mov	r0, r3
 803309c:	3708      	adds	r7, #8
 803309e:	46bd      	mov	sp, r7
 80330a0:	bd80      	pop	{r7, pc}

080330a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80330a2:	b580      	push	{r7, lr}
 80330a4:	b082      	sub	sp, #8
 80330a6:	af00      	add	r7, sp, #0
 80330a8:	6078      	str	r0, [r7, #4]
 80330aa:	460b      	mov	r3, r1
 80330ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80330ae:	687b      	ldr	r3, [r7, #4]
 80330b0:	789b      	ldrb	r3, [r3, #2]
 80330b2:	2b01      	cmp	r3, #1
 80330b4:	d10f      	bne.n	80330d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80330b6:	687b      	ldr	r3, [r7, #4]
 80330b8:	2202      	movs	r2, #2
 80330ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80330bc:	687b      	ldr	r3, [r7, #4]
 80330be:	2201      	movs	r2, #1
 80330c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80330c2:	687b      	ldr	r3, [r7, #4]
 80330c4:	2200      	movs	r2, #0
 80330c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80330c8:	78fb      	ldrb	r3, [r7, #3]
 80330ca:	b29a      	uxth	r2, r3
 80330cc:	687b      	ldr	r3, [r7, #4]
 80330ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80330d0:	687b      	ldr	r3, [r7, #4]
 80330d2:	2200      	movs	r2, #0
 80330d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80330d6:	2200      	movs	r2, #0
 80330d8:	2100      	movs	r1, #0
 80330da:	6878      	ldr	r0, [r7, #4]
 80330dc:	f000 f9c1 	bl	8033462 <USBH_CtlReq>
 80330e0:	4603      	mov	r3, r0
}
 80330e2:	4618      	mov	r0, r3
 80330e4:	3708      	adds	r7, #8
 80330e6:	46bd      	mov	sp, r7
 80330e8:	bd80      	pop	{r7, pc}

080330ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80330ea:	b480      	push	{r7}
 80330ec:	b085      	sub	sp, #20
 80330ee:	af00      	add	r7, sp, #0
 80330f0:	60f8      	str	r0, [r7, #12]
 80330f2:	60b9      	str	r1, [r7, #8]
 80330f4:	4613      	mov	r3, r2
 80330f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80330f8:	68bb      	ldr	r3, [r7, #8]
 80330fa:	781a      	ldrb	r2, [r3, #0]
 80330fc:	68fb      	ldr	r3, [r7, #12]
 80330fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8033100:	68bb      	ldr	r3, [r7, #8]
 8033102:	785a      	ldrb	r2, [r3, #1]
 8033104:	68fb      	ldr	r3, [r7, #12]
 8033106:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8033108:	68bb      	ldr	r3, [r7, #8]
 803310a:	3302      	adds	r3, #2
 803310c:	781b      	ldrb	r3, [r3, #0]
 803310e:	b29a      	uxth	r2, r3
 8033110:	68bb      	ldr	r3, [r7, #8]
 8033112:	3303      	adds	r3, #3
 8033114:	781b      	ldrb	r3, [r3, #0]
 8033116:	b29b      	uxth	r3, r3
 8033118:	021b      	lsls	r3, r3, #8
 803311a:	b29b      	uxth	r3, r3
 803311c:	4313      	orrs	r3, r2
 803311e:	b29a      	uxth	r2, r3
 8033120:	68fb      	ldr	r3, [r7, #12]
 8033122:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8033124:	68bb      	ldr	r3, [r7, #8]
 8033126:	791a      	ldrb	r2, [r3, #4]
 8033128:	68fb      	ldr	r3, [r7, #12]
 803312a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 803312c:	68bb      	ldr	r3, [r7, #8]
 803312e:	795a      	ldrb	r2, [r3, #5]
 8033130:	68fb      	ldr	r3, [r7, #12]
 8033132:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8033134:	68bb      	ldr	r3, [r7, #8]
 8033136:	799a      	ldrb	r2, [r3, #6]
 8033138:	68fb      	ldr	r3, [r7, #12]
 803313a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 803313c:	68bb      	ldr	r3, [r7, #8]
 803313e:	79da      	ldrb	r2, [r3, #7]
 8033140:	68fb      	ldr	r3, [r7, #12]
 8033142:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8033144:	88fb      	ldrh	r3, [r7, #6]
 8033146:	2b08      	cmp	r3, #8
 8033148:	d939      	bls.n	80331be <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 803314a:	68bb      	ldr	r3, [r7, #8]
 803314c:	3308      	adds	r3, #8
 803314e:	781b      	ldrb	r3, [r3, #0]
 8033150:	b29a      	uxth	r2, r3
 8033152:	68bb      	ldr	r3, [r7, #8]
 8033154:	3309      	adds	r3, #9
 8033156:	781b      	ldrb	r3, [r3, #0]
 8033158:	b29b      	uxth	r3, r3
 803315a:	021b      	lsls	r3, r3, #8
 803315c:	b29b      	uxth	r3, r3
 803315e:	4313      	orrs	r3, r2
 8033160:	b29a      	uxth	r2, r3
 8033162:	68fb      	ldr	r3, [r7, #12]
 8033164:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8033166:	68bb      	ldr	r3, [r7, #8]
 8033168:	330a      	adds	r3, #10
 803316a:	781b      	ldrb	r3, [r3, #0]
 803316c:	b29a      	uxth	r2, r3
 803316e:	68bb      	ldr	r3, [r7, #8]
 8033170:	330b      	adds	r3, #11
 8033172:	781b      	ldrb	r3, [r3, #0]
 8033174:	b29b      	uxth	r3, r3
 8033176:	021b      	lsls	r3, r3, #8
 8033178:	b29b      	uxth	r3, r3
 803317a:	4313      	orrs	r3, r2
 803317c:	b29a      	uxth	r2, r3
 803317e:	68fb      	ldr	r3, [r7, #12]
 8033180:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8033182:	68bb      	ldr	r3, [r7, #8]
 8033184:	330c      	adds	r3, #12
 8033186:	781b      	ldrb	r3, [r3, #0]
 8033188:	b29a      	uxth	r2, r3
 803318a:	68bb      	ldr	r3, [r7, #8]
 803318c:	330d      	adds	r3, #13
 803318e:	781b      	ldrb	r3, [r3, #0]
 8033190:	b29b      	uxth	r3, r3
 8033192:	021b      	lsls	r3, r3, #8
 8033194:	b29b      	uxth	r3, r3
 8033196:	4313      	orrs	r3, r2
 8033198:	b29a      	uxth	r2, r3
 803319a:	68fb      	ldr	r3, [r7, #12]
 803319c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 803319e:	68bb      	ldr	r3, [r7, #8]
 80331a0:	7b9a      	ldrb	r2, [r3, #14]
 80331a2:	68fb      	ldr	r3, [r7, #12]
 80331a4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80331a6:	68bb      	ldr	r3, [r7, #8]
 80331a8:	7bda      	ldrb	r2, [r3, #15]
 80331aa:	68fb      	ldr	r3, [r7, #12]
 80331ac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80331ae:	68bb      	ldr	r3, [r7, #8]
 80331b0:	7c1a      	ldrb	r2, [r3, #16]
 80331b2:	68fb      	ldr	r3, [r7, #12]
 80331b4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80331b6:	68bb      	ldr	r3, [r7, #8]
 80331b8:	7c5a      	ldrb	r2, [r3, #17]
 80331ba:	68fb      	ldr	r3, [r7, #12]
 80331bc:	745a      	strb	r2, [r3, #17]
  }
}
 80331be:	bf00      	nop
 80331c0:	3714      	adds	r7, #20
 80331c2:	46bd      	mov	sp, r7
 80331c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80331c8:	4770      	bx	lr

080331ca <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80331ca:	b580      	push	{r7, lr}
 80331cc:	b08a      	sub	sp, #40	; 0x28
 80331ce:	af00      	add	r7, sp, #0
 80331d0:	60f8      	str	r0, [r7, #12]
 80331d2:	60b9      	str	r1, [r7, #8]
 80331d4:	4613      	mov	r3, r2
 80331d6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80331d8:	68bb      	ldr	r3, [r7, #8]
 80331da:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80331dc:	2300      	movs	r3, #0
 80331de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80331e2:	2300      	movs	r3, #0
 80331e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80331e8:	68bb      	ldr	r3, [r7, #8]
 80331ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80331ec:	68bb      	ldr	r3, [r7, #8]
 80331ee:	781a      	ldrb	r2, [r3, #0]
 80331f0:	68fb      	ldr	r3, [r7, #12]
 80331f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80331f4:	68bb      	ldr	r3, [r7, #8]
 80331f6:	785a      	ldrb	r2, [r3, #1]
 80331f8:	68fb      	ldr	r3, [r7, #12]
 80331fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80331fc:	68bb      	ldr	r3, [r7, #8]
 80331fe:	3302      	adds	r3, #2
 8033200:	781b      	ldrb	r3, [r3, #0]
 8033202:	b29a      	uxth	r2, r3
 8033204:	68bb      	ldr	r3, [r7, #8]
 8033206:	3303      	adds	r3, #3
 8033208:	781b      	ldrb	r3, [r3, #0]
 803320a:	b29b      	uxth	r3, r3
 803320c:	021b      	lsls	r3, r3, #8
 803320e:	b29b      	uxth	r3, r3
 8033210:	4313      	orrs	r3, r2
 8033212:	b29a      	uxth	r2, r3
 8033214:	68fb      	ldr	r3, [r7, #12]
 8033216:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8033218:	68bb      	ldr	r3, [r7, #8]
 803321a:	791a      	ldrb	r2, [r3, #4]
 803321c:	68fb      	ldr	r3, [r7, #12]
 803321e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8033220:	68bb      	ldr	r3, [r7, #8]
 8033222:	795a      	ldrb	r2, [r3, #5]
 8033224:	68fb      	ldr	r3, [r7, #12]
 8033226:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8033228:	68bb      	ldr	r3, [r7, #8]
 803322a:	799a      	ldrb	r2, [r3, #6]
 803322c:	68fb      	ldr	r3, [r7, #12]
 803322e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8033230:	68bb      	ldr	r3, [r7, #8]
 8033232:	79da      	ldrb	r2, [r3, #7]
 8033234:	68fb      	ldr	r3, [r7, #12]
 8033236:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8033238:	68bb      	ldr	r3, [r7, #8]
 803323a:	7a1a      	ldrb	r2, [r3, #8]
 803323c:	68fb      	ldr	r3, [r7, #12]
 803323e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8033240:	88fb      	ldrh	r3, [r7, #6]
 8033242:	2b09      	cmp	r3, #9
 8033244:	d95f      	bls.n	8033306 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8033246:	2309      	movs	r3, #9
 8033248:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 803324a:	2300      	movs	r3, #0
 803324c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 803324e:	e051      	b.n	80332f4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8033250:	f107 0316 	add.w	r3, r7, #22
 8033254:	4619      	mov	r1, r3
 8033256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8033258:	f000 f8e8 	bl	803342c <USBH_GetNextDesc>
 803325c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 803325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033260:	785b      	ldrb	r3, [r3, #1]
 8033262:	2b04      	cmp	r3, #4
 8033264:	d146      	bne.n	80332f4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8033266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 803326a:	221a      	movs	r2, #26
 803326c:	fb02 f303 	mul.w	r3, r2, r3
 8033270:	3308      	adds	r3, #8
 8033272:	68fa      	ldr	r2, [r7, #12]
 8033274:	4413      	add	r3, r2
 8033276:	3302      	adds	r3, #2
 8033278:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 803327a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803327c:	69f8      	ldr	r0, [r7, #28]
 803327e:	f000 f846 	bl	803330e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8033282:	2300      	movs	r3, #0
 8033284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8033288:	2300      	movs	r3, #0
 803328a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 803328c:	e022      	b.n	80332d4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 803328e:	f107 0316 	add.w	r3, r7, #22
 8033292:	4619      	mov	r1, r3
 8033294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8033296:	f000 f8c9 	bl	803342c <USBH_GetNextDesc>
 803329a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 803329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803329e:	785b      	ldrb	r3, [r3, #1]
 80332a0:	2b05      	cmp	r3, #5
 80332a2:	d117      	bne.n	80332d4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80332a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80332a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80332ac:	3201      	adds	r2, #1
 80332ae:	00d2      	lsls	r2, r2, #3
 80332b0:	211a      	movs	r1, #26
 80332b2:	fb01 f303 	mul.w	r3, r1, r3
 80332b6:	4413      	add	r3, r2
 80332b8:	3308      	adds	r3, #8
 80332ba:	68fa      	ldr	r2, [r7, #12]
 80332bc:	4413      	add	r3, r2
 80332be:	3304      	adds	r3, #4
 80332c0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80332c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80332c4:	69b8      	ldr	r0, [r7, #24]
 80332c6:	f000 f851 	bl	803336c <USBH_ParseEPDesc>
            ep_ix++;
 80332ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80332ce:	3301      	adds	r3, #1
 80332d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80332d4:	69fb      	ldr	r3, [r7, #28]
 80332d6:	791b      	ldrb	r3, [r3, #4]
 80332d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80332dc:	429a      	cmp	r2, r3
 80332de:	d204      	bcs.n	80332ea <USBH_ParseCfgDesc+0x120>
 80332e0:	68fb      	ldr	r3, [r7, #12]
 80332e2:	885a      	ldrh	r2, [r3, #2]
 80332e4:	8afb      	ldrh	r3, [r7, #22]
 80332e6:	429a      	cmp	r2, r3
 80332e8:	d8d1      	bhi.n	803328e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80332ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80332ee:	3301      	adds	r3, #1
 80332f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80332f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80332f8:	2b01      	cmp	r3, #1
 80332fa:	d804      	bhi.n	8033306 <USBH_ParseCfgDesc+0x13c>
 80332fc:	68fb      	ldr	r3, [r7, #12]
 80332fe:	885a      	ldrh	r2, [r3, #2]
 8033300:	8afb      	ldrh	r3, [r7, #22]
 8033302:	429a      	cmp	r2, r3
 8033304:	d8a4      	bhi.n	8033250 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8033306:	bf00      	nop
 8033308:	3728      	adds	r7, #40	; 0x28
 803330a:	46bd      	mov	sp, r7
 803330c:	bd80      	pop	{r7, pc}

0803330e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 803330e:	b480      	push	{r7}
 8033310:	b083      	sub	sp, #12
 8033312:	af00      	add	r7, sp, #0
 8033314:	6078      	str	r0, [r7, #4]
 8033316:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8033318:	683b      	ldr	r3, [r7, #0]
 803331a:	781a      	ldrb	r2, [r3, #0]
 803331c:	687b      	ldr	r3, [r7, #4]
 803331e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8033320:	683b      	ldr	r3, [r7, #0]
 8033322:	785a      	ldrb	r2, [r3, #1]
 8033324:	687b      	ldr	r3, [r7, #4]
 8033326:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8033328:	683b      	ldr	r3, [r7, #0]
 803332a:	789a      	ldrb	r2, [r3, #2]
 803332c:	687b      	ldr	r3, [r7, #4]
 803332e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8033330:	683b      	ldr	r3, [r7, #0]
 8033332:	78da      	ldrb	r2, [r3, #3]
 8033334:	687b      	ldr	r3, [r7, #4]
 8033336:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8033338:	683b      	ldr	r3, [r7, #0]
 803333a:	791a      	ldrb	r2, [r3, #4]
 803333c:	687b      	ldr	r3, [r7, #4]
 803333e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8033340:	683b      	ldr	r3, [r7, #0]
 8033342:	795a      	ldrb	r2, [r3, #5]
 8033344:	687b      	ldr	r3, [r7, #4]
 8033346:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8033348:	683b      	ldr	r3, [r7, #0]
 803334a:	799a      	ldrb	r2, [r3, #6]
 803334c:	687b      	ldr	r3, [r7, #4]
 803334e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8033350:	683b      	ldr	r3, [r7, #0]
 8033352:	79da      	ldrb	r2, [r3, #7]
 8033354:	687b      	ldr	r3, [r7, #4]
 8033356:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8033358:	683b      	ldr	r3, [r7, #0]
 803335a:	7a1a      	ldrb	r2, [r3, #8]
 803335c:	687b      	ldr	r3, [r7, #4]
 803335e:	721a      	strb	r2, [r3, #8]
}
 8033360:	bf00      	nop
 8033362:	370c      	adds	r7, #12
 8033364:	46bd      	mov	sp, r7
 8033366:	f85d 7b04 	ldr.w	r7, [sp], #4
 803336a:	4770      	bx	lr

0803336c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 803336c:	b480      	push	{r7}
 803336e:	b083      	sub	sp, #12
 8033370:	af00      	add	r7, sp, #0
 8033372:	6078      	str	r0, [r7, #4]
 8033374:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8033376:	683b      	ldr	r3, [r7, #0]
 8033378:	781a      	ldrb	r2, [r3, #0]
 803337a:	687b      	ldr	r3, [r7, #4]
 803337c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 803337e:	683b      	ldr	r3, [r7, #0]
 8033380:	785a      	ldrb	r2, [r3, #1]
 8033382:	687b      	ldr	r3, [r7, #4]
 8033384:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8033386:	683b      	ldr	r3, [r7, #0]
 8033388:	789a      	ldrb	r2, [r3, #2]
 803338a:	687b      	ldr	r3, [r7, #4]
 803338c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 803338e:	683b      	ldr	r3, [r7, #0]
 8033390:	78da      	ldrb	r2, [r3, #3]
 8033392:	687b      	ldr	r3, [r7, #4]
 8033394:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8033396:	683b      	ldr	r3, [r7, #0]
 8033398:	3304      	adds	r3, #4
 803339a:	781b      	ldrb	r3, [r3, #0]
 803339c:	b29a      	uxth	r2, r3
 803339e:	683b      	ldr	r3, [r7, #0]
 80333a0:	3305      	adds	r3, #5
 80333a2:	781b      	ldrb	r3, [r3, #0]
 80333a4:	b29b      	uxth	r3, r3
 80333a6:	021b      	lsls	r3, r3, #8
 80333a8:	b29b      	uxth	r3, r3
 80333aa:	4313      	orrs	r3, r2
 80333ac:	b29a      	uxth	r2, r3
 80333ae:	687b      	ldr	r3, [r7, #4]
 80333b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80333b2:	683b      	ldr	r3, [r7, #0]
 80333b4:	799a      	ldrb	r2, [r3, #6]
 80333b6:	687b      	ldr	r3, [r7, #4]
 80333b8:	719a      	strb	r2, [r3, #6]
}
 80333ba:	bf00      	nop
 80333bc:	370c      	adds	r7, #12
 80333be:	46bd      	mov	sp, r7
 80333c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80333c4:	4770      	bx	lr

080333c6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80333c6:	b480      	push	{r7}
 80333c8:	b087      	sub	sp, #28
 80333ca:	af00      	add	r7, sp, #0
 80333cc:	60f8      	str	r0, [r7, #12]
 80333ce:	60b9      	str	r1, [r7, #8]
 80333d0:	4613      	mov	r3, r2
 80333d2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80333d4:	68fb      	ldr	r3, [r7, #12]
 80333d6:	3301      	adds	r3, #1
 80333d8:	781b      	ldrb	r3, [r3, #0]
 80333da:	2b03      	cmp	r3, #3
 80333dc:	d120      	bne.n	8033420 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80333de:	68fb      	ldr	r3, [r7, #12]
 80333e0:	781b      	ldrb	r3, [r3, #0]
 80333e2:	1e9a      	subs	r2, r3, #2
 80333e4:	88fb      	ldrh	r3, [r7, #6]
 80333e6:	4293      	cmp	r3, r2
 80333e8:	bf28      	it	cs
 80333ea:	4613      	movcs	r3, r2
 80333ec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80333ee:	68fb      	ldr	r3, [r7, #12]
 80333f0:	3302      	adds	r3, #2
 80333f2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80333f4:	2300      	movs	r3, #0
 80333f6:	82fb      	strh	r3, [r7, #22]
 80333f8:	e00b      	b.n	8033412 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80333fa:	8afb      	ldrh	r3, [r7, #22]
 80333fc:	68fa      	ldr	r2, [r7, #12]
 80333fe:	4413      	add	r3, r2
 8033400:	781a      	ldrb	r2, [r3, #0]
 8033402:	68bb      	ldr	r3, [r7, #8]
 8033404:	701a      	strb	r2, [r3, #0]
      pdest++;
 8033406:	68bb      	ldr	r3, [r7, #8]
 8033408:	3301      	adds	r3, #1
 803340a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 803340c:	8afb      	ldrh	r3, [r7, #22]
 803340e:	3302      	adds	r3, #2
 8033410:	82fb      	strh	r3, [r7, #22]
 8033412:	8afa      	ldrh	r2, [r7, #22]
 8033414:	8abb      	ldrh	r3, [r7, #20]
 8033416:	429a      	cmp	r2, r3
 8033418:	d3ef      	bcc.n	80333fa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 803341a:	68bb      	ldr	r3, [r7, #8]
 803341c:	2200      	movs	r2, #0
 803341e:	701a      	strb	r2, [r3, #0]
  }
}
 8033420:	bf00      	nop
 8033422:	371c      	adds	r7, #28
 8033424:	46bd      	mov	sp, r7
 8033426:	f85d 7b04 	ldr.w	r7, [sp], #4
 803342a:	4770      	bx	lr

0803342c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 803342c:	b480      	push	{r7}
 803342e:	b085      	sub	sp, #20
 8033430:	af00      	add	r7, sp, #0
 8033432:	6078      	str	r0, [r7, #4]
 8033434:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8033436:	683b      	ldr	r3, [r7, #0]
 8033438:	881a      	ldrh	r2, [r3, #0]
 803343a:	687b      	ldr	r3, [r7, #4]
 803343c:	781b      	ldrb	r3, [r3, #0]
 803343e:	b29b      	uxth	r3, r3
 8033440:	4413      	add	r3, r2
 8033442:	b29a      	uxth	r2, r3
 8033444:	683b      	ldr	r3, [r7, #0]
 8033446:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8033448:	687b      	ldr	r3, [r7, #4]
 803344a:	781b      	ldrb	r3, [r3, #0]
 803344c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 803344e:	687b      	ldr	r3, [r7, #4]
 8033450:	4413      	add	r3, r2
 8033452:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8033454:	68fb      	ldr	r3, [r7, #12]
}
 8033456:	4618      	mov	r0, r3
 8033458:	3714      	adds	r7, #20
 803345a:	46bd      	mov	sp, r7
 803345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033460:	4770      	bx	lr

08033462 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8033462:	b580      	push	{r7, lr}
 8033464:	b086      	sub	sp, #24
 8033466:	af00      	add	r7, sp, #0
 8033468:	60f8      	str	r0, [r7, #12]
 803346a:	60b9      	str	r1, [r7, #8]
 803346c:	4613      	mov	r3, r2
 803346e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8033470:	2301      	movs	r3, #1
 8033472:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8033474:	68fb      	ldr	r3, [r7, #12]
 8033476:	789b      	ldrb	r3, [r3, #2]
 8033478:	2b01      	cmp	r3, #1
 803347a:	d002      	beq.n	8033482 <USBH_CtlReq+0x20>
 803347c:	2b02      	cmp	r3, #2
 803347e:	d00f      	beq.n	80334a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8033480:	e027      	b.n	80334d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8033482:	68fb      	ldr	r3, [r7, #12]
 8033484:	68ba      	ldr	r2, [r7, #8]
 8033486:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8033488:	68fb      	ldr	r3, [r7, #12]
 803348a:	88fa      	ldrh	r2, [r7, #6]
 803348c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 803348e:	68fb      	ldr	r3, [r7, #12]
 8033490:	2201      	movs	r2, #1
 8033492:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8033494:	68fb      	ldr	r3, [r7, #12]
 8033496:	2202      	movs	r2, #2
 8033498:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 803349a:	2301      	movs	r3, #1
 803349c:	75fb      	strb	r3, [r7, #23]
      break;
 803349e:	e018      	b.n	80334d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80334a0:	68f8      	ldr	r0, [r7, #12]
 80334a2:	f000 f81b 	bl	80334dc <USBH_HandleControl>
 80334a6:	4603      	mov	r3, r0
 80334a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80334aa:	7dfb      	ldrb	r3, [r7, #23]
 80334ac:	2b00      	cmp	r3, #0
 80334ae:	d002      	beq.n	80334b6 <USBH_CtlReq+0x54>
 80334b0:	7dfb      	ldrb	r3, [r7, #23]
 80334b2:	2b03      	cmp	r3, #3
 80334b4:	d106      	bne.n	80334c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80334b6:	68fb      	ldr	r3, [r7, #12]
 80334b8:	2201      	movs	r2, #1
 80334ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80334bc:	68fb      	ldr	r3, [r7, #12]
 80334be:	2200      	movs	r2, #0
 80334c0:	761a      	strb	r2, [r3, #24]
      break;
 80334c2:	e005      	b.n	80334d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80334c4:	7dfb      	ldrb	r3, [r7, #23]
 80334c6:	2b02      	cmp	r3, #2
 80334c8:	d102      	bne.n	80334d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80334ca:	68fb      	ldr	r3, [r7, #12]
 80334cc:	2201      	movs	r2, #1
 80334ce:	709a      	strb	r2, [r3, #2]
      break;
 80334d0:	bf00      	nop
  }
  return status;
 80334d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80334d4:	4618      	mov	r0, r3
 80334d6:	3718      	adds	r7, #24
 80334d8:	46bd      	mov	sp, r7
 80334da:	bd80      	pop	{r7, pc}

080334dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80334dc:	b580      	push	{r7, lr}
 80334de:	b086      	sub	sp, #24
 80334e0:	af02      	add	r7, sp, #8
 80334e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80334e4:	2301      	movs	r3, #1
 80334e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80334e8:	2300      	movs	r3, #0
 80334ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80334ec:	687b      	ldr	r3, [r7, #4]
 80334ee:	7e1b      	ldrb	r3, [r3, #24]
 80334f0:	3b01      	subs	r3, #1
 80334f2:	2b0a      	cmp	r3, #10
 80334f4:	f200 8161 	bhi.w	80337ba <USBH_HandleControl+0x2de>
 80334f8:	a201      	add	r2, pc, #4	; (adr r2, 8033500 <USBH_HandleControl+0x24>)
 80334fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80334fe:	bf00      	nop
 8033500:	0803352d 	.word	0x0803352d
 8033504:	08033547 	.word	0x08033547
 8033508:	080335b1 	.word	0x080335b1
 803350c:	080335d7 	.word	0x080335d7
 8033510:	0803360f 	.word	0x0803360f
 8033514:	0803363b 	.word	0x0803363b
 8033518:	0803368d 	.word	0x0803368d
 803351c:	080336af 	.word	0x080336af
 8033520:	080336eb 	.word	0x080336eb
 8033524:	08033713 	.word	0x08033713
 8033528:	08033751 	.word	0x08033751
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 803352c:	687b      	ldr	r3, [r7, #4]
 803352e:	f103 0110 	add.w	r1, r3, #16
 8033532:	687b      	ldr	r3, [r7, #4]
 8033534:	795b      	ldrb	r3, [r3, #5]
 8033536:	461a      	mov	r2, r3
 8033538:	6878      	ldr	r0, [r7, #4]
 803353a:	f000 f953 	bl	80337e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 803353e:	687b      	ldr	r3, [r7, #4]
 8033540:	2202      	movs	r2, #2
 8033542:	761a      	strb	r2, [r3, #24]
      break;
 8033544:	e144      	b.n	80337d0 <USBH_HandleControl+0x2f4>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8033546:	687b      	ldr	r3, [r7, #4]
 8033548:	795b      	ldrb	r3, [r3, #5]
 803354a:	4619      	mov	r1, r3
 803354c:	6878      	ldr	r0, [r7, #4]
 803354e:	f001 fa61 	bl	8034a14 <USBH_LL_GetURBState>
 8033552:	4603      	mov	r3, r0
 8033554:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8033556:	7bbb      	ldrb	r3, [r7, #14]
 8033558:	2b01      	cmp	r3, #1
 803355a:	d11e      	bne.n	803359a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 803355c:	687b      	ldr	r3, [r7, #4]
 803355e:	7c1b      	ldrb	r3, [r3, #16]
 8033560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8033564:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8033566:	687b      	ldr	r3, [r7, #4]
 8033568:	8adb      	ldrh	r3, [r3, #22]
 803356a:	2b00      	cmp	r3, #0
 803356c:	d00a      	beq.n	8033584 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 803356e:	7b7b      	ldrb	r3, [r7, #13]
 8033570:	2b80      	cmp	r3, #128	; 0x80
 8033572:	d103      	bne.n	803357c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8033574:	687b      	ldr	r3, [r7, #4]
 8033576:	2203      	movs	r2, #3
 8033578:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 803357a:	e120      	b.n	80337be <USBH_HandleControl+0x2e2>
            phost->Control.state = CTRL_DATA_OUT;
 803357c:	687b      	ldr	r3, [r7, #4]
 803357e:	2205      	movs	r2, #5
 8033580:	761a      	strb	r2, [r3, #24]
      break;
 8033582:	e11c      	b.n	80337be <USBH_HandleControl+0x2e2>
          if (direction == USB_D2H)
 8033584:	7b7b      	ldrb	r3, [r7, #13]
 8033586:	2b80      	cmp	r3, #128	; 0x80
 8033588:	d103      	bne.n	8033592 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 803358a:	687b      	ldr	r3, [r7, #4]
 803358c:	2209      	movs	r2, #9
 803358e:	761a      	strb	r2, [r3, #24]
      break;
 8033590:	e115      	b.n	80337be <USBH_HandleControl+0x2e2>
            phost->Control.state = CTRL_STATUS_IN;
 8033592:	687b      	ldr	r3, [r7, #4]
 8033594:	2207      	movs	r2, #7
 8033596:	761a      	strb	r2, [r3, #24]
      break;
 8033598:	e111      	b.n	80337be <USBH_HandleControl+0x2e2>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 803359a:	7bbb      	ldrb	r3, [r7, #14]
 803359c:	2b04      	cmp	r3, #4
 803359e:	d003      	beq.n	80335a8 <USBH_HandleControl+0xcc>
 80335a0:	7bbb      	ldrb	r3, [r7, #14]
 80335a2:	2b02      	cmp	r3, #2
 80335a4:	f040 810b 	bne.w	80337be <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 80335a8:	687b      	ldr	r3, [r7, #4]
 80335aa:	220b      	movs	r2, #11
 80335ac:	761a      	strb	r2, [r3, #24]
      break;
 80335ae:	e106      	b.n	80337be <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80335b0:	687b      	ldr	r3, [r7, #4]
 80335b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80335b6:	b29a      	uxth	r2, r3
 80335b8:	687b      	ldr	r3, [r7, #4]
 80335ba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80335bc:	687b      	ldr	r3, [r7, #4]
 80335be:	6899      	ldr	r1, [r3, #8]
 80335c0:	687b      	ldr	r3, [r7, #4]
 80335c2:	899a      	ldrh	r2, [r3, #12]
 80335c4:	687b      	ldr	r3, [r7, #4]
 80335c6:	791b      	ldrb	r3, [r3, #4]
 80335c8:	6878      	ldr	r0, [r7, #4]
 80335ca:	f000 f94a 	bl	8033862 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80335ce:	687b      	ldr	r3, [r7, #4]
 80335d0:	2204      	movs	r2, #4
 80335d2:	761a      	strb	r2, [r3, #24]
      break;
 80335d4:	e0fc      	b.n	80337d0 <USBH_HandleControl+0x2f4>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80335d6:	687b      	ldr	r3, [r7, #4]
 80335d8:	791b      	ldrb	r3, [r3, #4]
 80335da:	4619      	mov	r1, r3
 80335dc:	6878      	ldr	r0, [r7, #4]
 80335de:	f001 fa19 	bl	8034a14 <USBH_LL_GetURBState>
 80335e2:	4603      	mov	r3, r0
 80335e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80335e6:	7bbb      	ldrb	r3, [r7, #14]
 80335e8:	2b01      	cmp	r3, #1
 80335ea:	d102      	bne.n	80335f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80335ec:	687b      	ldr	r3, [r7, #4]
 80335ee:	2209      	movs	r2, #9
 80335f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80335f2:	7bbb      	ldrb	r3, [r7, #14]
 80335f4:	2b05      	cmp	r3, #5
 80335f6:	d102      	bne.n	80335fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80335f8:	2303      	movs	r3, #3
 80335fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80335fc:	e0e1      	b.n	80337c2 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 80335fe:	7bbb      	ldrb	r3, [r7, #14]
 8033600:	2b04      	cmp	r3, #4
 8033602:	f040 80de 	bne.w	80337c2 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8033606:	687b      	ldr	r3, [r7, #4]
 8033608:	220b      	movs	r2, #11
 803360a:	761a      	strb	r2, [r3, #24]
      break;
 803360c:	e0d9      	b.n	80337c2 <USBH_HandleControl+0x2e6>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 803360e:	687b      	ldr	r3, [r7, #4]
 8033610:	6899      	ldr	r1, [r3, #8]
 8033612:	687b      	ldr	r3, [r7, #4]
 8033614:	899a      	ldrh	r2, [r3, #12]
 8033616:	687b      	ldr	r3, [r7, #4]
 8033618:	7958      	ldrb	r0, [r3, #5]
 803361a:	2301      	movs	r3, #1
 803361c:	9300      	str	r3, [sp, #0]
 803361e:	4603      	mov	r3, r0
 8033620:	6878      	ldr	r0, [r7, #4]
 8033622:	f000 f8f9 	bl	8033818 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8033626:	687b      	ldr	r3, [r7, #4]
 8033628:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 803362c:	b29a      	uxth	r2, r3
 803362e:	687b      	ldr	r3, [r7, #4]
 8033630:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8033632:	687b      	ldr	r3, [r7, #4]
 8033634:	2206      	movs	r2, #6
 8033636:	761a      	strb	r2, [r3, #24]
      break;
 8033638:	e0ca      	b.n	80337d0 <USBH_HandleControl+0x2f4>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 803363a:	687b      	ldr	r3, [r7, #4]
 803363c:	795b      	ldrb	r3, [r3, #5]
 803363e:	4619      	mov	r1, r3
 8033640:	6878      	ldr	r0, [r7, #4]
 8033642:	f001 f9e7 	bl	8034a14 <USBH_LL_GetURBState>
 8033646:	4603      	mov	r3, r0
 8033648:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 803364a:	7bbb      	ldrb	r3, [r7, #14]
 803364c:	2b01      	cmp	r3, #1
 803364e:	d103      	bne.n	8033658 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8033650:	687b      	ldr	r3, [r7, #4]
 8033652:	2207      	movs	r2, #7
 8033654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8033656:	e0b6      	b.n	80337c6 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_STALL)
 8033658:	7bbb      	ldrb	r3, [r7, #14]
 803365a:	2b05      	cmp	r3, #5
 803365c:	d105      	bne.n	803366a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 803365e:	687b      	ldr	r3, [r7, #4]
 8033660:	220c      	movs	r2, #12
 8033662:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8033664:	2303      	movs	r3, #3
 8033666:	73fb      	strb	r3, [r7, #15]
      break;
 8033668:	e0ad      	b.n	80337c6 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 803366a:	7bbb      	ldrb	r3, [r7, #14]
 803366c:	2b02      	cmp	r3, #2
 803366e:	d103      	bne.n	8033678 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8033670:	687b      	ldr	r3, [r7, #4]
 8033672:	2205      	movs	r2, #5
 8033674:	761a      	strb	r2, [r3, #24]
      break;
 8033676:	e0a6      	b.n	80337c6 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_ERROR)
 8033678:	7bbb      	ldrb	r3, [r7, #14]
 803367a:	2b04      	cmp	r3, #4
 803367c:	f040 80a3 	bne.w	80337c6 <USBH_HandleControl+0x2ea>
          phost->Control.state = CTRL_ERROR;
 8033680:	687b      	ldr	r3, [r7, #4]
 8033682:	220b      	movs	r2, #11
 8033684:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8033686:	2302      	movs	r3, #2
 8033688:	73fb      	strb	r3, [r7, #15]
      break;
 803368a:	e09c      	b.n	80337c6 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 803368c:	687b      	ldr	r3, [r7, #4]
 803368e:	791b      	ldrb	r3, [r3, #4]
 8033690:	2200      	movs	r2, #0
 8033692:	2100      	movs	r1, #0
 8033694:	6878      	ldr	r0, [r7, #4]
 8033696:	f000 f8e4 	bl	8033862 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 803369a:	687b      	ldr	r3, [r7, #4]
 803369c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80336a0:	b29a      	uxth	r2, r3
 80336a2:	687b      	ldr	r3, [r7, #4]
 80336a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80336a6:	687b      	ldr	r3, [r7, #4]
 80336a8:	2208      	movs	r2, #8
 80336aa:	761a      	strb	r2, [r3, #24]

      break;
 80336ac:	e090      	b.n	80337d0 <USBH_HandleControl+0x2f4>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80336ae:	687b      	ldr	r3, [r7, #4]
 80336b0:	791b      	ldrb	r3, [r3, #4]
 80336b2:	4619      	mov	r1, r3
 80336b4:	6878      	ldr	r0, [r7, #4]
 80336b6:	f001 f9ad 	bl	8034a14 <USBH_LL_GetURBState>
 80336ba:	4603      	mov	r3, r0
 80336bc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80336be:	7bbb      	ldrb	r3, [r7, #14]
 80336c0:	2b01      	cmp	r3, #1
 80336c2:	d105      	bne.n	80336d0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80336c4:	687b      	ldr	r3, [r7, #4]
 80336c6:	220d      	movs	r2, #13
 80336c8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80336ca:	2300      	movs	r3, #0
 80336cc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80336ce:	e07c      	b.n	80337ca <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_ERROR)
 80336d0:	7bbb      	ldrb	r3, [r7, #14]
 80336d2:	2b04      	cmp	r3, #4
 80336d4:	d103      	bne.n	80336de <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80336d6:	687b      	ldr	r3, [r7, #4]
 80336d8:	220b      	movs	r2, #11
 80336da:	761a      	strb	r2, [r3, #24]
      break;
 80336dc:	e075      	b.n	80337ca <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_STALL)
 80336de:	7bbb      	ldrb	r3, [r7, #14]
 80336e0:	2b05      	cmp	r3, #5
 80336e2:	d172      	bne.n	80337ca <USBH_HandleControl+0x2ee>
          status = USBH_NOT_SUPPORTED;
 80336e4:	2303      	movs	r3, #3
 80336e6:	73fb      	strb	r3, [r7, #15]
      break;
 80336e8:	e06f      	b.n	80337ca <USBH_HandleControl+0x2ee>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80336ea:	687b      	ldr	r3, [r7, #4]
 80336ec:	795a      	ldrb	r2, [r3, #5]
 80336ee:	2301      	movs	r3, #1
 80336f0:	9300      	str	r3, [sp, #0]
 80336f2:	4613      	mov	r3, r2
 80336f4:	2200      	movs	r2, #0
 80336f6:	2100      	movs	r1, #0
 80336f8:	6878      	ldr	r0, [r7, #4]
 80336fa:	f000 f88d 	bl	8033818 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80336fe:	687b      	ldr	r3, [r7, #4]
 8033700:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8033704:	b29a      	uxth	r2, r3
 8033706:	687b      	ldr	r3, [r7, #4]
 8033708:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 803370a:	687b      	ldr	r3, [r7, #4]
 803370c:	220a      	movs	r2, #10
 803370e:	761a      	strb	r2, [r3, #24]
      break;
 8033710:	e05e      	b.n	80337d0 <USBH_HandleControl+0x2f4>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8033712:	687b      	ldr	r3, [r7, #4]
 8033714:	795b      	ldrb	r3, [r3, #5]
 8033716:	4619      	mov	r1, r3
 8033718:	6878      	ldr	r0, [r7, #4]
 803371a:	f001 f97b 	bl	8034a14 <USBH_LL_GetURBState>
 803371e:	4603      	mov	r3, r0
 8033720:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8033722:	7bbb      	ldrb	r3, [r7, #14]
 8033724:	2b01      	cmp	r3, #1
 8033726:	d105      	bne.n	8033734 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8033728:	2300      	movs	r3, #0
 803372a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 803372c:	687b      	ldr	r3, [r7, #4]
 803372e:	220d      	movs	r2, #13
 8033730:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8033732:	e04c      	b.n	80337ce <USBH_HandleControl+0x2f2>
      else if (URB_Status == USBH_URB_NOTREADY)
 8033734:	7bbb      	ldrb	r3, [r7, #14]
 8033736:	2b02      	cmp	r3, #2
 8033738:	d103      	bne.n	8033742 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 803373a:	687b      	ldr	r3, [r7, #4]
 803373c:	2209      	movs	r2, #9
 803373e:	761a      	strb	r2, [r3, #24]
      break;
 8033740:	e045      	b.n	80337ce <USBH_HandleControl+0x2f2>
        if (URB_Status == USBH_URB_ERROR)
 8033742:	7bbb      	ldrb	r3, [r7, #14]
 8033744:	2b04      	cmp	r3, #4
 8033746:	d142      	bne.n	80337ce <USBH_HandleControl+0x2f2>
          phost->Control.state = CTRL_ERROR;
 8033748:	687b      	ldr	r3, [r7, #4]
 803374a:	220b      	movs	r2, #11
 803374c:	761a      	strb	r2, [r3, #24]
      break;
 803374e:	e03e      	b.n	80337ce <USBH_HandleControl+0x2f2>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8033750:	687b      	ldr	r3, [r7, #4]
 8033752:	7e5b      	ldrb	r3, [r3, #25]
 8033754:	3301      	adds	r3, #1
 8033756:	b2da      	uxtb	r2, r3
 8033758:	687b      	ldr	r3, [r7, #4]
 803375a:	765a      	strb	r2, [r3, #25]
 803375c:	687b      	ldr	r3, [r7, #4]
 803375e:	7e5b      	ldrb	r3, [r3, #25]
 8033760:	2b02      	cmp	r3, #2
 8033762:	d806      	bhi.n	8033772 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8033764:	687b      	ldr	r3, [r7, #4]
 8033766:	2201      	movs	r2, #1
 8033768:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 803376a:	687b      	ldr	r3, [r7, #4]
 803376c:	2201      	movs	r2, #1
 803376e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8033770:	e02e      	b.n	80337d0 <USBH_HandleControl+0x2f4>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8033772:	687b      	ldr	r3, [r7, #4]
 8033774:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8033778:	2106      	movs	r1, #6
 803377a:	6878      	ldr	r0, [r7, #4]
 803377c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 803377e:	687b      	ldr	r3, [r7, #4]
 8033780:	2200      	movs	r2, #0
 8033782:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8033784:	4815      	ldr	r0, [pc, #84]	; (80337dc <USBH_HandleControl+0x300>)
 8033786:	f001 ff7b 	bl	8035680 <iprintf>
 803378a:	4815      	ldr	r0, [pc, #84]	; (80337e0 <USBH_HandleControl+0x304>)
 803378c:	f001 ff78 	bl	8035680 <iprintf>
 8033790:	200a      	movs	r0, #10
 8033792:	f001 ff8d 	bl	80356b0 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8033796:	687b      	ldr	r3, [r7, #4]
 8033798:	795b      	ldrb	r3, [r3, #5]
 803379a:	4619      	mov	r1, r3
 803379c:	6878      	ldr	r0, [r7, #4]
 803379e:	f000 f911 	bl	80339c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80337a2:	687b      	ldr	r3, [r7, #4]
 80337a4:	791b      	ldrb	r3, [r3, #4]
 80337a6:	4619      	mov	r1, r3
 80337a8:	6878      	ldr	r0, [r7, #4]
 80337aa:	f000 f90b 	bl	80339c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80337ae:	687b      	ldr	r3, [r7, #4]
 80337b0:	2200      	movs	r2, #0
 80337b2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80337b4:	2302      	movs	r3, #2
 80337b6:	73fb      	strb	r3, [r7, #15]
      break;
 80337b8:	e00a      	b.n	80337d0 <USBH_HandleControl+0x2f4>

    default:
      break;
 80337ba:	bf00      	nop
 80337bc:	e008      	b.n	80337d0 <USBH_HandleControl+0x2f4>
      break;
 80337be:	bf00      	nop
 80337c0:	e006      	b.n	80337d0 <USBH_HandleControl+0x2f4>
      break;
 80337c2:	bf00      	nop
 80337c4:	e004      	b.n	80337d0 <USBH_HandleControl+0x2f4>
      break;
 80337c6:	bf00      	nop
 80337c8:	e002      	b.n	80337d0 <USBH_HandleControl+0x2f4>
      break;
 80337ca:	bf00      	nop
 80337cc:	e000      	b.n	80337d0 <USBH_HandleControl+0x2f4>
      break;
 80337ce:	bf00      	nop
  }

  return status;
 80337d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80337d2:	4618      	mov	r0, r3
 80337d4:	3710      	adds	r7, #16
 80337d6:	46bd      	mov	sp, r7
 80337d8:	bd80      	pop	{r7, pc}
 80337da:	bf00      	nop
 80337dc:	08037e14 	.word	0x08037e14
 80337e0:	08037e1c 	.word	0x08037e1c

080337e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80337e4:	b580      	push	{r7, lr}
 80337e6:	b088      	sub	sp, #32
 80337e8:	af04      	add	r7, sp, #16
 80337ea:	60f8      	str	r0, [r7, #12]
 80337ec:	60b9      	str	r1, [r7, #8]
 80337ee:	4613      	mov	r3, r2
 80337f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80337f2:	79f9      	ldrb	r1, [r7, #7]
 80337f4:	2300      	movs	r3, #0
 80337f6:	9303      	str	r3, [sp, #12]
 80337f8:	2308      	movs	r3, #8
 80337fa:	9302      	str	r3, [sp, #8]
 80337fc:	68bb      	ldr	r3, [r7, #8]
 80337fe:	9301      	str	r3, [sp, #4]
 8033800:	2300      	movs	r3, #0
 8033802:	9300      	str	r3, [sp, #0]
 8033804:	2300      	movs	r3, #0
 8033806:	2200      	movs	r2, #0
 8033808:	68f8      	ldr	r0, [r7, #12]
 803380a:	f001 f8d2 	bl	80349b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 803380e:	2300      	movs	r3, #0
}
 8033810:	4618      	mov	r0, r3
 8033812:	3710      	adds	r7, #16
 8033814:	46bd      	mov	sp, r7
 8033816:	bd80      	pop	{r7, pc}

08033818 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8033818:	b580      	push	{r7, lr}
 803381a:	b088      	sub	sp, #32
 803381c:	af04      	add	r7, sp, #16
 803381e:	60f8      	str	r0, [r7, #12]
 8033820:	60b9      	str	r1, [r7, #8]
 8033822:	4611      	mov	r1, r2
 8033824:	461a      	mov	r2, r3
 8033826:	460b      	mov	r3, r1
 8033828:	80fb      	strh	r3, [r7, #6]
 803382a:	4613      	mov	r3, r2
 803382c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 803382e:	68fb      	ldr	r3, [r7, #12]
 8033830:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8033834:	2b00      	cmp	r3, #0
 8033836:	d001      	beq.n	803383c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8033838:	2300      	movs	r3, #0
 803383a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 803383c:	7979      	ldrb	r1, [r7, #5]
 803383e:	7e3b      	ldrb	r3, [r7, #24]
 8033840:	9303      	str	r3, [sp, #12]
 8033842:	88fb      	ldrh	r3, [r7, #6]
 8033844:	9302      	str	r3, [sp, #8]
 8033846:	68bb      	ldr	r3, [r7, #8]
 8033848:	9301      	str	r3, [sp, #4]
 803384a:	2301      	movs	r3, #1
 803384c:	9300      	str	r3, [sp, #0]
 803384e:	2300      	movs	r3, #0
 8033850:	2200      	movs	r2, #0
 8033852:	68f8      	ldr	r0, [r7, #12]
 8033854:	f001 f8ad 	bl	80349b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8033858:	2300      	movs	r3, #0
}
 803385a:	4618      	mov	r0, r3
 803385c:	3710      	adds	r7, #16
 803385e:	46bd      	mov	sp, r7
 8033860:	bd80      	pop	{r7, pc}

08033862 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8033862:	b580      	push	{r7, lr}
 8033864:	b088      	sub	sp, #32
 8033866:	af04      	add	r7, sp, #16
 8033868:	60f8      	str	r0, [r7, #12]
 803386a:	60b9      	str	r1, [r7, #8]
 803386c:	4611      	mov	r1, r2
 803386e:	461a      	mov	r2, r3
 8033870:	460b      	mov	r3, r1
 8033872:	80fb      	strh	r3, [r7, #6]
 8033874:	4613      	mov	r3, r2
 8033876:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8033878:	7979      	ldrb	r1, [r7, #5]
 803387a:	2300      	movs	r3, #0
 803387c:	9303      	str	r3, [sp, #12]
 803387e:	88fb      	ldrh	r3, [r7, #6]
 8033880:	9302      	str	r3, [sp, #8]
 8033882:	68bb      	ldr	r3, [r7, #8]
 8033884:	9301      	str	r3, [sp, #4]
 8033886:	2301      	movs	r3, #1
 8033888:	9300      	str	r3, [sp, #0]
 803388a:	2300      	movs	r3, #0
 803388c:	2201      	movs	r2, #1
 803388e:	68f8      	ldr	r0, [r7, #12]
 8033890:	f001 f88f 	bl	80349b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8033894:	2300      	movs	r3, #0

}
 8033896:	4618      	mov	r0, r3
 8033898:	3710      	adds	r7, #16
 803389a:	46bd      	mov	sp, r7
 803389c:	bd80      	pop	{r7, pc}

0803389e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 803389e:	b580      	push	{r7, lr}
 80338a0:	b088      	sub	sp, #32
 80338a2:	af04      	add	r7, sp, #16
 80338a4:	60f8      	str	r0, [r7, #12]
 80338a6:	60b9      	str	r1, [r7, #8]
 80338a8:	4611      	mov	r1, r2
 80338aa:	461a      	mov	r2, r3
 80338ac:	460b      	mov	r3, r1
 80338ae:	80fb      	strh	r3, [r7, #6]
 80338b0:	4613      	mov	r3, r2
 80338b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80338b4:	68fb      	ldr	r3, [r7, #12]
 80338b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80338ba:	2b00      	cmp	r3, #0
 80338bc:	d001      	beq.n	80338c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80338be:	2300      	movs	r3, #0
 80338c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80338c2:	7979      	ldrb	r1, [r7, #5]
 80338c4:	7e3b      	ldrb	r3, [r7, #24]
 80338c6:	9303      	str	r3, [sp, #12]
 80338c8:	88fb      	ldrh	r3, [r7, #6]
 80338ca:	9302      	str	r3, [sp, #8]
 80338cc:	68bb      	ldr	r3, [r7, #8]
 80338ce:	9301      	str	r3, [sp, #4]
 80338d0:	2301      	movs	r3, #1
 80338d2:	9300      	str	r3, [sp, #0]
 80338d4:	2302      	movs	r3, #2
 80338d6:	2200      	movs	r2, #0
 80338d8:	68f8      	ldr	r0, [r7, #12]
 80338da:	f001 f86a 	bl	80349b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80338de:	2300      	movs	r3, #0
}
 80338e0:	4618      	mov	r0, r3
 80338e2:	3710      	adds	r7, #16
 80338e4:	46bd      	mov	sp, r7
 80338e6:	bd80      	pop	{r7, pc}

080338e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80338e8:	b580      	push	{r7, lr}
 80338ea:	b088      	sub	sp, #32
 80338ec:	af04      	add	r7, sp, #16
 80338ee:	60f8      	str	r0, [r7, #12]
 80338f0:	60b9      	str	r1, [r7, #8]
 80338f2:	4611      	mov	r1, r2
 80338f4:	461a      	mov	r2, r3
 80338f6:	460b      	mov	r3, r1
 80338f8:	80fb      	strh	r3, [r7, #6]
 80338fa:	4613      	mov	r3, r2
 80338fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80338fe:	7979      	ldrb	r1, [r7, #5]
 8033900:	2300      	movs	r3, #0
 8033902:	9303      	str	r3, [sp, #12]
 8033904:	88fb      	ldrh	r3, [r7, #6]
 8033906:	9302      	str	r3, [sp, #8]
 8033908:	68bb      	ldr	r3, [r7, #8]
 803390a:	9301      	str	r3, [sp, #4]
 803390c:	2301      	movs	r3, #1
 803390e:	9300      	str	r3, [sp, #0]
 8033910:	2302      	movs	r3, #2
 8033912:	2201      	movs	r2, #1
 8033914:	68f8      	ldr	r0, [r7, #12]
 8033916:	f001 f84c 	bl	80349b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 803391a:	2300      	movs	r3, #0
}
 803391c:	4618      	mov	r0, r3
 803391e:	3710      	adds	r7, #16
 8033920:	46bd      	mov	sp, r7
 8033922:	bd80      	pop	{r7, pc}

08033924 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8033924:	b580      	push	{r7, lr}
 8033926:	b086      	sub	sp, #24
 8033928:	af04      	add	r7, sp, #16
 803392a:	6078      	str	r0, [r7, #4]
 803392c:	4608      	mov	r0, r1
 803392e:	4611      	mov	r1, r2
 8033930:	461a      	mov	r2, r3
 8033932:	4603      	mov	r3, r0
 8033934:	70fb      	strb	r3, [r7, #3]
 8033936:	460b      	mov	r3, r1
 8033938:	70bb      	strb	r3, [r7, #2]
 803393a:	4613      	mov	r3, r2
 803393c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 803393e:	7878      	ldrb	r0, [r7, #1]
 8033940:	78ba      	ldrb	r2, [r7, #2]
 8033942:	78f9      	ldrb	r1, [r7, #3]
 8033944:	8b3b      	ldrh	r3, [r7, #24]
 8033946:	9302      	str	r3, [sp, #8]
 8033948:	7d3b      	ldrb	r3, [r7, #20]
 803394a:	9301      	str	r3, [sp, #4]
 803394c:	7c3b      	ldrb	r3, [r7, #16]
 803394e:	9300      	str	r3, [sp, #0]
 8033950:	4603      	mov	r3, r0
 8033952:	6878      	ldr	r0, [r7, #4]
 8033954:	f000 ffdf 	bl	8034916 <USBH_LL_OpenPipe>

  return USBH_OK;
 8033958:	2300      	movs	r3, #0
}
 803395a:	4618      	mov	r0, r3
 803395c:	3708      	adds	r7, #8
 803395e:	46bd      	mov	sp, r7
 8033960:	bd80      	pop	{r7, pc}

08033962 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8033962:	b580      	push	{r7, lr}
 8033964:	b082      	sub	sp, #8
 8033966:	af00      	add	r7, sp, #0
 8033968:	6078      	str	r0, [r7, #4]
 803396a:	460b      	mov	r3, r1
 803396c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 803396e:	78fb      	ldrb	r3, [r7, #3]
 8033970:	4619      	mov	r1, r3
 8033972:	6878      	ldr	r0, [r7, #4]
 8033974:	f000 fffe 	bl	8034974 <USBH_LL_ClosePipe>

  return USBH_OK;
 8033978:	2300      	movs	r3, #0
}
 803397a:	4618      	mov	r0, r3
 803397c:	3708      	adds	r7, #8
 803397e:	46bd      	mov	sp, r7
 8033980:	bd80      	pop	{r7, pc}

08033982 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8033982:	b580      	push	{r7, lr}
 8033984:	b084      	sub	sp, #16
 8033986:	af00      	add	r7, sp, #0
 8033988:	6078      	str	r0, [r7, #4]
 803398a:	460b      	mov	r3, r1
 803398c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 803398e:	6878      	ldr	r0, [r7, #4]
 8033990:	f000 f836 	bl	8033a00 <USBH_GetFreePipe>
 8033994:	4603      	mov	r3, r0
 8033996:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8033998:	89fb      	ldrh	r3, [r7, #14]
 803399a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803399e:	4293      	cmp	r3, r2
 80339a0:	d00a      	beq.n	80339b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80339a2:	78fa      	ldrb	r2, [r7, #3]
 80339a4:	89fb      	ldrh	r3, [r7, #14]
 80339a6:	f003 030f 	and.w	r3, r3, #15
 80339aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80339ae:	6879      	ldr	r1, [r7, #4]
 80339b0:	33e0      	adds	r3, #224	; 0xe0
 80339b2:	009b      	lsls	r3, r3, #2
 80339b4:	440b      	add	r3, r1
 80339b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80339b8:	89fb      	ldrh	r3, [r7, #14]
 80339ba:	b2db      	uxtb	r3, r3
}
 80339bc:	4618      	mov	r0, r3
 80339be:	3710      	adds	r7, #16
 80339c0:	46bd      	mov	sp, r7
 80339c2:	bd80      	pop	{r7, pc}

080339c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80339c4:	b480      	push	{r7}
 80339c6:	b083      	sub	sp, #12
 80339c8:	af00      	add	r7, sp, #0
 80339ca:	6078      	str	r0, [r7, #4]
 80339cc:	460b      	mov	r3, r1
 80339ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80339d0:	78fb      	ldrb	r3, [r7, #3]
 80339d2:	2b0a      	cmp	r3, #10
 80339d4:	d80d      	bhi.n	80339f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80339d6:	78fb      	ldrb	r3, [r7, #3]
 80339d8:	687a      	ldr	r2, [r7, #4]
 80339da:	33e0      	adds	r3, #224	; 0xe0
 80339dc:	009b      	lsls	r3, r3, #2
 80339de:	4413      	add	r3, r2
 80339e0:	685a      	ldr	r2, [r3, #4]
 80339e2:	78fb      	ldrb	r3, [r7, #3]
 80339e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80339e8:	6879      	ldr	r1, [r7, #4]
 80339ea:	33e0      	adds	r3, #224	; 0xe0
 80339ec:	009b      	lsls	r3, r3, #2
 80339ee:	440b      	add	r3, r1
 80339f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80339f2:	2300      	movs	r3, #0
}
 80339f4:	4618      	mov	r0, r3
 80339f6:	370c      	adds	r7, #12
 80339f8:	46bd      	mov	sp, r7
 80339fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80339fe:	4770      	bx	lr

08033a00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8033a00:	b480      	push	{r7}
 8033a02:	b085      	sub	sp, #20
 8033a04:	af00      	add	r7, sp, #0
 8033a06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8033a08:	2300      	movs	r3, #0
 8033a0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8033a0c:	2300      	movs	r3, #0
 8033a0e:	73fb      	strb	r3, [r7, #15]
 8033a10:	e00f      	b.n	8033a32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8033a12:	7bfb      	ldrb	r3, [r7, #15]
 8033a14:	687a      	ldr	r2, [r7, #4]
 8033a16:	33e0      	adds	r3, #224	; 0xe0
 8033a18:	009b      	lsls	r3, r3, #2
 8033a1a:	4413      	add	r3, r2
 8033a1c:	685b      	ldr	r3, [r3, #4]
 8033a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8033a22:	2b00      	cmp	r3, #0
 8033a24:	d102      	bne.n	8033a2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8033a26:	7bfb      	ldrb	r3, [r7, #15]
 8033a28:	b29b      	uxth	r3, r3
 8033a2a:	e007      	b.n	8033a3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8033a2c:	7bfb      	ldrb	r3, [r7, #15]
 8033a2e:	3301      	adds	r3, #1
 8033a30:	73fb      	strb	r3, [r7, #15]
 8033a32:	7bfb      	ldrb	r3, [r7, #15]
 8033a34:	2b0a      	cmp	r3, #10
 8033a36:	d9ec      	bls.n	8033a12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8033a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8033a3c:	4618      	mov	r0, r3
 8033a3e:	3714      	adds	r7, #20
 8033a40:	46bd      	mov	sp, r7
 8033a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a46:	4770      	bx	lr

08033a48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8033a48:	b480      	push	{r7}
 8033a4a:	b087      	sub	sp, #28
 8033a4c:	af00      	add	r7, sp, #0
 8033a4e:	60f8      	str	r0, [r7, #12]
 8033a50:	60b9      	str	r1, [r7, #8]
 8033a52:	4613      	mov	r3, r2
 8033a54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8033a56:	2301      	movs	r3, #1
 8033a58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8033a5a:	2300      	movs	r3, #0
 8033a5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8033a5e:	4b1f      	ldr	r3, [pc, #124]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a60:	7b9b      	ldrb	r3, [r3, #14]
 8033a62:	b2db      	uxtb	r3, r3
 8033a64:	2b01      	cmp	r3, #1
 8033a66:	d831      	bhi.n	8033acc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8033a68:	4b1c      	ldr	r3, [pc, #112]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a6a:	7b9b      	ldrb	r3, [r3, #14]
 8033a6c:	b2db      	uxtb	r3, r3
 8033a6e:	461a      	mov	r2, r3
 8033a70:	4b1a      	ldr	r3, [pc, #104]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a72:	2100      	movs	r1, #0
 8033a74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8033a76:	4b19      	ldr	r3, [pc, #100]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a78:	7b9b      	ldrb	r3, [r3, #14]
 8033a7a:	b2db      	uxtb	r3, r3
 8033a7c:	4a17      	ldr	r2, [pc, #92]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a7e:	009b      	lsls	r3, r3, #2
 8033a80:	4413      	add	r3, r2
 8033a82:	68fa      	ldr	r2, [r7, #12]
 8033a84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8033a86:	4b15      	ldr	r3, [pc, #84]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a88:	7b9b      	ldrb	r3, [r3, #14]
 8033a8a:	b2db      	uxtb	r3, r3
 8033a8c:	461a      	mov	r2, r3
 8033a8e:	4b13      	ldr	r3, [pc, #76]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a90:	4413      	add	r3, r2
 8033a92:	79fa      	ldrb	r2, [r7, #7]
 8033a94:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8033a96:	4b11      	ldr	r3, [pc, #68]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033a98:	7b9b      	ldrb	r3, [r3, #14]
 8033a9a:	b2db      	uxtb	r3, r3
 8033a9c:	1c5a      	adds	r2, r3, #1
 8033a9e:	b2d1      	uxtb	r1, r2
 8033aa0:	4a0e      	ldr	r2, [pc, #56]	; (8033adc <FATFS_LinkDriverEx+0x94>)
 8033aa2:	7391      	strb	r1, [r2, #14]
 8033aa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8033aa6:	7dbb      	ldrb	r3, [r7, #22]
 8033aa8:	3330      	adds	r3, #48	; 0x30
 8033aaa:	b2da      	uxtb	r2, r3
 8033aac:	68bb      	ldr	r3, [r7, #8]
 8033aae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8033ab0:	68bb      	ldr	r3, [r7, #8]
 8033ab2:	3301      	adds	r3, #1
 8033ab4:	223a      	movs	r2, #58	; 0x3a
 8033ab6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8033ab8:	68bb      	ldr	r3, [r7, #8]
 8033aba:	3302      	adds	r3, #2
 8033abc:	222f      	movs	r2, #47	; 0x2f
 8033abe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8033ac0:	68bb      	ldr	r3, [r7, #8]
 8033ac2:	3303      	adds	r3, #3
 8033ac4:	2200      	movs	r2, #0
 8033ac6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8033ac8:	2300      	movs	r3, #0
 8033aca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8033acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8033ace:	4618      	mov	r0, r3
 8033ad0:	371c      	adds	r7, #28
 8033ad2:	46bd      	mov	sp, r7
 8033ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033ad8:	4770      	bx	lr
 8033ada:	bf00      	nop
 8033adc:	200013ac 	.word	0x200013ac

08033ae0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8033ae0:	b580      	push	{r7, lr}
 8033ae2:	b082      	sub	sp, #8
 8033ae4:	af00      	add	r7, sp, #0
 8033ae6:	6078      	str	r0, [r7, #4]
 8033ae8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8033aea:	2200      	movs	r2, #0
 8033aec:	6839      	ldr	r1, [r7, #0]
 8033aee:	6878      	ldr	r0, [r7, #4]
 8033af0:	f7ff ffaa 	bl	8033a48 <FATFS_LinkDriverEx>
 8033af4:	4603      	mov	r3, r0
}
 8033af6:	4618      	mov	r0, r3
 8033af8:	3708      	adds	r7, #8
 8033afa:	46bd      	mov	sp, r7
 8033afc:	bd80      	pop	{r7, pc}
	...

08033b00 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8033b00:	b480      	push	{r7}
 8033b02:	b085      	sub	sp, #20
 8033b04:	af00      	add	r7, sp, #0
 8033b06:	6078      	str	r0, [r7, #4]
 8033b08:	460b      	mov	r3, r1
 8033b0a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8033b0c:	2300      	movs	r3, #0
 8033b0e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8033b10:	2301      	movs	r3, #1
 8033b12:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8033b14:	4b15      	ldr	r3, [pc, #84]	; (8033b6c <FATFS_UnLinkDriverEx+0x6c>)
 8033b16:	7b9b      	ldrb	r3, [r3, #14]
 8033b18:	b2db      	uxtb	r3, r3
 8033b1a:	2b00      	cmp	r3, #0
 8033b1c:	d01e      	beq.n	8033b5c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8033b1e:	687b      	ldr	r3, [r7, #4]
 8033b20:	781b      	ldrb	r3, [r3, #0]
 8033b22:	3b30      	subs	r3, #48	; 0x30
 8033b24:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8033b26:	7bbb      	ldrb	r3, [r7, #14]
 8033b28:	4a10      	ldr	r2, [pc, #64]	; (8033b6c <FATFS_UnLinkDriverEx+0x6c>)
 8033b2a:	009b      	lsls	r3, r3, #2
 8033b2c:	4413      	add	r3, r2
 8033b2e:	685b      	ldr	r3, [r3, #4]
 8033b30:	2b00      	cmp	r3, #0
 8033b32:	d013      	beq.n	8033b5c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8033b34:	7bbb      	ldrb	r3, [r7, #14]
 8033b36:	4a0d      	ldr	r2, [pc, #52]	; (8033b6c <FATFS_UnLinkDriverEx+0x6c>)
 8033b38:	009b      	lsls	r3, r3, #2
 8033b3a:	4413      	add	r3, r2
 8033b3c:	2200      	movs	r2, #0
 8033b3e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8033b40:	7bbb      	ldrb	r3, [r7, #14]
 8033b42:	4a0a      	ldr	r2, [pc, #40]	; (8033b6c <FATFS_UnLinkDriverEx+0x6c>)
 8033b44:	4413      	add	r3, r2
 8033b46:	2200      	movs	r2, #0
 8033b48:	731a      	strb	r2, [r3, #12]
      disk.nbr--;
 8033b4a:	4b08      	ldr	r3, [pc, #32]	; (8033b6c <FATFS_UnLinkDriverEx+0x6c>)
 8033b4c:	7b9b      	ldrb	r3, [r3, #14]
 8033b4e:	b2db      	uxtb	r3, r3
 8033b50:	3b01      	subs	r3, #1
 8033b52:	b2da      	uxtb	r2, r3
 8033b54:	4b05      	ldr	r3, [pc, #20]	; (8033b6c <FATFS_UnLinkDriverEx+0x6c>)
 8033b56:	739a      	strb	r2, [r3, #14]
      ret = 0;
 8033b58:	2300      	movs	r3, #0
 8033b5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8033b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8033b5e:	4618      	mov	r0, r3
 8033b60:	3714      	adds	r7, #20
 8033b62:	46bd      	mov	sp, r7
 8033b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033b68:	4770      	bx	lr
 8033b6a:	bf00      	nop
 8033b6c:	200013ac 	.word	0x200013ac

08033b70 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8033b70:	b580      	push	{r7, lr}
 8033b72:	b082      	sub	sp, #8
 8033b74:	af00      	add	r7, sp, #0
 8033b76:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8033b78:	2100      	movs	r1, #0
 8033b7a:	6878      	ldr	r0, [r7, #4]
 8033b7c:	f7ff ffc0 	bl	8033b00 <FATFS_UnLinkDriverEx>
 8033b80:	4603      	mov	r3, r0
}
 8033b82:	4618      	mov	r0, r3
 8033b84:	3708      	adds	r7, #8
 8033b86:	46bd      	mov	sp, r7
 8033b88:	bd80      	pop	{r7, pc}
	...

08033b8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8033b8c:	b580      	push	{r7, lr}
 8033b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8033b90:	2200      	movs	r2, #0
 8033b92:	4912      	ldr	r1, [pc, #72]	; (8033bdc <MX_USB_DEVICE_Init+0x50>)
 8033b94:	4812      	ldr	r0, [pc, #72]	; (8033be0 <MX_USB_DEVICE_Init+0x54>)
 8033b96:	f7fb fc21 	bl	802f3dc <USBD_Init>
 8033b9a:	4603      	mov	r3, r0
 8033b9c:	2b00      	cmp	r3, #0
 8033b9e:	d001      	beq.n	8033ba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8033ba0:	f7ee fb08 	bl	80221b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8033ba4:	490f      	ldr	r1, [pc, #60]	; (8033be4 <MX_USB_DEVICE_Init+0x58>)
 8033ba6:	480e      	ldr	r0, [pc, #56]	; (8033be0 <MX_USB_DEVICE_Init+0x54>)
 8033ba8:	f7fb fc4e 	bl	802f448 <USBD_RegisterClass>
 8033bac:	4603      	mov	r3, r0
 8033bae:	2b00      	cmp	r3, #0
 8033bb0:	d001      	beq.n	8033bb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8033bb2:	f7ee faff 	bl	80221b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8033bb6:	490c      	ldr	r1, [pc, #48]	; (8033be8 <MX_USB_DEVICE_Init+0x5c>)
 8033bb8:	4809      	ldr	r0, [pc, #36]	; (8033be0 <MX_USB_DEVICE_Init+0x54>)
 8033bba:	f7fb fba3 	bl	802f304 <USBD_CDC_RegisterInterface>
 8033bbe:	4603      	mov	r3, r0
 8033bc0:	2b00      	cmp	r3, #0
 8033bc2:	d001      	beq.n	8033bc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8033bc4:	f7ee faf6 	bl	80221b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8033bc8:	4805      	ldr	r0, [pc, #20]	; (8033be0 <MX_USB_DEVICE_Init+0x54>)
 8033bca:	f7fb fc5e 	bl	802f48a <USBD_Start>
 8033bce:	4603      	mov	r3, r0
 8033bd0:	2b00      	cmp	r3, #0
 8033bd2:	d001      	beq.n	8033bd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8033bd4:	f7ee faee 	bl	80221b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8033bd8:	bf00      	nop
 8033bda:	bd80      	pop	{r7, pc}
 8033bdc:	20000150 	.word	0x20000150
 8033be0:	200057a4 	.word	0x200057a4
 8033be4:	20000018 	.word	0x20000018
 8033be8:	2000013c 	.word	0x2000013c

08033bec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8033bec:	b580      	push	{r7, lr}
 8033bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8033bf0:	2200      	movs	r2, #0
 8033bf2:	4905      	ldr	r1, [pc, #20]	; (8033c08 <CDC_Init_FS+0x1c>)
 8033bf4:	4805      	ldr	r0, [pc, #20]	; (8033c0c <CDC_Init_FS+0x20>)
 8033bf6:	f7fb fb9a 	bl	802f32e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8033bfa:	4905      	ldr	r1, [pc, #20]	; (8033c10 <CDC_Init_FS+0x24>)
 8033bfc:	4803      	ldr	r0, [pc, #12]	; (8033c0c <CDC_Init_FS+0x20>)
 8033bfe:	f7fb fbaf 	bl	802f360 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8033c02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8033c04:	4618      	mov	r0, r3
 8033c06:	bd80      	pop	{r7, pc}
 8033c08:	20006274 	.word	0x20006274
 8033c0c:	200057a4 	.word	0x200057a4
 8033c10:	20005a74 	.word	0x20005a74

08033c14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8033c14:	b480      	push	{r7}
 8033c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8033c18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8033c1a:	4618      	mov	r0, r3
 8033c1c:	46bd      	mov	sp, r7
 8033c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033c22:	4770      	bx	lr

08033c24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8033c24:	b480      	push	{r7}
 8033c26:	b083      	sub	sp, #12
 8033c28:	af00      	add	r7, sp, #0
 8033c2a:	4603      	mov	r3, r0
 8033c2c:	6039      	str	r1, [r7, #0]
 8033c2e:	71fb      	strb	r3, [r7, #7]
 8033c30:	4613      	mov	r3, r2
 8033c32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8033c34:	79fb      	ldrb	r3, [r7, #7]
 8033c36:	2b23      	cmp	r3, #35	; 0x23
 8033c38:	d84a      	bhi.n	8033cd0 <CDC_Control_FS+0xac>
 8033c3a:	a201      	add	r2, pc, #4	; (adr r2, 8033c40 <CDC_Control_FS+0x1c>)
 8033c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033c40:	08033cd1 	.word	0x08033cd1
 8033c44:	08033cd1 	.word	0x08033cd1
 8033c48:	08033cd1 	.word	0x08033cd1
 8033c4c:	08033cd1 	.word	0x08033cd1
 8033c50:	08033cd1 	.word	0x08033cd1
 8033c54:	08033cd1 	.word	0x08033cd1
 8033c58:	08033cd1 	.word	0x08033cd1
 8033c5c:	08033cd1 	.word	0x08033cd1
 8033c60:	08033cd1 	.word	0x08033cd1
 8033c64:	08033cd1 	.word	0x08033cd1
 8033c68:	08033cd1 	.word	0x08033cd1
 8033c6c:	08033cd1 	.word	0x08033cd1
 8033c70:	08033cd1 	.word	0x08033cd1
 8033c74:	08033cd1 	.word	0x08033cd1
 8033c78:	08033cd1 	.word	0x08033cd1
 8033c7c:	08033cd1 	.word	0x08033cd1
 8033c80:	08033cd1 	.word	0x08033cd1
 8033c84:	08033cd1 	.word	0x08033cd1
 8033c88:	08033cd1 	.word	0x08033cd1
 8033c8c:	08033cd1 	.word	0x08033cd1
 8033c90:	08033cd1 	.word	0x08033cd1
 8033c94:	08033cd1 	.word	0x08033cd1
 8033c98:	08033cd1 	.word	0x08033cd1
 8033c9c:	08033cd1 	.word	0x08033cd1
 8033ca0:	08033cd1 	.word	0x08033cd1
 8033ca4:	08033cd1 	.word	0x08033cd1
 8033ca8:	08033cd1 	.word	0x08033cd1
 8033cac:	08033cd1 	.word	0x08033cd1
 8033cb0:	08033cd1 	.word	0x08033cd1
 8033cb4:	08033cd1 	.word	0x08033cd1
 8033cb8:	08033cd1 	.word	0x08033cd1
 8033cbc:	08033cd1 	.word	0x08033cd1
 8033cc0:	08033cd1 	.word	0x08033cd1
 8033cc4:	08033cd1 	.word	0x08033cd1
 8033cc8:	08033cd1 	.word	0x08033cd1
 8033ccc:	08033cd1 	.word	0x08033cd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8033cd0:	bf00      	nop
  }

  return (USBD_OK);
 8033cd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8033cd4:	4618      	mov	r0, r3
 8033cd6:	370c      	adds	r7, #12
 8033cd8:	46bd      	mov	sp, r7
 8033cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033cde:	4770      	bx	lr

08033ce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8033ce0:	b580      	push	{r7, lr}
 8033ce2:	b082      	sub	sp, #8
 8033ce4:	af00      	add	r7, sp, #0
 8033ce6:	6078      	str	r0, [r7, #4]
 8033ce8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8033cea:	6879      	ldr	r1, [r7, #4]
 8033cec:	4805      	ldr	r0, [pc, #20]	; (8033d04 <CDC_Receive_FS+0x24>)
 8033cee:	f7fb fb37 	bl	802f360 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8033cf2:	4804      	ldr	r0, [pc, #16]	; (8033d04 <CDC_Receive_FS+0x24>)
 8033cf4:	f7fb fb48 	bl	802f388 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8033cf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8033cfa:	4618      	mov	r0, r3
 8033cfc:	3708      	adds	r7, #8
 8033cfe:	46bd      	mov	sp, r7
 8033d00:	bd80      	pop	{r7, pc}
 8033d02:	bf00      	nop
 8033d04:	200057a4 	.word	0x200057a4

08033d08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8033d08:	b480      	push	{r7}
 8033d0a:	b087      	sub	sp, #28
 8033d0c:	af00      	add	r7, sp, #0
 8033d0e:	60f8      	str	r0, [r7, #12]
 8033d10:	60b9      	str	r1, [r7, #8]
 8033d12:	4613      	mov	r3, r2
 8033d14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8033d16:	2300      	movs	r3, #0
 8033d18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8033d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8033d1e:	4618      	mov	r0, r3
 8033d20:	371c      	adds	r7, #28
 8033d22:	46bd      	mov	sp, r7
 8033d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033d28:	4770      	bx	lr
	...

08033d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033d2c:	b480      	push	{r7}
 8033d2e:	b083      	sub	sp, #12
 8033d30:	af00      	add	r7, sp, #0
 8033d32:	4603      	mov	r3, r0
 8033d34:	6039      	str	r1, [r7, #0]
 8033d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8033d38:	683b      	ldr	r3, [r7, #0]
 8033d3a:	2212      	movs	r2, #18
 8033d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8033d3e:	4b03      	ldr	r3, [pc, #12]	; (8033d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8033d40:	4618      	mov	r0, r3
 8033d42:	370c      	adds	r7, #12
 8033d44:	46bd      	mov	sp, r7
 8033d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033d4a:	4770      	bx	lr
 8033d4c:	2000016c 	.word	0x2000016c

08033d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033d50:	b480      	push	{r7}
 8033d52:	b083      	sub	sp, #12
 8033d54:	af00      	add	r7, sp, #0
 8033d56:	4603      	mov	r3, r0
 8033d58:	6039      	str	r1, [r7, #0]
 8033d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8033d5c:	683b      	ldr	r3, [r7, #0]
 8033d5e:	2204      	movs	r2, #4
 8033d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8033d62:	4b03      	ldr	r3, [pc, #12]	; (8033d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8033d64:	4618      	mov	r0, r3
 8033d66:	370c      	adds	r7, #12
 8033d68:	46bd      	mov	sp, r7
 8033d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033d6e:	4770      	bx	lr
 8033d70:	20000180 	.word	0x20000180

08033d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033d74:	b580      	push	{r7, lr}
 8033d76:	b082      	sub	sp, #8
 8033d78:	af00      	add	r7, sp, #0
 8033d7a:	4603      	mov	r3, r0
 8033d7c:	6039      	str	r1, [r7, #0]
 8033d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8033d80:	79fb      	ldrb	r3, [r7, #7]
 8033d82:	2b00      	cmp	r3, #0
 8033d84:	d105      	bne.n	8033d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8033d86:	683a      	ldr	r2, [r7, #0]
 8033d88:	4907      	ldr	r1, [pc, #28]	; (8033da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8033d8a:	4808      	ldr	r0, [pc, #32]	; (8033dac <USBD_FS_ProductStrDescriptor+0x38>)
 8033d8c:	f7fc fb4b 	bl	8030426 <USBD_GetString>
 8033d90:	e004      	b.n	8033d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8033d92:	683a      	ldr	r2, [r7, #0]
 8033d94:	4904      	ldr	r1, [pc, #16]	; (8033da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8033d96:	4805      	ldr	r0, [pc, #20]	; (8033dac <USBD_FS_ProductStrDescriptor+0x38>)
 8033d98:	f7fc fb45 	bl	8030426 <USBD_GetString>
  }
  return USBD_StrDesc;
 8033d9c:	4b02      	ldr	r3, [pc, #8]	; (8033da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8033d9e:	4618      	mov	r0, r3
 8033da0:	3708      	adds	r7, #8
 8033da2:	46bd      	mov	sp, r7
 8033da4:	bd80      	pop	{r7, pc}
 8033da6:	bf00      	nop
 8033da8:	20006a74 	.word	0x20006a74
 8033dac:	08037e44 	.word	0x08037e44

08033db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033db0:	b580      	push	{r7, lr}
 8033db2:	b082      	sub	sp, #8
 8033db4:	af00      	add	r7, sp, #0
 8033db6:	4603      	mov	r3, r0
 8033db8:	6039      	str	r1, [r7, #0]
 8033dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8033dbc:	683a      	ldr	r2, [r7, #0]
 8033dbe:	4904      	ldr	r1, [pc, #16]	; (8033dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8033dc0:	4804      	ldr	r0, [pc, #16]	; (8033dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8033dc2:	f7fc fb30 	bl	8030426 <USBD_GetString>
  return USBD_StrDesc;
 8033dc6:	4b02      	ldr	r3, [pc, #8]	; (8033dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8033dc8:	4618      	mov	r0, r3
 8033dca:	3708      	adds	r7, #8
 8033dcc:	46bd      	mov	sp, r7
 8033dce:	bd80      	pop	{r7, pc}
 8033dd0:	20006a74 	.word	0x20006a74
 8033dd4:	08037e5c 	.word	0x08037e5c

08033dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033dd8:	b580      	push	{r7, lr}
 8033dda:	b082      	sub	sp, #8
 8033ddc:	af00      	add	r7, sp, #0
 8033dde:	4603      	mov	r3, r0
 8033de0:	6039      	str	r1, [r7, #0]
 8033de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8033de4:	683b      	ldr	r3, [r7, #0]
 8033de6:	221a      	movs	r2, #26
 8033de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8033dea:	f000 f843 	bl	8033e74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8033dee:	4b02      	ldr	r3, [pc, #8]	; (8033df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8033df0:	4618      	mov	r0, r3
 8033df2:	3708      	adds	r7, #8
 8033df4:	46bd      	mov	sp, r7
 8033df6:	bd80      	pop	{r7, pc}
 8033df8:	20000184 	.word	0x20000184

08033dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033dfc:	b580      	push	{r7, lr}
 8033dfe:	b082      	sub	sp, #8
 8033e00:	af00      	add	r7, sp, #0
 8033e02:	4603      	mov	r3, r0
 8033e04:	6039      	str	r1, [r7, #0]
 8033e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8033e08:	79fb      	ldrb	r3, [r7, #7]
 8033e0a:	2b00      	cmp	r3, #0
 8033e0c:	d105      	bne.n	8033e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8033e0e:	683a      	ldr	r2, [r7, #0]
 8033e10:	4907      	ldr	r1, [pc, #28]	; (8033e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8033e12:	4808      	ldr	r0, [pc, #32]	; (8033e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8033e14:	f7fc fb07 	bl	8030426 <USBD_GetString>
 8033e18:	e004      	b.n	8033e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8033e1a:	683a      	ldr	r2, [r7, #0]
 8033e1c:	4904      	ldr	r1, [pc, #16]	; (8033e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8033e1e:	4805      	ldr	r0, [pc, #20]	; (8033e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8033e20:	f7fc fb01 	bl	8030426 <USBD_GetString>
  }
  return USBD_StrDesc;
 8033e24:	4b02      	ldr	r3, [pc, #8]	; (8033e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8033e26:	4618      	mov	r0, r3
 8033e28:	3708      	adds	r7, #8
 8033e2a:	46bd      	mov	sp, r7
 8033e2c:	bd80      	pop	{r7, pc}
 8033e2e:	bf00      	nop
 8033e30:	20006a74 	.word	0x20006a74
 8033e34:	08037e70 	.word	0x08037e70

08033e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8033e38:	b580      	push	{r7, lr}
 8033e3a:	b082      	sub	sp, #8
 8033e3c:	af00      	add	r7, sp, #0
 8033e3e:	4603      	mov	r3, r0
 8033e40:	6039      	str	r1, [r7, #0]
 8033e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8033e44:	79fb      	ldrb	r3, [r7, #7]
 8033e46:	2b00      	cmp	r3, #0
 8033e48:	d105      	bne.n	8033e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8033e4a:	683a      	ldr	r2, [r7, #0]
 8033e4c:	4907      	ldr	r1, [pc, #28]	; (8033e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8033e4e:	4808      	ldr	r0, [pc, #32]	; (8033e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8033e50:	f7fc fae9 	bl	8030426 <USBD_GetString>
 8033e54:	e004      	b.n	8033e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8033e56:	683a      	ldr	r2, [r7, #0]
 8033e58:	4904      	ldr	r1, [pc, #16]	; (8033e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8033e5a:	4805      	ldr	r0, [pc, #20]	; (8033e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8033e5c:	f7fc fae3 	bl	8030426 <USBD_GetString>
  }
  return USBD_StrDesc;
 8033e60:	4b02      	ldr	r3, [pc, #8]	; (8033e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8033e62:	4618      	mov	r0, r3
 8033e64:	3708      	adds	r7, #8
 8033e66:	46bd      	mov	sp, r7
 8033e68:	bd80      	pop	{r7, pc}
 8033e6a:	bf00      	nop
 8033e6c:	20006a74 	.word	0x20006a74
 8033e70:	08037e7c 	.word	0x08037e7c

08033e74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8033e74:	b580      	push	{r7, lr}
 8033e76:	b084      	sub	sp, #16
 8033e78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8033e7a:	4b0f      	ldr	r3, [pc, #60]	; (8033eb8 <Get_SerialNum+0x44>)
 8033e7c:	681b      	ldr	r3, [r3, #0]
 8033e7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8033e80:	4b0e      	ldr	r3, [pc, #56]	; (8033ebc <Get_SerialNum+0x48>)
 8033e82:	681b      	ldr	r3, [r3, #0]
 8033e84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8033e86:	4b0e      	ldr	r3, [pc, #56]	; (8033ec0 <Get_SerialNum+0x4c>)
 8033e88:	681b      	ldr	r3, [r3, #0]
 8033e8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8033e8c:	68fa      	ldr	r2, [r7, #12]
 8033e8e:	687b      	ldr	r3, [r7, #4]
 8033e90:	4413      	add	r3, r2
 8033e92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8033e94:	68fb      	ldr	r3, [r7, #12]
 8033e96:	2b00      	cmp	r3, #0
 8033e98:	d009      	beq.n	8033eae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8033e9a:	2208      	movs	r2, #8
 8033e9c:	4909      	ldr	r1, [pc, #36]	; (8033ec4 <Get_SerialNum+0x50>)
 8033e9e:	68f8      	ldr	r0, [r7, #12]
 8033ea0:	f000 f814 	bl	8033ecc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8033ea4:	2204      	movs	r2, #4
 8033ea6:	4908      	ldr	r1, [pc, #32]	; (8033ec8 <Get_SerialNum+0x54>)
 8033ea8:	68b8      	ldr	r0, [r7, #8]
 8033eaa:	f000 f80f 	bl	8033ecc <IntToUnicode>
  }
}
 8033eae:	bf00      	nop
 8033eb0:	3710      	adds	r7, #16
 8033eb2:	46bd      	mov	sp, r7
 8033eb4:	bd80      	pop	{r7, pc}
 8033eb6:	bf00      	nop
 8033eb8:	1fff7a10 	.word	0x1fff7a10
 8033ebc:	1fff7a14 	.word	0x1fff7a14
 8033ec0:	1fff7a18 	.word	0x1fff7a18
 8033ec4:	20000186 	.word	0x20000186
 8033ec8:	20000196 	.word	0x20000196

08033ecc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8033ecc:	b480      	push	{r7}
 8033ece:	b087      	sub	sp, #28
 8033ed0:	af00      	add	r7, sp, #0
 8033ed2:	60f8      	str	r0, [r7, #12]
 8033ed4:	60b9      	str	r1, [r7, #8]
 8033ed6:	4613      	mov	r3, r2
 8033ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8033eda:	2300      	movs	r3, #0
 8033edc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8033ede:	2300      	movs	r3, #0
 8033ee0:	75fb      	strb	r3, [r7, #23]
 8033ee2:	e027      	b.n	8033f34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8033ee4:	68fb      	ldr	r3, [r7, #12]
 8033ee6:	0f1b      	lsrs	r3, r3, #28
 8033ee8:	2b09      	cmp	r3, #9
 8033eea:	d80b      	bhi.n	8033f04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8033eec:	68fb      	ldr	r3, [r7, #12]
 8033eee:	0f1b      	lsrs	r3, r3, #28
 8033ef0:	b2da      	uxtb	r2, r3
 8033ef2:	7dfb      	ldrb	r3, [r7, #23]
 8033ef4:	005b      	lsls	r3, r3, #1
 8033ef6:	4619      	mov	r1, r3
 8033ef8:	68bb      	ldr	r3, [r7, #8]
 8033efa:	440b      	add	r3, r1
 8033efc:	3230      	adds	r2, #48	; 0x30
 8033efe:	b2d2      	uxtb	r2, r2
 8033f00:	701a      	strb	r2, [r3, #0]
 8033f02:	e00a      	b.n	8033f1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8033f04:	68fb      	ldr	r3, [r7, #12]
 8033f06:	0f1b      	lsrs	r3, r3, #28
 8033f08:	b2da      	uxtb	r2, r3
 8033f0a:	7dfb      	ldrb	r3, [r7, #23]
 8033f0c:	005b      	lsls	r3, r3, #1
 8033f0e:	4619      	mov	r1, r3
 8033f10:	68bb      	ldr	r3, [r7, #8]
 8033f12:	440b      	add	r3, r1
 8033f14:	3237      	adds	r2, #55	; 0x37
 8033f16:	b2d2      	uxtb	r2, r2
 8033f18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8033f1a:	68fb      	ldr	r3, [r7, #12]
 8033f1c:	011b      	lsls	r3, r3, #4
 8033f1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8033f20:	7dfb      	ldrb	r3, [r7, #23]
 8033f22:	005b      	lsls	r3, r3, #1
 8033f24:	3301      	adds	r3, #1
 8033f26:	68ba      	ldr	r2, [r7, #8]
 8033f28:	4413      	add	r3, r2
 8033f2a:	2200      	movs	r2, #0
 8033f2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8033f2e:	7dfb      	ldrb	r3, [r7, #23]
 8033f30:	3301      	adds	r3, #1
 8033f32:	75fb      	strb	r3, [r7, #23]
 8033f34:	7dfa      	ldrb	r2, [r7, #23]
 8033f36:	79fb      	ldrb	r3, [r7, #7]
 8033f38:	429a      	cmp	r2, r3
 8033f3a:	d3d3      	bcc.n	8033ee4 <IntToUnicode+0x18>
  }
}
 8033f3c:	bf00      	nop
 8033f3e:	371c      	adds	r7, #28
 8033f40:	46bd      	mov	sp, r7
 8033f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f46:	4770      	bx	lr

08033f48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8033f48:	b580      	push	{r7, lr}
 8033f4a:	b08a      	sub	sp, #40	; 0x28
 8033f4c:	af00      	add	r7, sp, #0
 8033f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8033f50:	f107 0314 	add.w	r3, r7, #20
 8033f54:	2200      	movs	r2, #0
 8033f56:	601a      	str	r2, [r3, #0]
 8033f58:	605a      	str	r2, [r3, #4]
 8033f5a:	609a      	str	r2, [r3, #8]
 8033f5c:	60da      	str	r2, [r3, #12]
 8033f5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8033f60:	687b      	ldr	r3, [r7, #4]
 8033f62:	681b      	ldr	r3, [r3, #0]
 8033f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8033f68:	d147      	bne.n	8033ffa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8033f6a:	2300      	movs	r3, #0
 8033f6c:	613b      	str	r3, [r7, #16]
 8033f6e:	4b25      	ldr	r3, [pc, #148]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033f72:	4a24      	ldr	r2, [pc, #144]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033f74:	f043 0301 	orr.w	r3, r3, #1
 8033f78:	6313      	str	r3, [r2, #48]	; 0x30
 8033f7a:	4b22      	ldr	r3, [pc, #136]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033f7e:	f003 0301 	and.w	r3, r3, #1
 8033f82:	613b      	str	r3, [r7, #16]
 8033f84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8033f86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8033f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033f8c:	2302      	movs	r3, #2
 8033f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033f90:	2300      	movs	r3, #0
 8033f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8033f94:	2303      	movs	r3, #3
 8033f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8033f98:	230a      	movs	r3, #10
 8033f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8033f9c:	f107 0314 	add.w	r3, r7, #20
 8033fa0:	4619      	mov	r1, r3
 8033fa2:	4819      	ldr	r0, [pc, #100]	; (8034008 <HAL_PCD_MspInit+0xc0>)
 8033fa4:	f7f0 fa50 	bl	8024448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8033fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8033fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8033fae:	2300      	movs	r3, #0
 8033fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033fb2:	2300      	movs	r3, #0
 8033fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8033fb6:	f107 0314 	add.w	r3, r7, #20
 8033fba:	4619      	mov	r1, r3
 8033fbc:	4812      	ldr	r0, [pc, #72]	; (8034008 <HAL_PCD_MspInit+0xc0>)
 8033fbe:	f7f0 fa43 	bl	8024448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8033fc2:	4b10      	ldr	r3, [pc, #64]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033fc6:	4a0f      	ldr	r2, [pc, #60]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8033fcc:	6353      	str	r3, [r2, #52]	; 0x34
 8033fce:	2300      	movs	r3, #0
 8033fd0:	60fb      	str	r3, [r7, #12]
 8033fd2:	4b0c      	ldr	r3, [pc, #48]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033fd6:	4a0b      	ldr	r2, [pc, #44]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8033fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8033fde:	4b09      	ldr	r3, [pc, #36]	; (8034004 <HAL_PCD_MspInit+0xbc>)
 8033fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033fe6:	60fb      	str	r3, [r7, #12]
 8033fe8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8033fea:	2200      	movs	r2, #0
 8033fec:	2100      	movs	r1, #0
 8033fee:	2043      	movs	r0, #67	; 0x43
 8033ff0:	f7ef fb06 	bl	8023600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8033ff4:	2043      	movs	r0, #67	; 0x43
 8033ff6:	f7ef fb1f 	bl	8023638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8033ffa:	bf00      	nop
 8033ffc:	3728      	adds	r7, #40	; 0x28
 8033ffe:	46bd      	mov	sp, r7
 8034000:	bd80      	pop	{r7, pc}
 8034002:	bf00      	nop
 8034004:	40023800 	.word	0x40023800
 8034008:	40020000 	.word	0x40020000

0803400c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803400c:	b580      	push	{r7, lr}
 803400e:	b082      	sub	sp, #8
 8034010:	af00      	add	r7, sp, #0
 8034012:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8034014:	687b      	ldr	r3, [r7, #4]
 8034016:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 803401a:	687b      	ldr	r3, [r7, #4]
 803401c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8034020:	4619      	mov	r1, r3
 8034022:	4610      	mov	r0, r2
 8034024:	f7fb fa7c 	bl	802f520 <USBD_LL_SetupStage>
}
 8034028:	bf00      	nop
 803402a:	3708      	adds	r7, #8
 803402c:	46bd      	mov	sp, r7
 803402e:	bd80      	pop	{r7, pc}

08034030 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034030:	b580      	push	{r7, lr}
 8034032:	b082      	sub	sp, #8
 8034034:	af00      	add	r7, sp, #0
 8034036:	6078      	str	r0, [r7, #4]
 8034038:	460b      	mov	r3, r1
 803403a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803403c:	687b      	ldr	r3, [r7, #4]
 803403e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8034042:	78fa      	ldrb	r2, [r7, #3]
 8034044:	6879      	ldr	r1, [r7, #4]
 8034046:	4613      	mov	r3, r2
 8034048:	00db      	lsls	r3, r3, #3
 803404a:	1a9b      	subs	r3, r3, r2
 803404c:	009b      	lsls	r3, r3, #2
 803404e:	440b      	add	r3, r1
 8034050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8034054:	681a      	ldr	r2, [r3, #0]
 8034056:	78fb      	ldrb	r3, [r7, #3]
 8034058:	4619      	mov	r1, r3
 803405a:	f7fb fab4 	bl	802f5c6 <USBD_LL_DataOutStage>
}
 803405e:	bf00      	nop
 8034060:	3708      	adds	r7, #8
 8034062:	46bd      	mov	sp, r7
 8034064:	bd80      	pop	{r7, pc}

08034066 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034066:	b580      	push	{r7, lr}
 8034068:	b082      	sub	sp, #8
 803406a:	af00      	add	r7, sp, #0
 803406c:	6078      	str	r0, [r7, #4]
 803406e:	460b      	mov	r3, r1
 8034070:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8034072:	687b      	ldr	r3, [r7, #4]
 8034074:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8034078:	78fa      	ldrb	r2, [r7, #3]
 803407a:	6879      	ldr	r1, [r7, #4]
 803407c:	4613      	mov	r3, r2
 803407e:	00db      	lsls	r3, r3, #3
 8034080:	1a9b      	subs	r3, r3, r2
 8034082:	009b      	lsls	r3, r3, #2
 8034084:	440b      	add	r3, r1
 8034086:	3348      	adds	r3, #72	; 0x48
 8034088:	681a      	ldr	r2, [r3, #0]
 803408a:	78fb      	ldrb	r3, [r7, #3]
 803408c:	4619      	mov	r1, r3
 803408e:	f7fb fafd 	bl	802f68c <USBD_LL_DataInStage>
}
 8034092:	bf00      	nop
 8034094:	3708      	adds	r7, #8
 8034096:	46bd      	mov	sp, r7
 8034098:	bd80      	pop	{r7, pc}

0803409a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803409a:	b580      	push	{r7, lr}
 803409c:	b082      	sub	sp, #8
 803409e:	af00      	add	r7, sp, #0
 80340a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80340a2:	687b      	ldr	r3, [r7, #4]
 80340a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80340a8:	4618      	mov	r0, r3
 80340aa:	f7fb fc01 	bl	802f8b0 <USBD_LL_SOF>
}
 80340ae:	bf00      	nop
 80340b0:	3708      	adds	r7, #8
 80340b2:	46bd      	mov	sp, r7
 80340b4:	bd80      	pop	{r7, pc}

080340b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80340b6:	b580      	push	{r7, lr}
 80340b8:	b084      	sub	sp, #16
 80340ba:	af00      	add	r7, sp, #0
 80340bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80340be:	2301      	movs	r3, #1
 80340c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80340c2:	687b      	ldr	r3, [r7, #4]
 80340c4:	68db      	ldr	r3, [r3, #12]
 80340c6:	2b00      	cmp	r3, #0
 80340c8:	d102      	bne.n	80340d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80340ca:	2300      	movs	r3, #0
 80340cc:	73fb      	strb	r3, [r7, #15]
 80340ce:	e008      	b.n	80340e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80340d0:	687b      	ldr	r3, [r7, #4]
 80340d2:	68db      	ldr	r3, [r3, #12]
 80340d4:	2b02      	cmp	r3, #2
 80340d6:	d102      	bne.n	80340de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80340d8:	2301      	movs	r3, #1
 80340da:	73fb      	strb	r3, [r7, #15]
 80340dc:	e001      	b.n	80340e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80340de:	f7ee f869 	bl	80221b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80340e2:	687b      	ldr	r3, [r7, #4]
 80340e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80340e8:	7bfa      	ldrb	r2, [r7, #15]
 80340ea:	4611      	mov	r1, r2
 80340ec:	4618      	mov	r0, r3
 80340ee:	f7fb fba4 	bl	802f83a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80340f2:	687b      	ldr	r3, [r7, #4]
 80340f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80340f8:	4618      	mov	r0, r3
 80340fa:	f7fb fb5d 	bl	802f7b8 <USBD_LL_Reset>
}
 80340fe:	bf00      	nop
 8034100:	3710      	adds	r7, #16
 8034102:	46bd      	mov	sp, r7
 8034104:	bd80      	pop	{r7, pc}
	...

08034108 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034108:	b580      	push	{r7, lr}
 803410a:	b082      	sub	sp, #8
 803410c:	af00      	add	r7, sp, #0
 803410e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8034110:	687b      	ldr	r3, [r7, #4]
 8034112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8034116:	4618      	mov	r0, r3
 8034118:	f7fb fb9f 	bl	802f85a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803411c:	687b      	ldr	r3, [r7, #4]
 803411e:	681b      	ldr	r3, [r3, #0]
 8034120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8034124:	681b      	ldr	r3, [r3, #0]
 8034126:	687a      	ldr	r2, [r7, #4]
 8034128:	6812      	ldr	r2, [r2, #0]
 803412a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803412e:	f043 0301 	orr.w	r3, r3, #1
 8034132:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8034134:	687b      	ldr	r3, [r7, #4]
 8034136:	6a1b      	ldr	r3, [r3, #32]
 8034138:	2b00      	cmp	r3, #0
 803413a:	d005      	beq.n	8034148 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803413c:	4b04      	ldr	r3, [pc, #16]	; (8034150 <HAL_PCD_SuspendCallback+0x48>)
 803413e:	691b      	ldr	r3, [r3, #16]
 8034140:	4a03      	ldr	r2, [pc, #12]	; (8034150 <HAL_PCD_SuspendCallback+0x48>)
 8034142:	f043 0306 	orr.w	r3, r3, #6
 8034146:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8034148:	bf00      	nop
 803414a:	3708      	adds	r7, #8
 803414c:	46bd      	mov	sp, r7
 803414e:	bd80      	pop	{r7, pc}
 8034150:	e000ed00 	.word	0xe000ed00

08034154 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034154:	b580      	push	{r7, lr}
 8034156:	b082      	sub	sp, #8
 8034158:	af00      	add	r7, sp, #0
 803415a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803415c:	687b      	ldr	r3, [r7, #4]
 803415e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8034162:	4618      	mov	r0, r3
 8034164:	f7fb fb8e 	bl	802f884 <USBD_LL_Resume>
}
 8034168:	bf00      	nop
 803416a:	3708      	adds	r7, #8
 803416c:	46bd      	mov	sp, r7
 803416e:	bd80      	pop	{r7, pc}

08034170 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034170:	b580      	push	{r7, lr}
 8034172:	b082      	sub	sp, #8
 8034174:	af00      	add	r7, sp, #0
 8034176:	6078      	str	r0, [r7, #4]
 8034178:	460b      	mov	r3, r1
 803417a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803417c:	687b      	ldr	r3, [r7, #4]
 803417e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8034182:	78fa      	ldrb	r2, [r7, #3]
 8034184:	4611      	mov	r1, r2
 8034186:	4618      	mov	r0, r3
 8034188:	f7fb fbb9 	bl	802f8fe <USBD_LL_IsoOUTIncomplete>
}
 803418c:	bf00      	nop
 803418e:	3708      	adds	r7, #8
 8034190:	46bd      	mov	sp, r7
 8034192:	bd80      	pop	{r7, pc}

08034194 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034194:	b580      	push	{r7, lr}
 8034196:	b082      	sub	sp, #8
 8034198:	af00      	add	r7, sp, #0
 803419a:	6078      	str	r0, [r7, #4]
 803419c:	460b      	mov	r3, r1
 803419e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80341a0:	687b      	ldr	r3, [r7, #4]
 80341a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80341a6:	78fa      	ldrb	r2, [r7, #3]
 80341a8:	4611      	mov	r1, r2
 80341aa:	4618      	mov	r0, r3
 80341ac:	f7fb fb9a 	bl	802f8e4 <USBD_LL_IsoINIncomplete>
}
 80341b0:	bf00      	nop
 80341b2:	3708      	adds	r7, #8
 80341b4:	46bd      	mov	sp, r7
 80341b6:	bd80      	pop	{r7, pc}

080341b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80341b8:	b580      	push	{r7, lr}
 80341ba:	b082      	sub	sp, #8
 80341bc:	af00      	add	r7, sp, #0
 80341be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80341c0:	687b      	ldr	r3, [r7, #4]
 80341c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80341c6:	4618      	mov	r0, r3
 80341c8:	f7fb fba6 	bl	802f918 <USBD_LL_DevConnected>
}
 80341cc:	bf00      	nop
 80341ce:	3708      	adds	r7, #8
 80341d0:	46bd      	mov	sp, r7
 80341d2:	bd80      	pop	{r7, pc}

080341d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80341d4:	b580      	push	{r7, lr}
 80341d6:	b082      	sub	sp, #8
 80341d8:	af00      	add	r7, sp, #0
 80341da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80341dc:	687b      	ldr	r3, [r7, #4]
 80341de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80341e2:	4618      	mov	r0, r3
 80341e4:	f7fb fba3 	bl	802f92e <USBD_LL_DevDisconnected>
}
 80341e8:	bf00      	nop
 80341ea:	3708      	adds	r7, #8
 80341ec:	46bd      	mov	sp, r7
 80341ee:	bd80      	pop	{r7, pc}

080341f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80341f0:	b580      	push	{r7, lr}
 80341f2:	b082      	sub	sp, #8
 80341f4:	af00      	add	r7, sp, #0
 80341f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80341f8:	687b      	ldr	r3, [r7, #4]
 80341fa:	781b      	ldrb	r3, [r3, #0]
 80341fc:	2b00      	cmp	r3, #0
 80341fe:	d13c      	bne.n	803427a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8034200:	4a20      	ldr	r2, [pc, #128]	; (8034284 <USBD_LL_Init+0x94>)
 8034202:	687b      	ldr	r3, [r7, #4]
 8034204:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8034208:	687b      	ldr	r3, [r7, #4]
 803420a:	4a1e      	ldr	r2, [pc, #120]	; (8034284 <USBD_LL_Init+0x94>)
 803420c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8034210:	4b1c      	ldr	r3, [pc, #112]	; (8034284 <USBD_LL_Init+0x94>)
 8034212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8034216:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8034218:	4b1a      	ldr	r3, [pc, #104]	; (8034284 <USBD_LL_Init+0x94>)
 803421a:	2204      	movs	r2, #4
 803421c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803421e:	4b19      	ldr	r3, [pc, #100]	; (8034284 <USBD_LL_Init+0x94>)
 8034220:	2202      	movs	r2, #2
 8034222:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8034224:	4b17      	ldr	r3, [pc, #92]	; (8034284 <USBD_LL_Init+0x94>)
 8034226:	2200      	movs	r2, #0
 8034228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803422a:	4b16      	ldr	r3, [pc, #88]	; (8034284 <USBD_LL_Init+0x94>)
 803422c:	2202      	movs	r2, #2
 803422e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8034230:	4b14      	ldr	r3, [pc, #80]	; (8034284 <USBD_LL_Init+0x94>)
 8034232:	2200      	movs	r2, #0
 8034234:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8034236:	4b13      	ldr	r3, [pc, #76]	; (8034284 <USBD_LL_Init+0x94>)
 8034238:	2200      	movs	r2, #0
 803423a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803423c:	4b11      	ldr	r3, [pc, #68]	; (8034284 <USBD_LL_Init+0x94>)
 803423e:	2200      	movs	r2, #0
 8034240:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8034242:	4b10      	ldr	r3, [pc, #64]	; (8034284 <USBD_LL_Init+0x94>)
 8034244:	2201      	movs	r2, #1
 8034246:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8034248:	4b0e      	ldr	r3, [pc, #56]	; (8034284 <USBD_LL_Init+0x94>)
 803424a:	2200      	movs	r2, #0
 803424c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803424e:	480d      	ldr	r0, [pc, #52]	; (8034284 <USBD_LL_Init+0x94>)
 8034250:	f7f2 fa31 	bl	80266b6 <HAL_PCD_Init>
 8034254:	4603      	mov	r3, r0
 8034256:	2b00      	cmp	r3, #0
 8034258:	d001      	beq.n	803425e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 803425a:	f7ed ffab 	bl	80221b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803425e:	2180      	movs	r1, #128	; 0x80
 8034260:	4808      	ldr	r0, [pc, #32]	; (8034284 <USBD_LL_Init+0x94>)
 8034262:	f7f3 fb8e 	bl	8027982 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8034266:	2240      	movs	r2, #64	; 0x40
 8034268:	2100      	movs	r1, #0
 803426a:	4806      	ldr	r0, [pc, #24]	; (8034284 <USBD_LL_Init+0x94>)
 803426c:	f7f3 fb42 	bl	80278f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8034270:	2280      	movs	r2, #128	; 0x80
 8034272:	2101      	movs	r1, #1
 8034274:	4803      	ldr	r0, [pc, #12]	; (8034284 <USBD_LL_Init+0x94>)
 8034276:	f7f3 fb3d 	bl	80278f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 803427a:	2300      	movs	r3, #0
}
 803427c:	4618      	mov	r0, r3
 803427e:	3708      	adds	r7, #8
 8034280:	46bd      	mov	sp, r7
 8034282:	bd80      	pop	{r7, pc}
 8034284:	20006c74 	.word	0x20006c74

08034288 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8034288:	b580      	push	{r7, lr}
 803428a:	b084      	sub	sp, #16
 803428c:	af00      	add	r7, sp, #0
 803428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034290:	2300      	movs	r3, #0
 8034292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034294:	2300      	movs	r3, #0
 8034296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8034298:	687b      	ldr	r3, [r7, #4]
 803429a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 803429e:	4618      	mov	r0, r3
 80342a0:	f7f2 fb26 	bl	80268f0 <HAL_PCD_Start>
 80342a4:	4603      	mov	r3, r0
 80342a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80342a8:	7bfb      	ldrb	r3, [r7, #15]
 80342aa:	4618      	mov	r0, r3
 80342ac:	f000 f92a 	bl	8034504 <USBD_Get_USB_Status>
 80342b0:	4603      	mov	r3, r0
 80342b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80342b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80342b6:	4618      	mov	r0, r3
 80342b8:	3710      	adds	r7, #16
 80342ba:	46bd      	mov	sp, r7
 80342bc:	bd80      	pop	{r7, pc}

080342be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80342be:	b580      	push	{r7, lr}
 80342c0:	b084      	sub	sp, #16
 80342c2:	af00      	add	r7, sp, #0
 80342c4:	6078      	str	r0, [r7, #4]
 80342c6:	4608      	mov	r0, r1
 80342c8:	4611      	mov	r1, r2
 80342ca:	461a      	mov	r2, r3
 80342cc:	4603      	mov	r3, r0
 80342ce:	70fb      	strb	r3, [r7, #3]
 80342d0:	460b      	mov	r3, r1
 80342d2:	70bb      	strb	r3, [r7, #2]
 80342d4:	4613      	mov	r3, r2
 80342d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80342d8:	2300      	movs	r3, #0
 80342da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80342dc:	2300      	movs	r3, #0
 80342de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80342e0:	687b      	ldr	r3, [r7, #4]
 80342e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80342e6:	78bb      	ldrb	r3, [r7, #2]
 80342e8:	883a      	ldrh	r2, [r7, #0]
 80342ea:	78f9      	ldrb	r1, [r7, #3]
 80342ec:	f7f2 ff0a 	bl	8027104 <HAL_PCD_EP_Open>
 80342f0:	4603      	mov	r3, r0
 80342f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80342f4:	7bfb      	ldrb	r3, [r7, #15]
 80342f6:	4618      	mov	r0, r3
 80342f8:	f000 f904 	bl	8034504 <USBD_Get_USB_Status>
 80342fc:	4603      	mov	r3, r0
 80342fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034300:	7bbb      	ldrb	r3, [r7, #14]
}
 8034302:	4618      	mov	r0, r3
 8034304:	3710      	adds	r7, #16
 8034306:	46bd      	mov	sp, r7
 8034308:	bd80      	pop	{r7, pc}

0803430a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803430a:	b580      	push	{r7, lr}
 803430c:	b084      	sub	sp, #16
 803430e:	af00      	add	r7, sp, #0
 8034310:	6078      	str	r0, [r7, #4]
 8034312:	460b      	mov	r3, r1
 8034314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034316:	2300      	movs	r3, #0
 8034318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803431a:	2300      	movs	r3, #0
 803431c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803431e:	687b      	ldr	r3, [r7, #4]
 8034320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8034324:	78fa      	ldrb	r2, [r7, #3]
 8034326:	4611      	mov	r1, r2
 8034328:	4618      	mov	r0, r3
 803432a:	f7f2 ff53 	bl	80271d4 <HAL_PCD_EP_Close>
 803432e:	4603      	mov	r3, r0
 8034330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034332:	7bfb      	ldrb	r3, [r7, #15]
 8034334:	4618      	mov	r0, r3
 8034336:	f000 f8e5 	bl	8034504 <USBD_Get_USB_Status>
 803433a:	4603      	mov	r3, r0
 803433c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803433e:	7bbb      	ldrb	r3, [r7, #14]
}
 8034340:	4618      	mov	r0, r3
 8034342:	3710      	adds	r7, #16
 8034344:	46bd      	mov	sp, r7
 8034346:	bd80      	pop	{r7, pc}

08034348 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034348:	b580      	push	{r7, lr}
 803434a:	b084      	sub	sp, #16
 803434c:	af00      	add	r7, sp, #0
 803434e:	6078      	str	r0, [r7, #4]
 8034350:	460b      	mov	r3, r1
 8034352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034354:	2300      	movs	r3, #0
 8034356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034358:	2300      	movs	r3, #0
 803435a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803435c:	687b      	ldr	r3, [r7, #4]
 803435e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8034362:	78fa      	ldrb	r2, [r7, #3]
 8034364:	4611      	mov	r1, r2
 8034366:	4618      	mov	r0, r3
 8034368:	f7f3 f82b 	bl	80273c2 <HAL_PCD_EP_SetStall>
 803436c:	4603      	mov	r3, r0
 803436e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034370:	7bfb      	ldrb	r3, [r7, #15]
 8034372:	4618      	mov	r0, r3
 8034374:	f000 f8c6 	bl	8034504 <USBD_Get_USB_Status>
 8034378:	4603      	mov	r3, r0
 803437a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803437c:	7bbb      	ldrb	r3, [r7, #14]
}
 803437e:	4618      	mov	r0, r3
 8034380:	3710      	adds	r7, #16
 8034382:	46bd      	mov	sp, r7
 8034384:	bd80      	pop	{r7, pc}

08034386 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034386:	b580      	push	{r7, lr}
 8034388:	b084      	sub	sp, #16
 803438a:	af00      	add	r7, sp, #0
 803438c:	6078      	str	r0, [r7, #4]
 803438e:	460b      	mov	r3, r1
 8034390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034392:	2300      	movs	r3, #0
 8034394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034396:	2300      	movs	r3, #0
 8034398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803439a:	687b      	ldr	r3, [r7, #4]
 803439c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80343a0:	78fa      	ldrb	r2, [r7, #3]
 80343a2:	4611      	mov	r1, r2
 80343a4:	4618      	mov	r0, r3
 80343a6:	f7f3 f870 	bl	802748a <HAL_PCD_EP_ClrStall>
 80343aa:	4603      	mov	r3, r0
 80343ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80343ae:	7bfb      	ldrb	r3, [r7, #15]
 80343b0:	4618      	mov	r0, r3
 80343b2:	f000 f8a7 	bl	8034504 <USBD_Get_USB_Status>
 80343b6:	4603      	mov	r3, r0
 80343b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80343ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80343bc:	4618      	mov	r0, r3
 80343be:	3710      	adds	r7, #16
 80343c0:	46bd      	mov	sp, r7
 80343c2:	bd80      	pop	{r7, pc}

080343c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80343c4:	b480      	push	{r7}
 80343c6:	b085      	sub	sp, #20
 80343c8:	af00      	add	r7, sp, #0
 80343ca:	6078      	str	r0, [r7, #4]
 80343cc:	460b      	mov	r3, r1
 80343ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80343d0:	687b      	ldr	r3, [r7, #4]
 80343d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80343d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80343d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80343dc:	2b00      	cmp	r3, #0
 80343de:	da0b      	bge.n	80343f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80343e0:	78fb      	ldrb	r3, [r7, #3]
 80343e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80343e6:	68f9      	ldr	r1, [r7, #12]
 80343e8:	4613      	mov	r3, r2
 80343ea:	00db      	lsls	r3, r3, #3
 80343ec:	1a9b      	subs	r3, r3, r2
 80343ee:	009b      	lsls	r3, r3, #2
 80343f0:	440b      	add	r3, r1
 80343f2:	333e      	adds	r3, #62	; 0x3e
 80343f4:	781b      	ldrb	r3, [r3, #0]
 80343f6:	e00b      	b.n	8034410 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80343f8:	78fb      	ldrb	r3, [r7, #3]
 80343fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80343fe:	68f9      	ldr	r1, [r7, #12]
 8034400:	4613      	mov	r3, r2
 8034402:	00db      	lsls	r3, r3, #3
 8034404:	1a9b      	subs	r3, r3, r2
 8034406:	009b      	lsls	r3, r3, #2
 8034408:	440b      	add	r3, r1
 803440a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 803440e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8034410:	4618      	mov	r0, r3
 8034412:	3714      	adds	r7, #20
 8034414:	46bd      	mov	sp, r7
 8034416:	f85d 7b04 	ldr.w	r7, [sp], #4
 803441a:	4770      	bx	lr

0803441c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803441c:	b580      	push	{r7, lr}
 803441e:	b084      	sub	sp, #16
 8034420:	af00      	add	r7, sp, #0
 8034422:	6078      	str	r0, [r7, #4]
 8034424:	460b      	mov	r3, r1
 8034426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034428:	2300      	movs	r3, #0
 803442a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803442c:	2300      	movs	r3, #0
 803442e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8034430:	687b      	ldr	r3, [r7, #4]
 8034432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8034436:	78fa      	ldrb	r2, [r7, #3]
 8034438:	4611      	mov	r1, r2
 803443a:	4618      	mov	r0, r3
 803443c:	f7f2 fe3d 	bl	80270ba <HAL_PCD_SetAddress>
 8034440:	4603      	mov	r3, r0
 8034442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034444:	7bfb      	ldrb	r3, [r7, #15]
 8034446:	4618      	mov	r0, r3
 8034448:	f000 f85c 	bl	8034504 <USBD_Get_USB_Status>
 803444c:	4603      	mov	r3, r0
 803444e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034450:	7bbb      	ldrb	r3, [r7, #14]
}
 8034452:	4618      	mov	r0, r3
 8034454:	3710      	adds	r7, #16
 8034456:	46bd      	mov	sp, r7
 8034458:	bd80      	pop	{r7, pc}

0803445a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803445a:	b580      	push	{r7, lr}
 803445c:	b086      	sub	sp, #24
 803445e:	af00      	add	r7, sp, #0
 8034460:	60f8      	str	r0, [r7, #12]
 8034462:	607a      	str	r2, [r7, #4]
 8034464:	603b      	str	r3, [r7, #0]
 8034466:	460b      	mov	r3, r1
 8034468:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803446a:	2300      	movs	r3, #0
 803446c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803446e:	2300      	movs	r3, #0
 8034470:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8034472:	68fb      	ldr	r3, [r7, #12]
 8034474:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8034478:	7af9      	ldrb	r1, [r7, #11]
 803447a:	683b      	ldr	r3, [r7, #0]
 803447c:	687a      	ldr	r2, [r7, #4]
 803447e:	f7f2 ff56 	bl	802732e <HAL_PCD_EP_Transmit>
 8034482:	4603      	mov	r3, r0
 8034484:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034486:	7dfb      	ldrb	r3, [r7, #23]
 8034488:	4618      	mov	r0, r3
 803448a:	f000 f83b 	bl	8034504 <USBD_Get_USB_Status>
 803448e:	4603      	mov	r3, r0
 8034490:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8034492:	7dbb      	ldrb	r3, [r7, #22]
}
 8034494:	4618      	mov	r0, r3
 8034496:	3718      	adds	r7, #24
 8034498:	46bd      	mov	sp, r7
 803449a:	bd80      	pop	{r7, pc}

0803449c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803449c:	b580      	push	{r7, lr}
 803449e:	b086      	sub	sp, #24
 80344a0:	af00      	add	r7, sp, #0
 80344a2:	60f8      	str	r0, [r7, #12]
 80344a4:	607a      	str	r2, [r7, #4]
 80344a6:	603b      	str	r3, [r7, #0]
 80344a8:	460b      	mov	r3, r1
 80344aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80344ac:	2300      	movs	r3, #0
 80344ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80344b0:	2300      	movs	r3, #0
 80344b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80344b4:	68fb      	ldr	r3, [r7, #12]
 80344b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80344ba:	7af9      	ldrb	r1, [r7, #11]
 80344bc:	683b      	ldr	r3, [r7, #0]
 80344be:	687a      	ldr	r2, [r7, #4]
 80344c0:	f7f2 fed2 	bl	8027268 <HAL_PCD_EP_Receive>
 80344c4:	4603      	mov	r3, r0
 80344c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80344c8:	7dfb      	ldrb	r3, [r7, #23]
 80344ca:	4618      	mov	r0, r3
 80344cc:	f000 f81a 	bl	8034504 <USBD_Get_USB_Status>
 80344d0:	4603      	mov	r3, r0
 80344d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80344d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80344d6:	4618      	mov	r0, r3
 80344d8:	3718      	adds	r7, #24
 80344da:	46bd      	mov	sp, r7
 80344dc:	bd80      	pop	{r7, pc}

080344de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80344de:	b580      	push	{r7, lr}
 80344e0:	b082      	sub	sp, #8
 80344e2:	af00      	add	r7, sp, #0
 80344e4:	6078      	str	r0, [r7, #4]
 80344e6:	460b      	mov	r3, r1
 80344e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80344ea:	687b      	ldr	r3, [r7, #4]
 80344ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80344f0:	78fa      	ldrb	r2, [r7, #3]
 80344f2:	4611      	mov	r1, r2
 80344f4:	4618      	mov	r0, r3
 80344f6:	f7f2 ff02 	bl	80272fe <HAL_PCD_EP_GetRxCount>
 80344fa:	4603      	mov	r3, r0
}
 80344fc:	4618      	mov	r0, r3
 80344fe:	3708      	adds	r7, #8
 8034500:	46bd      	mov	sp, r7
 8034502:	bd80      	pop	{r7, pc}

08034504 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8034504:	b480      	push	{r7}
 8034506:	b085      	sub	sp, #20
 8034508:	af00      	add	r7, sp, #0
 803450a:	4603      	mov	r3, r0
 803450c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803450e:	2300      	movs	r3, #0
 8034510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8034512:	79fb      	ldrb	r3, [r7, #7]
 8034514:	2b03      	cmp	r3, #3
 8034516:	d817      	bhi.n	8034548 <USBD_Get_USB_Status+0x44>
 8034518:	a201      	add	r2, pc, #4	; (adr r2, 8034520 <USBD_Get_USB_Status+0x1c>)
 803451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803451e:	bf00      	nop
 8034520:	08034531 	.word	0x08034531
 8034524:	08034537 	.word	0x08034537
 8034528:	0803453d 	.word	0x0803453d
 803452c:	08034543 	.word	0x08034543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8034530:	2300      	movs	r3, #0
 8034532:	73fb      	strb	r3, [r7, #15]
    break;
 8034534:	e00b      	b.n	803454e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8034536:	2303      	movs	r3, #3
 8034538:	73fb      	strb	r3, [r7, #15]
    break;
 803453a:	e008      	b.n	803454e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803453c:	2301      	movs	r3, #1
 803453e:	73fb      	strb	r3, [r7, #15]
    break;
 8034540:	e005      	b.n	803454e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8034542:	2303      	movs	r3, #3
 8034544:	73fb      	strb	r3, [r7, #15]
    break;
 8034546:	e002      	b.n	803454e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8034548:	2303      	movs	r3, #3
 803454a:	73fb      	strb	r3, [r7, #15]
    break;
 803454c:	bf00      	nop
  }
  return usb_status;
 803454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8034550:	4618      	mov	r0, r3
 8034552:	3714      	adds	r7, #20
 8034554:	46bd      	mov	sp, r7
 8034556:	f85d 7b04 	ldr.w	r7, [sp], #4
 803455a:	4770      	bx	lr

0803455c <MX_USB_HOST_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_HOST_DeInit(void)
{
 803455c:	b580      	push	{r7, lr}
 803455e:	af00      	add	r7, sp, #0
	USBH_Stop(&hUsbHostHS);
 8034560:	4803      	ldr	r0, [pc, #12]	; (8034570 <MX_USB_HOST_DeInit+0x14>)
 8034562:	f7fd fecb 	bl	80322fc <USBH_Stop>
	USBH_DeInit(&hUsbHostHS);
 8034566:	4802      	ldr	r0, [pc, #8]	; (8034570 <MX_USB_HOST_DeInit+0x14>)
 8034568:	f7fd fd4a 	bl	8032000 <USBH_DeInit>

}
 803456c:	bf00      	nop
 803456e:	bd80      	pop	{r7, pc}
 8034570:	2000707c 	.word	0x2000707c

08034574 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8034574:	b580      	push	{r7, lr}
 8034576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8034578:	2200      	movs	r2, #0
 803457a:	490e      	ldr	r1, [pc, #56]	; (80345b4 <MX_USB_HOST_Init+0x40>)
 803457c:	480e      	ldr	r0, [pc, #56]	; (80345b8 <MX_USB_HOST_Init+0x44>)
 803457e:	f7fd fcf7 	bl	8031f70 <USBH_Init>
 8034582:	4603      	mov	r3, r0
 8034584:	2b00      	cmp	r3, #0
 8034586:	d001      	beq.n	803458c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8034588:	f7ed fe14 	bl	80221b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 803458c:	490b      	ldr	r1, [pc, #44]	; (80345bc <MX_USB_HOST_Init+0x48>)
 803458e:	480a      	ldr	r0, [pc, #40]	; (80345b8 <MX_USB_HOST_Init+0x44>)
 8034590:	f7fd fdb6 	bl	8032100 <USBH_RegisterClass>
 8034594:	4603      	mov	r3, r0
 8034596:	2b00      	cmp	r3, #0
 8034598:	d001      	beq.n	803459e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 803459a:	f7ed fe0b 	bl	80221b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 803459e:	4806      	ldr	r0, [pc, #24]	; (80345b8 <MX_USB_HOST_Init+0x44>)
 80345a0:	f7fd fe9c 	bl	80322dc <USBH_Start>
 80345a4:	4603      	mov	r3, r0
 80345a6:	2b00      	cmp	r3, #0
 80345a8:	d001      	beq.n	80345ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80345aa:	f7ed fe03 	bl	80221b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80345ae:	bf00      	nop
 80345b0:	bd80      	pop	{r7, pc}
 80345b2:	bf00      	nop
 80345b4:	080345d5 	.word	0x080345d5
 80345b8:	2000707c 	.word	0x2000707c
 80345bc:	2000011c 	.word	0x2000011c

080345c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80345c0:	b580      	push	{r7, lr}
 80345c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80345c4:	4802      	ldr	r0, [pc, #8]	; (80345d0 <MX_USB_HOST_Process+0x10>)
 80345c6:	f7fd feb5 	bl	8032334 <USBH_Process>
}
 80345ca:	bf00      	nop
 80345cc:	bd80      	pop	{r7, pc}
 80345ce:	bf00      	nop
 80345d0:	2000707c 	.word	0x2000707c

080345d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80345d4:	b480      	push	{r7}
 80345d6:	b083      	sub	sp, #12
 80345d8:	af00      	add	r7, sp, #0
 80345da:	6078      	str	r0, [r7, #4]
 80345dc:	460b      	mov	r3, r1
 80345de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80345e0:	78fb      	ldrb	r3, [r7, #3]
 80345e2:	3b01      	subs	r3, #1
 80345e4:	2b04      	cmp	r3, #4
 80345e6:	d819      	bhi.n	803461c <USBH_UserProcess+0x48>
 80345e8:	a201      	add	r2, pc, #4	; (adr r2, 80345f0 <USBH_UserProcess+0x1c>)
 80345ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80345ee:	bf00      	nop
 80345f0:	0803461d 	.word	0x0803461d
 80345f4:	0803460d 	.word	0x0803460d
 80345f8:	0803461d 	.word	0x0803461d
 80345fc:	08034615 	.word	0x08034615
 8034600:	08034605 	.word	0x08034605
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8034604:	4b09      	ldr	r3, [pc, #36]	; (803462c <USBH_UserProcess+0x58>)
 8034606:	2203      	movs	r2, #3
 8034608:	701a      	strb	r2, [r3, #0]
  break;
 803460a:	e008      	b.n	803461e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 803460c:	4b07      	ldr	r3, [pc, #28]	; (803462c <USBH_UserProcess+0x58>)
 803460e:	2202      	movs	r2, #2
 8034610:	701a      	strb	r2, [r3, #0]
  break;
 8034612:	e004      	b.n	803461e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8034614:	4b05      	ldr	r3, [pc, #20]	; (803462c <USBH_UserProcess+0x58>)
 8034616:	2201      	movs	r2, #1
 8034618:	701a      	strb	r2, [r3, #0]
  break;
 803461a:	e000      	b.n	803461e <USBH_UserProcess+0x4a>

  default:
  break;
 803461c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 803461e:	bf00      	nop
 8034620:	370c      	adds	r7, #12
 8034622:	46bd      	mov	sp, r7
 8034624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034628:	4770      	bx	lr
 803462a:	bf00      	nop
 803462c:	200013bc 	.word	0x200013bc

08034630 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8034630:	b580      	push	{r7, lr}
 8034632:	b08a      	sub	sp, #40	; 0x28
 8034634:	af00      	add	r7, sp, #0
 8034636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8034638:	f107 0314 	add.w	r3, r7, #20
 803463c:	2200      	movs	r2, #0
 803463e:	601a      	str	r2, [r3, #0]
 8034640:	605a      	str	r2, [r3, #4]
 8034642:	609a      	str	r2, [r3, #8]
 8034644:	60da      	str	r2, [r3, #12]
 8034646:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8034648:	687b      	ldr	r3, [r7, #4]
 803464a:	681b      	ldr	r3, [r3, #0]
 803464c:	4a1d      	ldr	r2, [pc, #116]	; (80346c4 <HAL_HCD_MspInit+0x94>)
 803464e:	4293      	cmp	r3, r2
 8034650:	d134      	bne.n	80346bc <HAL_HCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8034652:	2300      	movs	r3, #0
 8034654:	613b      	str	r3, [r7, #16]
 8034656:	4b1c      	ldr	r3, [pc, #112]	; (80346c8 <HAL_HCD_MspInit+0x98>)
 8034658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803465a:	4a1b      	ldr	r2, [pc, #108]	; (80346c8 <HAL_HCD_MspInit+0x98>)
 803465c:	f043 0302 	orr.w	r3, r3, #2
 8034660:	6313      	str	r3, [r2, #48]	; 0x30
 8034662:	4b19      	ldr	r3, [pc, #100]	; (80346c8 <HAL_HCD_MspInit+0x98>)
 8034664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034666:	f003 0302 	and.w	r3, r3, #2
 803466a:	613b      	str	r3, [r7, #16]
 803466c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 803466e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8034672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8034674:	2302      	movs	r3, #2
 8034676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8034678:	2300      	movs	r3, #0
 803467a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803467c:	2303      	movs	r3, #3
 803467e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8034680:	230c      	movs	r3, #12
 8034682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8034684:	f107 0314 	add.w	r3, r7, #20
 8034688:	4619      	mov	r1, r3
 803468a:	4810      	ldr	r0, [pc, #64]	; (80346cc <HAL_HCD_MspInit+0x9c>)
 803468c:	f7ef fedc 	bl	8024448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8034690:	2300      	movs	r3, #0
 8034692:	60fb      	str	r3, [r7, #12]
 8034694:	4b0c      	ldr	r3, [pc, #48]	; (80346c8 <HAL_HCD_MspInit+0x98>)
 8034696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034698:	4a0b      	ldr	r2, [pc, #44]	; (80346c8 <HAL_HCD_MspInit+0x98>)
 803469a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803469e:	6313      	str	r3, [r2, #48]	; 0x30
 80346a0:	4b09      	ldr	r3, [pc, #36]	; (80346c8 <HAL_HCD_MspInit+0x98>)
 80346a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80346a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80346a8:	60fb      	str	r3, [r7, #12]
 80346aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80346ac:	2200      	movs	r2, #0
 80346ae:	2100      	movs	r1, #0
 80346b0:	204d      	movs	r0, #77	; 0x4d
 80346b2:	f7ee ffa5 	bl	8023600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80346b6:	204d      	movs	r0, #77	; 0x4d
 80346b8:	f7ee ffbe 	bl	8023638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80346bc:	bf00      	nop
 80346be:	3728      	adds	r7, #40	; 0x28
 80346c0:	46bd      	mov	sp, r7
 80346c2:	bd80      	pop	{r7, pc}
 80346c4:	40040000 	.word	0x40040000
 80346c8:	40023800 	.word	0x40023800
 80346cc:	40020400 	.word	0x40020400

080346d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80346d0:	b580      	push	{r7, lr}
 80346d2:	b082      	sub	sp, #8
 80346d4:	af00      	add	r7, sp, #0
 80346d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80346d8:	687b      	ldr	r3, [r7, #4]
 80346da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80346de:	4618      	mov	r0, r3
 80346e0:	f7fe fb47 	bl	8032d72 <USBH_LL_IncTimer>
}
 80346e4:	bf00      	nop
 80346e6:	3708      	adds	r7, #8
 80346e8:	46bd      	mov	sp, r7
 80346ea:	bd80      	pop	{r7, pc}

080346ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80346ec:	b580      	push	{r7, lr}
 80346ee:	b082      	sub	sp, #8
 80346f0:	af00      	add	r7, sp, #0
 80346f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80346f4:	687b      	ldr	r3, [r7, #4]
 80346f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80346fa:	4618      	mov	r0, r3
 80346fc:	f7fe fb7f 	bl	8032dfe <USBH_LL_Connect>
}
 8034700:	bf00      	nop
 8034702:	3708      	adds	r7, #8
 8034704:	46bd      	mov	sp, r7
 8034706:	bd80      	pop	{r7, pc}

08034708 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8034708:	b580      	push	{r7, lr}
 803470a:	b082      	sub	sp, #8
 803470c:	af00      	add	r7, sp, #0
 803470e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8034710:	687b      	ldr	r3, [r7, #4]
 8034712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034716:	4618      	mov	r0, r3
 8034718:	f7fe fb88 	bl	8032e2c <USBH_LL_Disconnect>
}
 803471c:	bf00      	nop
 803471e:	3708      	adds	r7, #8
 8034720:	46bd      	mov	sp, r7
 8034722:	bd80      	pop	{r7, pc}

08034724 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8034724:	b480      	push	{r7}
 8034726:	b083      	sub	sp, #12
 8034728:	af00      	add	r7, sp, #0
 803472a:	6078      	str	r0, [r7, #4]
 803472c:	460b      	mov	r3, r1
 803472e:	70fb      	strb	r3, [r7, #3]
 8034730:	4613      	mov	r3, r2
 8034732:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8034734:	bf00      	nop
 8034736:	370c      	adds	r7, #12
 8034738:	46bd      	mov	sp, r7
 803473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803473e:	4770      	bx	lr

08034740 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8034740:	b580      	push	{r7, lr}
 8034742:	b082      	sub	sp, #8
 8034744:	af00      	add	r7, sp, #0
 8034746:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8034748:	687b      	ldr	r3, [r7, #4]
 803474a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 803474e:	4618      	mov	r0, r3
 8034750:	f7fe fb39 	bl	8032dc6 <USBH_LL_PortEnabled>
}
 8034754:	bf00      	nop
 8034756:	3708      	adds	r7, #8
 8034758:	46bd      	mov	sp, r7
 803475a:	bd80      	pop	{r7, pc}

0803475c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 803475c:	b580      	push	{r7, lr}
 803475e:	b082      	sub	sp, #8
 8034760:	af00      	add	r7, sp, #0
 8034762:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8034764:	687b      	ldr	r3, [r7, #4]
 8034766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 803476a:	4618      	mov	r0, r3
 803476c:	f7fe fb39 	bl	8032de2 <USBH_LL_PortDisabled>
}
 8034770:	bf00      	nop
 8034772:	3708      	adds	r7, #8
 8034774:	46bd      	mov	sp, r7
 8034776:	bd80      	pop	{r7, pc}

08034778 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8034778:	b580      	push	{r7, lr}
 803477a:	b082      	sub	sp, #8
 803477c:	af00      	add	r7, sp, #0
 803477e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8034780:	687b      	ldr	r3, [r7, #4]
 8034782:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8034786:	2b00      	cmp	r3, #0
 8034788:	d132      	bne.n	80347f0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 803478a:	4a1c      	ldr	r2, [pc, #112]	; (80347fc <USBH_LL_Init+0x84>)
 803478c:	687b      	ldr	r3, [r7, #4]
 803478e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8034792:	687b      	ldr	r3, [r7, #4]
 8034794:	4a19      	ldr	r2, [pc, #100]	; (80347fc <USBH_LL_Init+0x84>)
 8034796:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 803479a:	4b18      	ldr	r3, [pc, #96]	; (80347fc <USBH_LL_Init+0x84>)
 803479c:	4a18      	ldr	r2, [pc, #96]	; (8034800 <USBH_LL_Init+0x88>)
 803479e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80347a0:	4b16      	ldr	r3, [pc, #88]	; (80347fc <USBH_LL_Init+0x84>)
 80347a2:	220c      	movs	r2, #12
 80347a4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80347a6:	4b15      	ldr	r3, [pc, #84]	; (80347fc <USBH_LL_Init+0x84>)
 80347a8:	2201      	movs	r2, #1
 80347aa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 80347ac:	4b13      	ldr	r3, [pc, #76]	; (80347fc <USBH_LL_Init+0x84>)
 80347ae:	2201      	movs	r2, #1
 80347b0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80347b2:	4b12      	ldr	r3, [pc, #72]	; (80347fc <USBH_LL_Init+0x84>)
 80347b4:	2202      	movs	r2, #2
 80347b6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80347b8:	4b10      	ldr	r3, [pc, #64]	; (80347fc <USBH_LL_Init+0x84>)
 80347ba:	2200      	movs	r2, #0
 80347bc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80347be:	4b0f      	ldr	r3, [pc, #60]	; (80347fc <USBH_LL_Init+0x84>)
 80347c0:	2200      	movs	r2, #0
 80347c2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80347c4:	4b0d      	ldr	r3, [pc, #52]	; (80347fc <USBH_LL_Init+0x84>)
 80347c6:	2200      	movs	r2, #0
 80347c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80347ca:	4b0c      	ldr	r3, [pc, #48]	; (80347fc <USBH_LL_Init+0x84>)
 80347cc:	2200      	movs	r2, #0
 80347ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80347d0:	480a      	ldr	r0, [pc, #40]	; (80347fc <USBH_LL_Init+0x84>)
 80347d2:	f7f0 f8fe 	bl	80249d2 <HAL_HCD_Init>
 80347d6:	4603      	mov	r3, r0
 80347d8:	2b00      	cmp	r3, #0
 80347da:	d001      	beq.n	80347e0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 80347dc:	f7ed fcea 	bl	80221b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80347e0:	4806      	ldr	r0, [pc, #24]	; (80347fc <USBH_LL_Init+0x84>)
 80347e2:	f7f0 fd01 	bl	80251e8 <HAL_HCD_GetCurrentFrame>
 80347e6:	4603      	mov	r3, r0
 80347e8:	4619      	mov	r1, r3
 80347ea:	6878      	ldr	r0, [r7, #4]
 80347ec:	f7fe fab2 	bl	8032d54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80347f0:	2300      	movs	r3, #0
}
 80347f2:	4618      	mov	r0, r3
 80347f4:	3708      	adds	r7, #8
 80347f6:	46bd      	mov	sp, r7
 80347f8:	bd80      	pop	{r7, pc}
 80347fa:	bf00      	nop
 80347fc:	20007454 	.word	0x20007454
 8034800:	40040000 	.word	0x40040000

08034804 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8034804:	b580      	push	{r7, lr}
 8034806:	b084      	sub	sp, #16
 8034808:	af00      	add	r7, sp, #0
 803480a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803480c:	2300      	movs	r3, #0
 803480e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8034810:	2300      	movs	r3, #0
 8034812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8034814:	687b      	ldr	r3, [r7, #4]
 8034816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 803481a:	4618      	mov	r0, r3
 803481c:	f7f0 fc6c 	bl	80250f8 <HAL_HCD_Start>
 8034820:	4603      	mov	r3, r0
 8034822:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8034824:	7bfb      	ldrb	r3, [r7, #15]
 8034826:	4618      	mov	r0, r3
 8034828:	f000 f990 	bl	8034b4c <USBH_Get_USB_Status>
 803482c:	4603      	mov	r3, r0
 803482e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034830:	7bbb      	ldrb	r3, [r7, #14]
}
 8034832:	4618      	mov	r0, r3
 8034834:	3710      	adds	r7, #16
 8034836:	46bd      	mov	sp, r7
 8034838:	bd80      	pop	{r7, pc}

0803483a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 803483a:	b580      	push	{r7, lr}
 803483c:	b084      	sub	sp, #16
 803483e:	af00      	add	r7, sp, #0
 8034840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034842:	2300      	movs	r3, #0
 8034844:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8034846:	2300      	movs	r3, #0
 8034848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 803484a:	687b      	ldr	r3, [r7, #4]
 803484c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8034850:	4618      	mov	r0, r3
 8034852:	f7f0 fc74 	bl	802513e <HAL_HCD_Stop>
 8034856:	4603      	mov	r3, r0
 8034858:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 803485a:	7bfb      	ldrb	r3, [r7, #15]
 803485c:	4618      	mov	r0, r3
 803485e:	f000 f975 	bl	8034b4c <USBH_Get_USB_Status>
 8034862:	4603      	mov	r3, r0
 8034864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034866:	7bbb      	ldrb	r3, [r7, #14]
}
 8034868:	4618      	mov	r0, r3
 803486a:	3710      	adds	r7, #16
 803486c:	46bd      	mov	sp, r7
 803486e:	bd80      	pop	{r7, pc}

08034870 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8034870:	b580      	push	{r7, lr}
 8034872:	b084      	sub	sp, #16
 8034874:	af00      	add	r7, sp, #0
 8034876:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8034878:	2301      	movs	r3, #1
 803487a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 803487c:	687b      	ldr	r3, [r7, #4]
 803487e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8034882:	4618      	mov	r0, r3
 8034884:	f7f0 fcbe 	bl	8025204 <HAL_HCD_GetCurrentSpeed>
 8034888:	4603      	mov	r3, r0
 803488a:	2b01      	cmp	r3, #1
 803488c:	d007      	beq.n	803489e <USBH_LL_GetSpeed+0x2e>
 803488e:	2b01      	cmp	r3, #1
 8034890:	d302      	bcc.n	8034898 <USBH_LL_GetSpeed+0x28>
 8034892:	2b02      	cmp	r3, #2
 8034894:	d006      	beq.n	80348a4 <USBH_LL_GetSpeed+0x34>
 8034896:	e008      	b.n	80348aa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8034898:	2300      	movs	r3, #0
 803489a:	73fb      	strb	r3, [r7, #15]
    break;
 803489c:	e008      	b.n	80348b0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 803489e:	2301      	movs	r3, #1
 80348a0:	73fb      	strb	r3, [r7, #15]
    break;
 80348a2:	e005      	b.n	80348b0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80348a4:	2302      	movs	r3, #2
 80348a6:	73fb      	strb	r3, [r7, #15]
    break;
 80348a8:	e002      	b.n	80348b0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80348aa:	2301      	movs	r3, #1
 80348ac:	73fb      	strb	r3, [r7, #15]
    break;
 80348ae:	bf00      	nop
  }
  return  speed;
 80348b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80348b2:	4618      	mov	r0, r3
 80348b4:	3710      	adds	r7, #16
 80348b6:	46bd      	mov	sp, r7
 80348b8:	bd80      	pop	{r7, pc}

080348ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80348ba:	b580      	push	{r7, lr}
 80348bc:	b084      	sub	sp, #16
 80348be:	af00      	add	r7, sp, #0
 80348c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80348c2:	2300      	movs	r3, #0
 80348c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80348c6:	2300      	movs	r3, #0
 80348c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80348ca:	687b      	ldr	r3, [r7, #4]
 80348cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80348d0:	4618      	mov	r0, r3
 80348d2:	f7f0 fc51 	bl	8025178 <HAL_HCD_ResetPort>
 80348d6:	4603      	mov	r3, r0
 80348d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80348da:	7bfb      	ldrb	r3, [r7, #15]
 80348dc:	4618      	mov	r0, r3
 80348de:	f000 f935 	bl	8034b4c <USBH_Get_USB_Status>
 80348e2:	4603      	mov	r3, r0
 80348e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80348e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80348e8:	4618      	mov	r0, r3
 80348ea:	3710      	adds	r7, #16
 80348ec:	46bd      	mov	sp, r7
 80348ee:	bd80      	pop	{r7, pc}

080348f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80348f0:	b580      	push	{r7, lr}
 80348f2:	b082      	sub	sp, #8
 80348f4:	af00      	add	r7, sp, #0
 80348f6:	6078      	str	r0, [r7, #4]
 80348f8:	460b      	mov	r3, r1
 80348fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80348fc:	687b      	ldr	r3, [r7, #4]
 80348fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8034902:	78fa      	ldrb	r2, [r7, #3]
 8034904:	4611      	mov	r1, r2
 8034906:	4618      	mov	r0, r3
 8034908:	f7f0 fc59 	bl	80251be <HAL_HCD_HC_GetXferCount>
 803490c:	4603      	mov	r3, r0
}
 803490e:	4618      	mov	r0, r3
 8034910:	3708      	adds	r7, #8
 8034912:	46bd      	mov	sp, r7
 8034914:	bd80      	pop	{r7, pc}

08034916 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8034916:	b590      	push	{r4, r7, lr}
 8034918:	b089      	sub	sp, #36	; 0x24
 803491a:	af04      	add	r7, sp, #16
 803491c:	6078      	str	r0, [r7, #4]
 803491e:	4608      	mov	r0, r1
 8034920:	4611      	mov	r1, r2
 8034922:	461a      	mov	r2, r3
 8034924:	4603      	mov	r3, r0
 8034926:	70fb      	strb	r3, [r7, #3]
 8034928:	460b      	mov	r3, r1
 803492a:	70bb      	strb	r3, [r7, #2]
 803492c:	4613      	mov	r3, r2
 803492e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034930:	2300      	movs	r3, #0
 8034932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8034934:	2300      	movs	r3, #0
 8034936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8034938:	687b      	ldr	r3, [r7, #4]
 803493a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 803493e:	787c      	ldrb	r4, [r7, #1]
 8034940:	78ba      	ldrb	r2, [r7, #2]
 8034942:	78f9      	ldrb	r1, [r7, #3]
 8034944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8034946:	9302      	str	r3, [sp, #8]
 8034948:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 803494c:	9301      	str	r3, [sp, #4]
 803494e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8034952:	9300      	str	r3, [sp, #0]
 8034954:	4623      	mov	r3, r4
 8034956:	f7f0 f89e 	bl	8024a96 <HAL_HCD_HC_Init>
 803495a:	4603      	mov	r3, r0
 803495c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 803495e:	7bfb      	ldrb	r3, [r7, #15]
 8034960:	4618      	mov	r0, r3
 8034962:	f000 f8f3 	bl	8034b4c <USBH_Get_USB_Status>
 8034966:	4603      	mov	r3, r0
 8034968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803496a:	7bbb      	ldrb	r3, [r7, #14]
}
 803496c:	4618      	mov	r0, r3
 803496e:	3714      	adds	r7, #20
 8034970:	46bd      	mov	sp, r7
 8034972:	bd90      	pop	{r4, r7, pc}

08034974 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8034974:	b580      	push	{r7, lr}
 8034976:	b084      	sub	sp, #16
 8034978:	af00      	add	r7, sp, #0
 803497a:	6078      	str	r0, [r7, #4]
 803497c:	460b      	mov	r3, r1
 803497e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034980:	2300      	movs	r3, #0
 8034982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8034984:	2300      	movs	r3, #0
 8034986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8034988:	687b      	ldr	r3, [r7, #4]
 803498a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 803498e:	78fa      	ldrb	r2, [r7, #3]
 8034990:	4611      	mov	r1, r2
 8034992:	4618      	mov	r0, r3
 8034994:	f7f0 f917 	bl	8024bc6 <HAL_HCD_HC_Halt>
 8034998:	4603      	mov	r3, r0
 803499a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 803499c:	7bfb      	ldrb	r3, [r7, #15]
 803499e:	4618      	mov	r0, r3
 80349a0:	f000 f8d4 	bl	8034b4c <USBH_Get_USB_Status>
 80349a4:	4603      	mov	r3, r0
 80349a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80349a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80349aa:	4618      	mov	r0, r3
 80349ac:	3710      	adds	r7, #16
 80349ae:	46bd      	mov	sp, r7
 80349b0:	bd80      	pop	{r7, pc}

080349b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80349b2:	b590      	push	{r4, r7, lr}
 80349b4:	b089      	sub	sp, #36	; 0x24
 80349b6:	af04      	add	r7, sp, #16
 80349b8:	6078      	str	r0, [r7, #4]
 80349ba:	4608      	mov	r0, r1
 80349bc:	4611      	mov	r1, r2
 80349be:	461a      	mov	r2, r3
 80349c0:	4603      	mov	r3, r0
 80349c2:	70fb      	strb	r3, [r7, #3]
 80349c4:	460b      	mov	r3, r1
 80349c6:	70bb      	strb	r3, [r7, #2]
 80349c8:	4613      	mov	r3, r2
 80349ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80349cc:	2300      	movs	r3, #0
 80349ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80349d0:	2300      	movs	r3, #0
 80349d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80349d4:	687b      	ldr	r3, [r7, #4]
 80349d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80349da:	787c      	ldrb	r4, [r7, #1]
 80349dc:	78ba      	ldrb	r2, [r7, #2]
 80349de:	78f9      	ldrb	r1, [r7, #3]
 80349e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80349e4:	9303      	str	r3, [sp, #12]
 80349e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80349e8:	9302      	str	r3, [sp, #8]
 80349ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80349ec:	9301      	str	r3, [sp, #4]
 80349ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80349f2:	9300      	str	r3, [sp, #0]
 80349f4:	4623      	mov	r3, r4
 80349f6:	f7f0 f909 	bl	8024c0c <HAL_HCD_HC_SubmitRequest>
 80349fa:	4603      	mov	r3, r0
 80349fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80349fe:	7bfb      	ldrb	r3, [r7, #15]
 8034a00:	4618      	mov	r0, r3
 8034a02:	f000 f8a3 	bl	8034b4c <USBH_Get_USB_Status>
 8034a06:	4603      	mov	r3, r0
 8034a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8034a0c:	4618      	mov	r0, r3
 8034a0e:	3714      	adds	r7, #20
 8034a10:	46bd      	mov	sp, r7
 8034a12:	bd90      	pop	{r4, r7, pc}

08034a14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8034a14:	b580      	push	{r7, lr}
 8034a16:	b082      	sub	sp, #8
 8034a18:	af00      	add	r7, sp, #0
 8034a1a:	6078      	str	r0, [r7, #4]
 8034a1c:	460b      	mov	r3, r1
 8034a1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8034a20:	687b      	ldr	r3, [r7, #4]
 8034a22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8034a26:	78fa      	ldrb	r2, [r7, #3]
 8034a28:	4611      	mov	r1, r2
 8034a2a:	4618      	mov	r0, r3
 8034a2c:	f7f0 fbb2 	bl	8025194 <HAL_HCD_HC_GetURBState>
 8034a30:	4603      	mov	r3, r0
}
 8034a32:	4618      	mov	r0, r3
 8034a34:	3708      	adds	r7, #8
 8034a36:	46bd      	mov	sp, r7
 8034a38:	bd80      	pop	{r7, pc}

08034a3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8034a3a:	b580      	push	{r7, lr}
 8034a3c:	b082      	sub	sp, #8
 8034a3e:	af00      	add	r7, sp, #0
 8034a40:	6078      	str	r0, [r7, #4]
 8034a42:	460b      	mov	r3, r1
 8034a44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8034a46:	687b      	ldr	r3, [r7, #4]
 8034a48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8034a4c:	2b00      	cmp	r3, #0
 8034a4e:	d103      	bne.n	8034a58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8034a50:	78fb      	ldrb	r3, [r7, #3]
 8034a52:	4618      	mov	r0, r3
 8034a54:	f000 f8a6 	bl	8034ba4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8034a58:	20c8      	movs	r0, #200	; 0xc8
 8034a5a:	f7ee fcd5 	bl	8023408 <HAL_Delay>
  return USBH_OK;
 8034a5e:	2300      	movs	r3, #0
}
 8034a60:	4618      	mov	r0, r3
 8034a62:	3708      	adds	r7, #8
 8034a64:	46bd      	mov	sp, r7
 8034a66:	bd80      	pop	{r7, pc}

08034a68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8034a68:	b480      	push	{r7}
 8034a6a:	b085      	sub	sp, #20
 8034a6c:	af00      	add	r7, sp, #0
 8034a6e:	6078      	str	r0, [r7, #4]
 8034a70:	460b      	mov	r3, r1
 8034a72:	70fb      	strb	r3, [r7, #3]
 8034a74:	4613      	mov	r3, r2
 8034a76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8034a78:	687b      	ldr	r3, [r7, #4]
 8034a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8034a7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8034a80:	78fa      	ldrb	r2, [r7, #3]
 8034a82:	68f9      	ldr	r1, [r7, #12]
 8034a84:	4613      	mov	r3, r2
 8034a86:	009b      	lsls	r3, r3, #2
 8034a88:	4413      	add	r3, r2
 8034a8a:	00db      	lsls	r3, r3, #3
 8034a8c:	440b      	add	r3, r1
 8034a8e:	333b      	adds	r3, #59	; 0x3b
 8034a90:	781b      	ldrb	r3, [r3, #0]
 8034a92:	2b00      	cmp	r3, #0
 8034a94:	d00a      	beq.n	8034aac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8034a96:	78fa      	ldrb	r2, [r7, #3]
 8034a98:	68f9      	ldr	r1, [r7, #12]
 8034a9a:	4613      	mov	r3, r2
 8034a9c:	009b      	lsls	r3, r3, #2
 8034a9e:	4413      	add	r3, r2
 8034aa0:	00db      	lsls	r3, r3, #3
 8034aa2:	440b      	add	r3, r1
 8034aa4:	3350      	adds	r3, #80	; 0x50
 8034aa6:	78ba      	ldrb	r2, [r7, #2]
 8034aa8:	701a      	strb	r2, [r3, #0]
 8034aaa:	e009      	b.n	8034ac0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8034aac:	78fa      	ldrb	r2, [r7, #3]
 8034aae:	68f9      	ldr	r1, [r7, #12]
 8034ab0:	4613      	mov	r3, r2
 8034ab2:	009b      	lsls	r3, r3, #2
 8034ab4:	4413      	add	r3, r2
 8034ab6:	00db      	lsls	r3, r3, #3
 8034ab8:	440b      	add	r3, r1
 8034aba:	3351      	adds	r3, #81	; 0x51
 8034abc:	78ba      	ldrb	r2, [r7, #2]
 8034abe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8034ac0:	2300      	movs	r3, #0
}
 8034ac2:	4618      	mov	r0, r3
 8034ac4:	3714      	adds	r7, #20
 8034ac6:	46bd      	mov	sp, r7
 8034ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034acc:	4770      	bx	lr

08034ace <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8034ace:	b480      	push	{r7}
 8034ad0:	b085      	sub	sp, #20
 8034ad2:	af00      	add	r7, sp, #0
 8034ad4:	6078      	str	r0, [r7, #4]
 8034ad6:	460b      	mov	r3, r1
 8034ad8:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8034ada:	2300      	movs	r3, #0
 8034adc:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8034ade:	687b      	ldr	r3, [r7, #4]
 8034ae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8034ae4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8034ae6:	78fa      	ldrb	r2, [r7, #3]
 8034ae8:	68b9      	ldr	r1, [r7, #8]
 8034aea:	4613      	mov	r3, r2
 8034aec:	009b      	lsls	r3, r3, #2
 8034aee:	4413      	add	r3, r2
 8034af0:	00db      	lsls	r3, r3, #3
 8034af2:	440b      	add	r3, r1
 8034af4:	333b      	adds	r3, #59	; 0x3b
 8034af6:	781b      	ldrb	r3, [r3, #0]
 8034af8:	2b00      	cmp	r3, #0
 8034afa:	d00a      	beq.n	8034b12 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8034afc:	78fa      	ldrb	r2, [r7, #3]
 8034afe:	68b9      	ldr	r1, [r7, #8]
 8034b00:	4613      	mov	r3, r2
 8034b02:	009b      	lsls	r3, r3, #2
 8034b04:	4413      	add	r3, r2
 8034b06:	00db      	lsls	r3, r3, #3
 8034b08:	440b      	add	r3, r1
 8034b0a:	3350      	adds	r3, #80	; 0x50
 8034b0c:	781b      	ldrb	r3, [r3, #0]
 8034b0e:	73fb      	strb	r3, [r7, #15]
 8034b10:	e009      	b.n	8034b26 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8034b12:	78fa      	ldrb	r2, [r7, #3]
 8034b14:	68b9      	ldr	r1, [r7, #8]
 8034b16:	4613      	mov	r3, r2
 8034b18:	009b      	lsls	r3, r3, #2
 8034b1a:	4413      	add	r3, r2
 8034b1c:	00db      	lsls	r3, r3, #3
 8034b1e:	440b      	add	r3, r1
 8034b20:	3351      	adds	r3, #81	; 0x51
 8034b22:	781b      	ldrb	r3, [r3, #0]
 8034b24:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8034b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8034b28:	4618      	mov	r0, r3
 8034b2a:	3714      	adds	r7, #20
 8034b2c:	46bd      	mov	sp, r7
 8034b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b32:	4770      	bx	lr

08034b34 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8034b34:	b580      	push	{r7, lr}
 8034b36:	b082      	sub	sp, #8
 8034b38:	af00      	add	r7, sp, #0
 8034b3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8034b3c:	6878      	ldr	r0, [r7, #4]
 8034b3e:	f7ee fc63 	bl	8023408 <HAL_Delay>
}
 8034b42:	bf00      	nop
 8034b44:	3708      	adds	r7, #8
 8034b46:	46bd      	mov	sp, r7
 8034b48:	bd80      	pop	{r7, pc}
	...

08034b4c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8034b4c:	b480      	push	{r7}
 8034b4e:	b085      	sub	sp, #20
 8034b50:	af00      	add	r7, sp, #0
 8034b52:	4603      	mov	r3, r0
 8034b54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8034b56:	2300      	movs	r3, #0
 8034b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8034b5a:	79fb      	ldrb	r3, [r7, #7]
 8034b5c:	2b03      	cmp	r3, #3
 8034b5e:	d817      	bhi.n	8034b90 <USBH_Get_USB_Status+0x44>
 8034b60:	a201      	add	r2, pc, #4	; (adr r2, 8034b68 <USBH_Get_USB_Status+0x1c>)
 8034b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034b66:	bf00      	nop
 8034b68:	08034b79 	.word	0x08034b79
 8034b6c:	08034b7f 	.word	0x08034b7f
 8034b70:	08034b85 	.word	0x08034b85
 8034b74:	08034b8b 	.word	0x08034b8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8034b78:	2300      	movs	r3, #0
 8034b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8034b7c:	e00b      	b.n	8034b96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8034b7e:	2302      	movs	r3, #2
 8034b80:	73fb      	strb	r3, [r7, #15]
    break;
 8034b82:	e008      	b.n	8034b96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8034b84:	2301      	movs	r3, #1
 8034b86:	73fb      	strb	r3, [r7, #15]
    break;
 8034b88:	e005      	b.n	8034b96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8034b8a:	2302      	movs	r3, #2
 8034b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8034b8e:	e002      	b.n	8034b96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8034b90:	2302      	movs	r3, #2
 8034b92:	73fb      	strb	r3, [r7, #15]
    break;
 8034b94:	bf00      	nop
  }
  return usb_status;
 8034b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8034b98:	4618      	mov	r0, r3
 8034b9a:	3714      	adds	r7, #20
 8034b9c:	46bd      	mov	sp, r7
 8034b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ba2:	4770      	bx	lr

08034ba4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8034ba4:	b580      	push	{r7, lr}
 8034ba6:	b084      	sub	sp, #16
 8034ba8:	af00      	add	r7, sp, #0
 8034baa:	4603      	mov	r3, r0
 8034bac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8034bae:	79fb      	ldrb	r3, [r7, #7]
 8034bb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8034bb2:	79fb      	ldrb	r3, [r7, #7]
 8034bb4:	2b00      	cmp	r3, #0
 8034bb6:	d102      	bne.n	8034bbe <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8034bb8:	2301      	movs	r3, #1
 8034bba:	73fb      	strb	r3, [r7, #15]
 8034bbc:	e001      	b.n	8034bc2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8034bbe:	2300      	movs	r3, #0
 8034bc0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,(GPIO_PinState)data);
 8034bc2:	7bfb      	ldrb	r3, [r7, #15]
 8034bc4:	461a      	mov	r2, r3
 8034bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8034bca:	4803      	ldr	r0, [pc, #12]	; (8034bd8 <MX_DriverVbusHS+0x34>)
 8034bcc:	f7ef fee8 	bl	80249a0 <HAL_GPIO_WritePin>
}
 8034bd0:	bf00      	nop
 8034bd2:	3710      	adds	r7, #16
 8034bd4:	46bd      	mov	sp, r7
 8034bd6:	bd80      	pop	{r7, pc}
 8034bd8:	40021000 	.word	0x40021000

08034bdc <__errno>:
 8034bdc:	4b01      	ldr	r3, [pc, #4]	; (8034be4 <__errno+0x8>)
 8034bde:	6818      	ldr	r0, [r3, #0]
 8034be0:	4770      	bx	lr
 8034be2:	bf00      	nop
 8034be4:	200001a0 	.word	0x200001a0

08034be8 <__libc_init_array>:
 8034be8:	b570      	push	{r4, r5, r6, lr}
 8034bea:	4e0d      	ldr	r6, [pc, #52]	; (8034c20 <__libc_init_array+0x38>)
 8034bec:	4c0d      	ldr	r4, [pc, #52]	; (8034c24 <__libc_init_array+0x3c>)
 8034bee:	1ba4      	subs	r4, r4, r6
 8034bf0:	10a4      	asrs	r4, r4, #2
 8034bf2:	2500      	movs	r5, #0
 8034bf4:	42a5      	cmp	r5, r4
 8034bf6:	d109      	bne.n	8034c0c <__libc_init_array+0x24>
 8034bf8:	4e0b      	ldr	r6, [pc, #44]	; (8034c28 <__libc_init_array+0x40>)
 8034bfa:	4c0c      	ldr	r4, [pc, #48]	; (8034c2c <__libc_init_array+0x44>)
 8034bfc:	f002 fe04 	bl	8037808 <_init>
 8034c00:	1ba4      	subs	r4, r4, r6
 8034c02:	10a4      	asrs	r4, r4, #2
 8034c04:	2500      	movs	r5, #0
 8034c06:	42a5      	cmp	r5, r4
 8034c08:	d105      	bne.n	8034c16 <__libc_init_array+0x2e>
 8034c0a:	bd70      	pop	{r4, r5, r6, pc}
 8034c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8034c10:	4798      	blx	r3
 8034c12:	3501      	adds	r5, #1
 8034c14:	e7ee      	b.n	8034bf4 <__libc_init_array+0xc>
 8034c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8034c1a:	4798      	blx	r3
 8034c1c:	3501      	adds	r5, #1
 8034c1e:	e7f2      	b.n	8034c06 <__libc_init_array+0x1e>
 8034c20:	08038638 	.word	0x08038638
 8034c24:	08038638 	.word	0x08038638
 8034c28:	08038638 	.word	0x08038638
 8034c2c:	0803863c 	.word	0x0803863c

08034c30 <malloc>:
 8034c30:	4b02      	ldr	r3, [pc, #8]	; (8034c3c <malloc+0xc>)
 8034c32:	4601      	mov	r1, r0
 8034c34:	6818      	ldr	r0, [r3, #0]
 8034c36:	f000 b86d 	b.w	8034d14 <_malloc_r>
 8034c3a:	bf00      	nop
 8034c3c:	200001a0 	.word	0x200001a0

08034c40 <free>:
 8034c40:	4b02      	ldr	r3, [pc, #8]	; (8034c4c <free+0xc>)
 8034c42:	4601      	mov	r1, r0
 8034c44:	6818      	ldr	r0, [r3, #0]
 8034c46:	f000 b817 	b.w	8034c78 <_free_r>
 8034c4a:	bf00      	nop
 8034c4c:	200001a0 	.word	0x200001a0

08034c50 <memcpy>:
 8034c50:	b510      	push	{r4, lr}
 8034c52:	1e43      	subs	r3, r0, #1
 8034c54:	440a      	add	r2, r1
 8034c56:	4291      	cmp	r1, r2
 8034c58:	d100      	bne.n	8034c5c <memcpy+0xc>
 8034c5a:	bd10      	pop	{r4, pc}
 8034c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8034c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8034c64:	e7f7      	b.n	8034c56 <memcpy+0x6>

08034c66 <memset>:
 8034c66:	4402      	add	r2, r0
 8034c68:	4603      	mov	r3, r0
 8034c6a:	4293      	cmp	r3, r2
 8034c6c:	d100      	bne.n	8034c70 <memset+0xa>
 8034c6e:	4770      	bx	lr
 8034c70:	f803 1b01 	strb.w	r1, [r3], #1
 8034c74:	e7f9      	b.n	8034c6a <memset+0x4>
	...

08034c78 <_free_r>:
 8034c78:	b538      	push	{r3, r4, r5, lr}
 8034c7a:	4605      	mov	r5, r0
 8034c7c:	2900      	cmp	r1, #0
 8034c7e:	d045      	beq.n	8034d0c <_free_r+0x94>
 8034c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8034c84:	1f0c      	subs	r4, r1, #4
 8034c86:	2b00      	cmp	r3, #0
 8034c88:	bfb8      	it	lt
 8034c8a:	18e4      	addlt	r4, r4, r3
 8034c8c:	f001 fe34 	bl	80368f8 <__malloc_lock>
 8034c90:	4a1f      	ldr	r2, [pc, #124]	; (8034d10 <_free_r+0x98>)
 8034c92:	6813      	ldr	r3, [r2, #0]
 8034c94:	4610      	mov	r0, r2
 8034c96:	b933      	cbnz	r3, 8034ca6 <_free_r+0x2e>
 8034c98:	6063      	str	r3, [r4, #4]
 8034c9a:	6014      	str	r4, [r2, #0]
 8034c9c:	4628      	mov	r0, r5
 8034c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034ca2:	f001 be2a 	b.w	80368fa <__malloc_unlock>
 8034ca6:	42a3      	cmp	r3, r4
 8034ca8:	d90c      	bls.n	8034cc4 <_free_r+0x4c>
 8034caa:	6821      	ldr	r1, [r4, #0]
 8034cac:	1862      	adds	r2, r4, r1
 8034cae:	4293      	cmp	r3, r2
 8034cb0:	bf04      	itt	eq
 8034cb2:	681a      	ldreq	r2, [r3, #0]
 8034cb4:	685b      	ldreq	r3, [r3, #4]
 8034cb6:	6063      	str	r3, [r4, #4]
 8034cb8:	bf04      	itt	eq
 8034cba:	1852      	addeq	r2, r2, r1
 8034cbc:	6022      	streq	r2, [r4, #0]
 8034cbe:	6004      	str	r4, [r0, #0]
 8034cc0:	e7ec      	b.n	8034c9c <_free_r+0x24>
 8034cc2:	4613      	mov	r3, r2
 8034cc4:	685a      	ldr	r2, [r3, #4]
 8034cc6:	b10a      	cbz	r2, 8034ccc <_free_r+0x54>
 8034cc8:	42a2      	cmp	r2, r4
 8034cca:	d9fa      	bls.n	8034cc2 <_free_r+0x4a>
 8034ccc:	6819      	ldr	r1, [r3, #0]
 8034cce:	1858      	adds	r0, r3, r1
 8034cd0:	42a0      	cmp	r0, r4
 8034cd2:	d10b      	bne.n	8034cec <_free_r+0x74>
 8034cd4:	6820      	ldr	r0, [r4, #0]
 8034cd6:	4401      	add	r1, r0
 8034cd8:	1858      	adds	r0, r3, r1
 8034cda:	4282      	cmp	r2, r0
 8034cdc:	6019      	str	r1, [r3, #0]
 8034cde:	d1dd      	bne.n	8034c9c <_free_r+0x24>
 8034ce0:	6810      	ldr	r0, [r2, #0]
 8034ce2:	6852      	ldr	r2, [r2, #4]
 8034ce4:	605a      	str	r2, [r3, #4]
 8034ce6:	4401      	add	r1, r0
 8034ce8:	6019      	str	r1, [r3, #0]
 8034cea:	e7d7      	b.n	8034c9c <_free_r+0x24>
 8034cec:	d902      	bls.n	8034cf4 <_free_r+0x7c>
 8034cee:	230c      	movs	r3, #12
 8034cf0:	602b      	str	r3, [r5, #0]
 8034cf2:	e7d3      	b.n	8034c9c <_free_r+0x24>
 8034cf4:	6820      	ldr	r0, [r4, #0]
 8034cf6:	1821      	adds	r1, r4, r0
 8034cf8:	428a      	cmp	r2, r1
 8034cfa:	bf04      	itt	eq
 8034cfc:	6811      	ldreq	r1, [r2, #0]
 8034cfe:	6852      	ldreq	r2, [r2, #4]
 8034d00:	6062      	str	r2, [r4, #4]
 8034d02:	bf04      	itt	eq
 8034d04:	1809      	addeq	r1, r1, r0
 8034d06:	6021      	streq	r1, [r4, #0]
 8034d08:	605c      	str	r4, [r3, #4]
 8034d0a:	e7c7      	b.n	8034c9c <_free_r+0x24>
 8034d0c:	bd38      	pop	{r3, r4, r5, pc}
 8034d0e:	bf00      	nop
 8034d10:	200013c0 	.word	0x200013c0

08034d14 <_malloc_r>:
 8034d14:	b570      	push	{r4, r5, r6, lr}
 8034d16:	1ccd      	adds	r5, r1, #3
 8034d18:	f025 0503 	bic.w	r5, r5, #3
 8034d1c:	3508      	adds	r5, #8
 8034d1e:	2d0c      	cmp	r5, #12
 8034d20:	bf38      	it	cc
 8034d22:	250c      	movcc	r5, #12
 8034d24:	2d00      	cmp	r5, #0
 8034d26:	4606      	mov	r6, r0
 8034d28:	db01      	blt.n	8034d2e <_malloc_r+0x1a>
 8034d2a:	42a9      	cmp	r1, r5
 8034d2c:	d903      	bls.n	8034d36 <_malloc_r+0x22>
 8034d2e:	230c      	movs	r3, #12
 8034d30:	6033      	str	r3, [r6, #0]
 8034d32:	2000      	movs	r0, #0
 8034d34:	bd70      	pop	{r4, r5, r6, pc}
 8034d36:	f001 fddf 	bl	80368f8 <__malloc_lock>
 8034d3a:	4a21      	ldr	r2, [pc, #132]	; (8034dc0 <_malloc_r+0xac>)
 8034d3c:	6814      	ldr	r4, [r2, #0]
 8034d3e:	4621      	mov	r1, r4
 8034d40:	b991      	cbnz	r1, 8034d68 <_malloc_r+0x54>
 8034d42:	4c20      	ldr	r4, [pc, #128]	; (8034dc4 <_malloc_r+0xb0>)
 8034d44:	6823      	ldr	r3, [r4, #0]
 8034d46:	b91b      	cbnz	r3, 8034d50 <_malloc_r+0x3c>
 8034d48:	4630      	mov	r0, r6
 8034d4a:	f000 fcc5 	bl	80356d8 <_sbrk_r>
 8034d4e:	6020      	str	r0, [r4, #0]
 8034d50:	4629      	mov	r1, r5
 8034d52:	4630      	mov	r0, r6
 8034d54:	f000 fcc0 	bl	80356d8 <_sbrk_r>
 8034d58:	1c43      	adds	r3, r0, #1
 8034d5a:	d124      	bne.n	8034da6 <_malloc_r+0x92>
 8034d5c:	230c      	movs	r3, #12
 8034d5e:	6033      	str	r3, [r6, #0]
 8034d60:	4630      	mov	r0, r6
 8034d62:	f001 fdca 	bl	80368fa <__malloc_unlock>
 8034d66:	e7e4      	b.n	8034d32 <_malloc_r+0x1e>
 8034d68:	680b      	ldr	r3, [r1, #0]
 8034d6a:	1b5b      	subs	r3, r3, r5
 8034d6c:	d418      	bmi.n	8034da0 <_malloc_r+0x8c>
 8034d6e:	2b0b      	cmp	r3, #11
 8034d70:	d90f      	bls.n	8034d92 <_malloc_r+0x7e>
 8034d72:	600b      	str	r3, [r1, #0]
 8034d74:	50cd      	str	r5, [r1, r3]
 8034d76:	18cc      	adds	r4, r1, r3
 8034d78:	4630      	mov	r0, r6
 8034d7a:	f001 fdbe 	bl	80368fa <__malloc_unlock>
 8034d7e:	f104 000b 	add.w	r0, r4, #11
 8034d82:	1d23      	adds	r3, r4, #4
 8034d84:	f020 0007 	bic.w	r0, r0, #7
 8034d88:	1ac3      	subs	r3, r0, r3
 8034d8a:	d0d3      	beq.n	8034d34 <_malloc_r+0x20>
 8034d8c:	425a      	negs	r2, r3
 8034d8e:	50e2      	str	r2, [r4, r3]
 8034d90:	e7d0      	b.n	8034d34 <_malloc_r+0x20>
 8034d92:	428c      	cmp	r4, r1
 8034d94:	684b      	ldr	r3, [r1, #4]
 8034d96:	bf16      	itet	ne
 8034d98:	6063      	strne	r3, [r4, #4]
 8034d9a:	6013      	streq	r3, [r2, #0]
 8034d9c:	460c      	movne	r4, r1
 8034d9e:	e7eb      	b.n	8034d78 <_malloc_r+0x64>
 8034da0:	460c      	mov	r4, r1
 8034da2:	6849      	ldr	r1, [r1, #4]
 8034da4:	e7cc      	b.n	8034d40 <_malloc_r+0x2c>
 8034da6:	1cc4      	adds	r4, r0, #3
 8034da8:	f024 0403 	bic.w	r4, r4, #3
 8034dac:	42a0      	cmp	r0, r4
 8034dae:	d005      	beq.n	8034dbc <_malloc_r+0xa8>
 8034db0:	1a21      	subs	r1, r4, r0
 8034db2:	4630      	mov	r0, r6
 8034db4:	f000 fc90 	bl	80356d8 <_sbrk_r>
 8034db8:	3001      	adds	r0, #1
 8034dba:	d0cf      	beq.n	8034d5c <_malloc_r+0x48>
 8034dbc:	6025      	str	r5, [r4, #0]
 8034dbe:	e7db      	b.n	8034d78 <_malloc_r+0x64>
 8034dc0:	200013c0 	.word	0x200013c0
 8034dc4:	200013c4 	.word	0x200013c4

08034dc8 <__cvt>:
 8034dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8034dcc:	ec55 4b10 	vmov	r4, r5, d0
 8034dd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8034dd2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8034dd6:	2d00      	cmp	r5, #0
 8034dd8:	460e      	mov	r6, r1
 8034dda:	4691      	mov	r9, r2
 8034ddc:	4619      	mov	r1, r3
 8034dde:	bfb8      	it	lt
 8034de0:	4622      	movlt	r2, r4
 8034de2:	462b      	mov	r3, r5
 8034de4:	f027 0720 	bic.w	r7, r7, #32
 8034de8:	bfbb      	ittet	lt
 8034dea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8034dee:	461d      	movlt	r5, r3
 8034df0:	2300      	movge	r3, #0
 8034df2:	232d      	movlt	r3, #45	; 0x2d
 8034df4:	bfb8      	it	lt
 8034df6:	4614      	movlt	r4, r2
 8034df8:	2f46      	cmp	r7, #70	; 0x46
 8034dfa:	700b      	strb	r3, [r1, #0]
 8034dfc:	d004      	beq.n	8034e08 <__cvt+0x40>
 8034dfe:	2f45      	cmp	r7, #69	; 0x45
 8034e00:	d100      	bne.n	8034e04 <__cvt+0x3c>
 8034e02:	3601      	adds	r6, #1
 8034e04:	2102      	movs	r1, #2
 8034e06:	e000      	b.n	8034e0a <__cvt+0x42>
 8034e08:	2103      	movs	r1, #3
 8034e0a:	ab03      	add	r3, sp, #12
 8034e0c:	9301      	str	r3, [sp, #4]
 8034e0e:	ab02      	add	r3, sp, #8
 8034e10:	9300      	str	r3, [sp, #0]
 8034e12:	4632      	mov	r2, r6
 8034e14:	4653      	mov	r3, sl
 8034e16:	ec45 4b10 	vmov	d0, r4, r5
 8034e1a:	f000 fdc9 	bl	80359b0 <_dtoa_r>
 8034e1e:	2f47      	cmp	r7, #71	; 0x47
 8034e20:	4680      	mov	r8, r0
 8034e22:	d102      	bne.n	8034e2a <__cvt+0x62>
 8034e24:	f019 0f01 	tst.w	r9, #1
 8034e28:	d026      	beq.n	8034e78 <__cvt+0xb0>
 8034e2a:	2f46      	cmp	r7, #70	; 0x46
 8034e2c:	eb08 0906 	add.w	r9, r8, r6
 8034e30:	d111      	bne.n	8034e56 <__cvt+0x8e>
 8034e32:	f898 3000 	ldrb.w	r3, [r8]
 8034e36:	2b30      	cmp	r3, #48	; 0x30
 8034e38:	d10a      	bne.n	8034e50 <__cvt+0x88>
 8034e3a:	2200      	movs	r2, #0
 8034e3c:	2300      	movs	r3, #0
 8034e3e:	4620      	mov	r0, r4
 8034e40:	4629      	mov	r1, r5
 8034e42:	f7eb fe41 	bl	8020ac8 <__aeabi_dcmpeq>
 8034e46:	b918      	cbnz	r0, 8034e50 <__cvt+0x88>
 8034e48:	f1c6 0601 	rsb	r6, r6, #1
 8034e4c:	f8ca 6000 	str.w	r6, [sl]
 8034e50:	f8da 3000 	ldr.w	r3, [sl]
 8034e54:	4499      	add	r9, r3
 8034e56:	2200      	movs	r2, #0
 8034e58:	2300      	movs	r3, #0
 8034e5a:	4620      	mov	r0, r4
 8034e5c:	4629      	mov	r1, r5
 8034e5e:	f7eb fe33 	bl	8020ac8 <__aeabi_dcmpeq>
 8034e62:	b938      	cbnz	r0, 8034e74 <__cvt+0xac>
 8034e64:	2230      	movs	r2, #48	; 0x30
 8034e66:	9b03      	ldr	r3, [sp, #12]
 8034e68:	454b      	cmp	r3, r9
 8034e6a:	d205      	bcs.n	8034e78 <__cvt+0xb0>
 8034e6c:	1c59      	adds	r1, r3, #1
 8034e6e:	9103      	str	r1, [sp, #12]
 8034e70:	701a      	strb	r2, [r3, #0]
 8034e72:	e7f8      	b.n	8034e66 <__cvt+0x9e>
 8034e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8034e78:	9b03      	ldr	r3, [sp, #12]
 8034e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8034e7c:	eba3 0308 	sub.w	r3, r3, r8
 8034e80:	4640      	mov	r0, r8
 8034e82:	6013      	str	r3, [r2, #0]
 8034e84:	b004      	add	sp, #16
 8034e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08034e8a <__exponent>:
 8034e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8034e8c:	2900      	cmp	r1, #0
 8034e8e:	4604      	mov	r4, r0
 8034e90:	bfba      	itte	lt
 8034e92:	4249      	neglt	r1, r1
 8034e94:	232d      	movlt	r3, #45	; 0x2d
 8034e96:	232b      	movge	r3, #43	; 0x2b
 8034e98:	2909      	cmp	r1, #9
 8034e9a:	f804 2b02 	strb.w	r2, [r4], #2
 8034e9e:	7043      	strb	r3, [r0, #1]
 8034ea0:	dd20      	ble.n	8034ee4 <__exponent+0x5a>
 8034ea2:	f10d 0307 	add.w	r3, sp, #7
 8034ea6:	461f      	mov	r7, r3
 8034ea8:	260a      	movs	r6, #10
 8034eaa:	fb91 f5f6 	sdiv	r5, r1, r6
 8034eae:	fb06 1115 	mls	r1, r6, r5, r1
 8034eb2:	3130      	adds	r1, #48	; 0x30
 8034eb4:	2d09      	cmp	r5, #9
 8034eb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8034eba:	f103 32ff 	add.w	r2, r3, #4294967295
 8034ebe:	4629      	mov	r1, r5
 8034ec0:	dc09      	bgt.n	8034ed6 <__exponent+0x4c>
 8034ec2:	3130      	adds	r1, #48	; 0x30
 8034ec4:	3b02      	subs	r3, #2
 8034ec6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8034eca:	42bb      	cmp	r3, r7
 8034ecc:	4622      	mov	r2, r4
 8034ece:	d304      	bcc.n	8034eda <__exponent+0x50>
 8034ed0:	1a10      	subs	r0, r2, r0
 8034ed2:	b003      	add	sp, #12
 8034ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8034ed6:	4613      	mov	r3, r2
 8034ed8:	e7e7      	b.n	8034eaa <__exponent+0x20>
 8034eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8034ede:	f804 2b01 	strb.w	r2, [r4], #1
 8034ee2:	e7f2      	b.n	8034eca <__exponent+0x40>
 8034ee4:	2330      	movs	r3, #48	; 0x30
 8034ee6:	4419      	add	r1, r3
 8034ee8:	7083      	strb	r3, [r0, #2]
 8034eea:	1d02      	adds	r2, r0, #4
 8034eec:	70c1      	strb	r1, [r0, #3]
 8034eee:	e7ef      	b.n	8034ed0 <__exponent+0x46>

08034ef0 <_printf_float>:
 8034ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034ef4:	b08d      	sub	sp, #52	; 0x34
 8034ef6:	460c      	mov	r4, r1
 8034ef8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8034efc:	4616      	mov	r6, r2
 8034efe:	461f      	mov	r7, r3
 8034f00:	4605      	mov	r5, r0
 8034f02:	f001 fc87 	bl	8036814 <_localeconv_r>
 8034f06:	6803      	ldr	r3, [r0, #0]
 8034f08:	9304      	str	r3, [sp, #16]
 8034f0a:	4618      	mov	r0, r3
 8034f0c:	f7eb f960 	bl	80201d0 <strlen>
 8034f10:	2300      	movs	r3, #0
 8034f12:	930a      	str	r3, [sp, #40]	; 0x28
 8034f14:	f8d8 3000 	ldr.w	r3, [r8]
 8034f18:	9005      	str	r0, [sp, #20]
 8034f1a:	3307      	adds	r3, #7
 8034f1c:	f023 0307 	bic.w	r3, r3, #7
 8034f20:	f103 0208 	add.w	r2, r3, #8
 8034f24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8034f28:	f8d4 b000 	ldr.w	fp, [r4]
 8034f2c:	f8c8 2000 	str.w	r2, [r8]
 8034f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034f34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8034f38:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8034f3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8034f40:	9307      	str	r3, [sp, #28]
 8034f42:	f8cd 8018 	str.w	r8, [sp, #24]
 8034f46:	f04f 32ff 	mov.w	r2, #4294967295
 8034f4a:	4ba7      	ldr	r3, [pc, #668]	; (80351e8 <_printf_float+0x2f8>)
 8034f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8034f50:	f7eb fdec 	bl	8020b2c <__aeabi_dcmpun>
 8034f54:	bb70      	cbnz	r0, 8034fb4 <_printf_float+0xc4>
 8034f56:	f04f 32ff 	mov.w	r2, #4294967295
 8034f5a:	4ba3      	ldr	r3, [pc, #652]	; (80351e8 <_printf_float+0x2f8>)
 8034f5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8034f60:	f7eb fdc6 	bl	8020af0 <__aeabi_dcmple>
 8034f64:	bb30      	cbnz	r0, 8034fb4 <_printf_float+0xc4>
 8034f66:	2200      	movs	r2, #0
 8034f68:	2300      	movs	r3, #0
 8034f6a:	4640      	mov	r0, r8
 8034f6c:	4649      	mov	r1, r9
 8034f6e:	f7eb fdb5 	bl	8020adc <__aeabi_dcmplt>
 8034f72:	b110      	cbz	r0, 8034f7a <_printf_float+0x8a>
 8034f74:	232d      	movs	r3, #45	; 0x2d
 8034f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8034f7a:	4a9c      	ldr	r2, [pc, #624]	; (80351ec <_printf_float+0x2fc>)
 8034f7c:	4b9c      	ldr	r3, [pc, #624]	; (80351f0 <_printf_float+0x300>)
 8034f7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8034f82:	bf8c      	ite	hi
 8034f84:	4690      	movhi	r8, r2
 8034f86:	4698      	movls	r8, r3
 8034f88:	2303      	movs	r3, #3
 8034f8a:	f02b 0204 	bic.w	r2, fp, #4
 8034f8e:	6123      	str	r3, [r4, #16]
 8034f90:	6022      	str	r2, [r4, #0]
 8034f92:	f04f 0900 	mov.w	r9, #0
 8034f96:	9700      	str	r7, [sp, #0]
 8034f98:	4633      	mov	r3, r6
 8034f9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8034f9c:	4621      	mov	r1, r4
 8034f9e:	4628      	mov	r0, r5
 8034fa0:	f000 f9e6 	bl	8035370 <_printf_common>
 8034fa4:	3001      	adds	r0, #1
 8034fa6:	f040 808d 	bne.w	80350c4 <_printf_float+0x1d4>
 8034faa:	f04f 30ff 	mov.w	r0, #4294967295
 8034fae:	b00d      	add	sp, #52	; 0x34
 8034fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034fb4:	4642      	mov	r2, r8
 8034fb6:	464b      	mov	r3, r9
 8034fb8:	4640      	mov	r0, r8
 8034fba:	4649      	mov	r1, r9
 8034fbc:	f7eb fdb6 	bl	8020b2c <__aeabi_dcmpun>
 8034fc0:	b110      	cbz	r0, 8034fc8 <_printf_float+0xd8>
 8034fc2:	4a8c      	ldr	r2, [pc, #560]	; (80351f4 <_printf_float+0x304>)
 8034fc4:	4b8c      	ldr	r3, [pc, #560]	; (80351f8 <_printf_float+0x308>)
 8034fc6:	e7da      	b.n	8034f7e <_printf_float+0x8e>
 8034fc8:	6861      	ldr	r1, [r4, #4]
 8034fca:	1c4b      	adds	r3, r1, #1
 8034fcc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8034fd0:	a80a      	add	r0, sp, #40	; 0x28
 8034fd2:	d13e      	bne.n	8035052 <_printf_float+0x162>
 8034fd4:	2306      	movs	r3, #6
 8034fd6:	6063      	str	r3, [r4, #4]
 8034fd8:	2300      	movs	r3, #0
 8034fda:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8034fde:	ab09      	add	r3, sp, #36	; 0x24
 8034fe0:	9300      	str	r3, [sp, #0]
 8034fe2:	ec49 8b10 	vmov	d0, r8, r9
 8034fe6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8034fea:	6022      	str	r2, [r4, #0]
 8034fec:	f8cd a004 	str.w	sl, [sp, #4]
 8034ff0:	6861      	ldr	r1, [r4, #4]
 8034ff2:	4628      	mov	r0, r5
 8034ff4:	f7ff fee8 	bl	8034dc8 <__cvt>
 8034ff8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8034ffc:	2b47      	cmp	r3, #71	; 0x47
 8034ffe:	4680      	mov	r8, r0
 8035000:	d109      	bne.n	8035016 <_printf_float+0x126>
 8035002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8035004:	1cd8      	adds	r0, r3, #3
 8035006:	db02      	blt.n	803500e <_printf_float+0x11e>
 8035008:	6862      	ldr	r2, [r4, #4]
 803500a:	4293      	cmp	r3, r2
 803500c:	dd47      	ble.n	803509e <_printf_float+0x1ae>
 803500e:	f1aa 0a02 	sub.w	sl, sl, #2
 8035012:	fa5f fa8a 	uxtb.w	sl, sl
 8035016:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 803501a:	9909      	ldr	r1, [sp, #36]	; 0x24
 803501c:	d824      	bhi.n	8035068 <_printf_float+0x178>
 803501e:	3901      	subs	r1, #1
 8035020:	4652      	mov	r2, sl
 8035022:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8035026:	9109      	str	r1, [sp, #36]	; 0x24
 8035028:	f7ff ff2f 	bl	8034e8a <__exponent>
 803502c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803502e:	1813      	adds	r3, r2, r0
 8035030:	2a01      	cmp	r2, #1
 8035032:	4681      	mov	r9, r0
 8035034:	6123      	str	r3, [r4, #16]
 8035036:	dc02      	bgt.n	803503e <_printf_float+0x14e>
 8035038:	6822      	ldr	r2, [r4, #0]
 803503a:	07d1      	lsls	r1, r2, #31
 803503c:	d501      	bpl.n	8035042 <_printf_float+0x152>
 803503e:	3301      	adds	r3, #1
 8035040:	6123      	str	r3, [r4, #16]
 8035042:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8035046:	2b00      	cmp	r3, #0
 8035048:	d0a5      	beq.n	8034f96 <_printf_float+0xa6>
 803504a:	232d      	movs	r3, #45	; 0x2d
 803504c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8035050:	e7a1      	b.n	8034f96 <_printf_float+0xa6>
 8035052:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8035056:	f000 8177 	beq.w	8035348 <_printf_float+0x458>
 803505a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 803505e:	d1bb      	bne.n	8034fd8 <_printf_float+0xe8>
 8035060:	2900      	cmp	r1, #0
 8035062:	d1b9      	bne.n	8034fd8 <_printf_float+0xe8>
 8035064:	2301      	movs	r3, #1
 8035066:	e7b6      	b.n	8034fd6 <_printf_float+0xe6>
 8035068:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 803506c:	d119      	bne.n	80350a2 <_printf_float+0x1b2>
 803506e:	2900      	cmp	r1, #0
 8035070:	6863      	ldr	r3, [r4, #4]
 8035072:	dd0c      	ble.n	803508e <_printf_float+0x19e>
 8035074:	6121      	str	r1, [r4, #16]
 8035076:	b913      	cbnz	r3, 803507e <_printf_float+0x18e>
 8035078:	6822      	ldr	r2, [r4, #0]
 803507a:	07d2      	lsls	r2, r2, #31
 803507c:	d502      	bpl.n	8035084 <_printf_float+0x194>
 803507e:	3301      	adds	r3, #1
 8035080:	440b      	add	r3, r1
 8035082:	6123      	str	r3, [r4, #16]
 8035084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8035086:	65a3      	str	r3, [r4, #88]	; 0x58
 8035088:	f04f 0900 	mov.w	r9, #0
 803508c:	e7d9      	b.n	8035042 <_printf_float+0x152>
 803508e:	b913      	cbnz	r3, 8035096 <_printf_float+0x1a6>
 8035090:	6822      	ldr	r2, [r4, #0]
 8035092:	07d0      	lsls	r0, r2, #31
 8035094:	d501      	bpl.n	803509a <_printf_float+0x1aa>
 8035096:	3302      	adds	r3, #2
 8035098:	e7f3      	b.n	8035082 <_printf_float+0x192>
 803509a:	2301      	movs	r3, #1
 803509c:	e7f1      	b.n	8035082 <_printf_float+0x192>
 803509e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80350a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80350a6:	4293      	cmp	r3, r2
 80350a8:	db05      	blt.n	80350b6 <_printf_float+0x1c6>
 80350aa:	6822      	ldr	r2, [r4, #0]
 80350ac:	6123      	str	r3, [r4, #16]
 80350ae:	07d1      	lsls	r1, r2, #31
 80350b0:	d5e8      	bpl.n	8035084 <_printf_float+0x194>
 80350b2:	3301      	adds	r3, #1
 80350b4:	e7e5      	b.n	8035082 <_printf_float+0x192>
 80350b6:	2b00      	cmp	r3, #0
 80350b8:	bfd4      	ite	le
 80350ba:	f1c3 0302 	rsble	r3, r3, #2
 80350be:	2301      	movgt	r3, #1
 80350c0:	4413      	add	r3, r2
 80350c2:	e7de      	b.n	8035082 <_printf_float+0x192>
 80350c4:	6823      	ldr	r3, [r4, #0]
 80350c6:	055a      	lsls	r2, r3, #21
 80350c8:	d407      	bmi.n	80350da <_printf_float+0x1ea>
 80350ca:	6923      	ldr	r3, [r4, #16]
 80350cc:	4642      	mov	r2, r8
 80350ce:	4631      	mov	r1, r6
 80350d0:	4628      	mov	r0, r5
 80350d2:	47b8      	blx	r7
 80350d4:	3001      	adds	r0, #1
 80350d6:	d12b      	bne.n	8035130 <_printf_float+0x240>
 80350d8:	e767      	b.n	8034faa <_printf_float+0xba>
 80350da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80350de:	f240 80dc 	bls.w	803529a <_printf_float+0x3aa>
 80350e2:	2200      	movs	r2, #0
 80350e4:	2300      	movs	r3, #0
 80350e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80350ea:	f7eb fced 	bl	8020ac8 <__aeabi_dcmpeq>
 80350ee:	2800      	cmp	r0, #0
 80350f0:	d033      	beq.n	803515a <_printf_float+0x26a>
 80350f2:	2301      	movs	r3, #1
 80350f4:	4a41      	ldr	r2, [pc, #260]	; (80351fc <_printf_float+0x30c>)
 80350f6:	4631      	mov	r1, r6
 80350f8:	4628      	mov	r0, r5
 80350fa:	47b8      	blx	r7
 80350fc:	3001      	adds	r0, #1
 80350fe:	f43f af54 	beq.w	8034faa <_printf_float+0xba>
 8035102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8035106:	429a      	cmp	r2, r3
 8035108:	db02      	blt.n	8035110 <_printf_float+0x220>
 803510a:	6823      	ldr	r3, [r4, #0]
 803510c:	07d8      	lsls	r0, r3, #31
 803510e:	d50f      	bpl.n	8035130 <_printf_float+0x240>
 8035110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8035114:	4631      	mov	r1, r6
 8035116:	4628      	mov	r0, r5
 8035118:	47b8      	blx	r7
 803511a:	3001      	adds	r0, #1
 803511c:	f43f af45 	beq.w	8034faa <_printf_float+0xba>
 8035120:	f04f 0800 	mov.w	r8, #0
 8035124:	f104 091a 	add.w	r9, r4, #26
 8035128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803512a:	3b01      	subs	r3, #1
 803512c:	4543      	cmp	r3, r8
 803512e:	dc09      	bgt.n	8035144 <_printf_float+0x254>
 8035130:	6823      	ldr	r3, [r4, #0]
 8035132:	079b      	lsls	r3, r3, #30
 8035134:	f100 8103 	bmi.w	803533e <_printf_float+0x44e>
 8035138:	68e0      	ldr	r0, [r4, #12]
 803513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803513c:	4298      	cmp	r0, r3
 803513e:	bfb8      	it	lt
 8035140:	4618      	movlt	r0, r3
 8035142:	e734      	b.n	8034fae <_printf_float+0xbe>
 8035144:	2301      	movs	r3, #1
 8035146:	464a      	mov	r2, r9
 8035148:	4631      	mov	r1, r6
 803514a:	4628      	mov	r0, r5
 803514c:	47b8      	blx	r7
 803514e:	3001      	adds	r0, #1
 8035150:	f43f af2b 	beq.w	8034faa <_printf_float+0xba>
 8035154:	f108 0801 	add.w	r8, r8, #1
 8035158:	e7e6      	b.n	8035128 <_printf_float+0x238>
 803515a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803515c:	2b00      	cmp	r3, #0
 803515e:	dc2b      	bgt.n	80351b8 <_printf_float+0x2c8>
 8035160:	2301      	movs	r3, #1
 8035162:	4a26      	ldr	r2, [pc, #152]	; (80351fc <_printf_float+0x30c>)
 8035164:	4631      	mov	r1, r6
 8035166:	4628      	mov	r0, r5
 8035168:	47b8      	blx	r7
 803516a:	3001      	adds	r0, #1
 803516c:	f43f af1d 	beq.w	8034faa <_printf_float+0xba>
 8035170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8035172:	b923      	cbnz	r3, 803517e <_printf_float+0x28e>
 8035174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8035176:	b913      	cbnz	r3, 803517e <_printf_float+0x28e>
 8035178:	6823      	ldr	r3, [r4, #0]
 803517a:	07d9      	lsls	r1, r3, #31
 803517c:	d5d8      	bpl.n	8035130 <_printf_float+0x240>
 803517e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8035182:	4631      	mov	r1, r6
 8035184:	4628      	mov	r0, r5
 8035186:	47b8      	blx	r7
 8035188:	3001      	adds	r0, #1
 803518a:	f43f af0e 	beq.w	8034faa <_printf_float+0xba>
 803518e:	f04f 0900 	mov.w	r9, #0
 8035192:	f104 0a1a 	add.w	sl, r4, #26
 8035196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8035198:	425b      	negs	r3, r3
 803519a:	454b      	cmp	r3, r9
 803519c:	dc01      	bgt.n	80351a2 <_printf_float+0x2b2>
 803519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80351a0:	e794      	b.n	80350cc <_printf_float+0x1dc>
 80351a2:	2301      	movs	r3, #1
 80351a4:	4652      	mov	r2, sl
 80351a6:	4631      	mov	r1, r6
 80351a8:	4628      	mov	r0, r5
 80351aa:	47b8      	blx	r7
 80351ac:	3001      	adds	r0, #1
 80351ae:	f43f aefc 	beq.w	8034faa <_printf_float+0xba>
 80351b2:	f109 0901 	add.w	r9, r9, #1
 80351b6:	e7ee      	b.n	8035196 <_printf_float+0x2a6>
 80351b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80351ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80351bc:	429a      	cmp	r2, r3
 80351be:	bfa8      	it	ge
 80351c0:	461a      	movge	r2, r3
 80351c2:	2a00      	cmp	r2, #0
 80351c4:	4691      	mov	r9, r2
 80351c6:	dd07      	ble.n	80351d8 <_printf_float+0x2e8>
 80351c8:	4613      	mov	r3, r2
 80351ca:	4631      	mov	r1, r6
 80351cc:	4642      	mov	r2, r8
 80351ce:	4628      	mov	r0, r5
 80351d0:	47b8      	blx	r7
 80351d2:	3001      	adds	r0, #1
 80351d4:	f43f aee9 	beq.w	8034faa <_printf_float+0xba>
 80351d8:	f104 031a 	add.w	r3, r4, #26
 80351dc:	f04f 0b00 	mov.w	fp, #0
 80351e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80351e4:	9306      	str	r3, [sp, #24]
 80351e6:	e015      	b.n	8035214 <_printf_float+0x324>
 80351e8:	7fefffff 	.word	0x7fefffff
 80351ec:	08038378 	.word	0x08038378
 80351f0:	08038374 	.word	0x08038374
 80351f4:	08038380 	.word	0x08038380
 80351f8:	0803837c 	.word	0x0803837c
 80351fc:	08038384 	.word	0x08038384
 8035200:	2301      	movs	r3, #1
 8035202:	9a06      	ldr	r2, [sp, #24]
 8035204:	4631      	mov	r1, r6
 8035206:	4628      	mov	r0, r5
 8035208:	47b8      	blx	r7
 803520a:	3001      	adds	r0, #1
 803520c:	f43f aecd 	beq.w	8034faa <_printf_float+0xba>
 8035210:	f10b 0b01 	add.w	fp, fp, #1
 8035214:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8035218:	ebaa 0309 	sub.w	r3, sl, r9
 803521c:	455b      	cmp	r3, fp
 803521e:	dcef      	bgt.n	8035200 <_printf_float+0x310>
 8035220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8035224:	429a      	cmp	r2, r3
 8035226:	44d0      	add	r8, sl
 8035228:	db15      	blt.n	8035256 <_printf_float+0x366>
 803522a:	6823      	ldr	r3, [r4, #0]
 803522c:	07da      	lsls	r2, r3, #31
 803522e:	d412      	bmi.n	8035256 <_printf_float+0x366>
 8035230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8035232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8035234:	eba3 020a 	sub.w	r2, r3, sl
 8035238:	eba3 0a01 	sub.w	sl, r3, r1
 803523c:	4592      	cmp	sl, r2
 803523e:	bfa8      	it	ge
 8035240:	4692      	movge	sl, r2
 8035242:	f1ba 0f00 	cmp.w	sl, #0
 8035246:	dc0e      	bgt.n	8035266 <_printf_float+0x376>
 8035248:	f04f 0800 	mov.w	r8, #0
 803524c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8035250:	f104 091a 	add.w	r9, r4, #26
 8035254:	e019      	b.n	803528a <_printf_float+0x39a>
 8035256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803525a:	4631      	mov	r1, r6
 803525c:	4628      	mov	r0, r5
 803525e:	47b8      	blx	r7
 8035260:	3001      	adds	r0, #1
 8035262:	d1e5      	bne.n	8035230 <_printf_float+0x340>
 8035264:	e6a1      	b.n	8034faa <_printf_float+0xba>
 8035266:	4653      	mov	r3, sl
 8035268:	4642      	mov	r2, r8
 803526a:	4631      	mov	r1, r6
 803526c:	4628      	mov	r0, r5
 803526e:	47b8      	blx	r7
 8035270:	3001      	adds	r0, #1
 8035272:	d1e9      	bne.n	8035248 <_printf_float+0x358>
 8035274:	e699      	b.n	8034faa <_printf_float+0xba>
 8035276:	2301      	movs	r3, #1
 8035278:	464a      	mov	r2, r9
 803527a:	4631      	mov	r1, r6
 803527c:	4628      	mov	r0, r5
 803527e:	47b8      	blx	r7
 8035280:	3001      	adds	r0, #1
 8035282:	f43f ae92 	beq.w	8034faa <_printf_float+0xba>
 8035286:	f108 0801 	add.w	r8, r8, #1
 803528a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 803528e:	1a9b      	subs	r3, r3, r2
 8035290:	eba3 030a 	sub.w	r3, r3, sl
 8035294:	4543      	cmp	r3, r8
 8035296:	dcee      	bgt.n	8035276 <_printf_float+0x386>
 8035298:	e74a      	b.n	8035130 <_printf_float+0x240>
 803529a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803529c:	2a01      	cmp	r2, #1
 803529e:	dc01      	bgt.n	80352a4 <_printf_float+0x3b4>
 80352a0:	07db      	lsls	r3, r3, #31
 80352a2:	d53a      	bpl.n	803531a <_printf_float+0x42a>
 80352a4:	2301      	movs	r3, #1
 80352a6:	4642      	mov	r2, r8
 80352a8:	4631      	mov	r1, r6
 80352aa:	4628      	mov	r0, r5
 80352ac:	47b8      	blx	r7
 80352ae:	3001      	adds	r0, #1
 80352b0:	f43f ae7b 	beq.w	8034faa <_printf_float+0xba>
 80352b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80352b8:	4631      	mov	r1, r6
 80352ba:	4628      	mov	r0, r5
 80352bc:	47b8      	blx	r7
 80352be:	3001      	adds	r0, #1
 80352c0:	f108 0801 	add.w	r8, r8, #1
 80352c4:	f43f ae71 	beq.w	8034faa <_printf_float+0xba>
 80352c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80352ca:	2200      	movs	r2, #0
 80352cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80352d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80352d4:	2300      	movs	r3, #0
 80352d6:	f7eb fbf7 	bl	8020ac8 <__aeabi_dcmpeq>
 80352da:	b9c8      	cbnz	r0, 8035310 <_printf_float+0x420>
 80352dc:	4653      	mov	r3, sl
 80352de:	4642      	mov	r2, r8
 80352e0:	4631      	mov	r1, r6
 80352e2:	4628      	mov	r0, r5
 80352e4:	47b8      	blx	r7
 80352e6:	3001      	adds	r0, #1
 80352e8:	d10e      	bne.n	8035308 <_printf_float+0x418>
 80352ea:	e65e      	b.n	8034faa <_printf_float+0xba>
 80352ec:	2301      	movs	r3, #1
 80352ee:	4652      	mov	r2, sl
 80352f0:	4631      	mov	r1, r6
 80352f2:	4628      	mov	r0, r5
 80352f4:	47b8      	blx	r7
 80352f6:	3001      	adds	r0, #1
 80352f8:	f43f ae57 	beq.w	8034faa <_printf_float+0xba>
 80352fc:	f108 0801 	add.w	r8, r8, #1
 8035300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8035302:	3b01      	subs	r3, #1
 8035304:	4543      	cmp	r3, r8
 8035306:	dcf1      	bgt.n	80352ec <_printf_float+0x3fc>
 8035308:	464b      	mov	r3, r9
 803530a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 803530e:	e6de      	b.n	80350ce <_printf_float+0x1de>
 8035310:	f04f 0800 	mov.w	r8, #0
 8035314:	f104 0a1a 	add.w	sl, r4, #26
 8035318:	e7f2      	b.n	8035300 <_printf_float+0x410>
 803531a:	2301      	movs	r3, #1
 803531c:	e7df      	b.n	80352de <_printf_float+0x3ee>
 803531e:	2301      	movs	r3, #1
 8035320:	464a      	mov	r2, r9
 8035322:	4631      	mov	r1, r6
 8035324:	4628      	mov	r0, r5
 8035326:	47b8      	blx	r7
 8035328:	3001      	adds	r0, #1
 803532a:	f43f ae3e 	beq.w	8034faa <_printf_float+0xba>
 803532e:	f108 0801 	add.w	r8, r8, #1
 8035332:	68e3      	ldr	r3, [r4, #12]
 8035334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8035336:	1a9b      	subs	r3, r3, r2
 8035338:	4543      	cmp	r3, r8
 803533a:	dcf0      	bgt.n	803531e <_printf_float+0x42e>
 803533c:	e6fc      	b.n	8035138 <_printf_float+0x248>
 803533e:	f04f 0800 	mov.w	r8, #0
 8035342:	f104 0919 	add.w	r9, r4, #25
 8035346:	e7f4      	b.n	8035332 <_printf_float+0x442>
 8035348:	2900      	cmp	r1, #0
 803534a:	f43f ae8b 	beq.w	8035064 <_printf_float+0x174>
 803534e:	2300      	movs	r3, #0
 8035350:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8035354:	ab09      	add	r3, sp, #36	; 0x24
 8035356:	9300      	str	r3, [sp, #0]
 8035358:	ec49 8b10 	vmov	d0, r8, r9
 803535c:	6022      	str	r2, [r4, #0]
 803535e:	f8cd a004 	str.w	sl, [sp, #4]
 8035362:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8035366:	4628      	mov	r0, r5
 8035368:	f7ff fd2e 	bl	8034dc8 <__cvt>
 803536c:	4680      	mov	r8, r0
 803536e:	e648      	b.n	8035002 <_printf_float+0x112>

08035370 <_printf_common>:
 8035370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035374:	4691      	mov	r9, r2
 8035376:	461f      	mov	r7, r3
 8035378:	688a      	ldr	r2, [r1, #8]
 803537a:	690b      	ldr	r3, [r1, #16]
 803537c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8035380:	4293      	cmp	r3, r2
 8035382:	bfb8      	it	lt
 8035384:	4613      	movlt	r3, r2
 8035386:	f8c9 3000 	str.w	r3, [r9]
 803538a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803538e:	4606      	mov	r6, r0
 8035390:	460c      	mov	r4, r1
 8035392:	b112      	cbz	r2, 803539a <_printf_common+0x2a>
 8035394:	3301      	adds	r3, #1
 8035396:	f8c9 3000 	str.w	r3, [r9]
 803539a:	6823      	ldr	r3, [r4, #0]
 803539c:	0699      	lsls	r1, r3, #26
 803539e:	bf42      	ittt	mi
 80353a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80353a4:	3302      	addmi	r3, #2
 80353a6:	f8c9 3000 	strmi.w	r3, [r9]
 80353aa:	6825      	ldr	r5, [r4, #0]
 80353ac:	f015 0506 	ands.w	r5, r5, #6
 80353b0:	d107      	bne.n	80353c2 <_printf_common+0x52>
 80353b2:	f104 0a19 	add.w	sl, r4, #25
 80353b6:	68e3      	ldr	r3, [r4, #12]
 80353b8:	f8d9 2000 	ldr.w	r2, [r9]
 80353bc:	1a9b      	subs	r3, r3, r2
 80353be:	42ab      	cmp	r3, r5
 80353c0:	dc28      	bgt.n	8035414 <_printf_common+0xa4>
 80353c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80353c6:	6822      	ldr	r2, [r4, #0]
 80353c8:	3300      	adds	r3, #0
 80353ca:	bf18      	it	ne
 80353cc:	2301      	movne	r3, #1
 80353ce:	0692      	lsls	r2, r2, #26
 80353d0:	d42d      	bmi.n	803542e <_printf_common+0xbe>
 80353d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80353d6:	4639      	mov	r1, r7
 80353d8:	4630      	mov	r0, r6
 80353da:	47c0      	blx	r8
 80353dc:	3001      	adds	r0, #1
 80353de:	d020      	beq.n	8035422 <_printf_common+0xb2>
 80353e0:	6823      	ldr	r3, [r4, #0]
 80353e2:	68e5      	ldr	r5, [r4, #12]
 80353e4:	f8d9 2000 	ldr.w	r2, [r9]
 80353e8:	f003 0306 	and.w	r3, r3, #6
 80353ec:	2b04      	cmp	r3, #4
 80353ee:	bf08      	it	eq
 80353f0:	1aad      	subeq	r5, r5, r2
 80353f2:	68a3      	ldr	r3, [r4, #8]
 80353f4:	6922      	ldr	r2, [r4, #16]
 80353f6:	bf0c      	ite	eq
 80353f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80353fc:	2500      	movne	r5, #0
 80353fe:	4293      	cmp	r3, r2
 8035400:	bfc4      	itt	gt
 8035402:	1a9b      	subgt	r3, r3, r2
 8035404:	18ed      	addgt	r5, r5, r3
 8035406:	f04f 0900 	mov.w	r9, #0
 803540a:	341a      	adds	r4, #26
 803540c:	454d      	cmp	r5, r9
 803540e:	d11a      	bne.n	8035446 <_printf_common+0xd6>
 8035410:	2000      	movs	r0, #0
 8035412:	e008      	b.n	8035426 <_printf_common+0xb6>
 8035414:	2301      	movs	r3, #1
 8035416:	4652      	mov	r2, sl
 8035418:	4639      	mov	r1, r7
 803541a:	4630      	mov	r0, r6
 803541c:	47c0      	blx	r8
 803541e:	3001      	adds	r0, #1
 8035420:	d103      	bne.n	803542a <_printf_common+0xba>
 8035422:	f04f 30ff 	mov.w	r0, #4294967295
 8035426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803542a:	3501      	adds	r5, #1
 803542c:	e7c3      	b.n	80353b6 <_printf_common+0x46>
 803542e:	18e1      	adds	r1, r4, r3
 8035430:	1c5a      	adds	r2, r3, #1
 8035432:	2030      	movs	r0, #48	; 0x30
 8035434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8035438:	4422      	add	r2, r4
 803543a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803543e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8035442:	3302      	adds	r3, #2
 8035444:	e7c5      	b.n	80353d2 <_printf_common+0x62>
 8035446:	2301      	movs	r3, #1
 8035448:	4622      	mov	r2, r4
 803544a:	4639      	mov	r1, r7
 803544c:	4630      	mov	r0, r6
 803544e:	47c0      	blx	r8
 8035450:	3001      	adds	r0, #1
 8035452:	d0e6      	beq.n	8035422 <_printf_common+0xb2>
 8035454:	f109 0901 	add.w	r9, r9, #1
 8035458:	e7d8      	b.n	803540c <_printf_common+0x9c>
	...

0803545c <_printf_i>:
 803545c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035460:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8035464:	460c      	mov	r4, r1
 8035466:	7e09      	ldrb	r1, [r1, #24]
 8035468:	b085      	sub	sp, #20
 803546a:	296e      	cmp	r1, #110	; 0x6e
 803546c:	4617      	mov	r7, r2
 803546e:	4606      	mov	r6, r0
 8035470:	4698      	mov	r8, r3
 8035472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8035474:	f000 80b3 	beq.w	80355de <_printf_i+0x182>
 8035478:	d822      	bhi.n	80354c0 <_printf_i+0x64>
 803547a:	2963      	cmp	r1, #99	; 0x63
 803547c:	d036      	beq.n	80354ec <_printf_i+0x90>
 803547e:	d80a      	bhi.n	8035496 <_printf_i+0x3a>
 8035480:	2900      	cmp	r1, #0
 8035482:	f000 80b9 	beq.w	80355f8 <_printf_i+0x19c>
 8035486:	2958      	cmp	r1, #88	; 0x58
 8035488:	f000 8083 	beq.w	8035592 <_printf_i+0x136>
 803548c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8035490:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8035494:	e032      	b.n	80354fc <_printf_i+0xa0>
 8035496:	2964      	cmp	r1, #100	; 0x64
 8035498:	d001      	beq.n	803549e <_printf_i+0x42>
 803549a:	2969      	cmp	r1, #105	; 0x69
 803549c:	d1f6      	bne.n	803548c <_printf_i+0x30>
 803549e:	6820      	ldr	r0, [r4, #0]
 80354a0:	6813      	ldr	r3, [r2, #0]
 80354a2:	0605      	lsls	r5, r0, #24
 80354a4:	f103 0104 	add.w	r1, r3, #4
 80354a8:	d52a      	bpl.n	8035500 <_printf_i+0xa4>
 80354aa:	681b      	ldr	r3, [r3, #0]
 80354ac:	6011      	str	r1, [r2, #0]
 80354ae:	2b00      	cmp	r3, #0
 80354b0:	da03      	bge.n	80354ba <_printf_i+0x5e>
 80354b2:	222d      	movs	r2, #45	; 0x2d
 80354b4:	425b      	negs	r3, r3
 80354b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80354ba:	486f      	ldr	r0, [pc, #444]	; (8035678 <_printf_i+0x21c>)
 80354bc:	220a      	movs	r2, #10
 80354be:	e039      	b.n	8035534 <_printf_i+0xd8>
 80354c0:	2973      	cmp	r1, #115	; 0x73
 80354c2:	f000 809d 	beq.w	8035600 <_printf_i+0x1a4>
 80354c6:	d808      	bhi.n	80354da <_printf_i+0x7e>
 80354c8:	296f      	cmp	r1, #111	; 0x6f
 80354ca:	d020      	beq.n	803550e <_printf_i+0xb2>
 80354cc:	2970      	cmp	r1, #112	; 0x70
 80354ce:	d1dd      	bne.n	803548c <_printf_i+0x30>
 80354d0:	6823      	ldr	r3, [r4, #0]
 80354d2:	f043 0320 	orr.w	r3, r3, #32
 80354d6:	6023      	str	r3, [r4, #0]
 80354d8:	e003      	b.n	80354e2 <_printf_i+0x86>
 80354da:	2975      	cmp	r1, #117	; 0x75
 80354dc:	d017      	beq.n	803550e <_printf_i+0xb2>
 80354de:	2978      	cmp	r1, #120	; 0x78
 80354e0:	d1d4      	bne.n	803548c <_printf_i+0x30>
 80354e2:	2378      	movs	r3, #120	; 0x78
 80354e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80354e8:	4864      	ldr	r0, [pc, #400]	; (803567c <_printf_i+0x220>)
 80354ea:	e055      	b.n	8035598 <_printf_i+0x13c>
 80354ec:	6813      	ldr	r3, [r2, #0]
 80354ee:	1d19      	adds	r1, r3, #4
 80354f0:	681b      	ldr	r3, [r3, #0]
 80354f2:	6011      	str	r1, [r2, #0]
 80354f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80354f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80354fc:	2301      	movs	r3, #1
 80354fe:	e08c      	b.n	803561a <_printf_i+0x1be>
 8035500:	681b      	ldr	r3, [r3, #0]
 8035502:	6011      	str	r1, [r2, #0]
 8035504:	f010 0f40 	tst.w	r0, #64	; 0x40
 8035508:	bf18      	it	ne
 803550a:	b21b      	sxthne	r3, r3
 803550c:	e7cf      	b.n	80354ae <_printf_i+0x52>
 803550e:	6813      	ldr	r3, [r2, #0]
 8035510:	6825      	ldr	r5, [r4, #0]
 8035512:	1d18      	adds	r0, r3, #4
 8035514:	6010      	str	r0, [r2, #0]
 8035516:	0628      	lsls	r0, r5, #24
 8035518:	d501      	bpl.n	803551e <_printf_i+0xc2>
 803551a:	681b      	ldr	r3, [r3, #0]
 803551c:	e002      	b.n	8035524 <_printf_i+0xc8>
 803551e:	0668      	lsls	r0, r5, #25
 8035520:	d5fb      	bpl.n	803551a <_printf_i+0xbe>
 8035522:	881b      	ldrh	r3, [r3, #0]
 8035524:	4854      	ldr	r0, [pc, #336]	; (8035678 <_printf_i+0x21c>)
 8035526:	296f      	cmp	r1, #111	; 0x6f
 8035528:	bf14      	ite	ne
 803552a:	220a      	movne	r2, #10
 803552c:	2208      	moveq	r2, #8
 803552e:	2100      	movs	r1, #0
 8035530:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8035534:	6865      	ldr	r5, [r4, #4]
 8035536:	60a5      	str	r5, [r4, #8]
 8035538:	2d00      	cmp	r5, #0
 803553a:	f2c0 8095 	blt.w	8035668 <_printf_i+0x20c>
 803553e:	6821      	ldr	r1, [r4, #0]
 8035540:	f021 0104 	bic.w	r1, r1, #4
 8035544:	6021      	str	r1, [r4, #0]
 8035546:	2b00      	cmp	r3, #0
 8035548:	d13d      	bne.n	80355c6 <_printf_i+0x16a>
 803554a:	2d00      	cmp	r5, #0
 803554c:	f040 808e 	bne.w	803566c <_printf_i+0x210>
 8035550:	4665      	mov	r5, ip
 8035552:	2a08      	cmp	r2, #8
 8035554:	d10b      	bne.n	803556e <_printf_i+0x112>
 8035556:	6823      	ldr	r3, [r4, #0]
 8035558:	07db      	lsls	r3, r3, #31
 803555a:	d508      	bpl.n	803556e <_printf_i+0x112>
 803555c:	6923      	ldr	r3, [r4, #16]
 803555e:	6862      	ldr	r2, [r4, #4]
 8035560:	429a      	cmp	r2, r3
 8035562:	bfde      	ittt	le
 8035564:	2330      	movle	r3, #48	; 0x30
 8035566:	f805 3c01 	strble.w	r3, [r5, #-1]
 803556a:	f105 35ff 	addle.w	r5, r5, #4294967295
 803556e:	ebac 0305 	sub.w	r3, ip, r5
 8035572:	6123      	str	r3, [r4, #16]
 8035574:	f8cd 8000 	str.w	r8, [sp]
 8035578:	463b      	mov	r3, r7
 803557a:	aa03      	add	r2, sp, #12
 803557c:	4621      	mov	r1, r4
 803557e:	4630      	mov	r0, r6
 8035580:	f7ff fef6 	bl	8035370 <_printf_common>
 8035584:	3001      	adds	r0, #1
 8035586:	d14d      	bne.n	8035624 <_printf_i+0x1c8>
 8035588:	f04f 30ff 	mov.w	r0, #4294967295
 803558c:	b005      	add	sp, #20
 803558e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035592:	4839      	ldr	r0, [pc, #228]	; (8035678 <_printf_i+0x21c>)
 8035594:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8035598:	6813      	ldr	r3, [r2, #0]
 803559a:	6821      	ldr	r1, [r4, #0]
 803559c:	1d1d      	adds	r5, r3, #4
 803559e:	681b      	ldr	r3, [r3, #0]
 80355a0:	6015      	str	r5, [r2, #0]
 80355a2:	060a      	lsls	r2, r1, #24
 80355a4:	d50b      	bpl.n	80355be <_printf_i+0x162>
 80355a6:	07ca      	lsls	r2, r1, #31
 80355a8:	bf44      	itt	mi
 80355aa:	f041 0120 	orrmi.w	r1, r1, #32
 80355ae:	6021      	strmi	r1, [r4, #0]
 80355b0:	b91b      	cbnz	r3, 80355ba <_printf_i+0x15e>
 80355b2:	6822      	ldr	r2, [r4, #0]
 80355b4:	f022 0220 	bic.w	r2, r2, #32
 80355b8:	6022      	str	r2, [r4, #0]
 80355ba:	2210      	movs	r2, #16
 80355bc:	e7b7      	b.n	803552e <_printf_i+0xd2>
 80355be:	064d      	lsls	r5, r1, #25
 80355c0:	bf48      	it	mi
 80355c2:	b29b      	uxthmi	r3, r3
 80355c4:	e7ef      	b.n	80355a6 <_printf_i+0x14a>
 80355c6:	4665      	mov	r5, ip
 80355c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80355cc:	fb02 3311 	mls	r3, r2, r1, r3
 80355d0:	5cc3      	ldrb	r3, [r0, r3]
 80355d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80355d6:	460b      	mov	r3, r1
 80355d8:	2900      	cmp	r1, #0
 80355da:	d1f5      	bne.n	80355c8 <_printf_i+0x16c>
 80355dc:	e7b9      	b.n	8035552 <_printf_i+0xf6>
 80355de:	6813      	ldr	r3, [r2, #0]
 80355e0:	6825      	ldr	r5, [r4, #0]
 80355e2:	6961      	ldr	r1, [r4, #20]
 80355e4:	1d18      	adds	r0, r3, #4
 80355e6:	6010      	str	r0, [r2, #0]
 80355e8:	0628      	lsls	r0, r5, #24
 80355ea:	681b      	ldr	r3, [r3, #0]
 80355ec:	d501      	bpl.n	80355f2 <_printf_i+0x196>
 80355ee:	6019      	str	r1, [r3, #0]
 80355f0:	e002      	b.n	80355f8 <_printf_i+0x19c>
 80355f2:	066a      	lsls	r2, r5, #25
 80355f4:	d5fb      	bpl.n	80355ee <_printf_i+0x192>
 80355f6:	8019      	strh	r1, [r3, #0]
 80355f8:	2300      	movs	r3, #0
 80355fa:	6123      	str	r3, [r4, #16]
 80355fc:	4665      	mov	r5, ip
 80355fe:	e7b9      	b.n	8035574 <_printf_i+0x118>
 8035600:	6813      	ldr	r3, [r2, #0]
 8035602:	1d19      	adds	r1, r3, #4
 8035604:	6011      	str	r1, [r2, #0]
 8035606:	681d      	ldr	r5, [r3, #0]
 8035608:	6862      	ldr	r2, [r4, #4]
 803560a:	2100      	movs	r1, #0
 803560c:	4628      	mov	r0, r5
 803560e:	f7ea fde7 	bl	80201e0 <memchr>
 8035612:	b108      	cbz	r0, 8035618 <_printf_i+0x1bc>
 8035614:	1b40      	subs	r0, r0, r5
 8035616:	6060      	str	r0, [r4, #4]
 8035618:	6863      	ldr	r3, [r4, #4]
 803561a:	6123      	str	r3, [r4, #16]
 803561c:	2300      	movs	r3, #0
 803561e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8035622:	e7a7      	b.n	8035574 <_printf_i+0x118>
 8035624:	6923      	ldr	r3, [r4, #16]
 8035626:	462a      	mov	r2, r5
 8035628:	4639      	mov	r1, r7
 803562a:	4630      	mov	r0, r6
 803562c:	47c0      	blx	r8
 803562e:	3001      	adds	r0, #1
 8035630:	d0aa      	beq.n	8035588 <_printf_i+0x12c>
 8035632:	6823      	ldr	r3, [r4, #0]
 8035634:	079b      	lsls	r3, r3, #30
 8035636:	d413      	bmi.n	8035660 <_printf_i+0x204>
 8035638:	68e0      	ldr	r0, [r4, #12]
 803563a:	9b03      	ldr	r3, [sp, #12]
 803563c:	4298      	cmp	r0, r3
 803563e:	bfb8      	it	lt
 8035640:	4618      	movlt	r0, r3
 8035642:	e7a3      	b.n	803558c <_printf_i+0x130>
 8035644:	2301      	movs	r3, #1
 8035646:	464a      	mov	r2, r9
 8035648:	4639      	mov	r1, r7
 803564a:	4630      	mov	r0, r6
 803564c:	47c0      	blx	r8
 803564e:	3001      	adds	r0, #1
 8035650:	d09a      	beq.n	8035588 <_printf_i+0x12c>
 8035652:	3501      	adds	r5, #1
 8035654:	68e3      	ldr	r3, [r4, #12]
 8035656:	9a03      	ldr	r2, [sp, #12]
 8035658:	1a9b      	subs	r3, r3, r2
 803565a:	42ab      	cmp	r3, r5
 803565c:	dcf2      	bgt.n	8035644 <_printf_i+0x1e8>
 803565e:	e7eb      	b.n	8035638 <_printf_i+0x1dc>
 8035660:	2500      	movs	r5, #0
 8035662:	f104 0919 	add.w	r9, r4, #25
 8035666:	e7f5      	b.n	8035654 <_printf_i+0x1f8>
 8035668:	2b00      	cmp	r3, #0
 803566a:	d1ac      	bne.n	80355c6 <_printf_i+0x16a>
 803566c:	7803      	ldrb	r3, [r0, #0]
 803566e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8035672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8035676:	e76c      	b.n	8035552 <_printf_i+0xf6>
 8035678:	08038386 	.word	0x08038386
 803567c:	08038397 	.word	0x08038397

08035680 <iprintf>:
 8035680:	b40f      	push	{r0, r1, r2, r3}
 8035682:	4b0a      	ldr	r3, [pc, #40]	; (80356ac <iprintf+0x2c>)
 8035684:	b513      	push	{r0, r1, r4, lr}
 8035686:	681c      	ldr	r4, [r3, #0]
 8035688:	b124      	cbz	r4, 8035694 <iprintf+0x14>
 803568a:	69a3      	ldr	r3, [r4, #24]
 803568c:	b913      	cbnz	r3, 8035694 <iprintf+0x14>
 803568e:	4620      	mov	r0, r4
 8035690:	f001 f836 	bl	8036700 <__sinit>
 8035694:	ab05      	add	r3, sp, #20
 8035696:	9a04      	ldr	r2, [sp, #16]
 8035698:	68a1      	ldr	r1, [r4, #8]
 803569a:	9301      	str	r3, [sp, #4]
 803569c:	4620      	mov	r0, r4
 803569e:	f001 fd93 	bl	80371c8 <_vfiprintf_r>
 80356a2:	b002      	add	sp, #8
 80356a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80356a8:	b004      	add	sp, #16
 80356aa:	4770      	bx	lr
 80356ac:	200001a0 	.word	0x200001a0

080356b0 <putchar>:
 80356b0:	b538      	push	{r3, r4, r5, lr}
 80356b2:	4b08      	ldr	r3, [pc, #32]	; (80356d4 <putchar+0x24>)
 80356b4:	681c      	ldr	r4, [r3, #0]
 80356b6:	4605      	mov	r5, r0
 80356b8:	b124      	cbz	r4, 80356c4 <putchar+0x14>
 80356ba:	69a3      	ldr	r3, [r4, #24]
 80356bc:	b913      	cbnz	r3, 80356c4 <putchar+0x14>
 80356be:	4620      	mov	r0, r4
 80356c0:	f001 f81e 	bl	8036700 <__sinit>
 80356c4:	68a2      	ldr	r2, [r4, #8]
 80356c6:	4629      	mov	r1, r5
 80356c8:	4620      	mov	r0, r4
 80356ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80356ce:	f001 be91 	b.w	80373f4 <_putc_r>
 80356d2:	bf00      	nop
 80356d4:	200001a0 	.word	0x200001a0

080356d8 <_sbrk_r>:
 80356d8:	b538      	push	{r3, r4, r5, lr}
 80356da:	4c06      	ldr	r4, [pc, #24]	; (80356f4 <_sbrk_r+0x1c>)
 80356dc:	2300      	movs	r3, #0
 80356de:	4605      	mov	r5, r0
 80356e0:	4608      	mov	r0, r1
 80356e2:	6023      	str	r3, [r4, #0]
 80356e4:	f7ed fbf0 	bl	8022ec8 <_sbrk>
 80356e8:	1c43      	adds	r3, r0, #1
 80356ea:	d102      	bne.n	80356f2 <_sbrk_r+0x1a>
 80356ec:	6823      	ldr	r3, [r4, #0]
 80356ee:	b103      	cbz	r3, 80356f2 <_sbrk_r+0x1a>
 80356f0:	602b      	str	r3, [r5, #0]
 80356f2:	bd38      	pop	{r3, r4, r5, pc}
 80356f4:	20007718 	.word	0x20007718

080356f8 <setvbuf>:
 80356f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80356fc:	461d      	mov	r5, r3
 80356fe:	4b51      	ldr	r3, [pc, #324]	; (8035844 <setvbuf+0x14c>)
 8035700:	681e      	ldr	r6, [r3, #0]
 8035702:	4604      	mov	r4, r0
 8035704:	460f      	mov	r7, r1
 8035706:	4690      	mov	r8, r2
 8035708:	b126      	cbz	r6, 8035714 <setvbuf+0x1c>
 803570a:	69b3      	ldr	r3, [r6, #24]
 803570c:	b913      	cbnz	r3, 8035714 <setvbuf+0x1c>
 803570e:	4630      	mov	r0, r6
 8035710:	f000 fff6 	bl	8036700 <__sinit>
 8035714:	4b4c      	ldr	r3, [pc, #304]	; (8035848 <setvbuf+0x150>)
 8035716:	429c      	cmp	r4, r3
 8035718:	d152      	bne.n	80357c0 <setvbuf+0xc8>
 803571a:	6874      	ldr	r4, [r6, #4]
 803571c:	f1b8 0f02 	cmp.w	r8, #2
 8035720:	d006      	beq.n	8035730 <setvbuf+0x38>
 8035722:	f1b8 0f01 	cmp.w	r8, #1
 8035726:	f200 8089 	bhi.w	803583c <setvbuf+0x144>
 803572a:	2d00      	cmp	r5, #0
 803572c:	f2c0 8086 	blt.w	803583c <setvbuf+0x144>
 8035730:	4621      	mov	r1, r4
 8035732:	4630      	mov	r0, r6
 8035734:	f000 ff7a 	bl	803662c <_fflush_r>
 8035738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803573a:	b141      	cbz	r1, 803574e <setvbuf+0x56>
 803573c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8035740:	4299      	cmp	r1, r3
 8035742:	d002      	beq.n	803574a <setvbuf+0x52>
 8035744:	4630      	mov	r0, r6
 8035746:	f7ff fa97 	bl	8034c78 <_free_r>
 803574a:	2300      	movs	r3, #0
 803574c:	6363      	str	r3, [r4, #52]	; 0x34
 803574e:	2300      	movs	r3, #0
 8035750:	61a3      	str	r3, [r4, #24]
 8035752:	6063      	str	r3, [r4, #4]
 8035754:	89a3      	ldrh	r3, [r4, #12]
 8035756:	061b      	lsls	r3, r3, #24
 8035758:	d503      	bpl.n	8035762 <setvbuf+0x6a>
 803575a:	6921      	ldr	r1, [r4, #16]
 803575c:	4630      	mov	r0, r6
 803575e:	f7ff fa8b 	bl	8034c78 <_free_r>
 8035762:	89a3      	ldrh	r3, [r4, #12]
 8035764:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8035768:	f023 0303 	bic.w	r3, r3, #3
 803576c:	f1b8 0f02 	cmp.w	r8, #2
 8035770:	81a3      	strh	r3, [r4, #12]
 8035772:	d05d      	beq.n	8035830 <setvbuf+0x138>
 8035774:	ab01      	add	r3, sp, #4
 8035776:	466a      	mov	r2, sp
 8035778:	4621      	mov	r1, r4
 803577a:	4630      	mov	r0, r6
 803577c:	f001 f858 	bl	8036830 <__swhatbuf_r>
 8035780:	89a3      	ldrh	r3, [r4, #12]
 8035782:	4318      	orrs	r0, r3
 8035784:	81a0      	strh	r0, [r4, #12]
 8035786:	bb2d      	cbnz	r5, 80357d4 <setvbuf+0xdc>
 8035788:	9d00      	ldr	r5, [sp, #0]
 803578a:	4628      	mov	r0, r5
 803578c:	f7ff fa50 	bl	8034c30 <malloc>
 8035790:	4607      	mov	r7, r0
 8035792:	2800      	cmp	r0, #0
 8035794:	d14e      	bne.n	8035834 <setvbuf+0x13c>
 8035796:	f8dd 9000 	ldr.w	r9, [sp]
 803579a:	45a9      	cmp	r9, r5
 803579c:	d13c      	bne.n	8035818 <setvbuf+0x120>
 803579e:	f04f 30ff 	mov.w	r0, #4294967295
 80357a2:	89a3      	ldrh	r3, [r4, #12]
 80357a4:	f043 0302 	orr.w	r3, r3, #2
 80357a8:	81a3      	strh	r3, [r4, #12]
 80357aa:	2300      	movs	r3, #0
 80357ac:	60a3      	str	r3, [r4, #8]
 80357ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80357b2:	6023      	str	r3, [r4, #0]
 80357b4:	6123      	str	r3, [r4, #16]
 80357b6:	2301      	movs	r3, #1
 80357b8:	6163      	str	r3, [r4, #20]
 80357ba:	b003      	add	sp, #12
 80357bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80357c0:	4b22      	ldr	r3, [pc, #136]	; (803584c <setvbuf+0x154>)
 80357c2:	429c      	cmp	r4, r3
 80357c4:	d101      	bne.n	80357ca <setvbuf+0xd2>
 80357c6:	68b4      	ldr	r4, [r6, #8]
 80357c8:	e7a8      	b.n	803571c <setvbuf+0x24>
 80357ca:	4b21      	ldr	r3, [pc, #132]	; (8035850 <setvbuf+0x158>)
 80357cc:	429c      	cmp	r4, r3
 80357ce:	bf08      	it	eq
 80357d0:	68f4      	ldreq	r4, [r6, #12]
 80357d2:	e7a3      	b.n	803571c <setvbuf+0x24>
 80357d4:	2f00      	cmp	r7, #0
 80357d6:	d0d8      	beq.n	803578a <setvbuf+0x92>
 80357d8:	69b3      	ldr	r3, [r6, #24]
 80357da:	b913      	cbnz	r3, 80357e2 <setvbuf+0xea>
 80357dc:	4630      	mov	r0, r6
 80357de:	f000 ff8f 	bl	8036700 <__sinit>
 80357e2:	f1b8 0f01 	cmp.w	r8, #1
 80357e6:	bf08      	it	eq
 80357e8:	89a3      	ldrheq	r3, [r4, #12]
 80357ea:	6027      	str	r7, [r4, #0]
 80357ec:	bf04      	itt	eq
 80357ee:	f043 0301 	orreq.w	r3, r3, #1
 80357f2:	81a3      	strheq	r3, [r4, #12]
 80357f4:	89a3      	ldrh	r3, [r4, #12]
 80357f6:	f013 0008 	ands.w	r0, r3, #8
 80357fa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80357fe:	d01b      	beq.n	8035838 <setvbuf+0x140>
 8035800:	f013 0001 	ands.w	r0, r3, #1
 8035804:	bf18      	it	ne
 8035806:	426d      	negne	r5, r5
 8035808:	f04f 0300 	mov.w	r3, #0
 803580c:	bf1d      	ittte	ne
 803580e:	60a3      	strne	r3, [r4, #8]
 8035810:	61a5      	strne	r5, [r4, #24]
 8035812:	4618      	movne	r0, r3
 8035814:	60a5      	streq	r5, [r4, #8]
 8035816:	e7d0      	b.n	80357ba <setvbuf+0xc2>
 8035818:	4648      	mov	r0, r9
 803581a:	f7ff fa09 	bl	8034c30 <malloc>
 803581e:	4607      	mov	r7, r0
 8035820:	2800      	cmp	r0, #0
 8035822:	d0bc      	beq.n	803579e <setvbuf+0xa6>
 8035824:	89a3      	ldrh	r3, [r4, #12]
 8035826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803582a:	81a3      	strh	r3, [r4, #12]
 803582c:	464d      	mov	r5, r9
 803582e:	e7d3      	b.n	80357d8 <setvbuf+0xe0>
 8035830:	2000      	movs	r0, #0
 8035832:	e7b6      	b.n	80357a2 <setvbuf+0xaa>
 8035834:	46a9      	mov	r9, r5
 8035836:	e7f5      	b.n	8035824 <setvbuf+0x12c>
 8035838:	60a0      	str	r0, [r4, #8]
 803583a:	e7be      	b.n	80357ba <setvbuf+0xc2>
 803583c:	f04f 30ff 	mov.w	r0, #4294967295
 8035840:	e7bb      	b.n	80357ba <setvbuf+0xc2>
 8035842:	bf00      	nop
 8035844:	200001a0 	.word	0x200001a0
 8035848:	080383d8 	.word	0x080383d8
 803584c:	080383f8 	.word	0x080383f8
 8035850:	080383b8 	.word	0x080383b8

08035854 <siprintf>:
 8035854:	b40e      	push	{r1, r2, r3}
 8035856:	b500      	push	{lr}
 8035858:	b09c      	sub	sp, #112	; 0x70
 803585a:	ab1d      	add	r3, sp, #116	; 0x74
 803585c:	9002      	str	r0, [sp, #8]
 803585e:	9006      	str	r0, [sp, #24]
 8035860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8035864:	4809      	ldr	r0, [pc, #36]	; (803588c <siprintf+0x38>)
 8035866:	9107      	str	r1, [sp, #28]
 8035868:	9104      	str	r1, [sp, #16]
 803586a:	4909      	ldr	r1, [pc, #36]	; (8035890 <siprintf+0x3c>)
 803586c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035870:	9105      	str	r1, [sp, #20]
 8035872:	6800      	ldr	r0, [r0, #0]
 8035874:	9301      	str	r3, [sp, #4]
 8035876:	a902      	add	r1, sp, #8
 8035878:	f001 fb84 	bl	8036f84 <_svfiprintf_r>
 803587c:	9b02      	ldr	r3, [sp, #8]
 803587e:	2200      	movs	r2, #0
 8035880:	701a      	strb	r2, [r3, #0]
 8035882:	b01c      	add	sp, #112	; 0x70
 8035884:	f85d eb04 	ldr.w	lr, [sp], #4
 8035888:	b003      	add	sp, #12
 803588a:	4770      	bx	lr
 803588c:	200001a0 	.word	0x200001a0
 8035890:	ffff0208 	.word	0xffff0208

08035894 <quorem>:
 8035894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035898:	6903      	ldr	r3, [r0, #16]
 803589a:	690c      	ldr	r4, [r1, #16]
 803589c:	42a3      	cmp	r3, r4
 803589e:	4680      	mov	r8, r0
 80358a0:	f2c0 8082 	blt.w	80359a8 <quorem+0x114>
 80358a4:	3c01      	subs	r4, #1
 80358a6:	f101 0714 	add.w	r7, r1, #20
 80358aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80358ae:	f100 0614 	add.w	r6, r0, #20
 80358b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80358b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80358ba:	eb06 030c 	add.w	r3, r6, ip
 80358be:	3501      	adds	r5, #1
 80358c0:	eb07 090c 	add.w	r9, r7, ip
 80358c4:	9301      	str	r3, [sp, #4]
 80358c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80358ca:	b395      	cbz	r5, 8035932 <quorem+0x9e>
 80358cc:	f04f 0a00 	mov.w	sl, #0
 80358d0:	4638      	mov	r0, r7
 80358d2:	46b6      	mov	lr, r6
 80358d4:	46d3      	mov	fp, sl
 80358d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80358da:	b293      	uxth	r3, r2
 80358dc:	fb05 a303 	mla	r3, r5, r3, sl
 80358e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80358e4:	b29b      	uxth	r3, r3
 80358e6:	ebab 0303 	sub.w	r3, fp, r3
 80358ea:	0c12      	lsrs	r2, r2, #16
 80358ec:	f8de b000 	ldr.w	fp, [lr]
 80358f0:	fb05 a202 	mla	r2, r5, r2, sl
 80358f4:	fa13 f38b 	uxtah	r3, r3, fp
 80358f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80358fc:	fa1f fb82 	uxth.w	fp, r2
 8035900:	f8de 2000 	ldr.w	r2, [lr]
 8035904:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8035908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803590c:	b29b      	uxth	r3, r3
 803590e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8035912:	4581      	cmp	r9, r0
 8035914:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8035918:	f84e 3b04 	str.w	r3, [lr], #4
 803591c:	d2db      	bcs.n	80358d6 <quorem+0x42>
 803591e:	f856 300c 	ldr.w	r3, [r6, ip]
 8035922:	b933      	cbnz	r3, 8035932 <quorem+0x9e>
 8035924:	9b01      	ldr	r3, [sp, #4]
 8035926:	3b04      	subs	r3, #4
 8035928:	429e      	cmp	r6, r3
 803592a:	461a      	mov	r2, r3
 803592c:	d330      	bcc.n	8035990 <quorem+0xfc>
 803592e:	f8c8 4010 	str.w	r4, [r8, #16]
 8035932:	4640      	mov	r0, r8
 8035934:	f001 f9f8 	bl	8036d28 <__mcmp>
 8035938:	2800      	cmp	r0, #0
 803593a:	db25      	blt.n	8035988 <quorem+0xf4>
 803593c:	3501      	adds	r5, #1
 803593e:	4630      	mov	r0, r6
 8035940:	f04f 0c00 	mov.w	ip, #0
 8035944:	f857 2b04 	ldr.w	r2, [r7], #4
 8035948:	f8d0 e000 	ldr.w	lr, [r0]
 803594c:	b293      	uxth	r3, r2
 803594e:	ebac 0303 	sub.w	r3, ip, r3
 8035952:	0c12      	lsrs	r2, r2, #16
 8035954:	fa13 f38e 	uxtah	r3, r3, lr
 8035958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 803595c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8035960:	b29b      	uxth	r3, r3
 8035962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8035966:	45b9      	cmp	r9, r7
 8035968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 803596c:	f840 3b04 	str.w	r3, [r0], #4
 8035970:	d2e8      	bcs.n	8035944 <quorem+0xb0>
 8035972:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8035976:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 803597a:	b92a      	cbnz	r2, 8035988 <quorem+0xf4>
 803597c:	3b04      	subs	r3, #4
 803597e:	429e      	cmp	r6, r3
 8035980:	461a      	mov	r2, r3
 8035982:	d30b      	bcc.n	803599c <quorem+0x108>
 8035984:	f8c8 4010 	str.w	r4, [r8, #16]
 8035988:	4628      	mov	r0, r5
 803598a:	b003      	add	sp, #12
 803598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035990:	6812      	ldr	r2, [r2, #0]
 8035992:	3b04      	subs	r3, #4
 8035994:	2a00      	cmp	r2, #0
 8035996:	d1ca      	bne.n	803592e <quorem+0x9a>
 8035998:	3c01      	subs	r4, #1
 803599a:	e7c5      	b.n	8035928 <quorem+0x94>
 803599c:	6812      	ldr	r2, [r2, #0]
 803599e:	3b04      	subs	r3, #4
 80359a0:	2a00      	cmp	r2, #0
 80359a2:	d1ef      	bne.n	8035984 <quorem+0xf0>
 80359a4:	3c01      	subs	r4, #1
 80359a6:	e7ea      	b.n	803597e <quorem+0xea>
 80359a8:	2000      	movs	r0, #0
 80359aa:	e7ee      	b.n	803598a <quorem+0xf6>
 80359ac:	0000      	movs	r0, r0
	...

080359b0 <_dtoa_r>:
 80359b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80359b4:	ec57 6b10 	vmov	r6, r7, d0
 80359b8:	b097      	sub	sp, #92	; 0x5c
 80359ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80359bc:	9106      	str	r1, [sp, #24]
 80359be:	4604      	mov	r4, r0
 80359c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80359c2:	9312      	str	r3, [sp, #72]	; 0x48
 80359c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80359c8:	e9cd 6700 	strd	r6, r7, [sp]
 80359cc:	b93d      	cbnz	r5, 80359de <_dtoa_r+0x2e>
 80359ce:	2010      	movs	r0, #16
 80359d0:	f7ff f92e 	bl	8034c30 <malloc>
 80359d4:	6260      	str	r0, [r4, #36]	; 0x24
 80359d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80359da:	6005      	str	r5, [r0, #0]
 80359dc:	60c5      	str	r5, [r0, #12]
 80359de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80359e0:	6819      	ldr	r1, [r3, #0]
 80359e2:	b151      	cbz	r1, 80359fa <_dtoa_r+0x4a>
 80359e4:	685a      	ldr	r2, [r3, #4]
 80359e6:	604a      	str	r2, [r1, #4]
 80359e8:	2301      	movs	r3, #1
 80359ea:	4093      	lsls	r3, r2
 80359ec:	608b      	str	r3, [r1, #8]
 80359ee:	4620      	mov	r0, r4
 80359f0:	f000 ffb8 	bl	8036964 <_Bfree>
 80359f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80359f6:	2200      	movs	r2, #0
 80359f8:	601a      	str	r2, [r3, #0]
 80359fa:	1e3b      	subs	r3, r7, #0
 80359fc:	bfbb      	ittet	lt
 80359fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8035a02:	9301      	strlt	r3, [sp, #4]
 8035a04:	2300      	movge	r3, #0
 8035a06:	2201      	movlt	r2, #1
 8035a08:	bfac      	ite	ge
 8035a0a:	f8c8 3000 	strge.w	r3, [r8]
 8035a0e:	f8c8 2000 	strlt.w	r2, [r8]
 8035a12:	4baf      	ldr	r3, [pc, #700]	; (8035cd0 <_dtoa_r+0x320>)
 8035a14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8035a18:	ea33 0308 	bics.w	r3, r3, r8
 8035a1c:	d114      	bne.n	8035a48 <_dtoa_r+0x98>
 8035a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8035a20:	f242 730f 	movw	r3, #9999	; 0x270f
 8035a24:	6013      	str	r3, [r2, #0]
 8035a26:	9b00      	ldr	r3, [sp, #0]
 8035a28:	b923      	cbnz	r3, 8035a34 <_dtoa_r+0x84>
 8035a2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8035a2e:	2800      	cmp	r0, #0
 8035a30:	f000 8542 	beq.w	80364b8 <_dtoa_r+0xb08>
 8035a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8035a36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8035ce4 <_dtoa_r+0x334>
 8035a3a:	2b00      	cmp	r3, #0
 8035a3c:	f000 8544 	beq.w	80364c8 <_dtoa_r+0xb18>
 8035a40:	f10b 0303 	add.w	r3, fp, #3
 8035a44:	f000 bd3e 	b.w	80364c4 <_dtoa_r+0xb14>
 8035a48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8035a4c:	2200      	movs	r2, #0
 8035a4e:	2300      	movs	r3, #0
 8035a50:	4630      	mov	r0, r6
 8035a52:	4639      	mov	r1, r7
 8035a54:	f7eb f838 	bl	8020ac8 <__aeabi_dcmpeq>
 8035a58:	4681      	mov	r9, r0
 8035a5a:	b168      	cbz	r0, 8035a78 <_dtoa_r+0xc8>
 8035a5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8035a5e:	2301      	movs	r3, #1
 8035a60:	6013      	str	r3, [r2, #0]
 8035a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8035a64:	2b00      	cmp	r3, #0
 8035a66:	f000 8524 	beq.w	80364b2 <_dtoa_r+0xb02>
 8035a6a:	4b9a      	ldr	r3, [pc, #616]	; (8035cd4 <_dtoa_r+0x324>)
 8035a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8035a6e:	f103 3bff 	add.w	fp, r3, #4294967295
 8035a72:	6013      	str	r3, [r2, #0]
 8035a74:	f000 bd28 	b.w	80364c8 <_dtoa_r+0xb18>
 8035a78:	aa14      	add	r2, sp, #80	; 0x50
 8035a7a:	a915      	add	r1, sp, #84	; 0x54
 8035a7c:	ec47 6b10 	vmov	d0, r6, r7
 8035a80:	4620      	mov	r0, r4
 8035a82:	f001 f9c8 	bl	8036e16 <__d2b>
 8035a86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8035a8a:	9004      	str	r0, [sp, #16]
 8035a8c:	2d00      	cmp	r5, #0
 8035a8e:	d07c      	beq.n	8035b8a <_dtoa_r+0x1da>
 8035a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8035a94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8035a98:	46b2      	mov	sl, r6
 8035a9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8035a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8035aa2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8035aa6:	2200      	movs	r2, #0
 8035aa8:	4b8b      	ldr	r3, [pc, #556]	; (8035cd8 <_dtoa_r+0x328>)
 8035aaa:	4650      	mov	r0, sl
 8035aac:	4659      	mov	r1, fp
 8035aae:	f7ea fbeb 	bl	8020288 <__aeabi_dsub>
 8035ab2:	a381      	add	r3, pc, #516	; (adr r3, 8035cb8 <_dtoa_r+0x308>)
 8035ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035ab8:	f7ea fd9e 	bl	80205f8 <__aeabi_dmul>
 8035abc:	a380      	add	r3, pc, #512	; (adr r3, 8035cc0 <_dtoa_r+0x310>)
 8035abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035ac2:	f7ea fbe3 	bl	802028c <__adddf3>
 8035ac6:	4606      	mov	r6, r0
 8035ac8:	4628      	mov	r0, r5
 8035aca:	460f      	mov	r7, r1
 8035acc:	f7ea fd2a 	bl	8020524 <__aeabi_i2d>
 8035ad0:	a37d      	add	r3, pc, #500	; (adr r3, 8035cc8 <_dtoa_r+0x318>)
 8035ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035ad6:	f7ea fd8f 	bl	80205f8 <__aeabi_dmul>
 8035ada:	4602      	mov	r2, r0
 8035adc:	460b      	mov	r3, r1
 8035ade:	4630      	mov	r0, r6
 8035ae0:	4639      	mov	r1, r7
 8035ae2:	f7ea fbd3 	bl	802028c <__adddf3>
 8035ae6:	4606      	mov	r6, r0
 8035ae8:	460f      	mov	r7, r1
 8035aea:	f7eb f835 	bl	8020b58 <__aeabi_d2iz>
 8035aee:	2200      	movs	r2, #0
 8035af0:	4682      	mov	sl, r0
 8035af2:	2300      	movs	r3, #0
 8035af4:	4630      	mov	r0, r6
 8035af6:	4639      	mov	r1, r7
 8035af8:	f7ea fff0 	bl	8020adc <__aeabi_dcmplt>
 8035afc:	b148      	cbz	r0, 8035b12 <_dtoa_r+0x162>
 8035afe:	4650      	mov	r0, sl
 8035b00:	f7ea fd10 	bl	8020524 <__aeabi_i2d>
 8035b04:	4632      	mov	r2, r6
 8035b06:	463b      	mov	r3, r7
 8035b08:	f7ea ffde 	bl	8020ac8 <__aeabi_dcmpeq>
 8035b0c:	b908      	cbnz	r0, 8035b12 <_dtoa_r+0x162>
 8035b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8035b12:	f1ba 0f16 	cmp.w	sl, #22
 8035b16:	d859      	bhi.n	8035bcc <_dtoa_r+0x21c>
 8035b18:	4970      	ldr	r1, [pc, #448]	; (8035cdc <_dtoa_r+0x32c>)
 8035b1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8035b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8035b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035b26:	f7ea fff7 	bl	8020b18 <__aeabi_dcmpgt>
 8035b2a:	2800      	cmp	r0, #0
 8035b2c:	d050      	beq.n	8035bd0 <_dtoa_r+0x220>
 8035b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8035b32:	2300      	movs	r3, #0
 8035b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8035b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8035b38:	1b5d      	subs	r5, r3, r5
 8035b3a:	f1b5 0801 	subs.w	r8, r5, #1
 8035b3e:	bf49      	itett	mi
 8035b40:	f1c5 0301 	rsbmi	r3, r5, #1
 8035b44:	2300      	movpl	r3, #0
 8035b46:	9305      	strmi	r3, [sp, #20]
 8035b48:	f04f 0800 	movmi.w	r8, #0
 8035b4c:	bf58      	it	pl
 8035b4e:	9305      	strpl	r3, [sp, #20]
 8035b50:	f1ba 0f00 	cmp.w	sl, #0
 8035b54:	db3e      	blt.n	8035bd4 <_dtoa_r+0x224>
 8035b56:	2300      	movs	r3, #0
 8035b58:	44d0      	add	r8, sl
 8035b5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8035b5e:	9307      	str	r3, [sp, #28]
 8035b60:	9b06      	ldr	r3, [sp, #24]
 8035b62:	2b09      	cmp	r3, #9
 8035b64:	f200 8090 	bhi.w	8035c88 <_dtoa_r+0x2d8>
 8035b68:	2b05      	cmp	r3, #5
 8035b6a:	bfc4      	itt	gt
 8035b6c:	3b04      	subgt	r3, #4
 8035b6e:	9306      	strgt	r3, [sp, #24]
 8035b70:	9b06      	ldr	r3, [sp, #24]
 8035b72:	f1a3 0302 	sub.w	r3, r3, #2
 8035b76:	bfcc      	ite	gt
 8035b78:	2500      	movgt	r5, #0
 8035b7a:	2501      	movle	r5, #1
 8035b7c:	2b03      	cmp	r3, #3
 8035b7e:	f200 808f 	bhi.w	8035ca0 <_dtoa_r+0x2f0>
 8035b82:	e8df f003 	tbb	[pc, r3]
 8035b86:	7f7d      	.short	0x7f7d
 8035b88:	7131      	.short	0x7131
 8035b8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8035b8e:	441d      	add	r5, r3
 8035b90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8035b94:	2820      	cmp	r0, #32
 8035b96:	dd13      	ble.n	8035bc0 <_dtoa_r+0x210>
 8035b98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8035b9c:	9b00      	ldr	r3, [sp, #0]
 8035b9e:	fa08 f800 	lsl.w	r8, r8, r0
 8035ba2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8035ba6:	fa23 f000 	lsr.w	r0, r3, r0
 8035baa:	ea48 0000 	orr.w	r0, r8, r0
 8035bae:	f7ea fca9 	bl	8020504 <__aeabi_ui2d>
 8035bb2:	2301      	movs	r3, #1
 8035bb4:	4682      	mov	sl, r0
 8035bb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8035bba:	3d01      	subs	r5, #1
 8035bbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8035bbe:	e772      	b.n	8035aa6 <_dtoa_r+0xf6>
 8035bc0:	9b00      	ldr	r3, [sp, #0]
 8035bc2:	f1c0 0020 	rsb	r0, r0, #32
 8035bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8035bca:	e7f0      	b.n	8035bae <_dtoa_r+0x1fe>
 8035bcc:	2301      	movs	r3, #1
 8035bce:	e7b1      	b.n	8035b34 <_dtoa_r+0x184>
 8035bd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8035bd2:	e7b0      	b.n	8035b36 <_dtoa_r+0x186>
 8035bd4:	9b05      	ldr	r3, [sp, #20]
 8035bd6:	eba3 030a 	sub.w	r3, r3, sl
 8035bda:	9305      	str	r3, [sp, #20]
 8035bdc:	f1ca 0300 	rsb	r3, sl, #0
 8035be0:	9307      	str	r3, [sp, #28]
 8035be2:	2300      	movs	r3, #0
 8035be4:	930e      	str	r3, [sp, #56]	; 0x38
 8035be6:	e7bb      	b.n	8035b60 <_dtoa_r+0x1b0>
 8035be8:	2301      	movs	r3, #1
 8035bea:	930a      	str	r3, [sp, #40]	; 0x28
 8035bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8035bee:	2b00      	cmp	r3, #0
 8035bf0:	dd59      	ble.n	8035ca6 <_dtoa_r+0x2f6>
 8035bf2:	9302      	str	r3, [sp, #8]
 8035bf4:	4699      	mov	r9, r3
 8035bf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8035bf8:	2200      	movs	r2, #0
 8035bfa:	6072      	str	r2, [r6, #4]
 8035bfc:	2204      	movs	r2, #4
 8035bfe:	f102 0014 	add.w	r0, r2, #20
 8035c02:	4298      	cmp	r0, r3
 8035c04:	6871      	ldr	r1, [r6, #4]
 8035c06:	d953      	bls.n	8035cb0 <_dtoa_r+0x300>
 8035c08:	4620      	mov	r0, r4
 8035c0a:	f000 fe77 	bl	80368fc <_Balloc>
 8035c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8035c10:	6030      	str	r0, [r6, #0]
 8035c12:	f1b9 0f0e 	cmp.w	r9, #14
 8035c16:	f8d3 b000 	ldr.w	fp, [r3]
 8035c1a:	f200 80e6 	bhi.w	8035dea <_dtoa_r+0x43a>
 8035c1e:	2d00      	cmp	r5, #0
 8035c20:	f000 80e3 	beq.w	8035dea <_dtoa_r+0x43a>
 8035c24:	ed9d 7b00 	vldr	d7, [sp]
 8035c28:	f1ba 0f00 	cmp.w	sl, #0
 8035c2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8035c30:	dd74      	ble.n	8035d1c <_dtoa_r+0x36c>
 8035c32:	4a2a      	ldr	r2, [pc, #168]	; (8035cdc <_dtoa_r+0x32c>)
 8035c34:	f00a 030f 	and.w	r3, sl, #15
 8035c38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8035c3c:	ed93 7b00 	vldr	d7, [r3]
 8035c40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8035c44:	06f0      	lsls	r0, r6, #27
 8035c46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8035c4a:	d565      	bpl.n	8035d18 <_dtoa_r+0x368>
 8035c4c:	4b24      	ldr	r3, [pc, #144]	; (8035ce0 <_dtoa_r+0x330>)
 8035c4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8035c52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8035c56:	f7ea fdf9 	bl	802084c <__aeabi_ddiv>
 8035c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8035c5e:	f006 060f 	and.w	r6, r6, #15
 8035c62:	2503      	movs	r5, #3
 8035c64:	4f1e      	ldr	r7, [pc, #120]	; (8035ce0 <_dtoa_r+0x330>)
 8035c66:	e04c      	b.n	8035d02 <_dtoa_r+0x352>
 8035c68:	2301      	movs	r3, #1
 8035c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8035c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8035c6e:	4453      	add	r3, sl
 8035c70:	f103 0901 	add.w	r9, r3, #1
 8035c74:	9302      	str	r3, [sp, #8]
 8035c76:	464b      	mov	r3, r9
 8035c78:	2b01      	cmp	r3, #1
 8035c7a:	bfb8      	it	lt
 8035c7c:	2301      	movlt	r3, #1
 8035c7e:	e7ba      	b.n	8035bf6 <_dtoa_r+0x246>
 8035c80:	2300      	movs	r3, #0
 8035c82:	e7b2      	b.n	8035bea <_dtoa_r+0x23a>
 8035c84:	2300      	movs	r3, #0
 8035c86:	e7f0      	b.n	8035c6a <_dtoa_r+0x2ba>
 8035c88:	2501      	movs	r5, #1
 8035c8a:	2300      	movs	r3, #0
 8035c8c:	9306      	str	r3, [sp, #24]
 8035c8e:	950a      	str	r5, [sp, #40]	; 0x28
 8035c90:	f04f 33ff 	mov.w	r3, #4294967295
 8035c94:	9302      	str	r3, [sp, #8]
 8035c96:	4699      	mov	r9, r3
 8035c98:	2200      	movs	r2, #0
 8035c9a:	2312      	movs	r3, #18
 8035c9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8035c9e:	e7aa      	b.n	8035bf6 <_dtoa_r+0x246>
 8035ca0:	2301      	movs	r3, #1
 8035ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8035ca4:	e7f4      	b.n	8035c90 <_dtoa_r+0x2e0>
 8035ca6:	2301      	movs	r3, #1
 8035ca8:	9302      	str	r3, [sp, #8]
 8035caa:	4699      	mov	r9, r3
 8035cac:	461a      	mov	r2, r3
 8035cae:	e7f5      	b.n	8035c9c <_dtoa_r+0x2ec>
 8035cb0:	3101      	adds	r1, #1
 8035cb2:	6071      	str	r1, [r6, #4]
 8035cb4:	0052      	lsls	r2, r2, #1
 8035cb6:	e7a2      	b.n	8035bfe <_dtoa_r+0x24e>
 8035cb8:	636f4361 	.word	0x636f4361
 8035cbc:	3fd287a7 	.word	0x3fd287a7
 8035cc0:	8b60c8b3 	.word	0x8b60c8b3
 8035cc4:	3fc68a28 	.word	0x3fc68a28
 8035cc8:	509f79fb 	.word	0x509f79fb
 8035ccc:	3fd34413 	.word	0x3fd34413
 8035cd0:	7ff00000 	.word	0x7ff00000
 8035cd4:	08038385 	.word	0x08038385
 8035cd8:	3ff80000 	.word	0x3ff80000
 8035cdc:	08038440 	.word	0x08038440
 8035ce0:	08038418 	.word	0x08038418
 8035ce4:	080383b1 	.word	0x080383b1
 8035ce8:	07f1      	lsls	r1, r6, #31
 8035cea:	d508      	bpl.n	8035cfe <_dtoa_r+0x34e>
 8035cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8035cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8035cf4:	f7ea fc80 	bl	80205f8 <__aeabi_dmul>
 8035cf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8035cfc:	3501      	adds	r5, #1
 8035cfe:	1076      	asrs	r6, r6, #1
 8035d00:	3708      	adds	r7, #8
 8035d02:	2e00      	cmp	r6, #0
 8035d04:	d1f0      	bne.n	8035ce8 <_dtoa_r+0x338>
 8035d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8035d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035d0e:	f7ea fd9d 	bl	802084c <__aeabi_ddiv>
 8035d12:	e9cd 0100 	strd	r0, r1, [sp]
 8035d16:	e01a      	b.n	8035d4e <_dtoa_r+0x39e>
 8035d18:	2502      	movs	r5, #2
 8035d1a:	e7a3      	b.n	8035c64 <_dtoa_r+0x2b4>
 8035d1c:	f000 80a0 	beq.w	8035e60 <_dtoa_r+0x4b0>
 8035d20:	f1ca 0600 	rsb	r6, sl, #0
 8035d24:	4b9f      	ldr	r3, [pc, #636]	; (8035fa4 <_dtoa_r+0x5f4>)
 8035d26:	4fa0      	ldr	r7, [pc, #640]	; (8035fa8 <_dtoa_r+0x5f8>)
 8035d28:	f006 020f 	and.w	r2, r6, #15
 8035d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8035d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8035d38:	f7ea fc5e 	bl	80205f8 <__aeabi_dmul>
 8035d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8035d40:	1136      	asrs	r6, r6, #4
 8035d42:	2300      	movs	r3, #0
 8035d44:	2502      	movs	r5, #2
 8035d46:	2e00      	cmp	r6, #0
 8035d48:	d17f      	bne.n	8035e4a <_dtoa_r+0x49a>
 8035d4a:	2b00      	cmp	r3, #0
 8035d4c:	d1e1      	bne.n	8035d12 <_dtoa_r+0x362>
 8035d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8035d50:	2b00      	cmp	r3, #0
 8035d52:	f000 8087 	beq.w	8035e64 <_dtoa_r+0x4b4>
 8035d56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8035d5a:	2200      	movs	r2, #0
 8035d5c:	4b93      	ldr	r3, [pc, #588]	; (8035fac <_dtoa_r+0x5fc>)
 8035d5e:	4630      	mov	r0, r6
 8035d60:	4639      	mov	r1, r7
 8035d62:	f7ea febb 	bl	8020adc <__aeabi_dcmplt>
 8035d66:	2800      	cmp	r0, #0
 8035d68:	d07c      	beq.n	8035e64 <_dtoa_r+0x4b4>
 8035d6a:	f1b9 0f00 	cmp.w	r9, #0
 8035d6e:	d079      	beq.n	8035e64 <_dtoa_r+0x4b4>
 8035d70:	9b02      	ldr	r3, [sp, #8]
 8035d72:	2b00      	cmp	r3, #0
 8035d74:	dd35      	ble.n	8035de2 <_dtoa_r+0x432>
 8035d76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8035d7a:	9308      	str	r3, [sp, #32]
 8035d7c:	4639      	mov	r1, r7
 8035d7e:	2200      	movs	r2, #0
 8035d80:	4b8b      	ldr	r3, [pc, #556]	; (8035fb0 <_dtoa_r+0x600>)
 8035d82:	4630      	mov	r0, r6
 8035d84:	f7ea fc38 	bl	80205f8 <__aeabi_dmul>
 8035d88:	e9cd 0100 	strd	r0, r1, [sp]
 8035d8c:	9f02      	ldr	r7, [sp, #8]
 8035d8e:	3501      	adds	r5, #1
 8035d90:	4628      	mov	r0, r5
 8035d92:	f7ea fbc7 	bl	8020524 <__aeabi_i2d>
 8035d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8035d9a:	f7ea fc2d 	bl	80205f8 <__aeabi_dmul>
 8035d9e:	2200      	movs	r2, #0
 8035da0:	4b84      	ldr	r3, [pc, #528]	; (8035fb4 <_dtoa_r+0x604>)
 8035da2:	f7ea fa73 	bl	802028c <__adddf3>
 8035da6:	4605      	mov	r5, r0
 8035da8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8035dac:	2f00      	cmp	r7, #0
 8035dae:	d15d      	bne.n	8035e6c <_dtoa_r+0x4bc>
 8035db0:	2200      	movs	r2, #0
 8035db2:	4b81      	ldr	r3, [pc, #516]	; (8035fb8 <_dtoa_r+0x608>)
 8035db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035db8:	f7ea fa66 	bl	8020288 <__aeabi_dsub>
 8035dbc:	462a      	mov	r2, r5
 8035dbe:	4633      	mov	r3, r6
 8035dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8035dc4:	f7ea fea8 	bl	8020b18 <__aeabi_dcmpgt>
 8035dc8:	2800      	cmp	r0, #0
 8035dca:	f040 8288 	bne.w	80362de <_dtoa_r+0x92e>
 8035dce:	462a      	mov	r2, r5
 8035dd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8035dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035dd8:	f7ea fe80 	bl	8020adc <__aeabi_dcmplt>
 8035ddc:	2800      	cmp	r0, #0
 8035dde:	f040 827c 	bne.w	80362da <_dtoa_r+0x92a>
 8035de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8035de6:	e9cd 2300 	strd	r2, r3, [sp]
 8035dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8035dec:	2b00      	cmp	r3, #0
 8035dee:	f2c0 8150 	blt.w	8036092 <_dtoa_r+0x6e2>
 8035df2:	f1ba 0f0e 	cmp.w	sl, #14
 8035df6:	f300 814c 	bgt.w	8036092 <_dtoa_r+0x6e2>
 8035dfa:	4b6a      	ldr	r3, [pc, #424]	; (8035fa4 <_dtoa_r+0x5f4>)
 8035dfc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8035e00:	ed93 7b00 	vldr	d7, [r3]
 8035e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8035e06:	2b00      	cmp	r3, #0
 8035e08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8035e0c:	f280 80d8 	bge.w	8035fc0 <_dtoa_r+0x610>
 8035e10:	f1b9 0f00 	cmp.w	r9, #0
 8035e14:	f300 80d4 	bgt.w	8035fc0 <_dtoa_r+0x610>
 8035e18:	f040 825e 	bne.w	80362d8 <_dtoa_r+0x928>
 8035e1c:	2200      	movs	r2, #0
 8035e1e:	4b66      	ldr	r3, [pc, #408]	; (8035fb8 <_dtoa_r+0x608>)
 8035e20:	ec51 0b17 	vmov	r0, r1, d7
 8035e24:	f7ea fbe8 	bl	80205f8 <__aeabi_dmul>
 8035e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8035e2c:	f7ea fe6a 	bl	8020b04 <__aeabi_dcmpge>
 8035e30:	464f      	mov	r7, r9
 8035e32:	464e      	mov	r6, r9
 8035e34:	2800      	cmp	r0, #0
 8035e36:	f040 8234 	bne.w	80362a2 <_dtoa_r+0x8f2>
 8035e3a:	2331      	movs	r3, #49	; 0x31
 8035e3c:	f10b 0501 	add.w	r5, fp, #1
 8035e40:	f88b 3000 	strb.w	r3, [fp]
 8035e44:	f10a 0a01 	add.w	sl, sl, #1
 8035e48:	e22f      	b.n	80362aa <_dtoa_r+0x8fa>
 8035e4a:	07f2      	lsls	r2, r6, #31
 8035e4c:	d505      	bpl.n	8035e5a <_dtoa_r+0x4aa>
 8035e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8035e52:	f7ea fbd1 	bl	80205f8 <__aeabi_dmul>
 8035e56:	3501      	adds	r5, #1
 8035e58:	2301      	movs	r3, #1
 8035e5a:	1076      	asrs	r6, r6, #1
 8035e5c:	3708      	adds	r7, #8
 8035e5e:	e772      	b.n	8035d46 <_dtoa_r+0x396>
 8035e60:	2502      	movs	r5, #2
 8035e62:	e774      	b.n	8035d4e <_dtoa_r+0x39e>
 8035e64:	f8cd a020 	str.w	sl, [sp, #32]
 8035e68:	464f      	mov	r7, r9
 8035e6a:	e791      	b.n	8035d90 <_dtoa_r+0x3e0>
 8035e6c:	4b4d      	ldr	r3, [pc, #308]	; (8035fa4 <_dtoa_r+0x5f4>)
 8035e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8035e72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8035e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8035e78:	2b00      	cmp	r3, #0
 8035e7a:	d047      	beq.n	8035f0c <_dtoa_r+0x55c>
 8035e7c:	4602      	mov	r2, r0
 8035e7e:	460b      	mov	r3, r1
 8035e80:	2000      	movs	r0, #0
 8035e82:	494e      	ldr	r1, [pc, #312]	; (8035fbc <_dtoa_r+0x60c>)
 8035e84:	f7ea fce2 	bl	802084c <__aeabi_ddiv>
 8035e88:	462a      	mov	r2, r5
 8035e8a:	4633      	mov	r3, r6
 8035e8c:	f7ea f9fc 	bl	8020288 <__aeabi_dsub>
 8035e90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8035e94:	465d      	mov	r5, fp
 8035e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035e9a:	f7ea fe5d 	bl	8020b58 <__aeabi_d2iz>
 8035e9e:	4606      	mov	r6, r0
 8035ea0:	f7ea fb40 	bl	8020524 <__aeabi_i2d>
 8035ea4:	4602      	mov	r2, r0
 8035ea6:	460b      	mov	r3, r1
 8035ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035eac:	f7ea f9ec 	bl	8020288 <__aeabi_dsub>
 8035eb0:	3630      	adds	r6, #48	; 0x30
 8035eb2:	f805 6b01 	strb.w	r6, [r5], #1
 8035eb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8035eba:	e9cd 0100 	strd	r0, r1, [sp]
 8035ebe:	f7ea fe0d 	bl	8020adc <__aeabi_dcmplt>
 8035ec2:	2800      	cmp	r0, #0
 8035ec4:	d163      	bne.n	8035f8e <_dtoa_r+0x5de>
 8035ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8035eca:	2000      	movs	r0, #0
 8035ecc:	4937      	ldr	r1, [pc, #220]	; (8035fac <_dtoa_r+0x5fc>)
 8035ece:	f7ea f9db 	bl	8020288 <__aeabi_dsub>
 8035ed2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8035ed6:	f7ea fe01 	bl	8020adc <__aeabi_dcmplt>
 8035eda:	2800      	cmp	r0, #0
 8035edc:	f040 80b7 	bne.w	803604e <_dtoa_r+0x69e>
 8035ee0:	eba5 030b 	sub.w	r3, r5, fp
 8035ee4:	429f      	cmp	r7, r3
 8035ee6:	f77f af7c 	ble.w	8035de2 <_dtoa_r+0x432>
 8035eea:	2200      	movs	r2, #0
 8035eec:	4b30      	ldr	r3, [pc, #192]	; (8035fb0 <_dtoa_r+0x600>)
 8035eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8035ef2:	f7ea fb81 	bl	80205f8 <__aeabi_dmul>
 8035ef6:	2200      	movs	r2, #0
 8035ef8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8035efc:	4b2c      	ldr	r3, [pc, #176]	; (8035fb0 <_dtoa_r+0x600>)
 8035efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035f02:	f7ea fb79 	bl	80205f8 <__aeabi_dmul>
 8035f06:	e9cd 0100 	strd	r0, r1, [sp]
 8035f0a:	e7c4      	b.n	8035e96 <_dtoa_r+0x4e6>
 8035f0c:	462a      	mov	r2, r5
 8035f0e:	4633      	mov	r3, r6
 8035f10:	f7ea fb72 	bl	80205f8 <__aeabi_dmul>
 8035f14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8035f18:	eb0b 0507 	add.w	r5, fp, r7
 8035f1c:	465e      	mov	r6, fp
 8035f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035f22:	f7ea fe19 	bl	8020b58 <__aeabi_d2iz>
 8035f26:	4607      	mov	r7, r0
 8035f28:	f7ea fafc 	bl	8020524 <__aeabi_i2d>
 8035f2c:	3730      	adds	r7, #48	; 0x30
 8035f2e:	4602      	mov	r2, r0
 8035f30:	460b      	mov	r3, r1
 8035f32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035f36:	f7ea f9a7 	bl	8020288 <__aeabi_dsub>
 8035f3a:	f806 7b01 	strb.w	r7, [r6], #1
 8035f3e:	42ae      	cmp	r6, r5
 8035f40:	e9cd 0100 	strd	r0, r1, [sp]
 8035f44:	f04f 0200 	mov.w	r2, #0
 8035f48:	d126      	bne.n	8035f98 <_dtoa_r+0x5e8>
 8035f4a:	4b1c      	ldr	r3, [pc, #112]	; (8035fbc <_dtoa_r+0x60c>)
 8035f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8035f50:	f7ea f99c 	bl	802028c <__adddf3>
 8035f54:	4602      	mov	r2, r0
 8035f56:	460b      	mov	r3, r1
 8035f58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035f5c:	f7ea fddc 	bl	8020b18 <__aeabi_dcmpgt>
 8035f60:	2800      	cmp	r0, #0
 8035f62:	d174      	bne.n	803604e <_dtoa_r+0x69e>
 8035f64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8035f68:	2000      	movs	r0, #0
 8035f6a:	4914      	ldr	r1, [pc, #80]	; (8035fbc <_dtoa_r+0x60c>)
 8035f6c:	f7ea f98c 	bl	8020288 <__aeabi_dsub>
 8035f70:	4602      	mov	r2, r0
 8035f72:	460b      	mov	r3, r1
 8035f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8035f78:	f7ea fdb0 	bl	8020adc <__aeabi_dcmplt>
 8035f7c:	2800      	cmp	r0, #0
 8035f7e:	f43f af30 	beq.w	8035de2 <_dtoa_r+0x432>
 8035f82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8035f86:	2b30      	cmp	r3, #48	; 0x30
 8035f88:	f105 32ff 	add.w	r2, r5, #4294967295
 8035f8c:	d002      	beq.n	8035f94 <_dtoa_r+0x5e4>
 8035f8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8035f92:	e04a      	b.n	803602a <_dtoa_r+0x67a>
 8035f94:	4615      	mov	r5, r2
 8035f96:	e7f4      	b.n	8035f82 <_dtoa_r+0x5d2>
 8035f98:	4b05      	ldr	r3, [pc, #20]	; (8035fb0 <_dtoa_r+0x600>)
 8035f9a:	f7ea fb2d 	bl	80205f8 <__aeabi_dmul>
 8035f9e:	e9cd 0100 	strd	r0, r1, [sp]
 8035fa2:	e7bc      	b.n	8035f1e <_dtoa_r+0x56e>
 8035fa4:	08038440 	.word	0x08038440
 8035fa8:	08038418 	.word	0x08038418
 8035fac:	3ff00000 	.word	0x3ff00000
 8035fb0:	40240000 	.word	0x40240000
 8035fb4:	401c0000 	.word	0x401c0000
 8035fb8:	40140000 	.word	0x40140000
 8035fbc:	3fe00000 	.word	0x3fe00000
 8035fc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8035fc4:	465d      	mov	r5, fp
 8035fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8035fca:	4630      	mov	r0, r6
 8035fcc:	4639      	mov	r1, r7
 8035fce:	f7ea fc3d 	bl	802084c <__aeabi_ddiv>
 8035fd2:	f7ea fdc1 	bl	8020b58 <__aeabi_d2iz>
 8035fd6:	4680      	mov	r8, r0
 8035fd8:	f7ea faa4 	bl	8020524 <__aeabi_i2d>
 8035fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8035fe0:	f7ea fb0a 	bl	80205f8 <__aeabi_dmul>
 8035fe4:	4602      	mov	r2, r0
 8035fe6:	460b      	mov	r3, r1
 8035fe8:	4630      	mov	r0, r6
 8035fea:	4639      	mov	r1, r7
 8035fec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8035ff0:	f7ea f94a 	bl	8020288 <__aeabi_dsub>
 8035ff4:	f805 6b01 	strb.w	r6, [r5], #1
 8035ff8:	eba5 060b 	sub.w	r6, r5, fp
 8035ffc:	45b1      	cmp	r9, r6
 8035ffe:	4602      	mov	r2, r0
 8036000:	460b      	mov	r3, r1
 8036002:	d139      	bne.n	8036078 <_dtoa_r+0x6c8>
 8036004:	f7ea f942 	bl	802028c <__adddf3>
 8036008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803600c:	4606      	mov	r6, r0
 803600e:	460f      	mov	r7, r1
 8036010:	f7ea fd82 	bl	8020b18 <__aeabi_dcmpgt>
 8036014:	b9c8      	cbnz	r0, 803604a <_dtoa_r+0x69a>
 8036016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803601a:	4630      	mov	r0, r6
 803601c:	4639      	mov	r1, r7
 803601e:	f7ea fd53 	bl	8020ac8 <__aeabi_dcmpeq>
 8036022:	b110      	cbz	r0, 803602a <_dtoa_r+0x67a>
 8036024:	f018 0f01 	tst.w	r8, #1
 8036028:	d10f      	bne.n	803604a <_dtoa_r+0x69a>
 803602a:	9904      	ldr	r1, [sp, #16]
 803602c:	4620      	mov	r0, r4
 803602e:	f000 fc99 	bl	8036964 <_Bfree>
 8036032:	2300      	movs	r3, #0
 8036034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8036036:	702b      	strb	r3, [r5, #0]
 8036038:	f10a 0301 	add.w	r3, sl, #1
 803603c:	6013      	str	r3, [r2, #0]
 803603e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8036040:	2b00      	cmp	r3, #0
 8036042:	f000 8241 	beq.w	80364c8 <_dtoa_r+0xb18>
 8036046:	601d      	str	r5, [r3, #0]
 8036048:	e23e      	b.n	80364c8 <_dtoa_r+0xb18>
 803604a:	f8cd a020 	str.w	sl, [sp, #32]
 803604e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8036052:	2a39      	cmp	r2, #57	; 0x39
 8036054:	f105 33ff 	add.w	r3, r5, #4294967295
 8036058:	d108      	bne.n	803606c <_dtoa_r+0x6bc>
 803605a:	459b      	cmp	fp, r3
 803605c:	d10a      	bne.n	8036074 <_dtoa_r+0x6c4>
 803605e:	9b08      	ldr	r3, [sp, #32]
 8036060:	3301      	adds	r3, #1
 8036062:	9308      	str	r3, [sp, #32]
 8036064:	2330      	movs	r3, #48	; 0x30
 8036066:	f88b 3000 	strb.w	r3, [fp]
 803606a:	465b      	mov	r3, fp
 803606c:	781a      	ldrb	r2, [r3, #0]
 803606e:	3201      	adds	r2, #1
 8036070:	701a      	strb	r2, [r3, #0]
 8036072:	e78c      	b.n	8035f8e <_dtoa_r+0x5de>
 8036074:	461d      	mov	r5, r3
 8036076:	e7ea      	b.n	803604e <_dtoa_r+0x69e>
 8036078:	2200      	movs	r2, #0
 803607a:	4b9b      	ldr	r3, [pc, #620]	; (80362e8 <_dtoa_r+0x938>)
 803607c:	f7ea fabc 	bl	80205f8 <__aeabi_dmul>
 8036080:	2200      	movs	r2, #0
 8036082:	2300      	movs	r3, #0
 8036084:	4606      	mov	r6, r0
 8036086:	460f      	mov	r7, r1
 8036088:	f7ea fd1e 	bl	8020ac8 <__aeabi_dcmpeq>
 803608c:	2800      	cmp	r0, #0
 803608e:	d09a      	beq.n	8035fc6 <_dtoa_r+0x616>
 8036090:	e7cb      	b.n	803602a <_dtoa_r+0x67a>
 8036092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8036094:	2a00      	cmp	r2, #0
 8036096:	f000 808b 	beq.w	80361b0 <_dtoa_r+0x800>
 803609a:	9a06      	ldr	r2, [sp, #24]
 803609c:	2a01      	cmp	r2, #1
 803609e:	dc6e      	bgt.n	803617e <_dtoa_r+0x7ce>
 80360a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80360a2:	2a00      	cmp	r2, #0
 80360a4:	d067      	beq.n	8036176 <_dtoa_r+0x7c6>
 80360a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80360aa:	9f07      	ldr	r7, [sp, #28]
 80360ac:	9d05      	ldr	r5, [sp, #20]
 80360ae:	9a05      	ldr	r2, [sp, #20]
 80360b0:	2101      	movs	r1, #1
 80360b2:	441a      	add	r2, r3
 80360b4:	4620      	mov	r0, r4
 80360b6:	9205      	str	r2, [sp, #20]
 80360b8:	4498      	add	r8, r3
 80360ba:	f000 fcf3 	bl	8036aa4 <__i2b>
 80360be:	4606      	mov	r6, r0
 80360c0:	2d00      	cmp	r5, #0
 80360c2:	dd0c      	ble.n	80360de <_dtoa_r+0x72e>
 80360c4:	f1b8 0f00 	cmp.w	r8, #0
 80360c8:	dd09      	ble.n	80360de <_dtoa_r+0x72e>
 80360ca:	4545      	cmp	r5, r8
 80360cc:	9a05      	ldr	r2, [sp, #20]
 80360ce:	462b      	mov	r3, r5
 80360d0:	bfa8      	it	ge
 80360d2:	4643      	movge	r3, r8
 80360d4:	1ad2      	subs	r2, r2, r3
 80360d6:	9205      	str	r2, [sp, #20]
 80360d8:	1aed      	subs	r5, r5, r3
 80360da:	eba8 0803 	sub.w	r8, r8, r3
 80360de:	9b07      	ldr	r3, [sp, #28]
 80360e0:	b1eb      	cbz	r3, 803611e <_dtoa_r+0x76e>
 80360e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80360e4:	2b00      	cmp	r3, #0
 80360e6:	d067      	beq.n	80361b8 <_dtoa_r+0x808>
 80360e8:	b18f      	cbz	r7, 803610e <_dtoa_r+0x75e>
 80360ea:	4631      	mov	r1, r6
 80360ec:	463a      	mov	r2, r7
 80360ee:	4620      	mov	r0, r4
 80360f0:	f000 fd78 	bl	8036be4 <__pow5mult>
 80360f4:	9a04      	ldr	r2, [sp, #16]
 80360f6:	4601      	mov	r1, r0
 80360f8:	4606      	mov	r6, r0
 80360fa:	4620      	mov	r0, r4
 80360fc:	f000 fcdb 	bl	8036ab6 <__multiply>
 8036100:	9904      	ldr	r1, [sp, #16]
 8036102:	9008      	str	r0, [sp, #32]
 8036104:	4620      	mov	r0, r4
 8036106:	f000 fc2d 	bl	8036964 <_Bfree>
 803610a:	9b08      	ldr	r3, [sp, #32]
 803610c:	9304      	str	r3, [sp, #16]
 803610e:	9b07      	ldr	r3, [sp, #28]
 8036110:	1bda      	subs	r2, r3, r7
 8036112:	d004      	beq.n	803611e <_dtoa_r+0x76e>
 8036114:	9904      	ldr	r1, [sp, #16]
 8036116:	4620      	mov	r0, r4
 8036118:	f000 fd64 	bl	8036be4 <__pow5mult>
 803611c:	9004      	str	r0, [sp, #16]
 803611e:	2101      	movs	r1, #1
 8036120:	4620      	mov	r0, r4
 8036122:	f000 fcbf 	bl	8036aa4 <__i2b>
 8036126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8036128:	4607      	mov	r7, r0
 803612a:	2b00      	cmp	r3, #0
 803612c:	f000 81d0 	beq.w	80364d0 <_dtoa_r+0xb20>
 8036130:	461a      	mov	r2, r3
 8036132:	4601      	mov	r1, r0
 8036134:	4620      	mov	r0, r4
 8036136:	f000 fd55 	bl	8036be4 <__pow5mult>
 803613a:	9b06      	ldr	r3, [sp, #24]
 803613c:	2b01      	cmp	r3, #1
 803613e:	4607      	mov	r7, r0
 8036140:	dc40      	bgt.n	80361c4 <_dtoa_r+0x814>
 8036142:	9b00      	ldr	r3, [sp, #0]
 8036144:	2b00      	cmp	r3, #0
 8036146:	d139      	bne.n	80361bc <_dtoa_r+0x80c>
 8036148:	9b01      	ldr	r3, [sp, #4]
 803614a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803614e:	2b00      	cmp	r3, #0
 8036150:	d136      	bne.n	80361c0 <_dtoa_r+0x810>
 8036152:	9b01      	ldr	r3, [sp, #4]
 8036154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8036158:	0d1b      	lsrs	r3, r3, #20
 803615a:	051b      	lsls	r3, r3, #20
 803615c:	b12b      	cbz	r3, 803616a <_dtoa_r+0x7ba>
 803615e:	9b05      	ldr	r3, [sp, #20]
 8036160:	3301      	adds	r3, #1
 8036162:	9305      	str	r3, [sp, #20]
 8036164:	f108 0801 	add.w	r8, r8, #1
 8036168:	2301      	movs	r3, #1
 803616a:	9307      	str	r3, [sp, #28]
 803616c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803616e:	2b00      	cmp	r3, #0
 8036170:	d12a      	bne.n	80361c8 <_dtoa_r+0x818>
 8036172:	2001      	movs	r0, #1
 8036174:	e030      	b.n	80361d8 <_dtoa_r+0x828>
 8036176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8036178:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 803617c:	e795      	b.n	80360aa <_dtoa_r+0x6fa>
 803617e:	9b07      	ldr	r3, [sp, #28]
 8036180:	f109 37ff 	add.w	r7, r9, #4294967295
 8036184:	42bb      	cmp	r3, r7
 8036186:	bfbf      	itttt	lt
 8036188:	9b07      	ldrlt	r3, [sp, #28]
 803618a:	9707      	strlt	r7, [sp, #28]
 803618c:	1afa      	sublt	r2, r7, r3
 803618e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8036190:	bfbb      	ittet	lt
 8036192:	189b      	addlt	r3, r3, r2
 8036194:	930e      	strlt	r3, [sp, #56]	; 0x38
 8036196:	1bdf      	subge	r7, r3, r7
 8036198:	2700      	movlt	r7, #0
 803619a:	f1b9 0f00 	cmp.w	r9, #0
 803619e:	bfb5      	itete	lt
 80361a0:	9b05      	ldrlt	r3, [sp, #20]
 80361a2:	9d05      	ldrge	r5, [sp, #20]
 80361a4:	eba3 0509 	sublt.w	r5, r3, r9
 80361a8:	464b      	movge	r3, r9
 80361aa:	bfb8      	it	lt
 80361ac:	2300      	movlt	r3, #0
 80361ae:	e77e      	b.n	80360ae <_dtoa_r+0x6fe>
 80361b0:	9f07      	ldr	r7, [sp, #28]
 80361b2:	9d05      	ldr	r5, [sp, #20]
 80361b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80361b6:	e783      	b.n	80360c0 <_dtoa_r+0x710>
 80361b8:	9a07      	ldr	r2, [sp, #28]
 80361ba:	e7ab      	b.n	8036114 <_dtoa_r+0x764>
 80361bc:	2300      	movs	r3, #0
 80361be:	e7d4      	b.n	803616a <_dtoa_r+0x7ba>
 80361c0:	9b00      	ldr	r3, [sp, #0]
 80361c2:	e7d2      	b.n	803616a <_dtoa_r+0x7ba>
 80361c4:	2300      	movs	r3, #0
 80361c6:	9307      	str	r3, [sp, #28]
 80361c8:	693b      	ldr	r3, [r7, #16]
 80361ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80361ce:	6918      	ldr	r0, [r3, #16]
 80361d0:	f000 fc1a 	bl	8036a08 <__hi0bits>
 80361d4:	f1c0 0020 	rsb	r0, r0, #32
 80361d8:	4440      	add	r0, r8
 80361da:	f010 001f 	ands.w	r0, r0, #31
 80361de:	d047      	beq.n	8036270 <_dtoa_r+0x8c0>
 80361e0:	f1c0 0320 	rsb	r3, r0, #32
 80361e4:	2b04      	cmp	r3, #4
 80361e6:	dd3b      	ble.n	8036260 <_dtoa_r+0x8b0>
 80361e8:	9b05      	ldr	r3, [sp, #20]
 80361ea:	f1c0 001c 	rsb	r0, r0, #28
 80361ee:	4403      	add	r3, r0
 80361f0:	9305      	str	r3, [sp, #20]
 80361f2:	4405      	add	r5, r0
 80361f4:	4480      	add	r8, r0
 80361f6:	9b05      	ldr	r3, [sp, #20]
 80361f8:	2b00      	cmp	r3, #0
 80361fa:	dd05      	ble.n	8036208 <_dtoa_r+0x858>
 80361fc:	461a      	mov	r2, r3
 80361fe:	9904      	ldr	r1, [sp, #16]
 8036200:	4620      	mov	r0, r4
 8036202:	f000 fd3d 	bl	8036c80 <__lshift>
 8036206:	9004      	str	r0, [sp, #16]
 8036208:	f1b8 0f00 	cmp.w	r8, #0
 803620c:	dd05      	ble.n	803621a <_dtoa_r+0x86a>
 803620e:	4639      	mov	r1, r7
 8036210:	4642      	mov	r2, r8
 8036212:	4620      	mov	r0, r4
 8036214:	f000 fd34 	bl	8036c80 <__lshift>
 8036218:	4607      	mov	r7, r0
 803621a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803621c:	b353      	cbz	r3, 8036274 <_dtoa_r+0x8c4>
 803621e:	4639      	mov	r1, r7
 8036220:	9804      	ldr	r0, [sp, #16]
 8036222:	f000 fd81 	bl	8036d28 <__mcmp>
 8036226:	2800      	cmp	r0, #0
 8036228:	da24      	bge.n	8036274 <_dtoa_r+0x8c4>
 803622a:	2300      	movs	r3, #0
 803622c:	220a      	movs	r2, #10
 803622e:	9904      	ldr	r1, [sp, #16]
 8036230:	4620      	mov	r0, r4
 8036232:	f000 fbae 	bl	8036992 <__multadd>
 8036236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8036238:	9004      	str	r0, [sp, #16]
 803623a:	f10a 3aff 	add.w	sl, sl, #4294967295
 803623e:	2b00      	cmp	r3, #0
 8036240:	f000 814d 	beq.w	80364de <_dtoa_r+0xb2e>
 8036244:	2300      	movs	r3, #0
 8036246:	4631      	mov	r1, r6
 8036248:	220a      	movs	r2, #10
 803624a:	4620      	mov	r0, r4
 803624c:	f000 fba1 	bl	8036992 <__multadd>
 8036250:	9b02      	ldr	r3, [sp, #8]
 8036252:	2b00      	cmp	r3, #0
 8036254:	4606      	mov	r6, r0
 8036256:	dc4f      	bgt.n	80362f8 <_dtoa_r+0x948>
 8036258:	9b06      	ldr	r3, [sp, #24]
 803625a:	2b02      	cmp	r3, #2
 803625c:	dd4c      	ble.n	80362f8 <_dtoa_r+0x948>
 803625e:	e011      	b.n	8036284 <_dtoa_r+0x8d4>
 8036260:	d0c9      	beq.n	80361f6 <_dtoa_r+0x846>
 8036262:	9a05      	ldr	r2, [sp, #20]
 8036264:	331c      	adds	r3, #28
 8036266:	441a      	add	r2, r3
 8036268:	9205      	str	r2, [sp, #20]
 803626a:	441d      	add	r5, r3
 803626c:	4498      	add	r8, r3
 803626e:	e7c2      	b.n	80361f6 <_dtoa_r+0x846>
 8036270:	4603      	mov	r3, r0
 8036272:	e7f6      	b.n	8036262 <_dtoa_r+0x8b2>
 8036274:	f1b9 0f00 	cmp.w	r9, #0
 8036278:	dc38      	bgt.n	80362ec <_dtoa_r+0x93c>
 803627a:	9b06      	ldr	r3, [sp, #24]
 803627c:	2b02      	cmp	r3, #2
 803627e:	dd35      	ble.n	80362ec <_dtoa_r+0x93c>
 8036280:	f8cd 9008 	str.w	r9, [sp, #8]
 8036284:	9b02      	ldr	r3, [sp, #8]
 8036286:	b963      	cbnz	r3, 80362a2 <_dtoa_r+0x8f2>
 8036288:	4639      	mov	r1, r7
 803628a:	2205      	movs	r2, #5
 803628c:	4620      	mov	r0, r4
 803628e:	f000 fb80 	bl	8036992 <__multadd>
 8036292:	4601      	mov	r1, r0
 8036294:	4607      	mov	r7, r0
 8036296:	9804      	ldr	r0, [sp, #16]
 8036298:	f000 fd46 	bl	8036d28 <__mcmp>
 803629c:	2800      	cmp	r0, #0
 803629e:	f73f adcc 	bgt.w	8035e3a <_dtoa_r+0x48a>
 80362a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80362a4:	465d      	mov	r5, fp
 80362a6:	ea6f 0a03 	mvn.w	sl, r3
 80362aa:	f04f 0900 	mov.w	r9, #0
 80362ae:	4639      	mov	r1, r7
 80362b0:	4620      	mov	r0, r4
 80362b2:	f000 fb57 	bl	8036964 <_Bfree>
 80362b6:	2e00      	cmp	r6, #0
 80362b8:	f43f aeb7 	beq.w	803602a <_dtoa_r+0x67a>
 80362bc:	f1b9 0f00 	cmp.w	r9, #0
 80362c0:	d005      	beq.n	80362ce <_dtoa_r+0x91e>
 80362c2:	45b1      	cmp	r9, r6
 80362c4:	d003      	beq.n	80362ce <_dtoa_r+0x91e>
 80362c6:	4649      	mov	r1, r9
 80362c8:	4620      	mov	r0, r4
 80362ca:	f000 fb4b 	bl	8036964 <_Bfree>
 80362ce:	4631      	mov	r1, r6
 80362d0:	4620      	mov	r0, r4
 80362d2:	f000 fb47 	bl	8036964 <_Bfree>
 80362d6:	e6a8      	b.n	803602a <_dtoa_r+0x67a>
 80362d8:	2700      	movs	r7, #0
 80362da:	463e      	mov	r6, r7
 80362dc:	e7e1      	b.n	80362a2 <_dtoa_r+0x8f2>
 80362de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80362e2:	463e      	mov	r6, r7
 80362e4:	e5a9      	b.n	8035e3a <_dtoa_r+0x48a>
 80362e6:	bf00      	nop
 80362e8:	40240000 	.word	0x40240000
 80362ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80362ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80362f2:	2b00      	cmp	r3, #0
 80362f4:	f000 80fa 	beq.w	80364ec <_dtoa_r+0xb3c>
 80362f8:	2d00      	cmp	r5, #0
 80362fa:	dd05      	ble.n	8036308 <_dtoa_r+0x958>
 80362fc:	4631      	mov	r1, r6
 80362fe:	462a      	mov	r2, r5
 8036300:	4620      	mov	r0, r4
 8036302:	f000 fcbd 	bl	8036c80 <__lshift>
 8036306:	4606      	mov	r6, r0
 8036308:	9b07      	ldr	r3, [sp, #28]
 803630a:	2b00      	cmp	r3, #0
 803630c:	d04c      	beq.n	80363a8 <_dtoa_r+0x9f8>
 803630e:	6871      	ldr	r1, [r6, #4]
 8036310:	4620      	mov	r0, r4
 8036312:	f000 faf3 	bl	80368fc <_Balloc>
 8036316:	6932      	ldr	r2, [r6, #16]
 8036318:	3202      	adds	r2, #2
 803631a:	4605      	mov	r5, r0
 803631c:	0092      	lsls	r2, r2, #2
 803631e:	f106 010c 	add.w	r1, r6, #12
 8036322:	300c      	adds	r0, #12
 8036324:	f7fe fc94 	bl	8034c50 <memcpy>
 8036328:	2201      	movs	r2, #1
 803632a:	4629      	mov	r1, r5
 803632c:	4620      	mov	r0, r4
 803632e:	f000 fca7 	bl	8036c80 <__lshift>
 8036332:	9b00      	ldr	r3, [sp, #0]
 8036334:	f8cd b014 	str.w	fp, [sp, #20]
 8036338:	f003 0301 	and.w	r3, r3, #1
 803633c:	46b1      	mov	r9, r6
 803633e:	9307      	str	r3, [sp, #28]
 8036340:	4606      	mov	r6, r0
 8036342:	4639      	mov	r1, r7
 8036344:	9804      	ldr	r0, [sp, #16]
 8036346:	f7ff faa5 	bl	8035894 <quorem>
 803634a:	4649      	mov	r1, r9
 803634c:	4605      	mov	r5, r0
 803634e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8036352:	9804      	ldr	r0, [sp, #16]
 8036354:	f000 fce8 	bl	8036d28 <__mcmp>
 8036358:	4632      	mov	r2, r6
 803635a:	9000      	str	r0, [sp, #0]
 803635c:	4639      	mov	r1, r7
 803635e:	4620      	mov	r0, r4
 8036360:	f000 fcfc 	bl	8036d5c <__mdiff>
 8036364:	68c3      	ldr	r3, [r0, #12]
 8036366:	4602      	mov	r2, r0
 8036368:	bb03      	cbnz	r3, 80363ac <_dtoa_r+0x9fc>
 803636a:	4601      	mov	r1, r0
 803636c:	9008      	str	r0, [sp, #32]
 803636e:	9804      	ldr	r0, [sp, #16]
 8036370:	f000 fcda 	bl	8036d28 <__mcmp>
 8036374:	9a08      	ldr	r2, [sp, #32]
 8036376:	4603      	mov	r3, r0
 8036378:	4611      	mov	r1, r2
 803637a:	4620      	mov	r0, r4
 803637c:	9308      	str	r3, [sp, #32]
 803637e:	f000 faf1 	bl	8036964 <_Bfree>
 8036382:	9b08      	ldr	r3, [sp, #32]
 8036384:	b9a3      	cbnz	r3, 80363b0 <_dtoa_r+0xa00>
 8036386:	9a06      	ldr	r2, [sp, #24]
 8036388:	b992      	cbnz	r2, 80363b0 <_dtoa_r+0xa00>
 803638a:	9a07      	ldr	r2, [sp, #28]
 803638c:	b982      	cbnz	r2, 80363b0 <_dtoa_r+0xa00>
 803638e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8036392:	d029      	beq.n	80363e8 <_dtoa_r+0xa38>
 8036394:	9b00      	ldr	r3, [sp, #0]
 8036396:	2b00      	cmp	r3, #0
 8036398:	dd01      	ble.n	803639e <_dtoa_r+0x9ee>
 803639a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 803639e:	9b05      	ldr	r3, [sp, #20]
 80363a0:	1c5d      	adds	r5, r3, #1
 80363a2:	f883 8000 	strb.w	r8, [r3]
 80363a6:	e782      	b.n	80362ae <_dtoa_r+0x8fe>
 80363a8:	4630      	mov	r0, r6
 80363aa:	e7c2      	b.n	8036332 <_dtoa_r+0x982>
 80363ac:	2301      	movs	r3, #1
 80363ae:	e7e3      	b.n	8036378 <_dtoa_r+0x9c8>
 80363b0:	9a00      	ldr	r2, [sp, #0]
 80363b2:	2a00      	cmp	r2, #0
 80363b4:	db04      	blt.n	80363c0 <_dtoa_r+0xa10>
 80363b6:	d125      	bne.n	8036404 <_dtoa_r+0xa54>
 80363b8:	9a06      	ldr	r2, [sp, #24]
 80363ba:	bb1a      	cbnz	r2, 8036404 <_dtoa_r+0xa54>
 80363bc:	9a07      	ldr	r2, [sp, #28]
 80363be:	bb0a      	cbnz	r2, 8036404 <_dtoa_r+0xa54>
 80363c0:	2b00      	cmp	r3, #0
 80363c2:	ddec      	ble.n	803639e <_dtoa_r+0x9ee>
 80363c4:	2201      	movs	r2, #1
 80363c6:	9904      	ldr	r1, [sp, #16]
 80363c8:	4620      	mov	r0, r4
 80363ca:	f000 fc59 	bl	8036c80 <__lshift>
 80363ce:	4639      	mov	r1, r7
 80363d0:	9004      	str	r0, [sp, #16]
 80363d2:	f000 fca9 	bl	8036d28 <__mcmp>
 80363d6:	2800      	cmp	r0, #0
 80363d8:	dc03      	bgt.n	80363e2 <_dtoa_r+0xa32>
 80363da:	d1e0      	bne.n	803639e <_dtoa_r+0x9ee>
 80363dc:	f018 0f01 	tst.w	r8, #1
 80363e0:	d0dd      	beq.n	803639e <_dtoa_r+0x9ee>
 80363e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80363e6:	d1d8      	bne.n	803639a <_dtoa_r+0x9ea>
 80363e8:	9b05      	ldr	r3, [sp, #20]
 80363ea:	9a05      	ldr	r2, [sp, #20]
 80363ec:	1c5d      	adds	r5, r3, #1
 80363ee:	2339      	movs	r3, #57	; 0x39
 80363f0:	7013      	strb	r3, [r2, #0]
 80363f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80363f6:	2b39      	cmp	r3, #57	; 0x39
 80363f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80363fc:	d04f      	beq.n	803649e <_dtoa_r+0xaee>
 80363fe:	3301      	adds	r3, #1
 8036400:	7013      	strb	r3, [r2, #0]
 8036402:	e754      	b.n	80362ae <_dtoa_r+0x8fe>
 8036404:	9a05      	ldr	r2, [sp, #20]
 8036406:	2b00      	cmp	r3, #0
 8036408:	f102 0501 	add.w	r5, r2, #1
 803640c:	dd06      	ble.n	803641c <_dtoa_r+0xa6c>
 803640e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8036412:	d0e9      	beq.n	80363e8 <_dtoa_r+0xa38>
 8036414:	f108 0801 	add.w	r8, r8, #1
 8036418:	9b05      	ldr	r3, [sp, #20]
 803641a:	e7c2      	b.n	80363a2 <_dtoa_r+0x9f2>
 803641c:	9a02      	ldr	r2, [sp, #8]
 803641e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8036422:	eba5 030b 	sub.w	r3, r5, fp
 8036426:	4293      	cmp	r3, r2
 8036428:	d021      	beq.n	803646e <_dtoa_r+0xabe>
 803642a:	2300      	movs	r3, #0
 803642c:	220a      	movs	r2, #10
 803642e:	9904      	ldr	r1, [sp, #16]
 8036430:	4620      	mov	r0, r4
 8036432:	f000 faae 	bl	8036992 <__multadd>
 8036436:	45b1      	cmp	r9, r6
 8036438:	9004      	str	r0, [sp, #16]
 803643a:	f04f 0300 	mov.w	r3, #0
 803643e:	f04f 020a 	mov.w	r2, #10
 8036442:	4649      	mov	r1, r9
 8036444:	4620      	mov	r0, r4
 8036446:	d105      	bne.n	8036454 <_dtoa_r+0xaa4>
 8036448:	f000 faa3 	bl	8036992 <__multadd>
 803644c:	4681      	mov	r9, r0
 803644e:	4606      	mov	r6, r0
 8036450:	9505      	str	r5, [sp, #20]
 8036452:	e776      	b.n	8036342 <_dtoa_r+0x992>
 8036454:	f000 fa9d 	bl	8036992 <__multadd>
 8036458:	4631      	mov	r1, r6
 803645a:	4681      	mov	r9, r0
 803645c:	2300      	movs	r3, #0
 803645e:	220a      	movs	r2, #10
 8036460:	4620      	mov	r0, r4
 8036462:	f000 fa96 	bl	8036992 <__multadd>
 8036466:	4606      	mov	r6, r0
 8036468:	e7f2      	b.n	8036450 <_dtoa_r+0xaa0>
 803646a:	f04f 0900 	mov.w	r9, #0
 803646e:	2201      	movs	r2, #1
 8036470:	9904      	ldr	r1, [sp, #16]
 8036472:	4620      	mov	r0, r4
 8036474:	f000 fc04 	bl	8036c80 <__lshift>
 8036478:	4639      	mov	r1, r7
 803647a:	9004      	str	r0, [sp, #16]
 803647c:	f000 fc54 	bl	8036d28 <__mcmp>
 8036480:	2800      	cmp	r0, #0
 8036482:	dcb6      	bgt.n	80363f2 <_dtoa_r+0xa42>
 8036484:	d102      	bne.n	803648c <_dtoa_r+0xadc>
 8036486:	f018 0f01 	tst.w	r8, #1
 803648a:	d1b2      	bne.n	80363f2 <_dtoa_r+0xa42>
 803648c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8036490:	2b30      	cmp	r3, #48	; 0x30
 8036492:	f105 32ff 	add.w	r2, r5, #4294967295
 8036496:	f47f af0a 	bne.w	80362ae <_dtoa_r+0x8fe>
 803649a:	4615      	mov	r5, r2
 803649c:	e7f6      	b.n	803648c <_dtoa_r+0xadc>
 803649e:	4593      	cmp	fp, r2
 80364a0:	d105      	bne.n	80364ae <_dtoa_r+0xafe>
 80364a2:	2331      	movs	r3, #49	; 0x31
 80364a4:	f10a 0a01 	add.w	sl, sl, #1
 80364a8:	f88b 3000 	strb.w	r3, [fp]
 80364ac:	e6ff      	b.n	80362ae <_dtoa_r+0x8fe>
 80364ae:	4615      	mov	r5, r2
 80364b0:	e79f      	b.n	80363f2 <_dtoa_r+0xa42>
 80364b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8036518 <_dtoa_r+0xb68>
 80364b6:	e007      	b.n	80364c8 <_dtoa_r+0xb18>
 80364b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80364ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 803651c <_dtoa_r+0xb6c>
 80364be:	b11b      	cbz	r3, 80364c8 <_dtoa_r+0xb18>
 80364c0:	f10b 0308 	add.w	r3, fp, #8
 80364c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80364c6:	6013      	str	r3, [r2, #0]
 80364c8:	4658      	mov	r0, fp
 80364ca:	b017      	add	sp, #92	; 0x5c
 80364cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80364d0:	9b06      	ldr	r3, [sp, #24]
 80364d2:	2b01      	cmp	r3, #1
 80364d4:	f77f ae35 	ble.w	8036142 <_dtoa_r+0x792>
 80364d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80364da:	9307      	str	r3, [sp, #28]
 80364dc:	e649      	b.n	8036172 <_dtoa_r+0x7c2>
 80364de:	9b02      	ldr	r3, [sp, #8]
 80364e0:	2b00      	cmp	r3, #0
 80364e2:	dc03      	bgt.n	80364ec <_dtoa_r+0xb3c>
 80364e4:	9b06      	ldr	r3, [sp, #24]
 80364e6:	2b02      	cmp	r3, #2
 80364e8:	f73f aecc 	bgt.w	8036284 <_dtoa_r+0x8d4>
 80364ec:	465d      	mov	r5, fp
 80364ee:	4639      	mov	r1, r7
 80364f0:	9804      	ldr	r0, [sp, #16]
 80364f2:	f7ff f9cf 	bl	8035894 <quorem>
 80364f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80364fa:	f805 8b01 	strb.w	r8, [r5], #1
 80364fe:	9a02      	ldr	r2, [sp, #8]
 8036500:	eba5 030b 	sub.w	r3, r5, fp
 8036504:	429a      	cmp	r2, r3
 8036506:	ddb0      	ble.n	803646a <_dtoa_r+0xaba>
 8036508:	2300      	movs	r3, #0
 803650a:	220a      	movs	r2, #10
 803650c:	9904      	ldr	r1, [sp, #16]
 803650e:	4620      	mov	r0, r4
 8036510:	f000 fa3f 	bl	8036992 <__multadd>
 8036514:	9004      	str	r0, [sp, #16]
 8036516:	e7ea      	b.n	80364ee <_dtoa_r+0xb3e>
 8036518:	08038384 	.word	0x08038384
 803651c:	080383a8 	.word	0x080383a8

08036520 <__sflush_r>:
 8036520:	898a      	ldrh	r2, [r1, #12]
 8036522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036526:	4605      	mov	r5, r0
 8036528:	0710      	lsls	r0, r2, #28
 803652a:	460c      	mov	r4, r1
 803652c:	d458      	bmi.n	80365e0 <__sflush_r+0xc0>
 803652e:	684b      	ldr	r3, [r1, #4]
 8036530:	2b00      	cmp	r3, #0
 8036532:	dc05      	bgt.n	8036540 <__sflush_r+0x20>
 8036534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8036536:	2b00      	cmp	r3, #0
 8036538:	dc02      	bgt.n	8036540 <__sflush_r+0x20>
 803653a:	2000      	movs	r0, #0
 803653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8036542:	2e00      	cmp	r6, #0
 8036544:	d0f9      	beq.n	803653a <__sflush_r+0x1a>
 8036546:	2300      	movs	r3, #0
 8036548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803654c:	682f      	ldr	r7, [r5, #0]
 803654e:	6a21      	ldr	r1, [r4, #32]
 8036550:	602b      	str	r3, [r5, #0]
 8036552:	d032      	beq.n	80365ba <__sflush_r+0x9a>
 8036554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8036556:	89a3      	ldrh	r3, [r4, #12]
 8036558:	075a      	lsls	r2, r3, #29
 803655a:	d505      	bpl.n	8036568 <__sflush_r+0x48>
 803655c:	6863      	ldr	r3, [r4, #4]
 803655e:	1ac0      	subs	r0, r0, r3
 8036560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8036562:	b10b      	cbz	r3, 8036568 <__sflush_r+0x48>
 8036564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8036566:	1ac0      	subs	r0, r0, r3
 8036568:	2300      	movs	r3, #0
 803656a:	4602      	mov	r2, r0
 803656c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803656e:	6a21      	ldr	r1, [r4, #32]
 8036570:	4628      	mov	r0, r5
 8036572:	47b0      	blx	r6
 8036574:	1c43      	adds	r3, r0, #1
 8036576:	89a3      	ldrh	r3, [r4, #12]
 8036578:	d106      	bne.n	8036588 <__sflush_r+0x68>
 803657a:	6829      	ldr	r1, [r5, #0]
 803657c:	291d      	cmp	r1, #29
 803657e:	d848      	bhi.n	8036612 <__sflush_r+0xf2>
 8036580:	4a29      	ldr	r2, [pc, #164]	; (8036628 <__sflush_r+0x108>)
 8036582:	40ca      	lsrs	r2, r1
 8036584:	07d6      	lsls	r6, r2, #31
 8036586:	d544      	bpl.n	8036612 <__sflush_r+0xf2>
 8036588:	2200      	movs	r2, #0
 803658a:	6062      	str	r2, [r4, #4]
 803658c:	04d9      	lsls	r1, r3, #19
 803658e:	6922      	ldr	r2, [r4, #16]
 8036590:	6022      	str	r2, [r4, #0]
 8036592:	d504      	bpl.n	803659e <__sflush_r+0x7e>
 8036594:	1c42      	adds	r2, r0, #1
 8036596:	d101      	bne.n	803659c <__sflush_r+0x7c>
 8036598:	682b      	ldr	r3, [r5, #0]
 803659a:	b903      	cbnz	r3, 803659e <__sflush_r+0x7e>
 803659c:	6560      	str	r0, [r4, #84]	; 0x54
 803659e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80365a0:	602f      	str	r7, [r5, #0]
 80365a2:	2900      	cmp	r1, #0
 80365a4:	d0c9      	beq.n	803653a <__sflush_r+0x1a>
 80365a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80365aa:	4299      	cmp	r1, r3
 80365ac:	d002      	beq.n	80365b4 <__sflush_r+0x94>
 80365ae:	4628      	mov	r0, r5
 80365b0:	f7fe fb62 	bl	8034c78 <_free_r>
 80365b4:	2000      	movs	r0, #0
 80365b6:	6360      	str	r0, [r4, #52]	; 0x34
 80365b8:	e7c0      	b.n	803653c <__sflush_r+0x1c>
 80365ba:	2301      	movs	r3, #1
 80365bc:	4628      	mov	r0, r5
 80365be:	47b0      	blx	r6
 80365c0:	1c41      	adds	r1, r0, #1
 80365c2:	d1c8      	bne.n	8036556 <__sflush_r+0x36>
 80365c4:	682b      	ldr	r3, [r5, #0]
 80365c6:	2b00      	cmp	r3, #0
 80365c8:	d0c5      	beq.n	8036556 <__sflush_r+0x36>
 80365ca:	2b1d      	cmp	r3, #29
 80365cc:	d001      	beq.n	80365d2 <__sflush_r+0xb2>
 80365ce:	2b16      	cmp	r3, #22
 80365d0:	d101      	bne.n	80365d6 <__sflush_r+0xb6>
 80365d2:	602f      	str	r7, [r5, #0]
 80365d4:	e7b1      	b.n	803653a <__sflush_r+0x1a>
 80365d6:	89a3      	ldrh	r3, [r4, #12]
 80365d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80365dc:	81a3      	strh	r3, [r4, #12]
 80365de:	e7ad      	b.n	803653c <__sflush_r+0x1c>
 80365e0:	690f      	ldr	r7, [r1, #16]
 80365e2:	2f00      	cmp	r7, #0
 80365e4:	d0a9      	beq.n	803653a <__sflush_r+0x1a>
 80365e6:	0793      	lsls	r3, r2, #30
 80365e8:	680e      	ldr	r6, [r1, #0]
 80365ea:	bf08      	it	eq
 80365ec:	694b      	ldreq	r3, [r1, #20]
 80365ee:	600f      	str	r7, [r1, #0]
 80365f0:	bf18      	it	ne
 80365f2:	2300      	movne	r3, #0
 80365f4:	eba6 0807 	sub.w	r8, r6, r7
 80365f8:	608b      	str	r3, [r1, #8]
 80365fa:	f1b8 0f00 	cmp.w	r8, #0
 80365fe:	dd9c      	ble.n	803653a <__sflush_r+0x1a>
 8036600:	4643      	mov	r3, r8
 8036602:	463a      	mov	r2, r7
 8036604:	6a21      	ldr	r1, [r4, #32]
 8036606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8036608:	4628      	mov	r0, r5
 803660a:	47b0      	blx	r6
 803660c:	2800      	cmp	r0, #0
 803660e:	dc06      	bgt.n	803661e <__sflush_r+0xfe>
 8036610:	89a3      	ldrh	r3, [r4, #12]
 8036612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036616:	81a3      	strh	r3, [r4, #12]
 8036618:	f04f 30ff 	mov.w	r0, #4294967295
 803661c:	e78e      	b.n	803653c <__sflush_r+0x1c>
 803661e:	4407      	add	r7, r0
 8036620:	eba8 0800 	sub.w	r8, r8, r0
 8036624:	e7e9      	b.n	80365fa <__sflush_r+0xda>
 8036626:	bf00      	nop
 8036628:	20400001 	.word	0x20400001

0803662c <_fflush_r>:
 803662c:	b538      	push	{r3, r4, r5, lr}
 803662e:	690b      	ldr	r3, [r1, #16]
 8036630:	4605      	mov	r5, r0
 8036632:	460c      	mov	r4, r1
 8036634:	b1db      	cbz	r3, 803666e <_fflush_r+0x42>
 8036636:	b118      	cbz	r0, 8036640 <_fflush_r+0x14>
 8036638:	6983      	ldr	r3, [r0, #24]
 803663a:	b90b      	cbnz	r3, 8036640 <_fflush_r+0x14>
 803663c:	f000 f860 	bl	8036700 <__sinit>
 8036640:	4b0c      	ldr	r3, [pc, #48]	; (8036674 <_fflush_r+0x48>)
 8036642:	429c      	cmp	r4, r3
 8036644:	d109      	bne.n	803665a <_fflush_r+0x2e>
 8036646:	686c      	ldr	r4, [r5, #4]
 8036648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803664c:	b17b      	cbz	r3, 803666e <_fflush_r+0x42>
 803664e:	4621      	mov	r1, r4
 8036650:	4628      	mov	r0, r5
 8036652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8036656:	f7ff bf63 	b.w	8036520 <__sflush_r>
 803665a:	4b07      	ldr	r3, [pc, #28]	; (8036678 <_fflush_r+0x4c>)
 803665c:	429c      	cmp	r4, r3
 803665e:	d101      	bne.n	8036664 <_fflush_r+0x38>
 8036660:	68ac      	ldr	r4, [r5, #8]
 8036662:	e7f1      	b.n	8036648 <_fflush_r+0x1c>
 8036664:	4b05      	ldr	r3, [pc, #20]	; (803667c <_fflush_r+0x50>)
 8036666:	429c      	cmp	r4, r3
 8036668:	bf08      	it	eq
 803666a:	68ec      	ldreq	r4, [r5, #12]
 803666c:	e7ec      	b.n	8036648 <_fflush_r+0x1c>
 803666e:	2000      	movs	r0, #0
 8036670:	bd38      	pop	{r3, r4, r5, pc}
 8036672:	bf00      	nop
 8036674:	080383d8 	.word	0x080383d8
 8036678:	080383f8 	.word	0x080383f8
 803667c:	080383b8 	.word	0x080383b8

08036680 <std>:
 8036680:	2300      	movs	r3, #0
 8036682:	b510      	push	{r4, lr}
 8036684:	4604      	mov	r4, r0
 8036686:	e9c0 3300 	strd	r3, r3, [r0]
 803668a:	6083      	str	r3, [r0, #8]
 803668c:	8181      	strh	r1, [r0, #12]
 803668e:	6643      	str	r3, [r0, #100]	; 0x64
 8036690:	81c2      	strh	r2, [r0, #14]
 8036692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8036696:	6183      	str	r3, [r0, #24]
 8036698:	4619      	mov	r1, r3
 803669a:	2208      	movs	r2, #8
 803669c:	305c      	adds	r0, #92	; 0x5c
 803669e:	f7fe fae2 	bl	8034c66 <memset>
 80366a2:	4b05      	ldr	r3, [pc, #20]	; (80366b8 <std+0x38>)
 80366a4:	6263      	str	r3, [r4, #36]	; 0x24
 80366a6:	4b05      	ldr	r3, [pc, #20]	; (80366bc <std+0x3c>)
 80366a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80366aa:	4b05      	ldr	r3, [pc, #20]	; (80366c0 <std+0x40>)
 80366ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80366ae:	4b05      	ldr	r3, [pc, #20]	; (80366c4 <std+0x44>)
 80366b0:	6224      	str	r4, [r4, #32]
 80366b2:	6323      	str	r3, [r4, #48]	; 0x30
 80366b4:	bd10      	pop	{r4, pc}
 80366b6:	bf00      	nop
 80366b8:	08037461 	.word	0x08037461
 80366bc:	08037483 	.word	0x08037483
 80366c0:	080374bb 	.word	0x080374bb
 80366c4:	080374df 	.word	0x080374df

080366c8 <_cleanup_r>:
 80366c8:	4901      	ldr	r1, [pc, #4]	; (80366d0 <_cleanup_r+0x8>)
 80366ca:	f000 b885 	b.w	80367d8 <_fwalk_reent>
 80366ce:	bf00      	nop
 80366d0:	0803662d 	.word	0x0803662d

080366d4 <__sfmoreglue>:
 80366d4:	b570      	push	{r4, r5, r6, lr}
 80366d6:	1e4a      	subs	r2, r1, #1
 80366d8:	2568      	movs	r5, #104	; 0x68
 80366da:	4355      	muls	r5, r2
 80366dc:	460e      	mov	r6, r1
 80366de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80366e2:	f7fe fb17 	bl	8034d14 <_malloc_r>
 80366e6:	4604      	mov	r4, r0
 80366e8:	b140      	cbz	r0, 80366fc <__sfmoreglue+0x28>
 80366ea:	2100      	movs	r1, #0
 80366ec:	e9c0 1600 	strd	r1, r6, [r0]
 80366f0:	300c      	adds	r0, #12
 80366f2:	60a0      	str	r0, [r4, #8]
 80366f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80366f8:	f7fe fab5 	bl	8034c66 <memset>
 80366fc:	4620      	mov	r0, r4
 80366fe:	bd70      	pop	{r4, r5, r6, pc}

08036700 <__sinit>:
 8036700:	6983      	ldr	r3, [r0, #24]
 8036702:	b510      	push	{r4, lr}
 8036704:	4604      	mov	r4, r0
 8036706:	bb33      	cbnz	r3, 8036756 <__sinit+0x56>
 8036708:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 803670c:	6503      	str	r3, [r0, #80]	; 0x50
 803670e:	4b12      	ldr	r3, [pc, #72]	; (8036758 <__sinit+0x58>)
 8036710:	4a12      	ldr	r2, [pc, #72]	; (803675c <__sinit+0x5c>)
 8036712:	681b      	ldr	r3, [r3, #0]
 8036714:	6282      	str	r2, [r0, #40]	; 0x28
 8036716:	4298      	cmp	r0, r3
 8036718:	bf04      	itt	eq
 803671a:	2301      	moveq	r3, #1
 803671c:	6183      	streq	r3, [r0, #24]
 803671e:	f000 f81f 	bl	8036760 <__sfp>
 8036722:	6060      	str	r0, [r4, #4]
 8036724:	4620      	mov	r0, r4
 8036726:	f000 f81b 	bl	8036760 <__sfp>
 803672a:	60a0      	str	r0, [r4, #8]
 803672c:	4620      	mov	r0, r4
 803672e:	f000 f817 	bl	8036760 <__sfp>
 8036732:	2200      	movs	r2, #0
 8036734:	60e0      	str	r0, [r4, #12]
 8036736:	2104      	movs	r1, #4
 8036738:	6860      	ldr	r0, [r4, #4]
 803673a:	f7ff ffa1 	bl	8036680 <std>
 803673e:	2201      	movs	r2, #1
 8036740:	2109      	movs	r1, #9
 8036742:	68a0      	ldr	r0, [r4, #8]
 8036744:	f7ff ff9c 	bl	8036680 <std>
 8036748:	2202      	movs	r2, #2
 803674a:	2112      	movs	r1, #18
 803674c:	68e0      	ldr	r0, [r4, #12]
 803674e:	f7ff ff97 	bl	8036680 <std>
 8036752:	2301      	movs	r3, #1
 8036754:	61a3      	str	r3, [r4, #24]
 8036756:	bd10      	pop	{r4, pc}
 8036758:	08038370 	.word	0x08038370
 803675c:	080366c9 	.word	0x080366c9

08036760 <__sfp>:
 8036760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036762:	4b1b      	ldr	r3, [pc, #108]	; (80367d0 <__sfp+0x70>)
 8036764:	681e      	ldr	r6, [r3, #0]
 8036766:	69b3      	ldr	r3, [r6, #24]
 8036768:	4607      	mov	r7, r0
 803676a:	b913      	cbnz	r3, 8036772 <__sfp+0x12>
 803676c:	4630      	mov	r0, r6
 803676e:	f7ff ffc7 	bl	8036700 <__sinit>
 8036772:	3648      	adds	r6, #72	; 0x48
 8036774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8036778:	3b01      	subs	r3, #1
 803677a:	d503      	bpl.n	8036784 <__sfp+0x24>
 803677c:	6833      	ldr	r3, [r6, #0]
 803677e:	b133      	cbz	r3, 803678e <__sfp+0x2e>
 8036780:	6836      	ldr	r6, [r6, #0]
 8036782:	e7f7      	b.n	8036774 <__sfp+0x14>
 8036784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8036788:	b16d      	cbz	r5, 80367a6 <__sfp+0x46>
 803678a:	3468      	adds	r4, #104	; 0x68
 803678c:	e7f4      	b.n	8036778 <__sfp+0x18>
 803678e:	2104      	movs	r1, #4
 8036790:	4638      	mov	r0, r7
 8036792:	f7ff ff9f 	bl	80366d4 <__sfmoreglue>
 8036796:	6030      	str	r0, [r6, #0]
 8036798:	2800      	cmp	r0, #0
 803679a:	d1f1      	bne.n	8036780 <__sfp+0x20>
 803679c:	230c      	movs	r3, #12
 803679e:	603b      	str	r3, [r7, #0]
 80367a0:	4604      	mov	r4, r0
 80367a2:	4620      	mov	r0, r4
 80367a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80367a6:	4b0b      	ldr	r3, [pc, #44]	; (80367d4 <__sfp+0x74>)
 80367a8:	6665      	str	r5, [r4, #100]	; 0x64
 80367aa:	e9c4 5500 	strd	r5, r5, [r4]
 80367ae:	60a5      	str	r5, [r4, #8]
 80367b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80367b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80367b8:	2208      	movs	r2, #8
 80367ba:	4629      	mov	r1, r5
 80367bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80367c0:	f7fe fa51 	bl	8034c66 <memset>
 80367c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80367c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80367cc:	e7e9      	b.n	80367a2 <__sfp+0x42>
 80367ce:	bf00      	nop
 80367d0:	08038370 	.word	0x08038370
 80367d4:	ffff0001 	.word	0xffff0001

080367d8 <_fwalk_reent>:
 80367d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80367dc:	4680      	mov	r8, r0
 80367de:	4689      	mov	r9, r1
 80367e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80367e4:	2600      	movs	r6, #0
 80367e6:	b914      	cbnz	r4, 80367ee <_fwalk_reent+0x16>
 80367e8:	4630      	mov	r0, r6
 80367ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80367ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80367f2:	3f01      	subs	r7, #1
 80367f4:	d501      	bpl.n	80367fa <_fwalk_reent+0x22>
 80367f6:	6824      	ldr	r4, [r4, #0]
 80367f8:	e7f5      	b.n	80367e6 <_fwalk_reent+0xe>
 80367fa:	89ab      	ldrh	r3, [r5, #12]
 80367fc:	2b01      	cmp	r3, #1
 80367fe:	d907      	bls.n	8036810 <_fwalk_reent+0x38>
 8036800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8036804:	3301      	adds	r3, #1
 8036806:	d003      	beq.n	8036810 <_fwalk_reent+0x38>
 8036808:	4629      	mov	r1, r5
 803680a:	4640      	mov	r0, r8
 803680c:	47c8      	blx	r9
 803680e:	4306      	orrs	r6, r0
 8036810:	3568      	adds	r5, #104	; 0x68
 8036812:	e7ee      	b.n	80367f2 <_fwalk_reent+0x1a>

08036814 <_localeconv_r>:
 8036814:	4b04      	ldr	r3, [pc, #16]	; (8036828 <_localeconv_r+0x14>)
 8036816:	681b      	ldr	r3, [r3, #0]
 8036818:	6a18      	ldr	r0, [r3, #32]
 803681a:	4b04      	ldr	r3, [pc, #16]	; (803682c <_localeconv_r+0x18>)
 803681c:	2800      	cmp	r0, #0
 803681e:	bf08      	it	eq
 8036820:	4618      	moveq	r0, r3
 8036822:	30f0      	adds	r0, #240	; 0xf0
 8036824:	4770      	bx	lr
 8036826:	bf00      	nop
 8036828:	200001a0 	.word	0x200001a0
 803682c:	20000204 	.word	0x20000204

08036830 <__swhatbuf_r>:
 8036830:	b570      	push	{r4, r5, r6, lr}
 8036832:	460e      	mov	r6, r1
 8036834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8036838:	2900      	cmp	r1, #0
 803683a:	b096      	sub	sp, #88	; 0x58
 803683c:	4614      	mov	r4, r2
 803683e:	461d      	mov	r5, r3
 8036840:	da07      	bge.n	8036852 <__swhatbuf_r+0x22>
 8036842:	2300      	movs	r3, #0
 8036844:	602b      	str	r3, [r5, #0]
 8036846:	89b3      	ldrh	r3, [r6, #12]
 8036848:	061a      	lsls	r2, r3, #24
 803684a:	d410      	bmi.n	803686e <__swhatbuf_r+0x3e>
 803684c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8036850:	e00e      	b.n	8036870 <__swhatbuf_r+0x40>
 8036852:	466a      	mov	r2, sp
 8036854:	f000 ff2a 	bl	80376ac <_fstat_r>
 8036858:	2800      	cmp	r0, #0
 803685a:	dbf2      	blt.n	8036842 <__swhatbuf_r+0x12>
 803685c:	9a01      	ldr	r2, [sp, #4]
 803685e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8036862:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8036866:	425a      	negs	r2, r3
 8036868:	415a      	adcs	r2, r3
 803686a:	602a      	str	r2, [r5, #0]
 803686c:	e7ee      	b.n	803684c <__swhatbuf_r+0x1c>
 803686e:	2340      	movs	r3, #64	; 0x40
 8036870:	2000      	movs	r0, #0
 8036872:	6023      	str	r3, [r4, #0]
 8036874:	b016      	add	sp, #88	; 0x58
 8036876:	bd70      	pop	{r4, r5, r6, pc}

08036878 <__smakebuf_r>:
 8036878:	898b      	ldrh	r3, [r1, #12]
 803687a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803687c:	079d      	lsls	r5, r3, #30
 803687e:	4606      	mov	r6, r0
 8036880:	460c      	mov	r4, r1
 8036882:	d507      	bpl.n	8036894 <__smakebuf_r+0x1c>
 8036884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8036888:	6023      	str	r3, [r4, #0]
 803688a:	6123      	str	r3, [r4, #16]
 803688c:	2301      	movs	r3, #1
 803688e:	6163      	str	r3, [r4, #20]
 8036890:	b002      	add	sp, #8
 8036892:	bd70      	pop	{r4, r5, r6, pc}
 8036894:	ab01      	add	r3, sp, #4
 8036896:	466a      	mov	r2, sp
 8036898:	f7ff ffca 	bl	8036830 <__swhatbuf_r>
 803689c:	9900      	ldr	r1, [sp, #0]
 803689e:	4605      	mov	r5, r0
 80368a0:	4630      	mov	r0, r6
 80368a2:	f7fe fa37 	bl	8034d14 <_malloc_r>
 80368a6:	b948      	cbnz	r0, 80368bc <__smakebuf_r+0x44>
 80368a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80368ac:	059a      	lsls	r2, r3, #22
 80368ae:	d4ef      	bmi.n	8036890 <__smakebuf_r+0x18>
 80368b0:	f023 0303 	bic.w	r3, r3, #3
 80368b4:	f043 0302 	orr.w	r3, r3, #2
 80368b8:	81a3      	strh	r3, [r4, #12]
 80368ba:	e7e3      	b.n	8036884 <__smakebuf_r+0xc>
 80368bc:	4b0d      	ldr	r3, [pc, #52]	; (80368f4 <__smakebuf_r+0x7c>)
 80368be:	62b3      	str	r3, [r6, #40]	; 0x28
 80368c0:	89a3      	ldrh	r3, [r4, #12]
 80368c2:	6020      	str	r0, [r4, #0]
 80368c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80368c8:	81a3      	strh	r3, [r4, #12]
 80368ca:	9b00      	ldr	r3, [sp, #0]
 80368cc:	6163      	str	r3, [r4, #20]
 80368ce:	9b01      	ldr	r3, [sp, #4]
 80368d0:	6120      	str	r0, [r4, #16]
 80368d2:	b15b      	cbz	r3, 80368ec <__smakebuf_r+0x74>
 80368d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80368d8:	4630      	mov	r0, r6
 80368da:	f000 fef9 	bl	80376d0 <_isatty_r>
 80368de:	b128      	cbz	r0, 80368ec <__smakebuf_r+0x74>
 80368e0:	89a3      	ldrh	r3, [r4, #12]
 80368e2:	f023 0303 	bic.w	r3, r3, #3
 80368e6:	f043 0301 	orr.w	r3, r3, #1
 80368ea:	81a3      	strh	r3, [r4, #12]
 80368ec:	89a3      	ldrh	r3, [r4, #12]
 80368ee:	431d      	orrs	r5, r3
 80368f0:	81a5      	strh	r5, [r4, #12]
 80368f2:	e7cd      	b.n	8036890 <__smakebuf_r+0x18>
 80368f4:	080366c9 	.word	0x080366c9

080368f8 <__malloc_lock>:
 80368f8:	4770      	bx	lr

080368fa <__malloc_unlock>:
 80368fa:	4770      	bx	lr

080368fc <_Balloc>:
 80368fc:	b570      	push	{r4, r5, r6, lr}
 80368fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8036900:	4604      	mov	r4, r0
 8036902:	460e      	mov	r6, r1
 8036904:	b93d      	cbnz	r5, 8036916 <_Balloc+0x1a>
 8036906:	2010      	movs	r0, #16
 8036908:	f7fe f992 	bl	8034c30 <malloc>
 803690c:	6260      	str	r0, [r4, #36]	; 0x24
 803690e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8036912:	6005      	str	r5, [r0, #0]
 8036914:	60c5      	str	r5, [r0, #12]
 8036916:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8036918:	68eb      	ldr	r3, [r5, #12]
 803691a:	b183      	cbz	r3, 803693e <_Balloc+0x42>
 803691c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803691e:	68db      	ldr	r3, [r3, #12]
 8036920:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8036924:	b9b8      	cbnz	r0, 8036956 <_Balloc+0x5a>
 8036926:	2101      	movs	r1, #1
 8036928:	fa01 f506 	lsl.w	r5, r1, r6
 803692c:	1d6a      	adds	r2, r5, #5
 803692e:	0092      	lsls	r2, r2, #2
 8036930:	4620      	mov	r0, r4
 8036932:	f000 fabf 	bl	8036eb4 <_calloc_r>
 8036936:	b160      	cbz	r0, 8036952 <_Balloc+0x56>
 8036938:	e9c0 6501 	strd	r6, r5, [r0, #4]
 803693c:	e00e      	b.n	803695c <_Balloc+0x60>
 803693e:	2221      	movs	r2, #33	; 0x21
 8036940:	2104      	movs	r1, #4
 8036942:	4620      	mov	r0, r4
 8036944:	f000 fab6 	bl	8036eb4 <_calloc_r>
 8036948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803694a:	60e8      	str	r0, [r5, #12]
 803694c:	68db      	ldr	r3, [r3, #12]
 803694e:	2b00      	cmp	r3, #0
 8036950:	d1e4      	bne.n	803691c <_Balloc+0x20>
 8036952:	2000      	movs	r0, #0
 8036954:	bd70      	pop	{r4, r5, r6, pc}
 8036956:	6802      	ldr	r2, [r0, #0]
 8036958:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 803695c:	2300      	movs	r3, #0
 803695e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8036962:	e7f7      	b.n	8036954 <_Balloc+0x58>

08036964 <_Bfree>:
 8036964:	b570      	push	{r4, r5, r6, lr}
 8036966:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8036968:	4606      	mov	r6, r0
 803696a:	460d      	mov	r5, r1
 803696c:	b93c      	cbnz	r4, 803697e <_Bfree+0x1a>
 803696e:	2010      	movs	r0, #16
 8036970:	f7fe f95e 	bl	8034c30 <malloc>
 8036974:	6270      	str	r0, [r6, #36]	; 0x24
 8036976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803697a:	6004      	str	r4, [r0, #0]
 803697c:	60c4      	str	r4, [r0, #12]
 803697e:	b13d      	cbz	r5, 8036990 <_Bfree+0x2c>
 8036980:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8036982:	686a      	ldr	r2, [r5, #4]
 8036984:	68db      	ldr	r3, [r3, #12]
 8036986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 803698a:	6029      	str	r1, [r5, #0]
 803698c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8036990:	bd70      	pop	{r4, r5, r6, pc}

08036992 <__multadd>:
 8036992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036996:	690d      	ldr	r5, [r1, #16]
 8036998:	461f      	mov	r7, r3
 803699a:	4606      	mov	r6, r0
 803699c:	460c      	mov	r4, r1
 803699e:	f101 0c14 	add.w	ip, r1, #20
 80369a2:	2300      	movs	r3, #0
 80369a4:	f8dc 0000 	ldr.w	r0, [ip]
 80369a8:	b281      	uxth	r1, r0
 80369aa:	fb02 7101 	mla	r1, r2, r1, r7
 80369ae:	0c0f      	lsrs	r7, r1, #16
 80369b0:	0c00      	lsrs	r0, r0, #16
 80369b2:	fb02 7000 	mla	r0, r2, r0, r7
 80369b6:	b289      	uxth	r1, r1
 80369b8:	3301      	adds	r3, #1
 80369ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80369be:	429d      	cmp	r5, r3
 80369c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80369c4:	f84c 1b04 	str.w	r1, [ip], #4
 80369c8:	dcec      	bgt.n	80369a4 <__multadd+0x12>
 80369ca:	b1d7      	cbz	r7, 8036a02 <__multadd+0x70>
 80369cc:	68a3      	ldr	r3, [r4, #8]
 80369ce:	42ab      	cmp	r3, r5
 80369d0:	dc12      	bgt.n	80369f8 <__multadd+0x66>
 80369d2:	6861      	ldr	r1, [r4, #4]
 80369d4:	4630      	mov	r0, r6
 80369d6:	3101      	adds	r1, #1
 80369d8:	f7ff ff90 	bl	80368fc <_Balloc>
 80369dc:	6922      	ldr	r2, [r4, #16]
 80369de:	3202      	adds	r2, #2
 80369e0:	f104 010c 	add.w	r1, r4, #12
 80369e4:	4680      	mov	r8, r0
 80369e6:	0092      	lsls	r2, r2, #2
 80369e8:	300c      	adds	r0, #12
 80369ea:	f7fe f931 	bl	8034c50 <memcpy>
 80369ee:	4621      	mov	r1, r4
 80369f0:	4630      	mov	r0, r6
 80369f2:	f7ff ffb7 	bl	8036964 <_Bfree>
 80369f6:	4644      	mov	r4, r8
 80369f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80369fc:	3501      	adds	r5, #1
 80369fe:	615f      	str	r7, [r3, #20]
 8036a00:	6125      	str	r5, [r4, #16]
 8036a02:	4620      	mov	r0, r4
 8036a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08036a08 <__hi0bits>:
 8036a08:	0c02      	lsrs	r2, r0, #16
 8036a0a:	0412      	lsls	r2, r2, #16
 8036a0c:	4603      	mov	r3, r0
 8036a0e:	b9b2      	cbnz	r2, 8036a3e <__hi0bits+0x36>
 8036a10:	0403      	lsls	r3, r0, #16
 8036a12:	2010      	movs	r0, #16
 8036a14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8036a18:	bf04      	itt	eq
 8036a1a:	021b      	lsleq	r3, r3, #8
 8036a1c:	3008      	addeq	r0, #8
 8036a1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8036a22:	bf04      	itt	eq
 8036a24:	011b      	lsleq	r3, r3, #4
 8036a26:	3004      	addeq	r0, #4
 8036a28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8036a2c:	bf04      	itt	eq
 8036a2e:	009b      	lsleq	r3, r3, #2
 8036a30:	3002      	addeq	r0, #2
 8036a32:	2b00      	cmp	r3, #0
 8036a34:	db06      	blt.n	8036a44 <__hi0bits+0x3c>
 8036a36:	005b      	lsls	r3, r3, #1
 8036a38:	d503      	bpl.n	8036a42 <__hi0bits+0x3a>
 8036a3a:	3001      	adds	r0, #1
 8036a3c:	4770      	bx	lr
 8036a3e:	2000      	movs	r0, #0
 8036a40:	e7e8      	b.n	8036a14 <__hi0bits+0xc>
 8036a42:	2020      	movs	r0, #32
 8036a44:	4770      	bx	lr

08036a46 <__lo0bits>:
 8036a46:	6803      	ldr	r3, [r0, #0]
 8036a48:	f013 0207 	ands.w	r2, r3, #7
 8036a4c:	4601      	mov	r1, r0
 8036a4e:	d00b      	beq.n	8036a68 <__lo0bits+0x22>
 8036a50:	07da      	lsls	r2, r3, #31
 8036a52:	d423      	bmi.n	8036a9c <__lo0bits+0x56>
 8036a54:	0798      	lsls	r0, r3, #30
 8036a56:	bf49      	itett	mi
 8036a58:	085b      	lsrmi	r3, r3, #1
 8036a5a:	089b      	lsrpl	r3, r3, #2
 8036a5c:	2001      	movmi	r0, #1
 8036a5e:	600b      	strmi	r3, [r1, #0]
 8036a60:	bf5c      	itt	pl
 8036a62:	600b      	strpl	r3, [r1, #0]
 8036a64:	2002      	movpl	r0, #2
 8036a66:	4770      	bx	lr
 8036a68:	b298      	uxth	r0, r3
 8036a6a:	b9a8      	cbnz	r0, 8036a98 <__lo0bits+0x52>
 8036a6c:	0c1b      	lsrs	r3, r3, #16
 8036a6e:	2010      	movs	r0, #16
 8036a70:	f013 0fff 	tst.w	r3, #255	; 0xff
 8036a74:	bf04      	itt	eq
 8036a76:	0a1b      	lsreq	r3, r3, #8
 8036a78:	3008      	addeq	r0, #8
 8036a7a:	071a      	lsls	r2, r3, #28
 8036a7c:	bf04      	itt	eq
 8036a7e:	091b      	lsreq	r3, r3, #4
 8036a80:	3004      	addeq	r0, #4
 8036a82:	079a      	lsls	r2, r3, #30
 8036a84:	bf04      	itt	eq
 8036a86:	089b      	lsreq	r3, r3, #2
 8036a88:	3002      	addeq	r0, #2
 8036a8a:	07da      	lsls	r2, r3, #31
 8036a8c:	d402      	bmi.n	8036a94 <__lo0bits+0x4e>
 8036a8e:	085b      	lsrs	r3, r3, #1
 8036a90:	d006      	beq.n	8036aa0 <__lo0bits+0x5a>
 8036a92:	3001      	adds	r0, #1
 8036a94:	600b      	str	r3, [r1, #0]
 8036a96:	4770      	bx	lr
 8036a98:	4610      	mov	r0, r2
 8036a9a:	e7e9      	b.n	8036a70 <__lo0bits+0x2a>
 8036a9c:	2000      	movs	r0, #0
 8036a9e:	4770      	bx	lr
 8036aa0:	2020      	movs	r0, #32
 8036aa2:	4770      	bx	lr

08036aa4 <__i2b>:
 8036aa4:	b510      	push	{r4, lr}
 8036aa6:	460c      	mov	r4, r1
 8036aa8:	2101      	movs	r1, #1
 8036aaa:	f7ff ff27 	bl	80368fc <_Balloc>
 8036aae:	2201      	movs	r2, #1
 8036ab0:	6144      	str	r4, [r0, #20]
 8036ab2:	6102      	str	r2, [r0, #16]
 8036ab4:	bd10      	pop	{r4, pc}

08036ab6 <__multiply>:
 8036ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036aba:	4614      	mov	r4, r2
 8036abc:	690a      	ldr	r2, [r1, #16]
 8036abe:	6923      	ldr	r3, [r4, #16]
 8036ac0:	429a      	cmp	r2, r3
 8036ac2:	bfb8      	it	lt
 8036ac4:	460b      	movlt	r3, r1
 8036ac6:	4688      	mov	r8, r1
 8036ac8:	bfbc      	itt	lt
 8036aca:	46a0      	movlt	r8, r4
 8036acc:	461c      	movlt	r4, r3
 8036ace:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8036ad2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8036ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036ada:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8036ade:	eb07 0609 	add.w	r6, r7, r9
 8036ae2:	42b3      	cmp	r3, r6
 8036ae4:	bfb8      	it	lt
 8036ae6:	3101      	addlt	r1, #1
 8036ae8:	f7ff ff08 	bl	80368fc <_Balloc>
 8036aec:	f100 0514 	add.w	r5, r0, #20
 8036af0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8036af4:	462b      	mov	r3, r5
 8036af6:	2200      	movs	r2, #0
 8036af8:	4573      	cmp	r3, lr
 8036afa:	d316      	bcc.n	8036b2a <__multiply+0x74>
 8036afc:	f104 0214 	add.w	r2, r4, #20
 8036b00:	f108 0114 	add.w	r1, r8, #20
 8036b04:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8036b08:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8036b0c:	9300      	str	r3, [sp, #0]
 8036b0e:	9b00      	ldr	r3, [sp, #0]
 8036b10:	9201      	str	r2, [sp, #4]
 8036b12:	4293      	cmp	r3, r2
 8036b14:	d80c      	bhi.n	8036b30 <__multiply+0x7a>
 8036b16:	2e00      	cmp	r6, #0
 8036b18:	dd03      	ble.n	8036b22 <__multiply+0x6c>
 8036b1a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8036b1e:	2b00      	cmp	r3, #0
 8036b20:	d05d      	beq.n	8036bde <__multiply+0x128>
 8036b22:	6106      	str	r6, [r0, #16]
 8036b24:	b003      	add	sp, #12
 8036b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036b2a:	f843 2b04 	str.w	r2, [r3], #4
 8036b2e:	e7e3      	b.n	8036af8 <__multiply+0x42>
 8036b30:	f8b2 b000 	ldrh.w	fp, [r2]
 8036b34:	f1bb 0f00 	cmp.w	fp, #0
 8036b38:	d023      	beq.n	8036b82 <__multiply+0xcc>
 8036b3a:	4689      	mov	r9, r1
 8036b3c:	46ac      	mov	ip, r5
 8036b3e:	f04f 0800 	mov.w	r8, #0
 8036b42:	f859 4b04 	ldr.w	r4, [r9], #4
 8036b46:	f8dc a000 	ldr.w	sl, [ip]
 8036b4a:	b2a3      	uxth	r3, r4
 8036b4c:	fa1f fa8a 	uxth.w	sl, sl
 8036b50:	fb0b a303 	mla	r3, fp, r3, sl
 8036b54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8036b58:	f8dc 4000 	ldr.w	r4, [ip]
 8036b5c:	4443      	add	r3, r8
 8036b5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8036b62:	fb0b 840a 	mla	r4, fp, sl, r8
 8036b66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8036b6a:	46e2      	mov	sl, ip
 8036b6c:	b29b      	uxth	r3, r3
 8036b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8036b72:	454f      	cmp	r7, r9
 8036b74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8036b78:	f84a 3b04 	str.w	r3, [sl], #4
 8036b7c:	d82b      	bhi.n	8036bd6 <__multiply+0x120>
 8036b7e:	f8cc 8004 	str.w	r8, [ip, #4]
 8036b82:	9b01      	ldr	r3, [sp, #4]
 8036b84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8036b88:	3204      	adds	r2, #4
 8036b8a:	f1ba 0f00 	cmp.w	sl, #0
 8036b8e:	d020      	beq.n	8036bd2 <__multiply+0x11c>
 8036b90:	682b      	ldr	r3, [r5, #0]
 8036b92:	4689      	mov	r9, r1
 8036b94:	46a8      	mov	r8, r5
 8036b96:	f04f 0b00 	mov.w	fp, #0
 8036b9a:	f8b9 c000 	ldrh.w	ip, [r9]
 8036b9e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8036ba2:	fb0a 440c 	mla	r4, sl, ip, r4
 8036ba6:	445c      	add	r4, fp
 8036ba8:	46c4      	mov	ip, r8
 8036baa:	b29b      	uxth	r3, r3
 8036bac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8036bb0:	f84c 3b04 	str.w	r3, [ip], #4
 8036bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8036bb8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8036bbc:	0c1b      	lsrs	r3, r3, #16
 8036bbe:	fb0a b303 	mla	r3, sl, r3, fp
 8036bc2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8036bc6:	454f      	cmp	r7, r9
 8036bc8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8036bcc:	d805      	bhi.n	8036bda <__multiply+0x124>
 8036bce:	f8c8 3004 	str.w	r3, [r8, #4]
 8036bd2:	3504      	adds	r5, #4
 8036bd4:	e79b      	b.n	8036b0e <__multiply+0x58>
 8036bd6:	46d4      	mov	ip, sl
 8036bd8:	e7b3      	b.n	8036b42 <__multiply+0x8c>
 8036bda:	46e0      	mov	r8, ip
 8036bdc:	e7dd      	b.n	8036b9a <__multiply+0xe4>
 8036bde:	3e01      	subs	r6, #1
 8036be0:	e799      	b.n	8036b16 <__multiply+0x60>
	...

08036be4 <__pow5mult>:
 8036be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8036be8:	4615      	mov	r5, r2
 8036bea:	f012 0203 	ands.w	r2, r2, #3
 8036bee:	4606      	mov	r6, r0
 8036bf0:	460f      	mov	r7, r1
 8036bf2:	d007      	beq.n	8036c04 <__pow5mult+0x20>
 8036bf4:	3a01      	subs	r2, #1
 8036bf6:	4c21      	ldr	r4, [pc, #132]	; (8036c7c <__pow5mult+0x98>)
 8036bf8:	2300      	movs	r3, #0
 8036bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8036bfe:	f7ff fec8 	bl	8036992 <__multadd>
 8036c02:	4607      	mov	r7, r0
 8036c04:	10ad      	asrs	r5, r5, #2
 8036c06:	d035      	beq.n	8036c74 <__pow5mult+0x90>
 8036c08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8036c0a:	b93c      	cbnz	r4, 8036c1c <__pow5mult+0x38>
 8036c0c:	2010      	movs	r0, #16
 8036c0e:	f7fe f80f 	bl	8034c30 <malloc>
 8036c12:	6270      	str	r0, [r6, #36]	; 0x24
 8036c14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8036c18:	6004      	str	r4, [r0, #0]
 8036c1a:	60c4      	str	r4, [r0, #12]
 8036c1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8036c20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8036c24:	b94c      	cbnz	r4, 8036c3a <__pow5mult+0x56>
 8036c26:	f240 2171 	movw	r1, #625	; 0x271
 8036c2a:	4630      	mov	r0, r6
 8036c2c:	f7ff ff3a 	bl	8036aa4 <__i2b>
 8036c30:	2300      	movs	r3, #0
 8036c32:	f8c8 0008 	str.w	r0, [r8, #8]
 8036c36:	4604      	mov	r4, r0
 8036c38:	6003      	str	r3, [r0, #0]
 8036c3a:	f04f 0800 	mov.w	r8, #0
 8036c3e:	07eb      	lsls	r3, r5, #31
 8036c40:	d50a      	bpl.n	8036c58 <__pow5mult+0x74>
 8036c42:	4639      	mov	r1, r7
 8036c44:	4622      	mov	r2, r4
 8036c46:	4630      	mov	r0, r6
 8036c48:	f7ff ff35 	bl	8036ab6 <__multiply>
 8036c4c:	4639      	mov	r1, r7
 8036c4e:	4681      	mov	r9, r0
 8036c50:	4630      	mov	r0, r6
 8036c52:	f7ff fe87 	bl	8036964 <_Bfree>
 8036c56:	464f      	mov	r7, r9
 8036c58:	106d      	asrs	r5, r5, #1
 8036c5a:	d00b      	beq.n	8036c74 <__pow5mult+0x90>
 8036c5c:	6820      	ldr	r0, [r4, #0]
 8036c5e:	b938      	cbnz	r0, 8036c70 <__pow5mult+0x8c>
 8036c60:	4622      	mov	r2, r4
 8036c62:	4621      	mov	r1, r4
 8036c64:	4630      	mov	r0, r6
 8036c66:	f7ff ff26 	bl	8036ab6 <__multiply>
 8036c6a:	6020      	str	r0, [r4, #0]
 8036c6c:	f8c0 8000 	str.w	r8, [r0]
 8036c70:	4604      	mov	r4, r0
 8036c72:	e7e4      	b.n	8036c3e <__pow5mult+0x5a>
 8036c74:	4638      	mov	r0, r7
 8036c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8036c7a:	bf00      	nop
 8036c7c:	08038508 	.word	0x08038508

08036c80 <__lshift>:
 8036c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036c84:	460c      	mov	r4, r1
 8036c86:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8036c8a:	6923      	ldr	r3, [r4, #16]
 8036c8c:	6849      	ldr	r1, [r1, #4]
 8036c8e:	eb0a 0903 	add.w	r9, sl, r3
 8036c92:	68a3      	ldr	r3, [r4, #8]
 8036c94:	4607      	mov	r7, r0
 8036c96:	4616      	mov	r6, r2
 8036c98:	f109 0501 	add.w	r5, r9, #1
 8036c9c:	42ab      	cmp	r3, r5
 8036c9e:	db32      	blt.n	8036d06 <__lshift+0x86>
 8036ca0:	4638      	mov	r0, r7
 8036ca2:	f7ff fe2b 	bl	80368fc <_Balloc>
 8036ca6:	2300      	movs	r3, #0
 8036ca8:	4680      	mov	r8, r0
 8036caa:	f100 0114 	add.w	r1, r0, #20
 8036cae:	461a      	mov	r2, r3
 8036cb0:	4553      	cmp	r3, sl
 8036cb2:	db2b      	blt.n	8036d0c <__lshift+0x8c>
 8036cb4:	6920      	ldr	r0, [r4, #16]
 8036cb6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8036cba:	f104 0314 	add.w	r3, r4, #20
 8036cbe:	f016 021f 	ands.w	r2, r6, #31
 8036cc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8036cc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8036cca:	d025      	beq.n	8036d18 <__lshift+0x98>
 8036ccc:	f1c2 0e20 	rsb	lr, r2, #32
 8036cd0:	2000      	movs	r0, #0
 8036cd2:	681e      	ldr	r6, [r3, #0]
 8036cd4:	468a      	mov	sl, r1
 8036cd6:	4096      	lsls	r6, r2
 8036cd8:	4330      	orrs	r0, r6
 8036cda:	f84a 0b04 	str.w	r0, [sl], #4
 8036cde:	f853 0b04 	ldr.w	r0, [r3], #4
 8036ce2:	459c      	cmp	ip, r3
 8036ce4:	fa20 f00e 	lsr.w	r0, r0, lr
 8036ce8:	d814      	bhi.n	8036d14 <__lshift+0x94>
 8036cea:	6048      	str	r0, [r1, #4]
 8036cec:	b108      	cbz	r0, 8036cf2 <__lshift+0x72>
 8036cee:	f109 0502 	add.w	r5, r9, #2
 8036cf2:	3d01      	subs	r5, #1
 8036cf4:	4638      	mov	r0, r7
 8036cf6:	f8c8 5010 	str.w	r5, [r8, #16]
 8036cfa:	4621      	mov	r1, r4
 8036cfc:	f7ff fe32 	bl	8036964 <_Bfree>
 8036d00:	4640      	mov	r0, r8
 8036d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036d06:	3101      	adds	r1, #1
 8036d08:	005b      	lsls	r3, r3, #1
 8036d0a:	e7c7      	b.n	8036c9c <__lshift+0x1c>
 8036d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8036d10:	3301      	adds	r3, #1
 8036d12:	e7cd      	b.n	8036cb0 <__lshift+0x30>
 8036d14:	4651      	mov	r1, sl
 8036d16:	e7dc      	b.n	8036cd2 <__lshift+0x52>
 8036d18:	3904      	subs	r1, #4
 8036d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8036d1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8036d22:	459c      	cmp	ip, r3
 8036d24:	d8f9      	bhi.n	8036d1a <__lshift+0x9a>
 8036d26:	e7e4      	b.n	8036cf2 <__lshift+0x72>

08036d28 <__mcmp>:
 8036d28:	6903      	ldr	r3, [r0, #16]
 8036d2a:	690a      	ldr	r2, [r1, #16]
 8036d2c:	1a9b      	subs	r3, r3, r2
 8036d2e:	b530      	push	{r4, r5, lr}
 8036d30:	d10c      	bne.n	8036d4c <__mcmp+0x24>
 8036d32:	0092      	lsls	r2, r2, #2
 8036d34:	3014      	adds	r0, #20
 8036d36:	3114      	adds	r1, #20
 8036d38:	1884      	adds	r4, r0, r2
 8036d3a:	4411      	add	r1, r2
 8036d3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8036d40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8036d44:	4295      	cmp	r5, r2
 8036d46:	d003      	beq.n	8036d50 <__mcmp+0x28>
 8036d48:	d305      	bcc.n	8036d56 <__mcmp+0x2e>
 8036d4a:	2301      	movs	r3, #1
 8036d4c:	4618      	mov	r0, r3
 8036d4e:	bd30      	pop	{r4, r5, pc}
 8036d50:	42a0      	cmp	r0, r4
 8036d52:	d3f3      	bcc.n	8036d3c <__mcmp+0x14>
 8036d54:	e7fa      	b.n	8036d4c <__mcmp+0x24>
 8036d56:	f04f 33ff 	mov.w	r3, #4294967295
 8036d5a:	e7f7      	b.n	8036d4c <__mcmp+0x24>

08036d5c <__mdiff>:
 8036d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036d60:	460d      	mov	r5, r1
 8036d62:	4607      	mov	r7, r0
 8036d64:	4611      	mov	r1, r2
 8036d66:	4628      	mov	r0, r5
 8036d68:	4614      	mov	r4, r2
 8036d6a:	f7ff ffdd 	bl	8036d28 <__mcmp>
 8036d6e:	1e06      	subs	r6, r0, #0
 8036d70:	d108      	bne.n	8036d84 <__mdiff+0x28>
 8036d72:	4631      	mov	r1, r6
 8036d74:	4638      	mov	r0, r7
 8036d76:	f7ff fdc1 	bl	80368fc <_Balloc>
 8036d7a:	2301      	movs	r3, #1
 8036d7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8036d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036d84:	bfa4      	itt	ge
 8036d86:	4623      	movge	r3, r4
 8036d88:	462c      	movge	r4, r5
 8036d8a:	4638      	mov	r0, r7
 8036d8c:	6861      	ldr	r1, [r4, #4]
 8036d8e:	bfa6      	itte	ge
 8036d90:	461d      	movge	r5, r3
 8036d92:	2600      	movge	r6, #0
 8036d94:	2601      	movlt	r6, #1
 8036d96:	f7ff fdb1 	bl	80368fc <_Balloc>
 8036d9a:	692b      	ldr	r3, [r5, #16]
 8036d9c:	60c6      	str	r6, [r0, #12]
 8036d9e:	6926      	ldr	r6, [r4, #16]
 8036da0:	f105 0914 	add.w	r9, r5, #20
 8036da4:	f104 0214 	add.w	r2, r4, #20
 8036da8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8036dac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8036db0:	f100 0514 	add.w	r5, r0, #20
 8036db4:	f04f 0e00 	mov.w	lr, #0
 8036db8:	f852 ab04 	ldr.w	sl, [r2], #4
 8036dbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8036dc0:	fa1e f18a 	uxtah	r1, lr, sl
 8036dc4:	b2a3      	uxth	r3, r4
 8036dc6:	1ac9      	subs	r1, r1, r3
 8036dc8:	0c23      	lsrs	r3, r4, #16
 8036dca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8036dce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8036dd2:	b289      	uxth	r1, r1
 8036dd4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8036dd8:	45c8      	cmp	r8, r9
 8036dda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8036dde:	4694      	mov	ip, r2
 8036de0:	f845 3b04 	str.w	r3, [r5], #4
 8036de4:	d8e8      	bhi.n	8036db8 <__mdiff+0x5c>
 8036de6:	45bc      	cmp	ip, r7
 8036de8:	d304      	bcc.n	8036df4 <__mdiff+0x98>
 8036dea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8036dee:	b183      	cbz	r3, 8036e12 <__mdiff+0xb6>
 8036df0:	6106      	str	r6, [r0, #16]
 8036df2:	e7c5      	b.n	8036d80 <__mdiff+0x24>
 8036df4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8036df8:	fa1e f381 	uxtah	r3, lr, r1
 8036dfc:	141a      	asrs	r2, r3, #16
 8036dfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8036e02:	b29b      	uxth	r3, r3
 8036e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8036e08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8036e0c:	f845 3b04 	str.w	r3, [r5], #4
 8036e10:	e7e9      	b.n	8036de6 <__mdiff+0x8a>
 8036e12:	3e01      	subs	r6, #1
 8036e14:	e7e9      	b.n	8036dea <__mdiff+0x8e>

08036e16 <__d2b>:
 8036e16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8036e1a:	460e      	mov	r6, r1
 8036e1c:	2101      	movs	r1, #1
 8036e1e:	ec59 8b10 	vmov	r8, r9, d0
 8036e22:	4615      	mov	r5, r2
 8036e24:	f7ff fd6a 	bl	80368fc <_Balloc>
 8036e28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8036e2c:	4607      	mov	r7, r0
 8036e2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036e32:	bb34      	cbnz	r4, 8036e82 <__d2b+0x6c>
 8036e34:	9301      	str	r3, [sp, #4]
 8036e36:	f1b8 0300 	subs.w	r3, r8, #0
 8036e3a:	d027      	beq.n	8036e8c <__d2b+0x76>
 8036e3c:	a802      	add	r0, sp, #8
 8036e3e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8036e42:	f7ff fe00 	bl	8036a46 <__lo0bits>
 8036e46:	9900      	ldr	r1, [sp, #0]
 8036e48:	b1f0      	cbz	r0, 8036e88 <__d2b+0x72>
 8036e4a:	9a01      	ldr	r2, [sp, #4]
 8036e4c:	f1c0 0320 	rsb	r3, r0, #32
 8036e50:	fa02 f303 	lsl.w	r3, r2, r3
 8036e54:	430b      	orrs	r3, r1
 8036e56:	40c2      	lsrs	r2, r0
 8036e58:	617b      	str	r3, [r7, #20]
 8036e5a:	9201      	str	r2, [sp, #4]
 8036e5c:	9b01      	ldr	r3, [sp, #4]
 8036e5e:	61bb      	str	r3, [r7, #24]
 8036e60:	2b00      	cmp	r3, #0
 8036e62:	bf14      	ite	ne
 8036e64:	2102      	movne	r1, #2
 8036e66:	2101      	moveq	r1, #1
 8036e68:	6139      	str	r1, [r7, #16]
 8036e6a:	b1c4      	cbz	r4, 8036e9e <__d2b+0x88>
 8036e6c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8036e70:	4404      	add	r4, r0
 8036e72:	6034      	str	r4, [r6, #0]
 8036e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8036e78:	6028      	str	r0, [r5, #0]
 8036e7a:	4638      	mov	r0, r7
 8036e7c:	b003      	add	sp, #12
 8036e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8036e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8036e86:	e7d5      	b.n	8036e34 <__d2b+0x1e>
 8036e88:	6179      	str	r1, [r7, #20]
 8036e8a:	e7e7      	b.n	8036e5c <__d2b+0x46>
 8036e8c:	a801      	add	r0, sp, #4
 8036e8e:	f7ff fdda 	bl	8036a46 <__lo0bits>
 8036e92:	9b01      	ldr	r3, [sp, #4]
 8036e94:	617b      	str	r3, [r7, #20]
 8036e96:	2101      	movs	r1, #1
 8036e98:	6139      	str	r1, [r7, #16]
 8036e9a:	3020      	adds	r0, #32
 8036e9c:	e7e5      	b.n	8036e6a <__d2b+0x54>
 8036e9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8036ea2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8036ea6:	6030      	str	r0, [r6, #0]
 8036ea8:	6918      	ldr	r0, [r3, #16]
 8036eaa:	f7ff fdad 	bl	8036a08 <__hi0bits>
 8036eae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8036eb2:	e7e1      	b.n	8036e78 <__d2b+0x62>

08036eb4 <_calloc_r>:
 8036eb4:	b538      	push	{r3, r4, r5, lr}
 8036eb6:	fb02 f401 	mul.w	r4, r2, r1
 8036eba:	4621      	mov	r1, r4
 8036ebc:	f7fd ff2a 	bl	8034d14 <_malloc_r>
 8036ec0:	4605      	mov	r5, r0
 8036ec2:	b118      	cbz	r0, 8036ecc <_calloc_r+0x18>
 8036ec4:	4622      	mov	r2, r4
 8036ec6:	2100      	movs	r1, #0
 8036ec8:	f7fd fecd 	bl	8034c66 <memset>
 8036ecc:	4628      	mov	r0, r5
 8036ece:	bd38      	pop	{r3, r4, r5, pc}

08036ed0 <__ssputs_r>:
 8036ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036ed4:	688e      	ldr	r6, [r1, #8]
 8036ed6:	429e      	cmp	r6, r3
 8036ed8:	4682      	mov	sl, r0
 8036eda:	460c      	mov	r4, r1
 8036edc:	4690      	mov	r8, r2
 8036ede:	4699      	mov	r9, r3
 8036ee0:	d837      	bhi.n	8036f52 <__ssputs_r+0x82>
 8036ee2:	898a      	ldrh	r2, [r1, #12]
 8036ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8036ee8:	d031      	beq.n	8036f4e <__ssputs_r+0x7e>
 8036eea:	6825      	ldr	r5, [r4, #0]
 8036eec:	6909      	ldr	r1, [r1, #16]
 8036eee:	1a6f      	subs	r7, r5, r1
 8036ef0:	6965      	ldr	r5, [r4, #20]
 8036ef2:	2302      	movs	r3, #2
 8036ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8036ef8:	fb95 f5f3 	sdiv	r5, r5, r3
 8036efc:	f109 0301 	add.w	r3, r9, #1
 8036f00:	443b      	add	r3, r7
 8036f02:	429d      	cmp	r5, r3
 8036f04:	bf38      	it	cc
 8036f06:	461d      	movcc	r5, r3
 8036f08:	0553      	lsls	r3, r2, #21
 8036f0a:	d530      	bpl.n	8036f6e <__ssputs_r+0x9e>
 8036f0c:	4629      	mov	r1, r5
 8036f0e:	f7fd ff01 	bl	8034d14 <_malloc_r>
 8036f12:	4606      	mov	r6, r0
 8036f14:	b950      	cbnz	r0, 8036f2c <__ssputs_r+0x5c>
 8036f16:	230c      	movs	r3, #12
 8036f18:	f8ca 3000 	str.w	r3, [sl]
 8036f1c:	89a3      	ldrh	r3, [r4, #12]
 8036f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036f22:	81a3      	strh	r3, [r4, #12]
 8036f24:	f04f 30ff 	mov.w	r0, #4294967295
 8036f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036f2c:	463a      	mov	r2, r7
 8036f2e:	6921      	ldr	r1, [r4, #16]
 8036f30:	f7fd fe8e 	bl	8034c50 <memcpy>
 8036f34:	89a3      	ldrh	r3, [r4, #12]
 8036f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8036f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8036f3e:	81a3      	strh	r3, [r4, #12]
 8036f40:	6126      	str	r6, [r4, #16]
 8036f42:	6165      	str	r5, [r4, #20]
 8036f44:	443e      	add	r6, r7
 8036f46:	1bed      	subs	r5, r5, r7
 8036f48:	6026      	str	r6, [r4, #0]
 8036f4a:	60a5      	str	r5, [r4, #8]
 8036f4c:	464e      	mov	r6, r9
 8036f4e:	454e      	cmp	r6, r9
 8036f50:	d900      	bls.n	8036f54 <__ssputs_r+0x84>
 8036f52:	464e      	mov	r6, r9
 8036f54:	4632      	mov	r2, r6
 8036f56:	4641      	mov	r1, r8
 8036f58:	6820      	ldr	r0, [r4, #0]
 8036f5a:	f000 fbed 	bl	8037738 <memmove>
 8036f5e:	68a3      	ldr	r3, [r4, #8]
 8036f60:	1b9b      	subs	r3, r3, r6
 8036f62:	60a3      	str	r3, [r4, #8]
 8036f64:	6823      	ldr	r3, [r4, #0]
 8036f66:	441e      	add	r6, r3
 8036f68:	6026      	str	r6, [r4, #0]
 8036f6a:	2000      	movs	r0, #0
 8036f6c:	e7dc      	b.n	8036f28 <__ssputs_r+0x58>
 8036f6e:	462a      	mov	r2, r5
 8036f70:	f000 fbfb 	bl	803776a <_realloc_r>
 8036f74:	4606      	mov	r6, r0
 8036f76:	2800      	cmp	r0, #0
 8036f78:	d1e2      	bne.n	8036f40 <__ssputs_r+0x70>
 8036f7a:	6921      	ldr	r1, [r4, #16]
 8036f7c:	4650      	mov	r0, sl
 8036f7e:	f7fd fe7b 	bl	8034c78 <_free_r>
 8036f82:	e7c8      	b.n	8036f16 <__ssputs_r+0x46>

08036f84 <_svfiprintf_r>:
 8036f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036f88:	461d      	mov	r5, r3
 8036f8a:	898b      	ldrh	r3, [r1, #12]
 8036f8c:	061f      	lsls	r7, r3, #24
 8036f8e:	b09d      	sub	sp, #116	; 0x74
 8036f90:	4680      	mov	r8, r0
 8036f92:	460c      	mov	r4, r1
 8036f94:	4616      	mov	r6, r2
 8036f96:	d50f      	bpl.n	8036fb8 <_svfiprintf_r+0x34>
 8036f98:	690b      	ldr	r3, [r1, #16]
 8036f9a:	b96b      	cbnz	r3, 8036fb8 <_svfiprintf_r+0x34>
 8036f9c:	2140      	movs	r1, #64	; 0x40
 8036f9e:	f7fd feb9 	bl	8034d14 <_malloc_r>
 8036fa2:	6020      	str	r0, [r4, #0]
 8036fa4:	6120      	str	r0, [r4, #16]
 8036fa6:	b928      	cbnz	r0, 8036fb4 <_svfiprintf_r+0x30>
 8036fa8:	230c      	movs	r3, #12
 8036faa:	f8c8 3000 	str.w	r3, [r8]
 8036fae:	f04f 30ff 	mov.w	r0, #4294967295
 8036fb2:	e0c8      	b.n	8037146 <_svfiprintf_r+0x1c2>
 8036fb4:	2340      	movs	r3, #64	; 0x40
 8036fb6:	6163      	str	r3, [r4, #20]
 8036fb8:	2300      	movs	r3, #0
 8036fba:	9309      	str	r3, [sp, #36]	; 0x24
 8036fbc:	2320      	movs	r3, #32
 8036fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8036fc2:	2330      	movs	r3, #48	; 0x30
 8036fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8036fc8:	9503      	str	r5, [sp, #12]
 8036fca:	f04f 0b01 	mov.w	fp, #1
 8036fce:	4637      	mov	r7, r6
 8036fd0:	463d      	mov	r5, r7
 8036fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8036fd6:	b10b      	cbz	r3, 8036fdc <_svfiprintf_r+0x58>
 8036fd8:	2b25      	cmp	r3, #37	; 0x25
 8036fda:	d13e      	bne.n	803705a <_svfiprintf_r+0xd6>
 8036fdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8036fe0:	d00b      	beq.n	8036ffa <_svfiprintf_r+0x76>
 8036fe2:	4653      	mov	r3, sl
 8036fe4:	4632      	mov	r2, r6
 8036fe6:	4621      	mov	r1, r4
 8036fe8:	4640      	mov	r0, r8
 8036fea:	f7ff ff71 	bl	8036ed0 <__ssputs_r>
 8036fee:	3001      	adds	r0, #1
 8036ff0:	f000 80a4 	beq.w	803713c <_svfiprintf_r+0x1b8>
 8036ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036ff6:	4453      	add	r3, sl
 8036ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8036ffa:	783b      	ldrb	r3, [r7, #0]
 8036ffc:	2b00      	cmp	r3, #0
 8036ffe:	f000 809d 	beq.w	803713c <_svfiprintf_r+0x1b8>
 8037002:	2300      	movs	r3, #0
 8037004:	f04f 32ff 	mov.w	r2, #4294967295
 8037008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803700c:	9304      	str	r3, [sp, #16]
 803700e:	9307      	str	r3, [sp, #28]
 8037010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8037014:	931a      	str	r3, [sp, #104]	; 0x68
 8037016:	462f      	mov	r7, r5
 8037018:	2205      	movs	r2, #5
 803701a:	f817 1b01 	ldrb.w	r1, [r7], #1
 803701e:	4850      	ldr	r0, [pc, #320]	; (8037160 <_svfiprintf_r+0x1dc>)
 8037020:	f7e9 f8de 	bl	80201e0 <memchr>
 8037024:	9b04      	ldr	r3, [sp, #16]
 8037026:	b9d0      	cbnz	r0, 803705e <_svfiprintf_r+0xda>
 8037028:	06d9      	lsls	r1, r3, #27
 803702a:	bf44      	itt	mi
 803702c:	2220      	movmi	r2, #32
 803702e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8037032:	071a      	lsls	r2, r3, #28
 8037034:	bf44      	itt	mi
 8037036:	222b      	movmi	r2, #43	; 0x2b
 8037038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 803703c:	782a      	ldrb	r2, [r5, #0]
 803703e:	2a2a      	cmp	r2, #42	; 0x2a
 8037040:	d015      	beq.n	803706e <_svfiprintf_r+0xea>
 8037042:	9a07      	ldr	r2, [sp, #28]
 8037044:	462f      	mov	r7, r5
 8037046:	2000      	movs	r0, #0
 8037048:	250a      	movs	r5, #10
 803704a:	4639      	mov	r1, r7
 803704c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8037050:	3b30      	subs	r3, #48	; 0x30
 8037052:	2b09      	cmp	r3, #9
 8037054:	d94d      	bls.n	80370f2 <_svfiprintf_r+0x16e>
 8037056:	b1b8      	cbz	r0, 8037088 <_svfiprintf_r+0x104>
 8037058:	e00f      	b.n	803707a <_svfiprintf_r+0xf6>
 803705a:	462f      	mov	r7, r5
 803705c:	e7b8      	b.n	8036fd0 <_svfiprintf_r+0x4c>
 803705e:	4a40      	ldr	r2, [pc, #256]	; (8037160 <_svfiprintf_r+0x1dc>)
 8037060:	1a80      	subs	r0, r0, r2
 8037062:	fa0b f000 	lsl.w	r0, fp, r0
 8037066:	4318      	orrs	r0, r3
 8037068:	9004      	str	r0, [sp, #16]
 803706a:	463d      	mov	r5, r7
 803706c:	e7d3      	b.n	8037016 <_svfiprintf_r+0x92>
 803706e:	9a03      	ldr	r2, [sp, #12]
 8037070:	1d11      	adds	r1, r2, #4
 8037072:	6812      	ldr	r2, [r2, #0]
 8037074:	9103      	str	r1, [sp, #12]
 8037076:	2a00      	cmp	r2, #0
 8037078:	db01      	blt.n	803707e <_svfiprintf_r+0xfa>
 803707a:	9207      	str	r2, [sp, #28]
 803707c:	e004      	b.n	8037088 <_svfiprintf_r+0x104>
 803707e:	4252      	negs	r2, r2
 8037080:	f043 0302 	orr.w	r3, r3, #2
 8037084:	9207      	str	r2, [sp, #28]
 8037086:	9304      	str	r3, [sp, #16]
 8037088:	783b      	ldrb	r3, [r7, #0]
 803708a:	2b2e      	cmp	r3, #46	; 0x2e
 803708c:	d10c      	bne.n	80370a8 <_svfiprintf_r+0x124>
 803708e:	787b      	ldrb	r3, [r7, #1]
 8037090:	2b2a      	cmp	r3, #42	; 0x2a
 8037092:	d133      	bne.n	80370fc <_svfiprintf_r+0x178>
 8037094:	9b03      	ldr	r3, [sp, #12]
 8037096:	1d1a      	adds	r2, r3, #4
 8037098:	681b      	ldr	r3, [r3, #0]
 803709a:	9203      	str	r2, [sp, #12]
 803709c:	2b00      	cmp	r3, #0
 803709e:	bfb8      	it	lt
 80370a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80370a4:	3702      	adds	r7, #2
 80370a6:	9305      	str	r3, [sp, #20]
 80370a8:	4d2e      	ldr	r5, [pc, #184]	; (8037164 <_svfiprintf_r+0x1e0>)
 80370aa:	7839      	ldrb	r1, [r7, #0]
 80370ac:	2203      	movs	r2, #3
 80370ae:	4628      	mov	r0, r5
 80370b0:	f7e9 f896 	bl	80201e0 <memchr>
 80370b4:	b138      	cbz	r0, 80370c6 <_svfiprintf_r+0x142>
 80370b6:	2340      	movs	r3, #64	; 0x40
 80370b8:	1b40      	subs	r0, r0, r5
 80370ba:	fa03 f000 	lsl.w	r0, r3, r0
 80370be:	9b04      	ldr	r3, [sp, #16]
 80370c0:	4303      	orrs	r3, r0
 80370c2:	3701      	adds	r7, #1
 80370c4:	9304      	str	r3, [sp, #16]
 80370c6:	7839      	ldrb	r1, [r7, #0]
 80370c8:	4827      	ldr	r0, [pc, #156]	; (8037168 <_svfiprintf_r+0x1e4>)
 80370ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80370ce:	2206      	movs	r2, #6
 80370d0:	1c7e      	adds	r6, r7, #1
 80370d2:	f7e9 f885 	bl	80201e0 <memchr>
 80370d6:	2800      	cmp	r0, #0
 80370d8:	d038      	beq.n	803714c <_svfiprintf_r+0x1c8>
 80370da:	4b24      	ldr	r3, [pc, #144]	; (803716c <_svfiprintf_r+0x1e8>)
 80370dc:	bb13      	cbnz	r3, 8037124 <_svfiprintf_r+0x1a0>
 80370de:	9b03      	ldr	r3, [sp, #12]
 80370e0:	3307      	adds	r3, #7
 80370e2:	f023 0307 	bic.w	r3, r3, #7
 80370e6:	3308      	adds	r3, #8
 80370e8:	9303      	str	r3, [sp, #12]
 80370ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80370ec:	444b      	add	r3, r9
 80370ee:	9309      	str	r3, [sp, #36]	; 0x24
 80370f0:	e76d      	b.n	8036fce <_svfiprintf_r+0x4a>
 80370f2:	fb05 3202 	mla	r2, r5, r2, r3
 80370f6:	2001      	movs	r0, #1
 80370f8:	460f      	mov	r7, r1
 80370fa:	e7a6      	b.n	803704a <_svfiprintf_r+0xc6>
 80370fc:	2300      	movs	r3, #0
 80370fe:	3701      	adds	r7, #1
 8037100:	9305      	str	r3, [sp, #20]
 8037102:	4619      	mov	r1, r3
 8037104:	250a      	movs	r5, #10
 8037106:	4638      	mov	r0, r7
 8037108:	f810 2b01 	ldrb.w	r2, [r0], #1
 803710c:	3a30      	subs	r2, #48	; 0x30
 803710e:	2a09      	cmp	r2, #9
 8037110:	d903      	bls.n	803711a <_svfiprintf_r+0x196>
 8037112:	2b00      	cmp	r3, #0
 8037114:	d0c8      	beq.n	80370a8 <_svfiprintf_r+0x124>
 8037116:	9105      	str	r1, [sp, #20]
 8037118:	e7c6      	b.n	80370a8 <_svfiprintf_r+0x124>
 803711a:	fb05 2101 	mla	r1, r5, r1, r2
 803711e:	2301      	movs	r3, #1
 8037120:	4607      	mov	r7, r0
 8037122:	e7f0      	b.n	8037106 <_svfiprintf_r+0x182>
 8037124:	ab03      	add	r3, sp, #12
 8037126:	9300      	str	r3, [sp, #0]
 8037128:	4622      	mov	r2, r4
 803712a:	4b11      	ldr	r3, [pc, #68]	; (8037170 <_svfiprintf_r+0x1ec>)
 803712c:	a904      	add	r1, sp, #16
 803712e:	4640      	mov	r0, r8
 8037130:	f7fd fede 	bl	8034ef0 <_printf_float>
 8037134:	f1b0 3fff 	cmp.w	r0, #4294967295
 8037138:	4681      	mov	r9, r0
 803713a:	d1d6      	bne.n	80370ea <_svfiprintf_r+0x166>
 803713c:	89a3      	ldrh	r3, [r4, #12]
 803713e:	065b      	lsls	r3, r3, #25
 8037140:	f53f af35 	bmi.w	8036fae <_svfiprintf_r+0x2a>
 8037144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8037146:	b01d      	add	sp, #116	; 0x74
 8037148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803714c:	ab03      	add	r3, sp, #12
 803714e:	9300      	str	r3, [sp, #0]
 8037150:	4622      	mov	r2, r4
 8037152:	4b07      	ldr	r3, [pc, #28]	; (8037170 <_svfiprintf_r+0x1ec>)
 8037154:	a904      	add	r1, sp, #16
 8037156:	4640      	mov	r0, r8
 8037158:	f7fe f980 	bl	803545c <_printf_i>
 803715c:	e7ea      	b.n	8037134 <_svfiprintf_r+0x1b0>
 803715e:	bf00      	nop
 8037160:	08038514 	.word	0x08038514
 8037164:	0803851a 	.word	0x0803851a
 8037168:	0803851e 	.word	0x0803851e
 803716c:	08034ef1 	.word	0x08034ef1
 8037170:	08036ed1 	.word	0x08036ed1

08037174 <__sfputc_r>:
 8037174:	6893      	ldr	r3, [r2, #8]
 8037176:	3b01      	subs	r3, #1
 8037178:	2b00      	cmp	r3, #0
 803717a:	b410      	push	{r4}
 803717c:	6093      	str	r3, [r2, #8]
 803717e:	da08      	bge.n	8037192 <__sfputc_r+0x1e>
 8037180:	6994      	ldr	r4, [r2, #24]
 8037182:	42a3      	cmp	r3, r4
 8037184:	db01      	blt.n	803718a <__sfputc_r+0x16>
 8037186:	290a      	cmp	r1, #10
 8037188:	d103      	bne.n	8037192 <__sfputc_r+0x1e>
 803718a:	f85d 4b04 	ldr.w	r4, [sp], #4
 803718e:	f000 b9ab 	b.w	80374e8 <__swbuf_r>
 8037192:	6813      	ldr	r3, [r2, #0]
 8037194:	1c58      	adds	r0, r3, #1
 8037196:	6010      	str	r0, [r2, #0]
 8037198:	7019      	strb	r1, [r3, #0]
 803719a:	4608      	mov	r0, r1
 803719c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80371a0:	4770      	bx	lr

080371a2 <__sfputs_r>:
 80371a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80371a4:	4606      	mov	r6, r0
 80371a6:	460f      	mov	r7, r1
 80371a8:	4614      	mov	r4, r2
 80371aa:	18d5      	adds	r5, r2, r3
 80371ac:	42ac      	cmp	r4, r5
 80371ae:	d101      	bne.n	80371b4 <__sfputs_r+0x12>
 80371b0:	2000      	movs	r0, #0
 80371b2:	e007      	b.n	80371c4 <__sfputs_r+0x22>
 80371b4:	463a      	mov	r2, r7
 80371b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80371ba:	4630      	mov	r0, r6
 80371bc:	f7ff ffda 	bl	8037174 <__sfputc_r>
 80371c0:	1c43      	adds	r3, r0, #1
 80371c2:	d1f3      	bne.n	80371ac <__sfputs_r+0xa>
 80371c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080371c8 <_vfiprintf_r>:
 80371c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80371cc:	460c      	mov	r4, r1
 80371ce:	b09d      	sub	sp, #116	; 0x74
 80371d0:	4617      	mov	r7, r2
 80371d2:	461d      	mov	r5, r3
 80371d4:	4606      	mov	r6, r0
 80371d6:	b118      	cbz	r0, 80371e0 <_vfiprintf_r+0x18>
 80371d8:	6983      	ldr	r3, [r0, #24]
 80371da:	b90b      	cbnz	r3, 80371e0 <_vfiprintf_r+0x18>
 80371dc:	f7ff fa90 	bl	8036700 <__sinit>
 80371e0:	4b7c      	ldr	r3, [pc, #496]	; (80373d4 <_vfiprintf_r+0x20c>)
 80371e2:	429c      	cmp	r4, r3
 80371e4:	d158      	bne.n	8037298 <_vfiprintf_r+0xd0>
 80371e6:	6874      	ldr	r4, [r6, #4]
 80371e8:	89a3      	ldrh	r3, [r4, #12]
 80371ea:	0718      	lsls	r0, r3, #28
 80371ec:	d55e      	bpl.n	80372ac <_vfiprintf_r+0xe4>
 80371ee:	6923      	ldr	r3, [r4, #16]
 80371f0:	2b00      	cmp	r3, #0
 80371f2:	d05b      	beq.n	80372ac <_vfiprintf_r+0xe4>
 80371f4:	2300      	movs	r3, #0
 80371f6:	9309      	str	r3, [sp, #36]	; 0x24
 80371f8:	2320      	movs	r3, #32
 80371fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80371fe:	2330      	movs	r3, #48	; 0x30
 8037200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8037204:	9503      	str	r5, [sp, #12]
 8037206:	f04f 0b01 	mov.w	fp, #1
 803720a:	46b8      	mov	r8, r7
 803720c:	4645      	mov	r5, r8
 803720e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8037212:	b10b      	cbz	r3, 8037218 <_vfiprintf_r+0x50>
 8037214:	2b25      	cmp	r3, #37	; 0x25
 8037216:	d154      	bne.n	80372c2 <_vfiprintf_r+0xfa>
 8037218:	ebb8 0a07 	subs.w	sl, r8, r7
 803721c:	d00b      	beq.n	8037236 <_vfiprintf_r+0x6e>
 803721e:	4653      	mov	r3, sl
 8037220:	463a      	mov	r2, r7
 8037222:	4621      	mov	r1, r4
 8037224:	4630      	mov	r0, r6
 8037226:	f7ff ffbc 	bl	80371a2 <__sfputs_r>
 803722a:	3001      	adds	r0, #1
 803722c:	f000 80c2 	beq.w	80373b4 <_vfiprintf_r+0x1ec>
 8037230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8037232:	4453      	add	r3, sl
 8037234:	9309      	str	r3, [sp, #36]	; 0x24
 8037236:	f898 3000 	ldrb.w	r3, [r8]
 803723a:	2b00      	cmp	r3, #0
 803723c:	f000 80ba 	beq.w	80373b4 <_vfiprintf_r+0x1ec>
 8037240:	2300      	movs	r3, #0
 8037242:	f04f 32ff 	mov.w	r2, #4294967295
 8037246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803724a:	9304      	str	r3, [sp, #16]
 803724c:	9307      	str	r3, [sp, #28]
 803724e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8037252:	931a      	str	r3, [sp, #104]	; 0x68
 8037254:	46a8      	mov	r8, r5
 8037256:	2205      	movs	r2, #5
 8037258:	f818 1b01 	ldrb.w	r1, [r8], #1
 803725c:	485e      	ldr	r0, [pc, #376]	; (80373d8 <_vfiprintf_r+0x210>)
 803725e:	f7e8 ffbf 	bl	80201e0 <memchr>
 8037262:	9b04      	ldr	r3, [sp, #16]
 8037264:	bb78      	cbnz	r0, 80372c6 <_vfiprintf_r+0xfe>
 8037266:	06d9      	lsls	r1, r3, #27
 8037268:	bf44      	itt	mi
 803726a:	2220      	movmi	r2, #32
 803726c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8037270:	071a      	lsls	r2, r3, #28
 8037272:	bf44      	itt	mi
 8037274:	222b      	movmi	r2, #43	; 0x2b
 8037276:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 803727a:	782a      	ldrb	r2, [r5, #0]
 803727c:	2a2a      	cmp	r2, #42	; 0x2a
 803727e:	d02a      	beq.n	80372d6 <_vfiprintf_r+0x10e>
 8037280:	9a07      	ldr	r2, [sp, #28]
 8037282:	46a8      	mov	r8, r5
 8037284:	2000      	movs	r0, #0
 8037286:	250a      	movs	r5, #10
 8037288:	4641      	mov	r1, r8
 803728a:	f811 3b01 	ldrb.w	r3, [r1], #1
 803728e:	3b30      	subs	r3, #48	; 0x30
 8037290:	2b09      	cmp	r3, #9
 8037292:	d969      	bls.n	8037368 <_vfiprintf_r+0x1a0>
 8037294:	b360      	cbz	r0, 80372f0 <_vfiprintf_r+0x128>
 8037296:	e024      	b.n	80372e2 <_vfiprintf_r+0x11a>
 8037298:	4b50      	ldr	r3, [pc, #320]	; (80373dc <_vfiprintf_r+0x214>)
 803729a:	429c      	cmp	r4, r3
 803729c:	d101      	bne.n	80372a2 <_vfiprintf_r+0xda>
 803729e:	68b4      	ldr	r4, [r6, #8]
 80372a0:	e7a2      	b.n	80371e8 <_vfiprintf_r+0x20>
 80372a2:	4b4f      	ldr	r3, [pc, #316]	; (80373e0 <_vfiprintf_r+0x218>)
 80372a4:	429c      	cmp	r4, r3
 80372a6:	bf08      	it	eq
 80372a8:	68f4      	ldreq	r4, [r6, #12]
 80372aa:	e79d      	b.n	80371e8 <_vfiprintf_r+0x20>
 80372ac:	4621      	mov	r1, r4
 80372ae:	4630      	mov	r0, r6
 80372b0:	f000 f97e 	bl	80375b0 <__swsetup_r>
 80372b4:	2800      	cmp	r0, #0
 80372b6:	d09d      	beq.n	80371f4 <_vfiprintf_r+0x2c>
 80372b8:	f04f 30ff 	mov.w	r0, #4294967295
 80372bc:	b01d      	add	sp, #116	; 0x74
 80372be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80372c2:	46a8      	mov	r8, r5
 80372c4:	e7a2      	b.n	803720c <_vfiprintf_r+0x44>
 80372c6:	4a44      	ldr	r2, [pc, #272]	; (80373d8 <_vfiprintf_r+0x210>)
 80372c8:	1a80      	subs	r0, r0, r2
 80372ca:	fa0b f000 	lsl.w	r0, fp, r0
 80372ce:	4318      	orrs	r0, r3
 80372d0:	9004      	str	r0, [sp, #16]
 80372d2:	4645      	mov	r5, r8
 80372d4:	e7be      	b.n	8037254 <_vfiprintf_r+0x8c>
 80372d6:	9a03      	ldr	r2, [sp, #12]
 80372d8:	1d11      	adds	r1, r2, #4
 80372da:	6812      	ldr	r2, [r2, #0]
 80372dc:	9103      	str	r1, [sp, #12]
 80372de:	2a00      	cmp	r2, #0
 80372e0:	db01      	blt.n	80372e6 <_vfiprintf_r+0x11e>
 80372e2:	9207      	str	r2, [sp, #28]
 80372e4:	e004      	b.n	80372f0 <_vfiprintf_r+0x128>
 80372e6:	4252      	negs	r2, r2
 80372e8:	f043 0302 	orr.w	r3, r3, #2
 80372ec:	9207      	str	r2, [sp, #28]
 80372ee:	9304      	str	r3, [sp, #16]
 80372f0:	f898 3000 	ldrb.w	r3, [r8]
 80372f4:	2b2e      	cmp	r3, #46	; 0x2e
 80372f6:	d10e      	bne.n	8037316 <_vfiprintf_r+0x14e>
 80372f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80372fc:	2b2a      	cmp	r3, #42	; 0x2a
 80372fe:	d138      	bne.n	8037372 <_vfiprintf_r+0x1aa>
 8037300:	9b03      	ldr	r3, [sp, #12]
 8037302:	1d1a      	adds	r2, r3, #4
 8037304:	681b      	ldr	r3, [r3, #0]
 8037306:	9203      	str	r2, [sp, #12]
 8037308:	2b00      	cmp	r3, #0
 803730a:	bfb8      	it	lt
 803730c:	f04f 33ff 	movlt.w	r3, #4294967295
 8037310:	f108 0802 	add.w	r8, r8, #2
 8037314:	9305      	str	r3, [sp, #20]
 8037316:	4d33      	ldr	r5, [pc, #204]	; (80373e4 <_vfiprintf_r+0x21c>)
 8037318:	f898 1000 	ldrb.w	r1, [r8]
 803731c:	2203      	movs	r2, #3
 803731e:	4628      	mov	r0, r5
 8037320:	f7e8 ff5e 	bl	80201e0 <memchr>
 8037324:	b140      	cbz	r0, 8037338 <_vfiprintf_r+0x170>
 8037326:	2340      	movs	r3, #64	; 0x40
 8037328:	1b40      	subs	r0, r0, r5
 803732a:	fa03 f000 	lsl.w	r0, r3, r0
 803732e:	9b04      	ldr	r3, [sp, #16]
 8037330:	4303      	orrs	r3, r0
 8037332:	f108 0801 	add.w	r8, r8, #1
 8037336:	9304      	str	r3, [sp, #16]
 8037338:	f898 1000 	ldrb.w	r1, [r8]
 803733c:	482a      	ldr	r0, [pc, #168]	; (80373e8 <_vfiprintf_r+0x220>)
 803733e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8037342:	2206      	movs	r2, #6
 8037344:	f108 0701 	add.w	r7, r8, #1
 8037348:	f7e8 ff4a 	bl	80201e0 <memchr>
 803734c:	2800      	cmp	r0, #0
 803734e:	d037      	beq.n	80373c0 <_vfiprintf_r+0x1f8>
 8037350:	4b26      	ldr	r3, [pc, #152]	; (80373ec <_vfiprintf_r+0x224>)
 8037352:	bb1b      	cbnz	r3, 803739c <_vfiprintf_r+0x1d4>
 8037354:	9b03      	ldr	r3, [sp, #12]
 8037356:	3307      	adds	r3, #7
 8037358:	f023 0307 	bic.w	r3, r3, #7
 803735c:	3308      	adds	r3, #8
 803735e:	9303      	str	r3, [sp, #12]
 8037360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8037362:	444b      	add	r3, r9
 8037364:	9309      	str	r3, [sp, #36]	; 0x24
 8037366:	e750      	b.n	803720a <_vfiprintf_r+0x42>
 8037368:	fb05 3202 	mla	r2, r5, r2, r3
 803736c:	2001      	movs	r0, #1
 803736e:	4688      	mov	r8, r1
 8037370:	e78a      	b.n	8037288 <_vfiprintf_r+0xc0>
 8037372:	2300      	movs	r3, #0
 8037374:	f108 0801 	add.w	r8, r8, #1
 8037378:	9305      	str	r3, [sp, #20]
 803737a:	4619      	mov	r1, r3
 803737c:	250a      	movs	r5, #10
 803737e:	4640      	mov	r0, r8
 8037380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8037384:	3a30      	subs	r2, #48	; 0x30
 8037386:	2a09      	cmp	r2, #9
 8037388:	d903      	bls.n	8037392 <_vfiprintf_r+0x1ca>
 803738a:	2b00      	cmp	r3, #0
 803738c:	d0c3      	beq.n	8037316 <_vfiprintf_r+0x14e>
 803738e:	9105      	str	r1, [sp, #20]
 8037390:	e7c1      	b.n	8037316 <_vfiprintf_r+0x14e>
 8037392:	fb05 2101 	mla	r1, r5, r1, r2
 8037396:	2301      	movs	r3, #1
 8037398:	4680      	mov	r8, r0
 803739a:	e7f0      	b.n	803737e <_vfiprintf_r+0x1b6>
 803739c:	ab03      	add	r3, sp, #12
 803739e:	9300      	str	r3, [sp, #0]
 80373a0:	4622      	mov	r2, r4
 80373a2:	4b13      	ldr	r3, [pc, #76]	; (80373f0 <_vfiprintf_r+0x228>)
 80373a4:	a904      	add	r1, sp, #16
 80373a6:	4630      	mov	r0, r6
 80373a8:	f7fd fda2 	bl	8034ef0 <_printf_float>
 80373ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80373b0:	4681      	mov	r9, r0
 80373b2:	d1d5      	bne.n	8037360 <_vfiprintf_r+0x198>
 80373b4:	89a3      	ldrh	r3, [r4, #12]
 80373b6:	065b      	lsls	r3, r3, #25
 80373b8:	f53f af7e 	bmi.w	80372b8 <_vfiprintf_r+0xf0>
 80373bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80373be:	e77d      	b.n	80372bc <_vfiprintf_r+0xf4>
 80373c0:	ab03      	add	r3, sp, #12
 80373c2:	9300      	str	r3, [sp, #0]
 80373c4:	4622      	mov	r2, r4
 80373c6:	4b0a      	ldr	r3, [pc, #40]	; (80373f0 <_vfiprintf_r+0x228>)
 80373c8:	a904      	add	r1, sp, #16
 80373ca:	4630      	mov	r0, r6
 80373cc:	f7fe f846 	bl	803545c <_printf_i>
 80373d0:	e7ec      	b.n	80373ac <_vfiprintf_r+0x1e4>
 80373d2:	bf00      	nop
 80373d4:	080383d8 	.word	0x080383d8
 80373d8:	08038514 	.word	0x08038514
 80373dc:	080383f8 	.word	0x080383f8
 80373e0:	080383b8 	.word	0x080383b8
 80373e4:	0803851a 	.word	0x0803851a
 80373e8:	0803851e 	.word	0x0803851e
 80373ec:	08034ef1 	.word	0x08034ef1
 80373f0:	080371a3 	.word	0x080371a3

080373f4 <_putc_r>:
 80373f4:	b570      	push	{r4, r5, r6, lr}
 80373f6:	460d      	mov	r5, r1
 80373f8:	4614      	mov	r4, r2
 80373fa:	4606      	mov	r6, r0
 80373fc:	b118      	cbz	r0, 8037406 <_putc_r+0x12>
 80373fe:	6983      	ldr	r3, [r0, #24]
 8037400:	b90b      	cbnz	r3, 8037406 <_putc_r+0x12>
 8037402:	f7ff f97d 	bl	8036700 <__sinit>
 8037406:	4b13      	ldr	r3, [pc, #76]	; (8037454 <_putc_r+0x60>)
 8037408:	429c      	cmp	r4, r3
 803740a:	d112      	bne.n	8037432 <_putc_r+0x3e>
 803740c:	6874      	ldr	r4, [r6, #4]
 803740e:	68a3      	ldr	r3, [r4, #8]
 8037410:	3b01      	subs	r3, #1
 8037412:	2b00      	cmp	r3, #0
 8037414:	60a3      	str	r3, [r4, #8]
 8037416:	da16      	bge.n	8037446 <_putc_r+0x52>
 8037418:	69a2      	ldr	r2, [r4, #24]
 803741a:	4293      	cmp	r3, r2
 803741c:	db02      	blt.n	8037424 <_putc_r+0x30>
 803741e:	b2eb      	uxtb	r3, r5
 8037420:	2b0a      	cmp	r3, #10
 8037422:	d110      	bne.n	8037446 <_putc_r+0x52>
 8037424:	4622      	mov	r2, r4
 8037426:	4629      	mov	r1, r5
 8037428:	4630      	mov	r0, r6
 803742a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 803742e:	f000 b85b 	b.w	80374e8 <__swbuf_r>
 8037432:	4b09      	ldr	r3, [pc, #36]	; (8037458 <_putc_r+0x64>)
 8037434:	429c      	cmp	r4, r3
 8037436:	d101      	bne.n	803743c <_putc_r+0x48>
 8037438:	68b4      	ldr	r4, [r6, #8]
 803743a:	e7e8      	b.n	803740e <_putc_r+0x1a>
 803743c:	4b07      	ldr	r3, [pc, #28]	; (803745c <_putc_r+0x68>)
 803743e:	429c      	cmp	r4, r3
 8037440:	bf08      	it	eq
 8037442:	68f4      	ldreq	r4, [r6, #12]
 8037444:	e7e3      	b.n	803740e <_putc_r+0x1a>
 8037446:	6823      	ldr	r3, [r4, #0]
 8037448:	1c5a      	adds	r2, r3, #1
 803744a:	6022      	str	r2, [r4, #0]
 803744c:	701d      	strb	r5, [r3, #0]
 803744e:	b2e8      	uxtb	r0, r5
 8037450:	bd70      	pop	{r4, r5, r6, pc}
 8037452:	bf00      	nop
 8037454:	080383d8 	.word	0x080383d8
 8037458:	080383f8 	.word	0x080383f8
 803745c:	080383b8 	.word	0x080383b8

08037460 <__sread>:
 8037460:	b510      	push	{r4, lr}
 8037462:	460c      	mov	r4, r1
 8037464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037468:	f000 f9a6 	bl	80377b8 <_read_r>
 803746c:	2800      	cmp	r0, #0
 803746e:	bfab      	itete	ge
 8037470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8037472:	89a3      	ldrhlt	r3, [r4, #12]
 8037474:	181b      	addge	r3, r3, r0
 8037476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803747a:	bfac      	ite	ge
 803747c:	6563      	strge	r3, [r4, #84]	; 0x54
 803747e:	81a3      	strhlt	r3, [r4, #12]
 8037480:	bd10      	pop	{r4, pc}

08037482 <__swrite>:
 8037482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037486:	461f      	mov	r7, r3
 8037488:	898b      	ldrh	r3, [r1, #12]
 803748a:	05db      	lsls	r3, r3, #23
 803748c:	4605      	mov	r5, r0
 803748e:	460c      	mov	r4, r1
 8037490:	4616      	mov	r6, r2
 8037492:	d505      	bpl.n	80374a0 <__swrite+0x1e>
 8037494:	2302      	movs	r3, #2
 8037496:	2200      	movs	r2, #0
 8037498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803749c:	f000 f928 	bl	80376f0 <_lseek_r>
 80374a0:	89a3      	ldrh	r3, [r4, #12]
 80374a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80374a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80374aa:	81a3      	strh	r3, [r4, #12]
 80374ac:	4632      	mov	r2, r6
 80374ae:	463b      	mov	r3, r7
 80374b0:	4628      	mov	r0, r5
 80374b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80374b6:	f000 b869 	b.w	803758c <_write_r>

080374ba <__sseek>:
 80374ba:	b510      	push	{r4, lr}
 80374bc:	460c      	mov	r4, r1
 80374be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80374c2:	f000 f915 	bl	80376f0 <_lseek_r>
 80374c6:	1c43      	adds	r3, r0, #1
 80374c8:	89a3      	ldrh	r3, [r4, #12]
 80374ca:	bf15      	itete	ne
 80374cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80374ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80374d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80374d6:	81a3      	strheq	r3, [r4, #12]
 80374d8:	bf18      	it	ne
 80374da:	81a3      	strhne	r3, [r4, #12]
 80374dc:	bd10      	pop	{r4, pc}

080374de <__sclose>:
 80374de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80374e2:	f000 b8d3 	b.w	803768c <_close_r>
	...

080374e8 <__swbuf_r>:
 80374e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80374ea:	460e      	mov	r6, r1
 80374ec:	4614      	mov	r4, r2
 80374ee:	4605      	mov	r5, r0
 80374f0:	b118      	cbz	r0, 80374fa <__swbuf_r+0x12>
 80374f2:	6983      	ldr	r3, [r0, #24]
 80374f4:	b90b      	cbnz	r3, 80374fa <__swbuf_r+0x12>
 80374f6:	f7ff f903 	bl	8036700 <__sinit>
 80374fa:	4b21      	ldr	r3, [pc, #132]	; (8037580 <__swbuf_r+0x98>)
 80374fc:	429c      	cmp	r4, r3
 80374fe:	d12a      	bne.n	8037556 <__swbuf_r+0x6e>
 8037500:	686c      	ldr	r4, [r5, #4]
 8037502:	69a3      	ldr	r3, [r4, #24]
 8037504:	60a3      	str	r3, [r4, #8]
 8037506:	89a3      	ldrh	r3, [r4, #12]
 8037508:	071a      	lsls	r2, r3, #28
 803750a:	d52e      	bpl.n	803756a <__swbuf_r+0x82>
 803750c:	6923      	ldr	r3, [r4, #16]
 803750e:	b363      	cbz	r3, 803756a <__swbuf_r+0x82>
 8037510:	6923      	ldr	r3, [r4, #16]
 8037512:	6820      	ldr	r0, [r4, #0]
 8037514:	1ac0      	subs	r0, r0, r3
 8037516:	6963      	ldr	r3, [r4, #20]
 8037518:	b2f6      	uxtb	r6, r6
 803751a:	4283      	cmp	r3, r0
 803751c:	4637      	mov	r7, r6
 803751e:	dc04      	bgt.n	803752a <__swbuf_r+0x42>
 8037520:	4621      	mov	r1, r4
 8037522:	4628      	mov	r0, r5
 8037524:	f7ff f882 	bl	803662c <_fflush_r>
 8037528:	bb28      	cbnz	r0, 8037576 <__swbuf_r+0x8e>
 803752a:	68a3      	ldr	r3, [r4, #8]
 803752c:	3b01      	subs	r3, #1
 803752e:	60a3      	str	r3, [r4, #8]
 8037530:	6823      	ldr	r3, [r4, #0]
 8037532:	1c5a      	adds	r2, r3, #1
 8037534:	6022      	str	r2, [r4, #0]
 8037536:	701e      	strb	r6, [r3, #0]
 8037538:	6963      	ldr	r3, [r4, #20]
 803753a:	3001      	adds	r0, #1
 803753c:	4283      	cmp	r3, r0
 803753e:	d004      	beq.n	803754a <__swbuf_r+0x62>
 8037540:	89a3      	ldrh	r3, [r4, #12]
 8037542:	07db      	lsls	r3, r3, #31
 8037544:	d519      	bpl.n	803757a <__swbuf_r+0x92>
 8037546:	2e0a      	cmp	r6, #10
 8037548:	d117      	bne.n	803757a <__swbuf_r+0x92>
 803754a:	4621      	mov	r1, r4
 803754c:	4628      	mov	r0, r5
 803754e:	f7ff f86d 	bl	803662c <_fflush_r>
 8037552:	b190      	cbz	r0, 803757a <__swbuf_r+0x92>
 8037554:	e00f      	b.n	8037576 <__swbuf_r+0x8e>
 8037556:	4b0b      	ldr	r3, [pc, #44]	; (8037584 <__swbuf_r+0x9c>)
 8037558:	429c      	cmp	r4, r3
 803755a:	d101      	bne.n	8037560 <__swbuf_r+0x78>
 803755c:	68ac      	ldr	r4, [r5, #8]
 803755e:	e7d0      	b.n	8037502 <__swbuf_r+0x1a>
 8037560:	4b09      	ldr	r3, [pc, #36]	; (8037588 <__swbuf_r+0xa0>)
 8037562:	429c      	cmp	r4, r3
 8037564:	bf08      	it	eq
 8037566:	68ec      	ldreq	r4, [r5, #12]
 8037568:	e7cb      	b.n	8037502 <__swbuf_r+0x1a>
 803756a:	4621      	mov	r1, r4
 803756c:	4628      	mov	r0, r5
 803756e:	f000 f81f 	bl	80375b0 <__swsetup_r>
 8037572:	2800      	cmp	r0, #0
 8037574:	d0cc      	beq.n	8037510 <__swbuf_r+0x28>
 8037576:	f04f 37ff 	mov.w	r7, #4294967295
 803757a:	4638      	mov	r0, r7
 803757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803757e:	bf00      	nop
 8037580:	080383d8 	.word	0x080383d8
 8037584:	080383f8 	.word	0x080383f8
 8037588:	080383b8 	.word	0x080383b8

0803758c <_write_r>:
 803758c:	b538      	push	{r3, r4, r5, lr}
 803758e:	4c07      	ldr	r4, [pc, #28]	; (80375ac <_write_r+0x20>)
 8037590:	4605      	mov	r5, r0
 8037592:	4608      	mov	r0, r1
 8037594:	4611      	mov	r1, r2
 8037596:	2200      	movs	r2, #0
 8037598:	6022      	str	r2, [r4, #0]
 803759a:	461a      	mov	r2, r3
 803759c:	f7ea fe3c 	bl	8022218 <_write>
 80375a0:	1c43      	adds	r3, r0, #1
 80375a2:	d102      	bne.n	80375aa <_write_r+0x1e>
 80375a4:	6823      	ldr	r3, [r4, #0]
 80375a6:	b103      	cbz	r3, 80375aa <_write_r+0x1e>
 80375a8:	602b      	str	r3, [r5, #0]
 80375aa:	bd38      	pop	{r3, r4, r5, pc}
 80375ac:	20007718 	.word	0x20007718

080375b0 <__swsetup_r>:
 80375b0:	4b32      	ldr	r3, [pc, #200]	; (803767c <__swsetup_r+0xcc>)
 80375b2:	b570      	push	{r4, r5, r6, lr}
 80375b4:	681d      	ldr	r5, [r3, #0]
 80375b6:	4606      	mov	r6, r0
 80375b8:	460c      	mov	r4, r1
 80375ba:	b125      	cbz	r5, 80375c6 <__swsetup_r+0x16>
 80375bc:	69ab      	ldr	r3, [r5, #24]
 80375be:	b913      	cbnz	r3, 80375c6 <__swsetup_r+0x16>
 80375c0:	4628      	mov	r0, r5
 80375c2:	f7ff f89d 	bl	8036700 <__sinit>
 80375c6:	4b2e      	ldr	r3, [pc, #184]	; (8037680 <__swsetup_r+0xd0>)
 80375c8:	429c      	cmp	r4, r3
 80375ca:	d10f      	bne.n	80375ec <__swsetup_r+0x3c>
 80375cc:	686c      	ldr	r4, [r5, #4]
 80375ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80375d2:	b29a      	uxth	r2, r3
 80375d4:	0715      	lsls	r5, r2, #28
 80375d6:	d42c      	bmi.n	8037632 <__swsetup_r+0x82>
 80375d8:	06d0      	lsls	r0, r2, #27
 80375da:	d411      	bmi.n	8037600 <__swsetup_r+0x50>
 80375dc:	2209      	movs	r2, #9
 80375de:	6032      	str	r2, [r6, #0]
 80375e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80375e4:	81a3      	strh	r3, [r4, #12]
 80375e6:	f04f 30ff 	mov.w	r0, #4294967295
 80375ea:	e03e      	b.n	803766a <__swsetup_r+0xba>
 80375ec:	4b25      	ldr	r3, [pc, #148]	; (8037684 <__swsetup_r+0xd4>)
 80375ee:	429c      	cmp	r4, r3
 80375f0:	d101      	bne.n	80375f6 <__swsetup_r+0x46>
 80375f2:	68ac      	ldr	r4, [r5, #8]
 80375f4:	e7eb      	b.n	80375ce <__swsetup_r+0x1e>
 80375f6:	4b24      	ldr	r3, [pc, #144]	; (8037688 <__swsetup_r+0xd8>)
 80375f8:	429c      	cmp	r4, r3
 80375fa:	bf08      	it	eq
 80375fc:	68ec      	ldreq	r4, [r5, #12]
 80375fe:	e7e6      	b.n	80375ce <__swsetup_r+0x1e>
 8037600:	0751      	lsls	r1, r2, #29
 8037602:	d512      	bpl.n	803762a <__swsetup_r+0x7a>
 8037604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8037606:	b141      	cbz	r1, 803761a <__swsetup_r+0x6a>
 8037608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803760c:	4299      	cmp	r1, r3
 803760e:	d002      	beq.n	8037616 <__swsetup_r+0x66>
 8037610:	4630      	mov	r0, r6
 8037612:	f7fd fb31 	bl	8034c78 <_free_r>
 8037616:	2300      	movs	r3, #0
 8037618:	6363      	str	r3, [r4, #52]	; 0x34
 803761a:	89a3      	ldrh	r3, [r4, #12]
 803761c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8037620:	81a3      	strh	r3, [r4, #12]
 8037622:	2300      	movs	r3, #0
 8037624:	6063      	str	r3, [r4, #4]
 8037626:	6923      	ldr	r3, [r4, #16]
 8037628:	6023      	str	r3, [r4, #0]
 803762a:	89a3      	ldrh	r3, [r4, #12]
 803762c:	f043 0308 	orr.w	r3, r3, #8
 8037630:	81a3      	strh	r3, [r4, #12]
 8037632:	6923      	ldr	r3, [r4, #16]
 8037634:	b94b      	cbnz	r3, 803764a <__swsetup_r+0x9a>
 8037636:	89a3      	ldrh	r3, [r4, #12]
 8037638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803763c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8037640:	d003      	beq.n	803764a <__swsetup_r+0x9a>
 8037642:	4621      	mov	r1, r4
 8037644:	4630      	mov	r0, r6
 8037646:	f7ff f917 	bl	8036878 <__smakebuf_r>
 803764a:	89a2      	ldrh	r2, [r4, #12]
 803764c:	f012 0301 	ands.w	r3, r2, #1
 8037650:	d00c      	beq.n	803766c <__swsetup_r+0xbc>
 8037652:	2300      	movs	r3, #0
 8037654:	60a3      	str	r3, [r4, #8]
 8037656:	6963      	ldr	r3, [r4, #20]
 8037658:	425b      	negs	r3, r3
 803765a:	61a3      	str	r3, [r4, #24]
 803765c:	6923      	ldr	r3, [r4, #16]
 803765e:	b953      	cbnz	r3, 8037676 <__swsetup_r+0xc6>
 8037660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8037664:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8037668:	d1ba      	bne.n	80375e0 <__swsetup_r+0x30>
 803766a:	bd70      	pop	{r4, r5, r6, pc}
 803766c:	0792      	lsls	r2, r2, #30
 803766e:	bf58      	it	pl
 8037670:	6963      	ldrpl	r3, [r4, #20]
 8037672:	60a3      	str	r3, [r4, #8]
 8037674:	e7f2      	b.n	803765c <__swsetup_r+0xac>
 8037676:	2000      	movs	r0, #0
 8037678:	e7f7      	b.n	803766a <__swsetup_r+0xba>
 803767a:	bf00      	nop
 803767c:	200001a0 	.word	0x200001a0
 8037680:	080383d8 	.word	0x080383d8
 8037684:	080383f8 	.word	0x080383f8
 8037688:	080383b8 	.word	0x080383b8

0803768c <_close_r>:
 803768c:	b538      	push	{r3, r4, r5, lr}
 803768e:	4c06      	ldr	r4, [pc, #24]	; (80376a8 <_close_r+0x1c>)
 8037690:	2300      	movs	r3, #0
 8037692:	4605      	mov	r5, r0
 8037694:	4608      	mov	r0, r1
 8037696:	6023      	str	r3, [r4, #0]
 8037698:	f7ea fdea 	bl	8022270 <_close>
 803769c:	1c43      	adds	r3, r0, #1
 803769e:	d102      	bne.n	80376a6 <_close_r+0x1a>
 80376a0:	6823      	ldr	r3, [r4, #0]
 80376a2:	b103      	cbz	r3, 80376a6 <_close_r+0x1a>
 80376a4:	602b      	str	r3, [r5, #0]
 80376a6:	bd38      	pop	{r3, r4, r5, pc}
 80376a8:	20007718 	.word	0x20007718

080376ac <_fstat_r>:
 80376ac:	b538      	push	{r3, r4, r5, lr}
 80376ae:	4c07      	ldr	r4, [pc, #28]	; (80376cc <_fstat_r+0x20>)
 80376b0:	2300      	movs	r3, #0
 80376b2:	4605      	mov	r5, r0
 80376b4:	4608      	mov	r0, r1
 80376b6:	4611      	mov	r1, r2
 80376b8:	6023      	str	r3, [r4, #0]
 80376ba:	f7ea fe29 	bl	8022310 <_fstat>
 80376be:	1c43      	adds	r3, r0, #1
 80376c0:	d102      	bne.n	80376c8 <_fstat_r+0x1c>
 80376c2:	6823      	ldr	r3, [r4, #0]
 80376c4:	b103      	cbz	r3, 80376c8 <_fstat_r+0x1c>
 80376c6:	602b      	str	r3, [r5, #0]
 80376c8:	bd38      	pop	{r3, r4, r5, pc}
 80376ca:	bf00      	nop
 80376cc:	20007718 	.word	0x20007718

080376d0 <_isatty_r>:
 80376d0:	b538      	push	{r3, r4, r5, lr}
 80376d2:	4c06      	ldr	r4, [pc, #24]	; (80376ec <_isatty_r+0x1c>)
 80376d4:	2300      	movs	r3, #0
 80376d6:	4605      	mov	r5, r0
 80376d8:	4608      	mov	r0, r1
 80376da:	6023      	str	r3, [r4, #0]
 80376dc:	f7ea fd86 	bl	80221ec <_isatty>
 80376e0:	1c43      	adds	r3, r0, #1
 80376e2:	d102      	bne.n	80376ea <_isatty_r+0x1a>
 80376e4:	6823      	ldr	r3, [r4, #0]
 80376e6:	b103      	cbz	r3, 80376ea <_isatty_r+0x1a>
 80376e8:	602b      	str	r3, [r5, #0]
 80376ea:	bd38      	pop	{r3, r4, r5, pc}
 80376ec:	20007718 	.word	0x20007718

080376f0 <_lseek_r>:
 80376f0:	b538      	push	{r3, r4, r5, lr}
 80376f2:	4c07      	ldr	r4, [pc, #28]	; (8037710 <_lseek_r+0x20>)
 80376f4:	4605      	mov	r5, r0
 80376f6:	4608      	mov	r0, r1
 80376f8:	4611      	mov	r1, r2
 80376fa:	2200      	movs	r2, #0
 80376fc:	6022      	str	r2, [r4, #0]
 80376fe:	461a      	mov	r2, r3
 8037700:	f7ea fdcd 	bl	802229e <_lseek>
 8037704:	1c43      	adds	r3, r0, #1
 8037706:	d102      	bne.n	803770e <_lseek_r+0x1e>
 8037708:	6823      	ldr	r3, [r4, #0]
 803770a:	b103      	cbz	r3, 803770e <_lseek_r+0x1e>
 803770c:	602b      	str	r3, [r5, #0]
 803770e:	bd38      	pop	{r3, r4, r5, pc}
 8037710:	20007718 	.word	0x20007718

08037714 <__ascii_mbtowc>:
 8037714:	b082      	sub	sp, #8
 8037716:	b901      	cbnz	r1, 803771a <__ascii_mbtowc+0x6>
 8037718:	a901      	add	r1, sp, #4
 803771a:	b142      	cbz	r2, 803772e <__ascii_mbtowc+0x1a>
 803771c:	b14b      	cbz	r3, 8037732 <__ascii_mbtowc+0x1e>
 803771e:	7813      	ldrb	r3, [r2, #0]
 8037720:	600b      	str	r3, [r1, #0]
 8037722:	7812      	ldrb	r2, [r2, #0]
 8037724:	1c10      	adds	r0, r2, #0
 8037726:	bf18      	it	ne
 8037728:	2001      	movne	r0, #1
 803772a:	b002      	add	sp, #8
 803772c:	4770      	bx	lr
 803772e:	4610      	mov	r0, r2
 8037730:	e7fb      	b.n	803772a <__ascii_mbtowc+0x16>
 8037732:	f06f 0001 	mvn.w	r0, #1
 8037736:	e7f8      	b.n	803772a <__ascii_mbtowc+0x16>

08037738 <memmove>:
 8037738:	4288      	cmp	r0, r1
 803773a:	b510      	push	{r4, lr}
 803773c:	eb01 0302 	add.w	r3, r1, r2
 8037740:	d807      	bhi.n	8037752 <memmove+0x1a>
 8037742:	1e42      	subs	r2, r0, #1
 8037744:	4299      	cmp	r1, r3
 8037746:	d00a      	beq.n	803775e <memmove+0x26>
 8037748:	f811 4b01 	ldrb.w	r4, [r1], #1
 803774c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8037750:	e7f8      	b.n	8037744 <memmove+0xc>
 8037752:	4283      	cmp	r3, r0
 8037754:	d9f5      	bls.n	8037742 <memmove+0xa>
 8037756:	1881      	adds	r1, r0, r2
 8037758:	1ad2      	subs	r2, r2, r3
 803775a:	42d3      	cmn	r3, r2
 803775c:	d100      	bne.n	8037760 <memmove+0x28>
 803775e:	bd10      	pop	{r4, pc}
 8037760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8037764:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8037768:	e7f7      	b.n	803775a <memmove+0x22>

0803776a <_realloc_r>:
 803776a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803776c:	4607      	mov	r7, r0
 803776e:	4614      	mov	r4, r2
 8037770:	460e      	mov	r6, r1
 8037772:	b921      	cbnz	r1, 803777e <_realloc_r+0x14>
 8037774:	4611      	mov	r1, r2
 8037776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 803777a:	f7fd bacb 	b.w	8034d14 <_malloc_r>
 803777e:	b922      	cbnz	r2, 803778a <_realloc_r+0x20>
 8037780:	f7fd fa7a 	bl	8034c78 <_free_r>
 8037784:	4625      	mov	r5, r4
 8037786:	4628      	mov	r0, r5
 8037788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803778a:	f000 f834 	bl	80377f6 <_malloc_usable_size_r>
 803778e:	42a0      	cmp	r0, r4
 8037790:	d20f      	bcs.n	80377b2 <_realloc_r+0x48>
 8037792:	4621      	mov	r1, r4
 8037794:	4638      	mov	r0, r7
 8037796:	f7fd fabd 	bl	8034d14 <_malloc_r>
 803779a:	4605      	mov	r5, r0
 803779c:	2800      	cmp	r0, #0
 803779e:	d0f2      	beq.n	8037786 <_realloc_r+0x1c>
 80377a0:	4631      	mov	r1, r6
 80377a2:	4622      	mov	r2, r4
 80377a4:	f7fd fa54 	bl	8034c50 <memcpy>
 80377a8:	4631      	mov	r1, r6
 80377aa:	4638      	mov	r0, r7
 80377ac:	f7fd fa64 	bl	8034c78 <_free_r>
 80377b0:	e7e9      	b.n	8037786 <_realloc_r+0x1c>
 80377b2:	4635      	mov	r5, r6
 80377b4:	e7e7      	b.n	8037786 <_realloc_r+0x1c>
	...

080377b8 <_read_r>:
 80377b8:	b538      	push	{r3, r4, r5, lr}
 80377ba:	4c07      	ldr	r4, [pc, #28]	; (80377d8 <_read_r+0x20>)
 80377bc:	4605      	mov	r5, r0
 80377be:	4608      	mov	r0, r1
 80377c0:	4611      	mov	r1, r2
 80377c2:	2200      	movs	r2, #0
 80377c4:	6022      	str	r2, [r4, #0]
 80377c6:	461a      	mov	r2, r3
 80377c8:	f7ea fd7a 	bl	80222c0 <_read>
 80377cc:	1c43      	adds	r3, r0, #1
 80377ce:	d102      	bne.n	80377d6 <_read_r+0x1e>
 80377d0:	6823      	ldr	r3, [r4, #0]
 80377d2:	b103      	cbz	r3, 80377d6 <_read_r+0x1e>
 80377d4:	602b      	str	r3, [r5, #0]
 80377d6:	bd38      	pop	{r3, r4, r5, pc}
 80377d8:	20007718 	.word	0x20007718

080377dc <__ascii_wctomb>:
 80377dc:	b149      	cbz	r1, 80377f2 <__ascii_wctomb+0x16>
 80377de:	2aff      	cmp	r2, #255	; 0xff
 80377e0:	bf85      	ittet	hi
 80377e2:	238a      	movhi	r3, #138	; 0x8a
 80377e4:	6003      	strhi	r3, [r0, #0]
 80377e6:	700a      	strbls	r2, [r1, #0]
 80377e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80377ec:	bf98      	it	ls
 80377ee:	2001      	movls	r0, #1
 80377f0:	4770      	bx	lr
 80377f2:	4608      	mov	r0, r1
 80377f4:	4770      	bx	lr

080377f6 <_malloc_usable_size_r>:
 80377f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80377fa:	1f18      	subs	r0, r3, #4
 80377fc:	2b00      	cmp	r3, #0
 80377fe:	bfbc      	itt	lt
 8037800:	580b      	ldrlt	r3, [r1, r0]
 8037802:	18c0      	addlt	r0, r0, r3
 8037804:	4770      	bx	lr
	...

08037808 <_init>:
 8037808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803780a:	bf00      	nop
 803780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803780e:	bc08      	pop	{r3}
 8037810:	469e      	mov	lr, r3
 8037812:	4770      	bx	lr

08037814 <_fini>:
 8037814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037816:	bf00      	nop
 8037818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803781a:	bc08      	pop	{r3}
 803781c:	469e      	mov	lr, r3
 803781e:	4770      	bx	lr
